/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 130);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
  Copyright (c) 2018 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/* global define */

(function () {
	'use strict';

	var hasOwn = {}.hasOwnProperty;

	function classNames() {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg === 'undefined' ? 'undefined' : _typeof(arg);

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg)) {
				if (arg.length) {
					var inner = classNames.apply(null, arg);
					if (inner) {
						classes.push(inner);
					}
				}
			} else if (argType === 'object') {
				if (arg.toString === Object.prototype.toString) {
					for (var key in arg) {
						if (hasOwn.call(arg, key) && arg[key]) {
							classes.push(key);
						}
					}
				} else {
					classes.push(arg.toString());
				}
			}
		}

		return classes.join(' ');
	}

	if (typeof module !== 'undefined' && module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else if ("function" === 'function' && _typeof(__webpack_require__(42)) === 'object' && __webpack_require__(42)) {
		// register as 'classnames', consistent with npm package name
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
			return classNames;
		}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		window.classNames = classNames;
	}
})();

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
/*import premiumLogo from "./logo";
wp.blocks.updateCategory("premium-blocks", { icon: premiumLogo });*/

//Blocks Keys
var _PremiumBlocksSetting = PremiumBlocksSettings.activeBlocks;
var banner = _PremiumBlocksSetting.banner,
    dualHeading = _PremiumBlocksSetting.dualHeading,
    pricingTable = _PremiumBlocksSetting.pricingTable,
    maps = _PremiumBlocksSetting.maps,
    testimonial = _PremiumBlocksSetting.testimonial,
    countUp = _PremiumBlocksSetting.countUp,
    icon = _PremiumBlocksSetting.icon,
    button = _PremiumBlocksSetting.button,
    container = _PremiumBlocksSetting.container,
    accordion = _PremiumBlocksSetting.accordion,
    iconBox = _PremiumBlocksSetting.iconBox,
    videoBox = _PremiumBlocksSetting.videoBox,
    fancyText = _PremiumBlocksSetting.fancyText,
    lottie = _PremiumBlocksSetting.lottie,
    modal = _PremiumBlocksSetting.modal,
    bulletList = _PremiumBlocksSetting.bulletList,
    person = _PremiumBlocksSetting.person,
    heading = _PremiumBlocksSetting.heading;

//Plugin Config Keys

exports.banner = banner;
exports.dualHeading = dualHeading;
exports.pricingTable = pricingTable;
exports.maps = maps;
exports.testimonial = testimonial;
exports.countUp = countUp;
exports.icon = icon;
exports.button = button;
exports.container = container;
exports.accordion = accordion;
exports.iconBox = iconBox;
exports.videoBox = videoBox;
exports.fancyText = fancyText;
exports.lottie = lottie;
exports.modal = modal;
exports.bulletList = bulletList;
exports.person = person;
exports.heading = heading;
var _FontAwesomeConfig = FontAwesomeConfig;
var FontAwesomeEnabled = _FontAwesomeConfig.FontAwesomeEnabled;
exports.FontAwesomeEnabled = FontAwesomeEnabled;
var _JsonUploadFile = JsonUploadFile;
var JsonUploadEnabled = _JsonUploadFile.JsonUploadEnabled;
exports.JsonUploadEnabled = JsonUploadEnabled;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = __webpack_require__(85);

var _get2 = _interopRequireDefault(_get);

var _map = __webpack_require__(94);

var _map2 = _interopRequireDefault(_map);

var _classnames = __webpack_require__(50);

var _classnames2 = _interopRequireDefault(_classnames);

var _colord = __webpack_require__(217);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _wp$i18n = wp.i18n,
    __ = _wp$i18n.__,
    sprintf = _wp$i18n.sprintf;
var Component = wp.element.Component;
var _wp$components = wp.components,
    Button = _wp$components.Button,
    Popover = _wp$components.Popover,
    ColorIndicator = _wp$components.ColorIndicator,
    ColorPicker = _wp$components.ColorPicker,
    Tooltip = _wp$components.Tooltip;
var withSelect = wp.data.withSelect;

var AdvancedColorControl = function (_Component) {
    _inherits(AdvancedColorControl, _Component);

    function AdvancedColorControl() {
        _classCallCheck(this, AdvancedColorControl);

        var _this = _possibleConstructorReturn(this, (AdvancedColorControl.__proto__ || Object.getPrototypeOf(AdvancedColorControl)).apply(this, arguments));

        _this.state = {
            isVisible: false,
            colors: [],
            classSat: 'one',
            currentColor: '',
            defaultColor: ''
        };
        return _this;
    }

    _createClass(AdvancedColorControl, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            if ('transparent' === this.props.colorDefault) {
                this.setState({ currentColor: undefined === this.props.colorValue || '' === this.props.colorValue || 'transparent' === this.props.colorValue ? '' : this.props.colorValue });
                this.setState({ defaultColor: '' });
            } else {
                this.setState({ currentColor: undefined === this.props.colorValue || '' === this.props.colorValue ? this.props.colorDefault : this.props.colorValue });
                this.setState({ defaultColor: this.props.colorDefault });
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var toggleVisible = function toggleVisible() {
                if ('transparent' === _this2.props.colorDefault) {
                    _this2.setState({ currentColor: undefined === _this2.props.colorValue || '' === _this2.props.colorValue || 'transparent' === _this2.props.colorValue ? '' : _this2.props.colorValue });
                } else {
                    _this2.setState({ currentColor: undefined === _this2.props.colorValue || '' === _this2.props.colorValue ? _this2.props.colorDefault : _this2.props.colorValue });
                }
                _this2.setState({ classSat: 'one' });
                _this2.setState({ isVisible: true });
            };

            var toggleClose = function toggleClose() {
                if (_this2.state.isVisible === true) {
                    _this2.setState({ isVisible: false });
                }
            };

            var normalizeColor = function normalizeColor(color) {
                var parsedColor = (0, _colord.colord)(color);

                if (!parsedColor.parsed) {
                    return color;
                }

                if (parsedColor.rgba.a === 1) {
                    return parsedColor.toHex();
                }

                return parsedColor.toRgbString();
            };

            var isNew = wp.components.GradientPicker;

            return React.createElement(
                'div',
                { className: 'premium-color-popover-container' },
                React.createElement(
                    'div',
                    { className: 'premium-advanced-color-container' },
                    this.props.label && React.createElement(
                        'h2',
                        { className: 'premium-color-label' },
                        this.props.label
                    ),
                    React.createElement(
                        'div',
                        { className: 'premium-color-wrapper' },
                        this.state.isVisible && React.createElement(
                            Popover,
                            { position: 'bottom left', className: 'premium-popover-color', onClose: toggleClose },
                            this.props.colors && React.createElement(
                                'div',
                                { className: 'premium-color-picker-top' },
                                React.createElement(
                                    'ul',
                                    { className: 'premium-color-picker-skins' },
                                    (0, _map2.default)(this.props.colors, function (_ref) {
                                        var color = _ref.color,
                                            slug = _ref.slug,
                                            name = _ref.name;

                                        return React.createElement(
                                            'li',
                                            { key: color, className: (0, _classnames2.default)('premium-color-picker-single', {
                                                    'active': _this2.props.colorValue === color
                                                }),
                                                style: { backgroundColor: color },
                                                onClick: function onClick() {
                                                    _this2.props.onColorChange(color);
                                                    if (_this2.props.onColorClassChange) {
                                                        _this2.props.onColorClassChange(slug);
                                                    }
                                                    if ('three' === _this2.state.classSat) {
                                                        _this2.setState({ classSat: 'two' });
                                                    } else {
                                                        _this2.setState({ classSat: 'three' });
                                                    }
                                                }
                                            },
                                            React.createElement(
                                                'div',
                                                { className: 'premium-tooltip-top' },
                                                name || sprintf(__('Color code: %s'), color)
                                            )
                                        );
                                    })
                                )
                            ),
                            React.createElement(
                                'div',
                                { className: isNew ? 'premium-gutenberg-color-picker-new' : 'premium-gutenberg-color-picker' },
                                this.state.classSat === 'one' && !this.props.disableCustomColors && React.createElement(ColorPicker, {
                                    color: undefined === this.props.colorValue || '' === this.props.colorValue || 'transparent' === this.props.colorValue ? this.state.defaultColor : this.props.colorValue,
                                    onChangeComplete: function onChangeComplete(color) {
                                        _this2.setState({ currentColor: color.hex });
                                        if (color.rgb) {
                                            _this2.props.onColorChange(color.rgb.a != 1 ? 'rgba(' + color.rgb.r + ',' + color.rgb.g + ',' + color.rgb.b + ',' + color.rgb.a + ')' : color.hex);
                                        }
                                        if (_this2.props.onColorClassChange) {
                                            _this2.props.onColorClassChange('');
                                        }
                                    }
                                }),
                                !this.props.disableCustomColors && this.state.classSat !== 'one' && React.createElement(ColorPicker, {
                                    color: undefined === this.state.currentColor || '' === this.state.currentColor ? this.state.defaultColor : this.state.currentColor,
                                    onChangeComplete: function onChangeComplete(color) {
                                        _this2.setState({ currentColor: color.hex });
                                        if (color.rgb) {

                                            _this2.props.onColorChange(color.rgb.a != 1 ? 'rgba(' + color.rgb.r + ',' + color.rgb.g + ',' + color.rgb.b + ',' + color.rgb.a + ')' : color.hex);
                                        }
                                        if (_this2.props.onColorClassChange) {
                                            _this2.props.onColorClassChange('');
                                        }
                                    }
                                }),
                                React.createElement(
                                    'div',
                                    { className: 'premium-color-picker-value' },
                                    React.createElement('input', {
                                        onChange: function onChange(_ref2) {
                                            var color = _ref2.target.value;

                                            _this2.props.onColorChange(normalizeColor(color));
                                            _this2.setState({ currentColor: color });
                                        },
                                        value: normalizeColor(this.state.currentColor),
                                        type: 'text'
                                    })
                                )
                            )
                        ),
                        this.state.isVisible && React.createElement(
                            Tooltip,
                            { text: __('Select Color') },
                            React.createElement(
                                Button,
                                { className: 'premium-color-picker-single ' + ('' === this.props.colorDefault ? 'Premium-has-alpha' : 'Premium-no-alpha'), onClick: toggleClose },
                                React.createElement(ColorIndicator, { className: 'premium-advanced-color-indicate', colorValue: 'transparent' === this.props.colorValue || undefined === this.props.colorValue || '' === this.props.colorValue ? this.props.colorDefault : this.props.colorValue })
                            )
                        ),
                        !this.state.isVisible && React.createElement(
                            Tooltip,
                            { text: __('Select Color') },
                            React.createElement(
                                Button,
                                { className: 'premium-color-picker-single ' + ('' === this.props.colorDefault ? 'Premium-has-alpha' : 'Premium-no-alpha'), onClick: toggleVisible },
                                React.createElement(ColorIndicator, { className: 'premium-advanced-color-indicate', colorValue: 'transparent' === this.props.colorValue || undefined === this.props.colorValue || '' === this.props.colorValue ? this.props.colorDefault : this.props.colorValue })
                            )
                        )
                    ),
                    !this.props.disableReset && React.createElement(
                        'div',
                        { className: 'premium-color-btn-reset-wrap' },
                        React.createElement('button', {
                            className: 'premium-reset-btn',
                            disabled: this.state.currentColor === this.props.colorDefault,
                            onClick: function onClick() {
                                _this2.setState({ currentColor: _this2.props.colorDefault });
                                _this2.props.onColorChange(undefined);
                                if (_this2.props.onColorClassChange) {
                                    _this2.props.onColorClassChange('');
                                }
                            } })
                    )
                )
            );
        }
    }]);

    return AdvancedColorControl;
}(Component);

exports.default = withSelect(function (select, ownProps) {
    var settings = select('core/block-editor').getSettings();
    var colors = (0, _get2.default)(settings, ['colors'], []);
    var disableCustomColors = ownProps.disableCustomColors === undefined ? settings.disableCustomColors : ownProps.disableCustomColors;
    return {
        colors: colors,
        disableCustomColors: disableCustomColors
    };
})(AdvancedColorControl);

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _premiumSizeUnits = __webpack_require__(21);

var _premiumSizeUnits2 = _interopRequireDefault(_premiumSizeUnits);

var _rangeControl = __webpack_require__(220);

var _rangeControl2 = _interopRequireDefault(_rangeControl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __ = wp.i18n.__;
var Fragment = wp.element.Fragment;
function ResponsiveSingleRangeControl(_ref) {
    var _ref$device = _ref.device,
        device = _ref$device === undefined ? 'device' : _ref$device,
        _onChange = _ref.onChange,
        value = _ref.value,
        _ref$step = _ref.step,
        step = _ref$step === undefined ? 1 : _ref$step,
        _ref$max = _ref.max,
        max = _ref$max === undefined ? 100 : _ref$max,
        _ref$min = _ref.min,
        min = _ref$min === undefined ? 0 : _ref$min,
        _ref$unit = _ref.unit,
        unit = _ref$unit === undefined ? '' : _ref$unit,
        onChangeUnit = _ref.onChangeUnit,
        _ref$showUnit = _ref.showUnit,
        showUnit = _ref$showUnit === undefined ? false : _ref$showUnit,
        _ref$units = _ref.units,
        units = _ref$units === undefined ? ['px', 'em', 'rem'] : _ref$units,
        _ref$className = _ref.className,
        className = _ref$className === undefined ? '' : _ref$className,
        label = _ref.label,
        defaultValue = _ref.defaultValue;

    return [_onChange && React.createElement(
        'div',
        { className: 'premium-blocks-range-control' },
        label && React.createElement(
            'header',
            null,
            React.createElement(
                'div',
                { className: 'premium-slider-title-wrap' },
                label && React.createElement(
                    'span',
                    { className: 'customize-control-title premium-control-title' },
                    label
                )
            ),
            showUnit && React.createElement(_premiumSizeUnits2.default, {
                units: units,
                activeUnit: unit,
                onChangeSizeUnit: function onChangeSizeUnit(newValue) {
                    return onChangeUnit(newValue);
                }
            })
        ),
        React.createElement(_rangeControl2.default, {
            value: undefined !== value ? value : '',
            onChange: function onChange(size) {
                return _onChange(size);
            },
            min: min,
            max: max,
            step: step,
            defaultValue: defaultValue
        })
    )];
}
exports.default = ResponsiveSingleRangeControl;

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PbgIcon = function (_wp$element$Component) {
    _inherits(PbgIcon, _wp$element$Component);

    function PbgIcon() {
        _classCallCheck(this, PbgIcon);

        return _possibleConstructorReturn(this, (PbgIcon.__proto__ || Object.getPrototypeOf(PbgIcon)).apply(this, arguments));
    }

    _createClass(PbgIcon, [{
        key: "shouldComponentUpdate",
        value: function shouldComponentUpdate(nextProps) {
            return this.props.icon !== nextProps.icon;
        }
    }, {
        key: "render",
        value: function render() {
            var icon = this.props.icon;


            return React.createElement("i", { className: "pbg-" + icon + "-block", "aria-hidden": "true" });
        }
    }]);

    return PbgIcon;
}(wp.element.Component);

exports.default = PbgIcon;

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = PremiumShadow;

var _singleRangeControl = __webpack_require__(3);

var _singleRangeControl2 = _interopRequireDefault(_singleRangeControl);

var _ColorComponent = __webpack_require__(2);

var _ColorComponent2 = _interopRequireDefault(_ColorComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __ = wp.i18n.__;
var _wp$components = wp.components,
    SelectControl = _wp$components.SelectControl,
    Dropdown = _wp$components.Dropdown,
    Button = _wp$components.Button,
    ColorPicker = _wp$components.ColorPicker;
var Fragment = wp.element.Fragment;
function PremiumShadow(props) {
    var label = props.label,
        color = props.color,
        blur = props.blur,
        horizontal = props.horizontal,
        vertical = props.vertical,
        _props$position = props.position,
        position = _props$position === undefined ? "outline" : _props$position,
        _props$onChangeColor = props.onChangeColor,
        onChangeColor = _props$onChangeColor === undefined ? function () {} : _props$onChangeColor,
        _props$onChangeBlur = props.onChangeBlur,
        onChangeBlur = _props$onChangeBlur === undefined ? function () {} : _props$onChangeBlur,
        _props$onChangehHoriz = props.onChangehHorizontal,
        onChangehHorizontal = _props$onChangehHoriz === undefined ? function () {} : _props$onChangehHoriz,
        _props$onChangeVertic = props.onChangeVertical,
        onChangeVertical = _props$onChangeVertic === undefined ? function () {} : _props$onChangeVertic,
        _props$onChangePositi = props.onChangePosition,
        onChangePosition = _props$onChangePositi === undefined ? function () {} : _props$onChangePositi,
        _props$boxShadow = props.boxShadow,
        boxShadow = _props$boxShadow === undefined ? false : _props$boxShadow;


    var POSITION = [{
        value: "inset",
        label: __("Inset", 'premium-blocks-for-gutenberg')
    }, {
        value: "",
        label: __("Outline", 'premium-blocks-for-gutenberg')
    }];

    return React.createElement(
        "div",
        { className: "premium-control-toggle premium-shadow-control__container" },
        React.createElement(
            "strong",
            null,
            __(label || "Box Shadow")
        ),
        React.createElement(
            "div",
            { className: "premium-shadow-control__wrapper" },
            React.createElement(_ColorComponent2.default, {
                colorValue: color,
                colorDefault: '',
                onColorChange: onChangeColor,
                disableReset: true
            }),
            React.createElement(Dropdown, {
                className: "premium-control-toggle-btn",
                contentClassName: "premium-control-toggle-content",
                position: "bottom right",
                renderToggle: function renderToggle(_ref) {
                    var isOpen = _ref.isOpen,
                        onToggle = _ref.onToggle;
                    return React.createElement(
                        Button,
                        { isSmall: true, onClick: onToggle, "aria-expanded": isOpen },
                        React.createElement("i", { className: "dashicons dashicons-edit" })
                    );
                },
                renderContent: function renderContent() {
                    return React.createElement(
                        Fragment,
                        null,
                        React.createElement(_singleRangeControl2.default, {
                            label: __("Horizontal"),
                            value: horizontal,
                            onChange: onChangehHorizontal,
                            showUnit: false,
                            defaultValue: 0,
                            min: -100,
                            max: 100
                        }),
                        React.createElement(_singleRangeControl2.default, {
                            label: __("Vertical"),
                            value: vertical,
                            onChange: onChangeVertical,
                            showUnit: false,
                            defaultValue: 0,
                            min: -100,
                            max: 100
                        }),
                        React.createElement(_singleRangeControl2.default, {
                            label: __("Blur"),
                            value: blur,
                            onChange: onChangeBlur,
                            showUnit: false,
                            defaultValue: 0
                        }),
                        boxShadow && React.createElement(SelectControl, {
                            label: __("Position"),
                            options: POSITION,
                            value: position,
                            onChange: onChangePosition
                        })
                    );
                }
            })
        )
    );
}

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = __webpack_require__(9);

var _ColorComponent = __webpack_require__(2);

var _ColorComponent2 = _interopRequireDefault(_ColorComponent);

var _premiumResponsiveSpacing = __webpack_require__(51);

var _premiumResponsiveSpacing2 = _interopRequireDefault(_premiumResponsiveSpacing);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __ = wp.i18n.__;
var Tooltip = wp.components.Tooltip;
var _wp$element = wp.element,
    Fragment = _wp$element.Fragment,
    useState = _wp$element.useState,
    useEffect = _wp$element.useEffect;


var PremiumBorder = function PremiumBorder(props) {
    var value = props.value;
    var directions = {
        'top': '',
        'right': '',
        'bottom': '',
        'left': ''
    };
    var defaultValues = {
        'borderType': 'none',
        'borderColor': '',
        'borderWidth': {
            Desktop: directions,
            Tablet: directions,
            Mobile: directions
        },
        'borderRadius': {
            Desktop: directions,
            Tablet: directions,
            Mobile: directions
        }
    };
    value = value ? _extends({}, defaultValues, value) : defaultValues;

    var _useState = useState(value),
        _useState2 = _slicedToArray(_useState, 2),
        borderValue = _useState2[0],
        setBorderValue = _useState2[1];

    var onChange = props.onChange;
    var borderColor = borderValue.borderColor,
        borderType = borderValue.borderType,
        borderWidth = borderValue.borderWidth,
        borderRadius = borderValue.borderRadius;

    useEffect(function () {
        if (borderValue !== value) {
            setBorderValue(value);
        }
    }, [props]);

    var onChangeBorder = function onChangeBorder(item, value) {
        var inialState = _extends({}, borderValue);
        inialState[item] = value;
        onChange(inialState);
        setBorderValue(inialState);
    };
    return React.createElement(
        'div',
        { className: 'premium-control-toggle' },
        React.createElement(
            Fragment,
            null,
            React.createElement(
                'div',
                { className: 'premium-blocks-border__control ', style: { display: "flex" } },
                React.createElement(
                    'div',
                    null,
                    props.label ? props.label : __('Border', 'premium-blocks-for-gutenberg')
                ),
                React.createElement(
                    'div',
                    { className: 'premium-blocks-border-button-list ' },
                    [['none', __("None")], ['solid', __('Solid')], ['dotted', __('Dotted')], ['dashed', __('Dashed')], ['double', __('Double')]].map(function (data, index) {
                        return React.createElement(
                            Tooltip,
                            { text: data[1] },
                            React.createElement(
                                'button',
                                { className: (borderType == data[0] ? 'active' : '') + ' premium-border-button', key: index, onClick: function onClick() {
                                        return onChangeBorder("borderType", data[0]);
                                    } },
                                React.createElement('span', { className: 'premium-blocks-border-type premium-blocks-border-type-' + data[0] })
                            )
                        );
                    })
                ),
                "none" != borderType && React.createElement(
                    Tooltip,
                    { text: __('Clear') },
                    React.createElement(
                        'div',
                        { className: 'premium-blocks-border-clear__container' },
                        React.createElement(
                            'span',
                            { className: 'premium-blocks-border-clear', onClick: function onClick() {
                                    return onChangeBorder("borderType", 'none');
                                }, role: 'button' },
                            React.createElement('i', { className: 'fas fa-undo' })
                        )
                    )
                )
            ),
            "none" != borderType && React.createElement(_premiumResponsiveSpacing2.default, {
                label: __("Border Width "),
                value: borderWidth,
                responsive: true,
                showUnits: false,
                onChange: function onChange(value) {
                    return onChangeBorder('borderWidth', _extends({}, value));
                }

            }),
            "none" != borderType && React.createElement(
                Fragment,
                null,
                React.createElement(_ColorComponent2.default, {
                    label: __("Border Color", 'premium-blocks-for-gutenberg'),
                    colorValue: borderColor,
                    colorDefault: '',
                    onColorChange: function onColorChange(value) {
                        return onChangeBorder('borderColor', value);
                    }
                })
            ),
            React.createElement(_premiumResponsiveSpacing2.default, {
                label: __("Border Radius"),
                value: borderRadius,
                responsive: true,
                showUnits: false,
                onChange: function onChange(value) {
                    return onChangeBorder('borderRadius', _extends({}, value));
                }

            })
        )
    );
};
exports.default = PremiumBorder;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _premiumFonts = __webpack_require__(219);

var _premiumFonts2 = _interopRequireDefault(_premiumFonts);

var _responsiveRangeControl = __webpack_require__(19);

var _responsiveRangeControl2 = _interopRequireDefault(_responsiveRangeControl);

var _singleRangeControl = __webpack_require__(3);

var _singleRangeControl2 = _interopRequireDefault(_singleRangeControl);

var _fontList = __webpack_require__(221);

var _fontList2 = _interopRequireDefault(_fontList);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var __ = wp.i18n.__;
var Component = wp.element.Component;
var _wp$components = wp.components,
    SelectControl = _wp$components.SelectControl,
    Popover = _wp$components.Popover;

function fuzzysearch(needle, haystack) {
    var hlen = haystack.length;
    var nlen = needle.length;
    if (nlen > hlen) {
        return false;
    }
    if (nlen === hlen) {
        return needle === haystack;
    }
    outer: for (var i = 0, j = 0; i < nlen; i++) {
        var nch = needle.charCodeAt(i);
        while (j < hlen) {
            if (haystack.charCodeAt(j++) === nch) {
                continue outer;
            }
        }
        return false;
    }
    return true;
}

var PremiumTypo = function (_Component) {
    _inherits(PremiumTypo, _Component);

    function PremiumTypo(props) {
        _classCallCheck(this, PremiumTypo);

        var _this = _possibleConstructorReturn(this, (PremiumTypo.__proto__ || Object.getPrototypeOf(PremiumTypo)).call(this, props));

        var responsiveSize = void 0;
        if (_this.props.components.includes("responsiveSize")) {
            responsiveSize = {
                Desktop: _this.props.fontSize || '',
                Tablet: _this.props.fontSizeTablet || '',
                Mobile: _this.props.fontSizeMobile || ''
            };
        }
        _this.state = {
            fontFamily: _this.props.fontFamily || 'Default',
            line: _this.props.line,
            weight: _this.props.weight || '400',
            size: _this.props.components.includes("responsiveSize") ? _this.props.fontSize : _this.props.size,
            textTransform: _this.props.textTransform,
            textDecoration: _this.props.textDecoration,
            sizeUnit: _this.props.sizeUnit || 'px',
            isVisible: false,
            currentView: '',
            search: "",
            showUnit: _this.props.showUnit || false,
            spacing: _this.props.spacing,
            style: _this.props.style,
            device: 'Desktop'
        };
        return _this;
    }

    _createClass(PremiumTypo, [{
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
            var previewDevice = wp.data && wp.data.select && wp.data.select('core/edit-post') && wp.data.select('core/edit-post').__experimentalGetPreviewDeviceType ? wp.data.select('core/edit-post').__experimentalGetPreviewDeviceType() : 'Desktop';
            if (this.state.device !== previewDevice) {
                this.setState({ device: previewDevice });
            }
        }
    }, {
        key: "render",
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                components = _props.components,
                setAttributes = _props.setAttributes,
                _props$onChangeTextTr = _props.onChangeTextTransform,
                onChangeTextTransform = _props$onChangeTextTr === undefined ? function () {} : _props$onChangeTextTr,
                _props$onChangeTextDe = _props.onChangeTextDecoration,
                onChangeTextDecoration = _props$onChangeTextDe === undefined ? function () {} : _props$onChangeTextDe,
                _props$onChangeFamily = _props.onChangeFamily,
                onChangeFamily = _props$onChangeFamily === undefined ? function () {} : _props$onChangeFamily,
                _onChange = _props.onChange,
                _props$onChangeWeight = _props.onChangeWeight,
                onChangeWeight = _props$onChangeWeight === undefined ? function () {} : _props$onChangeWeight,
                _props$onChangeStyle = _props.onChangeStyle,
                onChangeStyle = _props$onChangeStyle === undefined ? function () {} : _props$onChangeStyle,
                _props$onChangeSpacin = _props.onChangeSpacing,
                onChangeSpacing = _props$onChangeSpacin === undefined ? function () {} : _props$onChangeSpacin,
                _props$onChangeLine = _props.onChangeLine,
                onChangeLine = _props$onChangeLine === undefined ? function () {} : _props$onChangeLine,
                _props$onResetClick = _props.onResetClick,
                onResetClick = _props$onResetClick === undefined ? function () {} : _props$onResetClick;
            var _state = this.state,
                fontFamily = _state.fontFamily,
                line = _state.line,
                weight = _state.weight,
                size = _state.size,
                textTransform = _state.textTransform,
                textDecoration = _state.textDecoration,
                sizeUnit = _state.sizeUnit,
                isVisible = _state.isVisible,
                currentView = _state.currentView,
                search = _state.search,
                showUnit = _state.showUnit,
                spacing = _state.spacing,
                style = _state.style,
                device = _state.device;

            var STYLE = [{
                value: "normal",
                label: __("Normal", 'premium-blocks-for-gutenberg')
            }, {
                value: "italic",
                label: __("Italic", 'premium-blocks-for-gutenberg')
            }, {
                value: "oblique",
                label: __("Oblique", 'premium-blocks-for-gutenberg')
            }];
            var fonts = [{ value: "Default", label: __("Default", 'premium-blocks-for-gutenberg'), weight: ["100", "200", "300", "400", "500", "600", "700", "800", "900"], google: false }, { value: "Arial", label: "Arial", weight: ["100", "200", "300", "400", "500", "600", "700", "800", "900"], google: false }, { value: "Helvetica", label: "Helvetica", weight: ["100", "200", "300", "400", "500", "600", "700", "800", "900"], google: false }, { value: "Times New Roman", label: "Times New Roman", weight: ["100", "200", "300", "400", "500", "600", "700", "800", "900"], google: false }, { value: "Georgia", label: "Georgia", weight: ["100", "200", "300", "400", "500", "600", "700", "800", "900"], google: false }];
            var fontWeight = "";
            Object.keys(_premiumFonts2.default).map(function (k, v) {
                fonts.push({ value: k, label: k, weight: _premiumFonts2.default[k].weight, google: true });
                if (k === fontFamily) {
                    fontWeight = _premiumFonts2.default[k].weight;
                }
            });
            if (fontWeight === "") {
                fontWeight = fonts[0].weight;
            }
            var toggleVisible = function toggleVisible(v) {
                _this2.setState({
                    isVisible: true,
                    currentView: v
                });
            };
            var toggleClose = function toggleClose() {
                if (_this2.state.isVisible === true) {
                    _this2.setState({
                        isVisible: false,
                        currentView: ''
                    });
                }
            };
            var renderVariations = fonts.map(function (item, index) {
                if (item.value == fontFamily) {
                    return (item.weight || []).map(function (weights, i) {
                        return React.createElement(
                            "li",
                            { key: i, className: "" + (weights == weight ? 'active' : ''), onClick: function onClick() {
                                    _this2.setState({ weight: weights }), onChangeWeight(weights);
                                } },
                            React.createElement(
                                "span",
                                { className: "premium-variation-name" },
                                weights
                            )
                        );
                    });
                }
            });
            var linearFonts = fonts.filter(function (family) {
                return fuzzysearch(search.toLowerCase(), family['value'].toLowerCase());
            });
            var fontSize = components.includes("responsiveSize") ? size[device] : size;
            return React.createElement(
                "div",
                { className: "premium-control-toggle premium-typography" },
                React.createElement(
                    "header",
                    null,
                    React.createElement(
                        "span",
                        { className: "customize-control-title premium-control-title" },
                        React.createElement(
                            "strong",
                            null,
                            __('Typography', 'premium-blocks-for-gutenberg')
                        )
                    )
                ),
                React.createElement(
                    "div",
                    { className: "premium-typography-wrapper" },
                    React.createElement(
                        "div",
                        { className: "premium-typohraphy-value" },
                        React.createElement(
                            "div",
                            { className: "premium-typography-title-container" },
                            components.includes('family') && React.createElement(
                                "span",
                                {
                                    className: "premium-font",
                                    onClick: function onClick() {
                                        toggleVisible("fonts");
                                    }
                                },
                                React.createElement(
                                    "span",
                                    null,
                                    fontFamily
                                ),
                                isVisible && currentView == 'fonts' && components.includes('family') && React.createElement(
                                    Popover,
                                    { className: "premium-typography-option premium-font-family__modal", onClose: toggleClose },
                                    React.createElement(
                                        "div",
                                        { className: "premium-option-modal " },
                                        React.createElement(
                                            "div",
                                            { className: "premium-typography-container" },
                                            React.createElement(
                                                "div",
                                                { style: { top: '0px', right: '0px', left: "0px" } },
                                                React.createElement(
                                                    "ul",
                                                    { className: "premium-typography-top premium-switch-panel premium-static" },
                                                    React.createElement(
                                                        "li",
                                                        { className: "premium-font" },
                                                        React.createElement("input", {
                                                            value: search,
                                                            autoFocus: true,
                                                            onKeyUp: function onKeyUp(e) {
                                                                if (e.keyCode == 13) {
                                                                    if (linearFonts.length > 0) {
                                                                        onChangeFamily(linearFonts[0]);
                                                                        _this2.setState({ search: '' });
                                                                    }
                                                                }
                                                            },
                                                            onClick: function onClick(e) {
                                                                return e.stopPropagation();
                                                            },
                                                            onChange: function onChange(_ref) {
                                                                var value = _ref.target.value;
                                                                return _this2.setState({ search: value });
                                                            }
                                                        }),
                                                        React.createElement(
                                                            "svg",
                                                            { width: "8", height: "8", viewBox: "0 0 15 15" },
                                                            currentView === 'search' && React.createElement("path", { d: "M8.9,7.5l4.6-4.6c0.4-0.4,0.4-1,0-1.4c-0.4-0.4-1-0.4-1.4,0L7.5,6.1L2.9,1.5c-0.4-0.4-1-0.4-1.4,0c-0.4,0.4-0.4,1,0,1.4l4.6,4.6l-4.6,4.6c-0.4,0.4-0.4,1,0,1.4c0.4,0.4,1,0.4,1.4,0l4.6-4.6l4.6,4.6c0.4,0.4,1,0.4,1.4,0c0.4-0.4,0.4-1,0-1.4L8.9,7.5z" }),
                                                            currentView !== 'search' && React.createElement("path", { d: "M14.6,14.6c-0.6,0.6-1.4,0.6-2,0l-2.5-2.5c-1,0.7-2.2,1-3.5,1C2.9,13.1,0,10.2,0,6.6S2.9,0,6.6,0c3.6,0,6.6,2.9,6.6,6.6c0,1.3-0.4,2.5-1,3.5l2.5,2.5C15.1,13.1,15.1,14,14.6,14.6z M6.6,1.9C4,1.9,1.9,4,1.9,6.6s2.1,4.7,4.7,4.7c2.6,0,4.7-2.1,4.7-4.7C11.3,4,9.2,1.9,6.6,1.9z" })
                                                        )
                                                    )
                                                ),
                                                React.createElement(_fontList2.default, {
                                                    linearFontsList: linearFonts,
                                                    value: fontFamily,
                                                    onPickFamily: function onPickFamily(value) {
                                                        _this2.setState({ fontFamily: value }), onChangeFamily(value);
                                                    }
                                                })
                                            )
                                        )
                                    )
                                )
                            ),
                            React.createElement(
                                "span",
                                {
                                    className: "premium-size",
                                    onClick: function onClick() {
                                        toggleVisible("options");
                                    }
                                },
                                fontSize,
                                sizeUnit,
                                isVisible && currentView == 'options' && React.createElement(
                                    Popover,
                                    { className: "premium-typography-option", onClose: toggleClose },
                                    React.createElement(
                                        "div",
                                        { className: " " },
                                        React.createElement(
                                            "div",
                                            { className: "premium-typography-container" },
                                            React.createElement(
                                                "ul",
                                                { className: "premium-typography-options", style: { width: "100%" } },
                                                components.includes("size") && React.createElement(
                                                    "li",
                                                    { className: "customize-control-premium-slider" },
                                                    React.createElement(_singleRangeControl2.default, {
                                                        label: __("Font Size (PX)", 'premium-blocks-for-gutenberg'),
                                                        value: size,
                                                        min: "10",
                                                        max: "80",
                                                        defaultValue: 20,
                                                        onChange: function onChange(value) {
                                                            _this2.setState({ size: value }), onChangeSize(value);
                                                        },
                                                        showUnit: false
                                                    })
                                                ),
                                                components.includes("responsiveSize") && React.createElement(
                                                    "li",
                                                    { className: "customize-control-premium-slider" },
                                                    React.createElement(_responsiveRangeControl2.default, {
                                                        label: __("Font Size", 'premium-blocks-for-gutenberg'),
                                                        value: this.props.fontSize,
                                                        onChange: function onChange(value) {
                                                            return _onChange(value, "value");
                                                        },

                                                        onChangeUnit: function onChangeUnit(key) {
                                                            return setAttributes(_defineProperty({}, _this2.props.fontSizeType.label, key));
                                                        },
                                                        unit: this.props.fontSizeType.value,
                                                        showUnit: true,
                                                        defaultValue: 20,
                                                        units: ["px", "em"]
                                                    })
                                                ),
                                                components.includes("line") && React.createElement(
                                                    "li",
                                                    { className: "customize-control-premium-slider" },
                                                    React.createElement(_singleRangeControl2.default, {
                                                        label: __("Line Height (PX)", 'premium-blocks-for-gutenberg'),
                                                        value: line,
                                                        onChange: function onChange(value) {
                                                            _this2.setState({ line: value }), onChangeLine(value);
                                                        },
                                                        defaultValue: 1,
                                                        showUnit: false,
                                                        min: 0,
                                                        max: 200
                                                    })
                                                ),
                                                components.includes("spacing") && React.createElement(
                                                    "li",
                                                    { className: "customize-control-premium-slider" },
                                                    React.createElement(_singleRangeControl2.default, {
                                                        label: __("Letter Spacing (PX)", 'premium-blocks-for-gutenberg'),
                                                        value: spacing,
                                                        onChange: function onChange(value) {
                                                            _this2.setState({ spacing: value }), onChangeSpacing(value);
                                                        },
                                                        defaultValue: '',
                                                        showUnit: false,
                                                        step: 0.1,
                                                        min: -5,
                                                        max: 15
                                                    })
                                                ),
                                                components.includes("style") && React.createElement(
                                                    "li",
                                                    { className: "customize-control-premium-slider" },
                                                    React.createElement(SelectControl, {
                                                        label: __("Style", 'premium-blocks-for-gutenberg'),
                                                        options: STYLE,
                                                        value: style,
                                                        onChange: function onChange(value) {
                                                            _this2.setState({ style: value }), onChangeStyle(value);
                                                        },
                                                        onResetClick: onResetClick
                                                    })
                                                ),
                                                components.includes("Upper") && React.createElement(
                                                    "li",
                                                    { className: "premium-typography-variant" },
                                                    React.createElement(
                                                        "ul",
                                                        { className: "premium-text-transform" },
                                                        ['capitalize', 'uppercase'].map(function (variant) {
                                                            return React.createElement(
                                                                "li",
                                                                {
                                                                    key: variant,
                                                                    onClick: function onClick() {
                                                                        _this2.setState({ textTransform: variant }), onChangeTextTransform(variant);
                                                                    },
                                                                    className: "" + (textTransform == variant ? 'active' : ''),
                                                                    "data-variant": variant },
                                                                React.createElement(
                                                                    "i",
                                                                    { className: "premium-tooltip-top" },
                                                                    variant
                                                                )
                                                            );
                                                        })
                                                    )
                                                ),
                                                components.includes("Decoration") && React.createElement(
                                                    "li",
                                                    { className: "premium-typography-variant" },
                                                    React.createElement(
                                                        "ul",
                                                        { className: "premium-text-decoration" },
                                                        ['line-through', 'underline'].map(function (variant) {
                                                            return React.createElement(
                                                                "li",
                                                                {
                                                                    key: variant,
                                                                    onClick: function onClick() {
                                                                        _this2.setState({ textDecoration: variant }), onChangeTextDecoration(variant);
                                                                    },
                                                                    className: "" + (textDecoration == variant ? 'active' : ''),
                                                                    "data-variant": variant },
                                                                React.createElement(
                                                                    "i",
                                                                    { className: "premium-tooltip-top" },
                                                                    variant
                                                                )
                                                            );
                                                        })
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            ),
                            components.includes("weight") && React.createElement(
                                "span",
                                {
                                    className: "premium-weight",
                                    onClick: function onClick() {
                                        toggleVisible("variations");
                                    }
                                },
                                weight,
                                isVisible && currentView == 'variations' && React.createElement(
                                    Popover,
                                    { className: "premium-typography-option", onClose: toggleClose },
                                    React.createElement(
                                        "div",
                                        { className: "premium-typography-option-modal " },
                                        React.createElement(
                                            "div",
                                            { className: "premium-typography-container" },
                                            React.createElement(
                                                "ul",
                                                { className: "premium-typography-variations" },
                                                renderVariations
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            );
        }
    }]);

    return PremiumTypo;
}(Component);

exports.default = PremiumTypo;

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
var __ = wp.i18n.__;
var _wp$components = wp.components,
    PanelBody = _wp$components.PanelBody,
    ToggleControl = _wp$components.ToggleControl;

function PremiumResponsiveTabs(props) {
    var _props$onChangeDeskto = props.onChangeDesktop,
        onChangeDesktop = _props$onChangeDeskto === undefined ? function () {} : _props$onChangeDeskto,
        _props$onChangeTablet = props.onChangeTablet,
        onChangeTablet = _props$onChangeTablet === undefined ? function () {} : _props$onChangeTablet,
        _props$onChangeMobile = props.onChangeMobile,
        onChangeMobile = _props$onChangeMobile === undefined ? function () {} : _props$onChangeMobile,
        Desktop = props.Desktop,
        Tablet = props.Tablet,
        Mobile = props.Mobile;


    return React.createElement(
        PanelBody,
        {
            title: __("Responsive"),
            className: "premium-panel-body",
            initialOpen: false
        },
        React.createElement(ToggleControl, {
            label: __('Hide in Desktop'),
            checked: Desktop,
            onChange: onChangeDesktop
        }),
        React.createElement(ToggleControl, {
            label: __('Hide in Tablet'),
            checked: Tablet,
            onChange: onChangeTablet
        }),
        React.createElement(ToggleControl, {
            label: __('Hide in Mobile'),
            checked: Mobile,
            onChange: onChangeMobile
        })
    );
}
exports.default = PremiumResponsiveTabs;

/***/ }),
/* 9 */
/***/ (function(module, exports) {

module.exports = React;

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _wp$element = wp.element,
    useState = _wp$element.useState,
    Fragment = _wp$element.Fragment;
var __ = wp.i18n.__;
var _wp$components = wp.components,
    ButtonGroup = _wp$components.ButtonGroup,
    Button = _wp$components.Button;


var RadioComponent = function RadioComponent(_ref) {
    var value = _ref.value,
        onChange = _ref.onChange,
        label = _ref.label,
        choices = _ref.choices;

    var HandleChange = function HandleChange(newVal) {
        onChange(newVal);
        setState(newVal);
    };
    var defaultVal = '';
    value = value ? value : defaultVal;

    var _useState = useState(value),
        _useState2 = _slicedToArray(_useState, 2),
        state = _useState2[0],
        setState = _useState2[1];

    var renderButtons = function renderButtons() {
        var currentChoices = choices;
        return React.createElement(
            Fragment,
            null,
            currentChoices.map(function (choice) {
                var currentValue = state;
                return React.createElement(
                    Button,
                    {
                        isTertiary: true,
                        className: choice === currentValue ? 'active-radio' : '',
                        onClick: function onClick() {
                            HandleChange(choice);
                        }
                    },
                    choice
                );
            })
        );
    };
    return React.createElement(
        Fragment,
        null,
        React.createElement(
            'span',
            { className: 'customize-control-title premium-control-title' },
            label
        ),
        React.createElement(
            ButtonGroup,
            { className: 'premium-radio-container-control' },
            renderButtons()
        )
    );
};

exports.default = React.memo(RadioComponent);

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while (len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
    return [];
};

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () {
    return '/';
};
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function () {
    return 0;
};

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = PremiumMediaUpload;
var __ = wp.i18n.__;
var Fragment = wp.element.Fragment;
var _wp$components = wp.components,
    Tooltip = _wp$components.Tooltip,
    Dashicon = _wp$components.Dashicon;
var MediaUpload = wp.blockEditor.MediaUpload;
function PremiumMediaUpload(props) {
    var type = props.type,
        imageID = props.imageID,
        imageURL = props.imageURL,
        _props$onSelectMedia = props.onSelectMedia,
        onSelectMedia = _props$onSelectMedia === undefined ? function () {} : _props$onSelectMedia,
        _props$onRemoveImage = props.onRemoveImage,
        onRemoveImage = _props$onRemoveImage === undefined ? function () {} : _props$onRemoveImage;

    return React.createElement(MediaUpload, {
        allowedTypes: ["" + type],
        onSelect: onSelectMedia,
        type: type,
        value: imageID,
        render: function render(_ref) {
            var open = _ref.open;
            return React.createElement(
                Fragment,
                null,
                imageURL && React.createElement(
                    "div",
                    { className: "premium-image-media" },
                    type === "image" ? React.createElement("img", { src: imageURL, className: "premium-image-upload" }) : React.createElement("iframe", { src: imageURL, className: "premium-image-upload" }),
                    React.createElement(
                        "div",
                        { className: "premium-image-actions" },
                        React.createElement(
                            Tooltip,
                            { text: __("Edit") },
                            React.createElement(
                                "button",
                                {
                                    className: "premium-image-button",
                                    "aria-label": __("Edit"),
                                    onClick: open,
                                    role: "button"
                                },
                                React.createElement("div", { "aria-label": __("Edit"), className: "fa fa-pencil" })
                            )
                        ),
                        React.createElement(
                            Tooltip,
                            { text: __("Remove") },
                            React.createElement(
                                "button",
                                {
                                    className: "premium-image-button",
                                    "aria-label": __("Remove"),
                                    onClick: onRemoveImage,
                                    role: "button"
                                },
                                React.createElement("div", { "aria-label": __("Close"), className: "fa fa-trash-o" })
                            )
                        )
                    )
                ),
                !imageURL && React.createElement(
                    "div",
                    { onClick: open, className: "premium-placeholder-image" },
                    React.createElement(Dashicon, { icon: "insert" }),
                    React.createElement(
                        "div",
                        null,
                        __("Insert")
                    )
                )
            );
        }
    });
}

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var core = module.exports = { version: '2.5.7' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

module.exports = isArray;

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var freeGlobal = __webpack_require__(88);

/** Detect free variable `self`. */
var freeSelf = (typeof self === 'undefined' ? 'undefined' : _typeof(self)) == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _premiumPadding = __webpack_require__(218);

var _premiumPadding2 = _interopRequireDefault(_premiumPadding);

var _premiumSizeUnits = __webpack_require__(21);

var _premiumSizeUnits2 = _interopRequireDefault(_premiumSizeUnits);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __ = wp.i18n.__;
var _wp$data = wp.data,
    useSelect = _wp$data.useSelect,
    useDispatch = _wp$data.useDispatch;
var useState = wp.element.useState;

function PremiumResponsivePadding(props) {
    var showUnits = props.showUnits,
        selectedUnit = props.selectedUnit,
        onChangePadSizeUnit = props.onChangePadSizeUnit,
        paddingTop = props.paddingTop,
        paddingRight = props.paddingRight,
        paddingBottom = props.paddingBottom,
        paddingLeft = props.paddingLeft,
        paddingTopTablet = props.paddingTopTablet,
        paddingRightTablet = props.paddingRightTablet,
        paddingBottomTablet = props.paddingBottomTablet,
        paddingLeftTablet = props.paddingLeftTablet,
        paddingTopMobile = props.paddingTopMobile,
        paddingRightMobile = props.paddingRightMobile,
        paddingBottomMobile = props.paddingBottomMobile,
        paddingLeftMobile = props.paddingLeftMobile;

    var _useState = useState('Desktop'),
        _useState2 = _slicedToArray(_useState, 2),
        deviceType = _useState2[0],
        setDeviceType = _useState2[1];

    var customSetPreviewDeviceType = function customSetPreviewDeviceType(device) {
        setDeviceType(device);
    };
    if (wp.data.select('core/edit-post')) {
        var theDevice = useSelect(function (select) {
            var _select = select('core/edit-post'),
                _select$__experimenta = _select.__experimentalGetPreviewDeviceType,
                __experimentalGetPreviewDeviceType = _select$__experimenta === undefined ? null : _select$__experimenta;

            return __experimentalGetPreviewDeviceType ? __experimentalGetPreviewDeviceType() : 'Desktop';
        }, []);
        if (theDevice !== deviceType) {
            setDeviceType(theDevice);
        }

        var _useDispatch = useDispatch('core/edit-post'),
            _useDispatch$__experi = _useDispatch.__experimentalSetPreviewDeviceType,
            __experimentalSetPreviewDeviceType = _useDispatch$__experi === undefined ? null : _useDispatch$__experi;

        customSetPreviewDeviceType = function customSetPreviewDeviceType(device) {
            __experimentalSetPreviewDeviceType(device);
            setDeviceType(device);
        };
    }
    var devices = ['Desktop', 'Tablet', 'Mobile'];
    var output = {};
    output.Mobile = React.createElement(_premiumPadding2.default, {
        paddingTop: paddingTopMobile,
        paddingRight: paddingRightMobile,
        paddingBottom: paddingBottomMobile,
        paddingLeft: paddingLeftMobile,
        onChangePadTop: function onChangePadTop(paddingTopMobile) {
            return props.onChangePaddingTop("mobile", paddingTopMobile);
        },
        onChangePadRight: function onChangePadRight(paddingRightMobile) {
            return props.onChangePaddingRight("mobile", paddingRightMobile);
        },
        onChangePadBottom: function onChangePadBottom(paddingBottomMobile) {
            return props.onChangePaddingBottom("mobile", paddingBottomMobile);
        },
        onChangePadLeft: function onChangePadLeft(paddingLeftMobile) {
            return props.onChangePaddingLeft("mobile", paddingLeftMobile);
        },
        showUnits: false,
        selectedUnit: selectedUnit,
        onChangePadSizeUnit: onChangePadSizeUnit
    });
    output.Tablet = React.createElement(_premiumPadding2.default, {

        paddingTop: paddingTopTablet,
        paddingRight: paddingRightTablet,
        paddingBottom: paddingBottomTablet,
        paddingLeft: paddingLeftTablet,
        onChangePadTop: function onChangePadTop(paddingTopTablet) {
            return props.onChangePaddingTop("tablet", paddingTopTablet);
        },
        onChangePadRight: function onChangePadRight(paddingRightTablet) {
            return props.onChangePaddingRight("tablet", paddingRightTablet);
        },
        onChangePadBottom: function onChangePadBottom(paddingBottomTablet) {
            return props.onChangePaddingBottom("tablet", paddingBottomTablet);
        },
        onChangePadLeft: function onChangePadLeft(paddingLeftTablet) {
            return props.onChangePaddingLeft("tablet", paddingLeftTablet);
        },
        showUnits: false,
        selectedUnit: selectedUnit,
        onChangePadSizeUnit: onChangePadSizeUnit
    });
    output.Desktop = React.createElement(_premiumPadding2.default, {
        paddingTop: paddingTop,
        paddingRight: paddingRight,
        paddingBottom: paddingBottom,
        paddingLeft: paddingLeft,
        onChangePadTop: function onChangePadTop(paddingTop) {
            return props.onChangePaddingTop("desktop", paddingTop);
        },
        onChangePadRight: function onChangePadRight(paddingRight) {
            return props.onChangePaddingRight("desktop", paddingRight);
        },
        onChangePadBottom: function onChangePadBottom(paddingBottom) {
            return props.onChangePaddingBottom("desktop", paddingBottom);
        },
        onChangePadLeft: function onChangePadLeft(paddingLeft) {
            return props.onChangePaddingLeft("desktop", paddingLeft);
        },
        showUnits: false,
        selectedUnit: selectedUnit,
        onChangePadSizeUnit: onChangePadSizeUnit
    });
    return React.createElement(
        'div',
        { className: 'premium-blocks-range-control' },
        React.createElement(
            'header',
            null,
            React.createElement(
                'div',
                { className: 'premium-slider-title-wrap' },
                React.createElement(
                    'span',
                    { className: 'customize-control-title premium-control-title' },
                    '  ',
                    __("Padding")
                ),
                React.createElement(
                    'ul',
                    { className: 'premium-responsive-control-btns premium-responsive-slider-btns' },
                    devices.map(function (device, key) {
                        var activeClass = device === deviceType ? ' active' : '';
                        var icon = device.toLowerCase() === 'mobile' ? 'smartphone' : device.toLowerCase();
                        return React.createElement(
                            'li',
                            { key: key, className: '' + device + activeClass },
                            React.createElement(
                                'button',
                                { type: 'button', className: 'preview-' + device + activeClass, 'data-device': device },
                                React.createElement('i', { 'class': 'dashicons dashicons-' + icon, onClick: function onClick() {
                                        var nextDevice = key + 1 > devices.length - 1 ? devices[0] : devices[key + 1];
                                        customSetPreviewDeviceType(nextDevice);
                                    } })
                            )
                        );
                    })
                )
            ),
            showUnits && React.createElement(_premiumSizeUnits2.default, {
                activeUnit: selectedUnit,
                onChangeSizeUnit: function onChangeSizeUnit(newValue) {
                    return onChangePadSizeUnit(newValue);
                }
            })
        ),
        output[deviceType] ? output[deviceType] : output.Desktop
    );
}
exports.default = PremiumResponsivePadding;

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var removeHash = function removeHash(hex) {
  return hex.charAt(0) === '#' ? hex.slice(1) : hex;
};

var parseHex = function parseHex(nakedHex) {
  var isShort = nakedHex.length === 3 || nakedHex.length === 4;
  var twoDigitHexR = isShort ? "".concat(nakedHex.slice(0, 1)).concat(nakedHex.slice(0, 1)) : nakedHex.slice(0, 2);
  var twoDigitHexG = isShort ? "".concat(nakedHex.slice(1, 2)).concat(nakedHex.slice(1, 2)) : nakedHex.slice(2, 4);
  var twoDigitHexB = isShort ? "".concat(nakedHex.slice(2, 3)).concat(nakedHex.slice(2, 3)) : nakedHex.slice(4, 6);
  var twoDigitHexA = (isShort ? "".concat(nakedHex.slice(3, 4)).concat(nakedHex.slice(3, 4)) : nakedHex.slice(6, 8)) || 'ff'; // const numericA = +((parseInt(a, 16) / 255).toFixed(2));

  return {
    r: twoDigitHexR,
    g: twoDigitHexG,
    b: twoDigitHexB,
    a: twoDigitHexA
  };
};

var hexToDecimal = function hexToDecimal(hex) {
  return parseInt(hex, 16);
};

var hexesToDecimals = function hexesToDecimals(_ref) {
  var r = _ref.r,
      g = _ref.g,
      b = _ref.b,
      a = _ref.a;
  return {
    r: hexToDecimal(r),
    g: hexToDecimal(g),
    b: hexToDecimal(b),
    a: +(hexToDecimal(a) / 255).toFixed(2)
  };
};

var isNumeric = function isNumeric(n) {
  return !isNaN(parseFloat(n)) && isFinite(n);
}; // eslint-disable-line no-restricted-globals, max-len


var formatRgb = function formatRgb(decimalObject, parameterA) {
  var r = decimalObject.r,
      g = decimalObject.g,
      b = decimalObject.b,
      parsedA = decimalObject.a;
  var a = isNumeric(parameterA) ? parameterA : parsedA;
  return "rgba(".concat(r, ", ").concat(g, ", ").concat(b, ", ").concat(a, ")");
};
/**
 * Turns an old-fashioned css hex color value into a rgb color value.
 *
 * If you specify an alpha value, you'll get a rgba() value instead.
 *
 * @param The hex value to convert. ('123456'. '#123456', ''123', '#123')
 * @param An alpha value to apply. (optional) ('0.5', '0.25')
 * @return An rgb or rgba value. ('rgb(11, 22, 33)'. 'rgba(11, 22, 33, 0.5)')
 */

var hexToRgba = function hexToRgba(hex, a) {
  var hashlessHex = removeHash(hex);
  var hexObject = parseHex(hashlessHex);
  var decimalObject = hexesToDecimals(hexObject);
  return formatRgb(decimalObject, a);
};

module.exports = hexToRgba;

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

if (process.env.NODE_ENV !== 'production') {
  var ReactIs = __webpack_require__(106);

  // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod
  var throwOnDirectAccess = true;
  module.exports = __webpack_require__(249)(ReactIs.isElement, throwOnDirectAccess);
} else {
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  module.exports = __webpack_require__(252)();
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)))

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = ResponsiveRangeControl;

var _premiumSizeUnits = __webpack_require__(21);

var _premiumSizeUnits2 = _interopRequireDefault(_premiumSizeUnits);

var _singleRangeControl = __webpack_require__(3);

var _singleRangeControl2 = _interopRequireDefault(_singleRangeControl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _wp$data = wp.data,
    useSelect = _wp$data.useSelect,
    useDispatch = _wp$data.useDispatch;
var useState = wp.element.useState;
var __ = wp.i18n.__;
function ResponsiveRangeControl(_ref) {
    var label = _ref.label,
        onChange = _ref.onChange,
        value = _ref.value,
        _ref$step = _ref.step,
        step = _ref$step === undefined ? 1 : _ref$step,
        _ref$max = _ref.max,
        max = _ref$max === undefined ? 100 : _ref$max,
        _ref$min = _ref.min,
        min = _ref$min === undefined ? 0 : _ref$min,
        _ref$unit = _ref.unit,
        unit = _ref$unit === undefined ? '' : _ref$unit,
        _ref$showUnit = _ref.showUnit,
        showUnit = _ref$showUnit === undefined ? false : _ref$showUnit,
        _ref$units = _ref.units,
        units = _ref$units === undefined ? ['px', 'em', 'rem'] : _ref$units,
        defaultValue = _ref.defaultValue;

    var defaultValues = {
        'Desktop': '',
        'Tablet': '',
        'Mobile': '',
        unit: 'px'

    };
    value = value ? _extends({}, defaultValues, value) : defaultValues;

    var _useState = useState(value),
        _useState2 = _slicedToArray(_useState, 2),
        state = _useState2[0],
        setState = _useState2[1];

    var _useState3 = useState('Desktop'),
        _useState4 = _slicedToArray(_useState3, 2),
        deviceType = _useState4[0],
        setDeviceType = _useState4[1];

    var customSetPreviewDeviceType = function customSetPreviewDeviceType(device) {
        setDeviceType(device);
    };
    if (wp.data.select('core/edit-post')) {
        var theDevice = useSelect(function (select) {
            var _select = select('core/edit-post'),
                _select$__experimenta = _select.__experimentalGetPreviewDeviceType,
                __experimentalGetPreviewDeviceType = _select$__experimenta === undefined ? null : _select$__experimenta;

            return __experimentalGetPreviewDeviceType ? __experimentalGetPreviewDeviceType() : 'Desktop';
        }, []);
        if (theDevice !== deviceType) {
            setDeviceType(theDevice);
        }

        var _useDispatch = useDispatch('core/edit-post'),
            _useDispatch$__experi = _useDispatch.__experimentalSetPreviewDeviceType,
            __experimentalSetPreviewDeviceType = _useDispatch$__experi === undefined ? null : _useDispatch$__experi;

        customSetPreviewDeviceType = function customSetPreviewDeviceType(device) {
            __experimentalSetPreviewDeviceType(device);
            setDeviceType(device);
        };
    }
    var devices = ['Desktop', 'Tablet', 'Mobile'];
    var onChangeValue = function onChangeValue(value, device) {
        var updatedState = _extends({}, state);
        updatedState[device] = value;
        setState(updatedState);
        onChange(updatedState);
    };
    var onChangeUnit = function onChangeUnit(value) {
        var updatedState = _extends({}, state);
        updatedState['unit'] = value;
        setState(updatedState);
        onChange(updatedState);
    };
    var output = {};
    output.Mobile = React.createElement(_singleRangeControl2.default, {
        device: 'mobile',
        value: state['Mobile'],
        onChange: function onChange(size) {
            return onChangeValue(size, 'Mobile');
        },
        min: min,
        max: max,
        step: state['unit'] === "em" || state['unit'] === "rem" ? .1 : 1,
        showUnit: false,
        defaultValue: defaultValue
    });
    output.Tablet = React.createElement(_singleRangeControl2.default, {
        device: 'tablet',
        value: state['Tablet'],
        onChange: function onChange(size) {
            return onChangeValue(size, 'Tablet');
        },
        min: min,
        max: max,
        step: state['unit'] === "em" || state['unit'] === "rem" ? .1 : 1,
        showUnit: false,
        defaultValue: defaultValue
    });
    output.Desktop = React.createElement(_singleRangeControl2.default, {
        device: 'desktop',
        value: state['Desktop'],
        onChange: function onChange(size) {
            return onChangeValue(size, "Desktop");
        },
        min: min,
        max: max,
        step: state['unit'] === "em" || state['unit'] === "rem" ? .1 : 1,
        showUnit: false,
        defaultValue: defaultValue
    });
    return [onChange && React.createElement(
        'div',
        { className: 'premium-blocks-range-control' },
        React.createElement(
            'header',
            null,
            React.createElement(
                'div',
                { className: 'premium-slider-title-wrap' },
                label && React.createElement(
                    'span',
                    { className: 'customize-control-title premium-control-title' },
                    label
                ),
                React.createElement(
                    'ul',
                    { className: 'premium-responsive-control-btns premium-responsive-slider-btns' },
                    devices.map(function (device, key) {
                        var activeClass = device === deviceType ? ' active' : '';
                        var icon = device.toLowerCase() === 'mobile' ? 'smartphone' : device.toLowerCase();
                        return React.createElement(
                            'li',
                            { key: key, className: '' + device + activeClass },
                            React.createElement(
                                'button',
                                { type: 'button', className: 'preview-' + device + activeClass, 'data-device': device },
                                React.createElement('i', { 'class': 'dashicons dashicons-' + icon, onClick: function onClick() {
                                        var nextDevice = key + 1 > devices.length - 1 ? devices[0] : devices[key + 1];
                                        customSetPreviewDeviceType(nextDevice);
                                    } })
                            )
                        );
                    })
                )
            ),
            showUnit && React.createElement(_premiumSizeUnits2.default, {
                units: units,
                activeUnit: state['unit'],
                onChangeSizeUnit: function onChangeSizeUnit(newValue) {
                    return onChangeUnit(newValue);
                }
            })
        ),
        output[deviceType] ? output[deviceType] : output.Desktop
    )];
}

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self
// eslint-disable-next-line no-new-func
: Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = PremiumSizeUnits;
function PremiumSizeUnits(props) {
    var activeUnit = props.activeUnit,
        units = props.units,
        _props$onChangeSizeUn = props.onChangeSizeUnit,
        onChangeSizeUnit = _props$onChangeSizeUn === undefined ? function (unit) {} : _props$onChangeSizeUn;

    var sizeUnits = ["px", "em", "%"];
    if (undefined !== units) {
        sizeUnits = units;
    }
    return React.createElement(
        "ul",
        { className: "premium-slider-units" },
        sizeUnits.map(function (unit, index) {
            return React.createElement(
                "li",
                {
                    className: "single-unit " + (unit === activeUnit && "active"),
                    onClick: function onClick() {
                        return onChangeSizeUnit(unit);
                    }
                },
                React.createElement(
                    "span",
                    { className: "unit-text" },
                    " ",
                    unit
                )
            );
        })
    );
}

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _webfontloader = __webpack_require__(104);

var _webfontloader2 = _interopRequireDefault(_webfontloader);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

if (googlefonts === undefined) {
    var googlefonts = [];
}
var Component = wp.element.Component;

var statuses = {
    inactive: "inactive",
    active: "active",
    loading: "loading"
};

var noop = function noop() {};

var WebfontLoader = function (_Component) {
    _inherits(WebfontLoader, _Component);

    function WebfontLoader(props) {
        _classCallCheck(this, WebfontLoader);

        var _this = _possibleConstructorReturn(this, (WebfontLoader.__proto__ || Object.getPrototypeOf(WebfontLoader)).call(this, props));

        _this.state = {
            status: undefined
        };

        _this.handleLoading = function () {
            _this.setState({ status: statuses.loading });
        };

        _this.addFont = function (font) {
            if (!googlefonts.includes(font)) {
                googlefonts.push(font);
            }
        };

        _this.handleActive = function () {
            _this.setState({ status: statuses.active });
        };

        _this.handleInactive = function () {
            _this.setState({ status: statuses.inactive });
        };

        _this.loadFonts = function () {
            if (!googlefonts.includes(_this.props.config.google.families[0])) {
                _webfontloader2.default.load(_extends({}, _this.props.config, {
                    loading: _this.handleLoading,
                    active: _this.handleActive,
                    inactive: _this.handleInactive
                }));
                _this.addFont(_this.props.config.google.families[0]);
            }
        };
        return _this;
    }

    _createClass(WebfontLoader, [{
        key: "componentDidMount",
        value: function componentDidMount() {
            this.loadFonts();
        }
    }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps, prevState) {
            var _props = this.props,
                onStatus = _props.onStatus,
                config = _props.config;


            if (prevState.status !== this.state.status) {
                onStatus(this.state.status);
            }
            if (prevProps.config !== config) {
                this.loadFonts();
            }
        }
    }, {
        key: "render",
        value: function render() {
            var children = this.props.children;

            return children || null;
        }
    }]);

    return WebfontLoader;
}(Component);

WebfontLoader.defaultProps = {
    onStatus: noop
};

exports.default = WebfontLoader;

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = PremiumBackgroundControl;

var _react = __webpack_require__(9);

var _react2 = _interopRequireDefault(_react);

var _premiumBackground = __webpack_require__(105);

var _premiumBackground2 = _interopRequireDefault(_premiumBackground);

var _map = __webpack_require__(94);

var _map2 = _interopRequireDefault(_map);

var _ColorComponent = __webpack_require__(2);

var _ColorComponent2 = _interopRequireDefault(_ColorComponent);

var _singleRangeControl = __webpack_require__(3);

var _singleRangeControl2 = _interopRequireDefault(_singleRangeControl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _wp$components = wp.components,
    SelectControl = _wp$components.SelectControl,
    Button = _wp$components.Button,
    ButtonGroup = _wp$components.ButtonGroup,
    Tooltip = _wp$components.Tooltip;
// import { FontAwesomeEnabled } from "../../assets/js/settings";

var __ = wp.i18n.__;
var Fragment = wp.element.Fragment;
function PremiumBackgroundControl(_ref) {
    var backgroundType = _ref.backgroundType,
        backgroundColor = _ref.backgroundColor,
        backgroundImageID = _ref.backgroundImageID,
        backgroundImageURL = _ref.backgroundImageURL,
        backgroundPosition = _ref.backgroundPosition,
        backgroundRepeat = _ref.backgroundRepeat,
        backgroundSize = _ref.backgroundSize,
        fixed = _ref.fixed,
        gradientType = _ref.gradientType,
        setAttributes = _ref.setAttributes,
        saveContainerStyle = _ref.saveContainerStyle,
        gradientLocationOne = _ref.gradientLocationOne,
        gradientColorTwo = _ref.gradientColorTwo,
        gradientLocationTwo = _ref.gradientLocationTwo,
        gradientAngle = _ref.gradientAngle,
        gradientPosition = _ref.gradientPosition;


    var gradTypes = [{ key: 'linear', name: __('Linear') }, { key: 'radial', name: __('Radial') }];

    var bgType = [{ key: 'solid', icon: "fa fa-paint-brush", tooltip: __('Classic') }, { key: 'gradient', icon: "fa fa-barcode", tooltip: __('Gradient') }];

    return _react2.default.createElement(
        Fragment,
        null,
        _react2.default.createElement(
            'div',
            { className: 'Premium-btn-size-settings-container' },
            _react2.default.createElement(
                'h2',
                { className: 'Premium-beside-btn-group' },
                __('Background Type', 'premium-blocks-for-gutenberg')
            ),
            _react2.default.createElement(
                ButtonGroup,
                { className: 'Premium-button-size-type-options', 'aria-label': __('Background Type', 'premium-blocks-for-gutenberg') },
                (0, _map2.default)(bgType, function (_ref2) {
                    var icon = _ref2.icon,
                        key = _ref2.key,
                        tooltip = _ref2.tooltip;
                    return _react2.default.createElement(
                        Tooltip,
                        { text: tooltip },
                        _react2.default.createElement(
                            Button,
                            {
                                key: key,
                                className: 'Premium-btn-size-btn',
                                isSmall: true,
                                isPrimary: backgroundType === key,
                                onClick: function onClick() {
                                    return setAttributes({ backgroundType: key });
                                }
                            },
                            1 == PremiumOptionsSettings.FontAwesomeEnabled ? _react2.default.createElement('i', { className: icon }) : tooltip
                        )
                    );
                })
            )
        ),
        'solid' === backgroundType && _react2.default.createElement(
            'div',
            { className: 'Premium-inner-sub-section' },
            _react2.default.createElement(_premiumBackground2.default, {
                type: 'color',
                colorValue: backgroundColor,
                onChangeColor: function onChangeColor(newValue) {
                    return saveContainerStyle({
                        containerBack: newValue
                    });
                }
            }),
            _react2.default.createElement(_premiumBackground2.default, {
                imageID: backgroundImageID,
                imageURL: backgroundImageURL,
                backgroundPosition: backgroundPosition,
                backgroundRepeat: backgroundRepeat,
                backgroundSize: backgroundSize,
                fixed: fixed,
                onSelectMedia: function onSelectMedia(media) {
                    saveContainerStyle({
                        backgroundImageID: media.id,
                        backgroundImageURL: media.url
                    });
                },
                onRemoveImage: function onRemoveImage() {
                    return saveContainerStyle({
                        backgroundImageURL: "",
                        backgroundImageID: ""
                    });
                },
                onChangeBackPos: function onChangeBackPos(newValue) {
                    return saveContainerStyle({ backgroundPosition: newValue });
                },
                onchangeBackRepeat: function onchangeBackRepeat(newValue) {
                    return saveContainerStyle({ backgroundRepeat: newValue });
                },
                onChangeBackSize: function onChangeBackSize(newValue) {
                    return saveContainerStyle({ backgroundSize: newValue });
                },
                onChangeFixed: function onChangeFixed(check) {
                    return saveContainerStyle({ fixed: check });
                }
            })
        ),
        'gradient' === backgroundType && _react2.default.createElement(
            'div',
            { className: 'Premium-inner-sub-section' },
            _react2.default.createElement(_ColorComponent2.default, {
                label: __('Gradient Color 1', 'premium-blocks-for-gutenberg'),
                colorValue: backgroundColor,
                colorDefault: '',
                onColorChange: function onColorChange(value) {
                    saveContainerStyle({ containerBack: value });
                }
            }),
            _react2.default.createElement(_singleRangeControl2.default, {
                label: __('Location', 'premium-blocks-for-gutenberg'),
                value: gradientLocationOne,
                onChange: function onChange(value) {
                    saveContainerStyle({ gradientLocationOne: value });
                },
                showUnit: false,
                defaultValue: 0
            }),
            _react2.default.createElement(_ColorComponent2.default, {
                label: __('Gradient Color 2', 'premium-blocks-for-gutenberg'),
                colorValue: gradientColorTwo,
                colorDefault: '#777777',
                onColorChange: function onColorChange(value) {
                    saveContainerStyle({ gradientColorTwo: value });
                }
            }),
            _react2.default.createElement(_singleRangeControl2.default, {
                label: __('Location', 'premium-blocks-for-gutenberg'),
                value: gradientLocationTwo,
                onChange: function onChange(value) {
                    saveContainerStyle({ gradientLocationTwo: value });
                },
                showUnit: false,
                defaultValue: 0
            }),
            _react2.default.createElement(
                'div',
                { className: 'Premium-btn-size-settings-container' },
                _react2.default.createElement(
                    'h2',
                    { className: 'Premium-beside-btn-group' },
                    __('Gradient Type', 'premium-blocks-for-gutenberg')
                ),
                _react2.default.createElement(
                    ButtonGroup,
                    { className: 'Premium-button-size-type-options', 'aria-label': __('Gradient Type', 'premium-blocks-for-gutenberg') },
                    (0, _map2.default)(gradTypes, function (_ref3) {
                        var name = _ref3.name,
                            key = _ref3.key;
                        return _react2.default.createElement(
                            Button,
                            {
                                key: key,
                                className: 'Premium-btn-size-btn',
                                isSmall: true,
                                isPrimary: gradientType === key,
                                onClick: function onClick() {
                                    saveContainerStyle({ gradientType: key });
                                }
                            },
                            name
                        );
                    })
                )
            ),
            'radial' !== gradientType && _react2.default.createElement(_singleRangeControl2.default, {
                label: __('Gradient Angle', 'premium-blocks-for-gutenberg'),
                value: gradientAngle,
                onChange: function onChange(value) {
                    saveContainerStyle({ gradientAngle: value });
                },
                showUnit: false,
                defaultValue: 0,
                min: 0,
                max: 360
            }),
            'radial' === gradientType && _react2.default.createElement(SelectControl, {
                label: __('Gradient Position', 'premium-blocks-for-gutenberg'),
                value: gradientPosition,
                options: [{ value: 'center top', label: __('Center Top', 'premium-blocks-for-gutenberg') }, { value: 'center center', label: __('Center Center', 'premium-blocks-for-gutenberg') }, { value: 'center bottom', label: __('Center Bottom', 'premium-blocks-for-gutenberg') }, { value: 'left top', label: __('Left Top', 'premium-blocks-for-gutenberg') }, { value: 'left center', label: __('Left Center', 'premium-blocks-for-gutenberg') }, { value: 'left bottom', label: __('Left Bottom', 'premium-blocks-for-gutenberg') }, { value: 'right top', label: __('Right Top', 'premium-blocks-for-gutenberg') }, { value: 'right center', label: __('Right Center', 'premium-blocks-for-gutenberg') }, { value: 'right bottom', label: __('Right Bottom', 'premium-blocks-for-gutenberg') }],
                onChange: function onChange(value) {
                    return saveContainerStyle({ gradientPosition: value });
                }
            })
        )
    );
}

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
 * 
 * React FontIconPicker
 * 
 * React Component to show a picker element to pick font-icons & svg
 * 
 * @author Swashata Ghosh <swashata@wpquark.com>
 * @version 1.2.0
 * @link https://github.com/fontIconPicker/react-fonticonpicker
 * @license MIT
 * 
 * Copyright (c) 2018 Swashata Ghosh <swashata@wpquark.com>
 * 
 * This software is released under the MIT License.
 * https://opensource.org/licenses/MIT
 * 
 */
!function (e, t) {
  "object" == ( false ? "undefined" : _typeof(exports)) && "object" == ( false ? "undefined" : _typeof(module)) ? module.exports = t(__webpack_require__(18), __webpack_require__(9), __webpack_require__(50), __webpack_require__(40), __webpack_require__(107)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(18), __webpack_require__(9), __webpack_require__(50), __webpack_require__(40), __webpack_require__(107)], __WEBPACK_AMD_DEFINE_FACTORY__ = (t),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) ? exports.FontIconPicker = t(require("prop-types"), require("react"), require("classnames"), require("react-dom"), require("react-transition-group")) : e.FontIconPicker = t(e.PropTypes, e.React, e.classNames, e.ReactDOM, e.ReactTransitionGroup);
}(window, function (e, t, r, n, a) {
  return function (e) {
    var t = {};function r(n) {
      if (t[n]) return t[n].exports;var a = t[n] = { i: n, l: !1, exports: {} };return e[n].call(a.exports, a, a.exports, r), a.l = !0, a.exports;
    }return r.m = e, r.c = t, r.d = function (e, t, n) {
      r.o(e, t) || Object.defineProperty(e, t, { configurable: !1, enumerable: !0, get: n });
    }, r.r = function (e) {
      Object.defineProperty(e, "__esModule", { value: !0 });
    }, r.n = function (e) {
      var t = e && e.__esModule ? function () {
        return e.default;
      } : function () {
        return e;
      };return r.d(t, "a", t), t;
    }, r.o = function (e, t) {
      return Object.prototype.hasOwnProperty.call(e, t);
    }, r.p = "", r(r.s = 15);
  }([function (t, r) {
    t.exports = e;
  }, function (e, r) {
    e.exports = t;
  }, function (e, t, r) {
    "use strict";
    function n(e) {
      return (n = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (e) {
        return typeof e === "undefined" ? "undefined" : _typeof(e);
      } : function (e) {
        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e === "undefined" ? "undefined" : _typeof(e);
      })(e);
    }function a(e, t, r) {
      return t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
    }function o(e) {
      return function (e) {
        if (Array.isArray(e)) {
          for (var t = 0, r = new Array(e.length); t < e.length; t++) {
            r[t] = e[t];
          }return r;
        }
      }(e) || function (e) {
        if (Symbol.iterator in Object(e) || "[object Arguments]" === Object.prototype.toString.call(e)) return Array.from(e);
      }(e) || function () {
        throw new TypeError("Invalid attempt to spread non-iterable instance");
      }();
    }Object.defineProperty(t, "__esModule", { value: !0 }), t.flattenPossiblyCategorizedSource = function (e) {
      var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;if (Array.isArray(e)) return o(e);if (null !== t) return void 0 !== e[t] ? o(e[t]) : [];var r = [],
          n = function (e) {
        for (var t = 1; t < arguments.length; t++) {
          var r = null != arguments[t] ? arguments[t] : {},
              n = Object.keys(r);"function" == typeof Object.getOwnPropertySymbols && (n = n.concat(Object.getOwnPropertySymbols(r).filter(function (e) {
            return Object.getOwnPropertyDescriptor(r, e).enumerable;
          }))), n.forEach(function (t) {
            a(e, t, r[t]);
          });
        }return e;
      }({}, e);return Object.keys(n).forEach(function (e) {
        r = o(r).concat(o(n[e]));
      }), r;
    }, t.getPossibleCategories = function (e) {
      return Array.isArray(e) ? null : Object.keys(e);
    }, t.convertToHex = function (e) {
      return String.fromCodePoint(parseInt(e, 10));
    }, t.isArrayEqual = function (e, t) {
      if (!Array.isArray(e) || !Array.isArray(t)) return !1;var r = o(e);r.sort();var n = o(t);return n.sort(), JSON.stringify(r) === JSON.stringify(n);
    }, t.getOffset = function (e) {
      var t = e.getBoundingClientRect(),
          r = window.pageXOffset || document.documentElement.scrollLeft,
          n = window.pageYOffset || document.documentElement.scrollTop;return { top: t.top + n, left: t.left + r };
    }, t.getSourceType = function (e) {
      return null === e ? "null" : "object" !== n(e) || Array.isArray(e) ? Array.isArray(e) ? "array" : n(e) : "object";
    }, t.InvalidSourceException = function (e, t) {
      this.givenType = e, this.requiredType = t, this.message = "Expected of type: ".concat(this.requiredType, ", found: ").concat(this.givenType), this.toString = function () {
        return "Invalid Source Exception: ".concat(this.message);
      };
    }, t.fuzzySearch = function (e, t) {
      e = e.toLowerCase();var r = (t = t.toLowerCase()).length,
          n = e.length;if (n > r) return !1;if (n === r) return e === t;e: for (var a = 0, o = 0; a < n; a++) {
        for (var l = e.codePointAt(a); o < r;) {
          if (t.codePointAt(o++) === l) continue e;
        }return !1;
      }return !0;
    }, t.debounce = void 0, t.debounce = function (e, t) {
      var r;return function () {
        var n = this,
            a = arguments;clearTimeout(r), r = setTimeout(function () {
          return e.apply(n, a);
        }, t);
      };
    };
  }, function (e, t) {
    e.exports = r;
  },,, function (e, t) {
    e.exports = n;
  }, function (e, t, r) {
    "use strict";
    Object.defineProperty(t, "__esModule", { value: !0 }), t.default = void 0;var n = u(r(1)),
        a = r(6),
        o = u(r(0)),
        l = u(r(3)),
        i = r(2);function u(e) {
      return e && e.__esModule ? e : { default: e };
    }function c(e) {
      return (c = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (e) {
        return typeof e === "undefined" ? "undefined" : _typeof(e);
      } : function (e) {
        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e === "undefined" ? "undefined" : _typeof(e);
      })(e);
    }function s(e, t) {
      for (var r = 0; r < t.length; r++) {
        var n = t[r];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
      }
    }function f(e, t, r) {
      return t && s(e.prototype, t), r && s(e, r), e;
    }function d(e) {
      if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e;
    }var p = function (e) {
      function t(e) {
        var r, n;return function (e, t) {
          if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
        }(this, t), this, n = (t.__proto__ || Object.getPrototypeOf(t)).call(this, e), r = !n || "object" !== c(n) && "function" != typeof n ? d(this) : n, Object.defineProperty(d(r), "syncPortalPosition", { configurable: !0, enumerable: !0, writable: !0, value: function value() {
            r.resetPortalPosition(), r.fixWindowOverflow();
          } }), Object.defineProperty(d(r), "fixWindowOverflow", { configurable: !0, enumerable: !0, writable: !0, value: function value() {
            var e = r.props.domRef.current.offsetWidth,
                t = r.props.domRef.current.offsetHeight,
                n = window,
                a = n.innerWidth,
                o = n.pageYOffset,
                l = document.documentElement.clientHeight,
                u = (0, i.getOffset)(r.props.domRef.current),
                c = u.left,
                s = u.top,
                f = "self" === r.state.appendRoot ? r.props.domRef.current : r.state.appendRoot,
                d = (0, i.getOffset)(f),
                p = r.props.btnRef.current,
                h = r.props.domRef.current,
                y = (0, i.getOffset)(p),
                b = getComputedStyle(p),
                g = (parseInt(b.borderTop, 10) || 0) + (parseInt(b.borderBottom, 10) || 0);if (c + e > a - 20) {
              var m = y.left + r.props.btnRef.current.offsetWidth - (e + d.left);m + d.left < 0 && (m = 10 - d.left), h.style.left = "".concat(m, "px");
            }t + s - o > l && y.top - t > 0 && ("self" === r.state.appendRoot ? h.style.top = "-".concat(t - g, "px") : h.style.top = "".concat(y.top + g - t, "px"));
          } }), r.state = {}, r.debouncedSyncPortalPosition = (0, i.debounce)(r.syncPortalPosition, 250), r;
      }return function (e, t) {
        if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function");e.prototype = Object.create(t && t.prototype, { constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 } }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
      }(t, n.default.PureComponent), f(t, null, [{ key: "getDerivedStateFromProps", value: function value(e) {
          var r = t.calculateAppendAndClass(e.appendRoot);return { appendRoot: r.appendRoot, portalClasses: r.portalClasses };
        } }, { key: "calculateAppendAndClass", value: function value(e) {
          var t = "self",
              r = (0, l.default)({ "rfipdropdown--portal": !1 !== e });return !1 !== e && (t = document.querySelector(e)), { portalClasses: r, appendRoot: t };
        } }]), f(t, [{ key: "componentDidMount", value: function value() {
          window.addEventListener("resize", this.debouncedSyncPortalPosition), window.addEventListener("scroll", this.debouncedSyncPortalPosition), this.syncPortalPosition();
        } }, { key: "componentDidUpdate", value: function value() {
          this.syncPortalPosition();
        } }, { key: "componentWillUnmount", value: function value() {
          window.removeEventListener("resize", this.debouncedSyncPortalPosition), window.removeEventListener("scroll", this.debouncedSyncPortalPosition);
        } }, { key: "positionPortal", value: function value() {
          var e = this.props.domRef.current.style.display;this.props.domRef.current.style.display = "none";var t = this.props.btnRef.current,
              r = (0, i.getOffset)(t),
              n = (0, i.getOffset)(this.state.appendRoot),
              a = t.offsetHeight;this.props.domRef.current.style.left = "".concat(r.left - n.left, "px"), this.props.domRef.current.style.top = "".concat(r.top + a, "px"), this.props.domRef.current.style.display = e;
        } }, { key: "resetPortalPosition", value: function value() {
          var e = this.props.domRef.current;"self" === this.state.appendRoot ? e.style.top = "" : this.positionPortal();
        } }, { key: "render", value: function value() {
          var e = (0, l.default)(this.props.className, this.state.portalClasses),
              t = n.default.createElement("div", { className: e, ref: this.props.domRef }, this.props.children);return "self" === this.state.appendRoot ? t : (0, a.createPortal)(t, this.state.appendRoot);
        } }]), t;
    }();Object.defineProperty(p, "propTypes", { configurable: !0, enumerable: !0, writable: !0, value: { appendRoot: o.default.oneOfType([o.default.bool, o.default.string]), children: o.default.node.isRequired, domRef: o.default.object.isRequired, btnRef: o.default.object.isRequired, className: o.default.string.isRequired } }), Object.defineProperty(p, "defaultProps", { configurable: !0, enumerable: !0, writable: !0, value: { appendRoot: !1 } });var h = p;t.default = h;
  }, function (e, t, r) {
    "use strict";
    Object.defineProperty(t, "__esModule", { value: !0 }), t.default = void 0;var n = i(r(1)),
        a = i(r(0)),
        o = i(r(3)),
        l = r(2);function i(e) {
      return e && e.__esModule ? e : { default: e };
    }function u(e) {
      return (u = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (e) {
        return typeof e === "undefined" ? "undefined" : _typeof(e);
      } : function (e) {
        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e === "undefined" ? "undefined" : _typeof(e);
      })(e);
    }function c(e) {
      return function (e) {
        if (Array.isArray(e)) {
          for (var t = 0, r = new Array(e.length); t < e.length; t++) {
            r[t] = e[t];
          }return r;
        }
      }(e) || function (e) {
        if (Symbol.iterator in Object(e) || "[object Arguments]" === Object.prototype.toString.call(e)) return Array.from(e);
      }(e) || function () {
        throw new TypeError("Invalid attempt to spread non-iterable instance");
      }();
    }function s(e, t) {
      for (var r = 0; r < t.length; r++) {
        var n = t[r];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
      }
    }function f(e, t, r) {
      return t && s(e.prototype, t), r && s(e, r), e;
    }function d(e) {
      if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e;
    }var p = function (e) {
      function t(e) {
        var r, n;return function (e, t) {
          if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
        }(this, t), this, n = (t.__proto__ || Object.getPrototypeOf(t)).call(this, e), r = !n || "object" !== u(n) && "function" != typeof n ? d(this) : n, Object.defineProperty(d(r), "handleChangePage", { configurable: !0, enumerable: !0, writable: !0, value: function value(e) {
            var t,
                n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null,
                a = r.props.currentPage,
                o = r.state.totalPage;null !== n ? "next" === n ? a += 1 : a -= 1 : a = parseInt(e.target.value, 10) - 1, a < 0 && (a = 0), a > o - 1 && (a = o - 1), t = a + 1, null === n && Number.isNaN(a) && (a = 0, t = ""), r.setState({ viewPage: t }), r.props.handleChangePage(a);
          } }), Object.defineProperty(d(r), "handlePageKeyBoard", { configurable: !0, enumerable: !0, writable: !0, value: function value(e, t) {
            13 !== e.keyCode && 32 !== e.keyCode || r.handleChangePage({}, t);
          } }), Object.defineProperty(d(r), "handleChangeValue", { configurable: !0, enumerable: !0, writable: !0, value: function value(e) {
            r.props.handleChangeValue(e);
          } }), Object.defineProperty(d(r), "handleValueKeyboard", { configurable: !0, enumerable: !0, writable: !0, value: function value(e, t) {
            13 !== e.keyCode && 32 !== e.keyCode || r.handleChangeValue(t);
          } }), r.state = { viewPage: r.props.currentPage + 1 }, r;
      }return function (e, t) {
        if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function");e.prototype = Object.create(t && t.prototype, { constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 } }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
      }(t, n.default.PureComponent), f(t, null, [{ key: "getDerivedStateFromProps", value: function value(e, r) {
          var n = t.getCategoryFilteredState(e.currentCategory, e.categories, e.icons),
              a = t.getCategoryFilteredState(e.currentCategory, e.categories, null === e.search ? e.icons : e.search),
              o = t.getActiveIcons(n, a, e.currentSearch),
              l = o.activeIcons,
              i = o.activeTitles,
              u = e.currentPage,
              c = e.iconsPerPage,
              s = { iconView: t.getCurrentViewIcons(l, c, u), titleView: t.getCurrentViewIcons(i, c, u), totalPage: Math.ceil(l.length / c) };return "" !== r.viewPage && (s.viewPage = e.currentPage + 1), s;
        } }, { key: "getActiveIcons", value: function value(e, t, r) {
          var n = c(e),
              a = c(t);if ("" === r || null === r) return { activeIcons: n, activeTitles: a };var o = [],
              i = [];return n.forEach(function (e, n) {
            (0, l.fuzzySearch)(r, t[n]) && (o.push(e), i.push(t[n]));
          }), { activeIcons: o, activeTitles: i };
        } }, { key: "getCategoryFilteredState", value: function value(e, t, r) {
          var n = null,
              a = (0, l.getSourceType)(r);if (Array.isArray(t)) {
            if ("object" !== a) throw new l.InvalidSourceException(a, "object");
          } else if ("array" !== a) throw new l.InvalidSourceException(a, "array");return 0 !== e && Array.isArray(t) && (n = t[e] || null), (0, l.flattenPossiblyCategorizedSource)(r, n);
        } }, { key: "getCurrentViewIcons", value: function value(e, t, r) {
          var n = r * t,
              a = (r + 1) * t;return e.slice(n, a);
        } }]), f(t, [{ key: "renderPager", value: function value() {
          var e = this;if (this.state.totalPage < 1) return null;var t = this.props.currentPage > 0 ? n.default.createElement("span", { className: "rfipicons__left", role: "button", tabIndex: 0, onKeyDown: function onKeyDown(t) {
              return e.handlePageKeyBoard(t, "prev");
            }, onClick: function onClick(t) {
              return e.handleChangePage(t, "prev");
            } }, n.default.createElement("span", { role: "presentation", className: "rfipicons__label", "aria-label": "Left" }, n.default.createElement("i", { className: "fipicon-angle-left" }))) : null,
              r = this.props.currentPage < this.state.totalPage - 1 ? n.default.createElement("span", { className: "rfipicons__right", role: "button", tabIndex: 0, onKeyDown: function onKeyDown(t) {
              return e.handlePageKeyBoard(t, "next");
            }, onClick: function onClick(t) {
              return e.handleChangePage(t, "next");
            } }, n.default.createElement("span", { role: "presentation", className: "rfipicons__label", "aria-label": "Right" }, n.default.createElement("i", { className: "fipicon-angle-right" }))) : null;return n.default.createElement("div", { className: "rfipicons__pager" }, n.default.createElement("div", { className: "rfipicons__num" }, n.default.createElement("input", { value: this.state.viewPage, onChange: this.handleChangePage, className: "rfipicons__cp", type: "tel", min: 1 }), n.default.createElement("span", { className: "rfipicons__sp" }, "/"), n.default.createElement("span", { className: "rfipicons__tp" }, this.state.totalPage)), n.default.createElement("div", { className: "rfipicons__arrow" }, t, r));
        } }, { key: "renderIconView", value: function value() {
          var e = this;return this.state.totalPage > 0 ? this.state.iconView.map(function (t, r) {
            var a = (0, o.default)("rfipicons__icon", { "rfipicons__icon--selected": e.props.value === t || Array.isArray(e.props.value) && e.props.value.includes(t) });return n.default.createElement("span", { className: a, key: t, title: e.state.titleView[r] }, n.default.createElement("span", { className: "rfipicons__ibox", tabIndex: 0, role: "button", onClick: function onClick() {
                return e.handleChangeValue(t);
              }, onKeyDown: function onKeyDown(r) {
                return e.handleValueKeyboard(r, t);
              } }, e.props.renderIcon(t)));
          }) : n.default.createElement("span", { className: "rfipicons__icon--error" }, n.default.createElement("span", { className: "rfipicons__ibox--error" }, this.props.noIconPlaceholder));
        } }, { key: "render", value: function value() {
          return n.default.createElement("div", { className: "rfipicons" }, this.renderPager(), n.default.createElement("div", { className: "rfipicons__selector" }, this.renderIconView()));
        } }]), t;
    }();Object.defineProperty(p, "propTypes", { configurable: !0, enumerable: !0, writable: !0, value: { categories: a.default.arrayOf(a.default.string), currentCategory: a.default.number, isMulti: a.default.bool.isRequired, icons: a.default.oneOfType([a.default.arrayOf(a.default.string), a.default.arrayOf(a.default.number), a.default.objectOf(a.default.oneOfType([a.default.arrayOf(a.default.number), a.default.arrayOf(a.default.string)]))]).isRequired, search: a.default.oneOfType([a.default.objectOf(a.default.arrayOf(a.default.string)), a.default.arrayOf(a.default.string)]), value: a.default.oneOfType([a.default.number, a.default.string, a.default.arrayOf(a.default.oneOfType([a.default.number, a.default.string]))]).isRequired, currentSearch: a.default.string.isRequired, handleChangeValue: a.default.func.isRequired, currentPage: a.default.number.isRequired, iconsPerPage: a.default.number.isRequired, handleChangePage: a.default.func.isRequired, renderIcon: a.default.func.isRequired, noIconPlaceholder: a.default.string.isRequired } }), Object.defineProperty(p, "defaultProps", { configurable: !0, enumerable: !0, writable: !0, value: { categories: null, currentCategory: null, search: null } });var h = p;t.default = h;
  }, function (e, t, r) {
    "use strict";
    Object.defineProperty(t, "__esModule", { value: !0 }), t.default = void 0;var n = o(r(1)),
        a = o(r(0));function o(e) {
      return e && e.__esModule ? e : { default: e };
    }var l = function l(e) {
      return n.default.createElement("div", { className: "rfipsearch" }, n.default.createElement("input", { type: "text", className: "rfipsearch__input", value: e.value, onChange: e.handleSearch, placeholder: e.placeholder }));
    };l.propTypes = { handleSearch: a.default.func.isRequired, value: a.default.string.isRequired, placeholder: a.default.string.isRequired };var i = l;t.default = i;
  }, function (e, t, r) {
    "use strict";
    Object.defineProperty(t, "__esModule", { value: !0 }), t.default = void 0;var n = o(r(1)),
        a = o(r(0));function o(e) {
      return e && e.__esModule ? e : { default: e };
    }function l(e) {
      return (l = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (e) {
        return typeof e === "undefined" ? "undefined" : _typeof(e);
      } : function (e) {
        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e === "undefined" ? "undefined" : _typeof(e);
      })(e);
    }function i(e, t) {
      for (var r = 0; r < t.length; r++) {
        var n = t[r];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
      }
    }var u = function (e) {
      function t() {
        return function (e, t) {
          if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
        }(this, t), function (e, t) {
          return !t || "object" !== l(t) && "function" != typeof t ? function (e) {
            if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e;
          }(e) : t;
        }(this, (t.__proto__ || Object.getPrototypeOf(t)).apply(this, arguments));
      }var r, a;return function (e, t) {
        if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function");e.prototype = Object.create(t && t.prototype, { constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 } }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
      }(t, n.default.PureComponent), r = t, (a = [{ key: "render", value: function value() {
          return n.default.createElement("div", { className: "rfipcategory" }, n.default.createElement("select", { className: "rfipcategory__select", onChange: this.props.handleCategory, value: this.props.value }, this.props.categories.map(function (e, t) {
            return n.default.createElement("option", { className: "rfipcategory__select__option", key: e, value: t }, e);
          })), n.default.createElement("i", { className: "fipicon-angle-down", role: "presentation", "aria-label": "Open" }));
        } }]) && i(r.prototype, a), t;
    }();Object.defineProperty(u, "propTypes", { configurable: !0, enumerable: !0, writable: !0, value: { handleCategory: a.default.func.isRequired, value: a.default.number.isRequired, categories: a.default.arrayOf(a.default.string).isRequired } });var c = u;t.default = c;
  }, function (e, t, r) {
    "use strict";
    Object.defineProperty(t, "__esModule", { value: !0 }), t.default = void 0;var n = c(r(1)),
        a = c(r(0)),
        o = c(r(10)),
        l = c(r(9)),
        i = c(r(8)),
        u = r(2);function c(e) {
      return e && e.__esModule ? e : { default: e };
    }function s(e) {
      return (s = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (e) {
        return typeof e === "undefined" ? "undefined" : _typeof(e);
      } : function (e) {
        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e === "undefined" ? "undefined" : _typeof(e);
      })(e);
    }function f(e, t) {
      for (var r = 0; r < t.length; r++) {
        var n = t[r];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
      }
    }function d(e, t, r) {
      return t && f(e.prototype, t), r && f(e, r), e;
    }function p(e) {
      if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e;
    }var h = function (e) {
      function t(e) {
        var r, n;return function (e, t) {
          if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
        }(this, t), this, n = (t.__proto__ || Object.getPrototypeOf(t)).call(this, e), r = !n || "object" !== s(n) && "function" != typeof n ? p(this) : n, Object.defineProperty(p(r), "handleCategory", { configurable: !0, enumerable: !0, writable: !0, value: function value(e) {
            var t = parseInt(e.target.value, 10);Number.isNaN(t) && (t = 0), r.props.handleChangeCategory(t), r.props.handleChangePage(0);
          } }), Object.defineProperty(p(r), "handleSearch", { configurable: !0, enumerable: !0, writable: !0, value: function value(e) {
            var t = e.target.value;r.props.handleChangeSearch(t);
          } }), r.state = {}, r;
      }return function (e, t) {
        if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function");e.prototype = Object.create(t && t.prototype, { constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 } }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
      }(t, n.default.PureComponent), d(t, null, [{ key: "getDerivedStateFromProps", value: function value(e) {
          var t = (0, u.getPossibleCategories)(e.icons);return null !== t && (t = [e.allCatPlaceholder].concat(function (e) {
            return function (e) {
              if (Array.isArray(e)) {
                for (var t = 0, r = new Array(e.length); t < e.length; t++) {
                  r[t] = e[t];
                }return r;
              }
            }(e) || function (e) {
              if (Symbol.iterator in Object(e) || "[object Arguments]" === Object.prototype.toString.call(e)) return Array.from(e);
            }(e) || function () {
              throw new TypeError("Invalid attempt to spread non-iterable instance");
            }();
          }(t))), { categories: t, searchString: e.currentSearch };
        } }]), d(t, [{ key: "render", value: function value() {
          return n.default.createElement("div", { className: "rfipdropdown__selector" }, this.props.showSearch ? n.default.createElement(l.default, { handleSearch: this.handleSearch, value: this.state.searchString, placeholder: this.props.searchPlaceholder }) : null, this.props.showCategory && this.state.categories && this.state.categories.length ? n.default.createElement(o.default, { handleCategory: this.handleCategory, value: this.props.currentCategory, categories: this.state.categories }) : null, n.default.createElement(i.default, { categories: this.state.categories, currentCategory: this.props.currentCategory, isMulti: this.props.isMulti, icons: this.props.icons, search: this.props.search, value: this.props.value, currentSearch: this.props.currentSearch, handleChangeValue: this.props.handleChangeValue, currentPage: this.props.currentPage, iconsPerPage: this.props.iconsPerPage, handleChangePage: this.props.handleChangePage, renderIcon: this.props.renderIcon, noIconPlaceholder: this.props.noIconPlaceholder }));
        } }]), t;
    }();Object.defineProperty(h, "propTypes", { configurable: !0, enumerable: !0, writable: !0, value: { isMulti: a.default.bool.isRequired, value: a.default.oneOfType([a.default.number, a.default.string, a.default.arrayOf(a.default.any)]).isRequired, currentCategory: a.default.number.isRequired, currentPage: a.default.number.isRequired, currentSearch: a.default.string.isRequired, icons: a.default.oneOfType([a.default.arrayOf(a.default.number), a.default.arrayOf(a.default.string), a.default.objectOf(a.default.oneOfType([a.default.arrayOf(a.default.number), a.default.arrayOf(a.default.string)]))]).isRequired, search: a.default.oneOfType([a.default.object, a.default.arrayOf(a.default.string)]), showCategory: a.default.bool.isRequired, showSearch: a.default.bool.isRequired, iconsPerPage: a.default.number.isRequired, allCatPlaceholder: a.default.string.isRequired, searchPlaceholder: a.default.string.isRequired, noIconPlaceholder: a.default.string.isRequired, renderIcon: a.default.func.isRequired, handleChangeValue: a.default.func.isRequired, handleChangeCategory: a.default.func.isRequired, handleChangePage: a.default.func.isRequired, handleChangeSearch: a.default.func.isRequired } }), Object.defineProperty(h, "defaultProps", { configurable: !0, enumerable: !0, writable: !0, value: { search: null } });var y = h;t.default = y;
  }, function (e, t, r) {
    "use strict";
    Object.defineProperty(t, "__esModule", { value: !0 }), t.default = void 0;var n = l(r(1)),
        a = l(r(0)),
        o = l(r(3));function l(e) {
      return e && e.__esModule ? e : { default: e };
    }function i(e) {
      return (i = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (e) {
        return typeof e === "undefined" ? "undefined" : _typeof(e);
      } : function (e) {
        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e === "undefined" ? "undefined" : _typeof(e);
      })(e);
    }function u() {
      return (u = Object.assign || function (e) {
        for (var t = 1; t < arguments.length; t++) {
          var r = arguments[t];for (var n in r) {
            Object.prototype.hasOwnProperty.call(r, n) && (e[n] = r[n]);
          }
        }return e;
      }).apply(this, arguments);
    }function c(e, t) {
      for (var r = 0; r < t.length; r++) {
        var n = t[r];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
      }
    }function s(e, t) {
      return !t || "object" !== i(t) && "function" != typeof t ? f(e) : t;
    }function f(e) {
      if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e;
    }var d = function (e) {
      function t() {
        var e, r, a;!function (e, t) {
          if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
        }(this, t);for (var o = arguments.length, l = new Array(o), i = 0; i < o; i++) {
          l[i] = arguments[i];
        }return s(a, (r = a = s(this, (e = t.__proto__ || Object.getPrototypeOf(t)).call.apply(e, [this].concat(l))), Object.defineProperty(f(a), "handleClick", { configurable: !0, enumerable: !0, writable: !0, value: function value() {
            a.props.onClick();
          } }), Object.defineProperty(f(a), "handleKeyDown", { configurable: !0, enumerable: !0, writable: !0, value: function value(e) {
            32 !== e.keyCode && 13 !== e.keyCode || a.props.onClick();
          } }), Object.defineProperty(f(a), "handleDelete", { configurable: !0, enumerable: !0, writable: !0, value: function value(e, t) {
            e.stopPropagation(), a.props.handleDeleteValue(t);
          } }), Object.defineProperty(f(a), "handleDeleteKeyboard", { configurable: !0, enumerable: !0, writable: !0, value: function value(e, t) {
            32 !== e.keyCode && 13 !== e.keyCode || a.props.handleDeleteValue(t);
          } }), Object.defineProperty(f(a), "renderEmptyIcon", { configurable: !0, enumerable: !0, writable: !0, value: function value() {
            return n.default.createElement("span", { className: "rfipbtn__icon--empty" }, a.props.noSelectedPlaceholder);
          } }), r));
      }var r, a;return function (e, t) {
        if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function");e.prototype = Object.create(t && t.prototype, { constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 } }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
      }(t, n.default.PureComponent), r = t, (a = [{ key: "renderIcon", value: function value(e) {
          var t = this;return "" === e || null === e || void 0 === e ? this.renderEmptyIcon() : n.default.createElement("span", { className: "rfipbtn__icon", key: e }, n.default.createElement("span", { className: "rfipbtn__elm" }, this.props.renderIcon(e)), n.default.createElement("span", { className: "rfipbtn__del", onClick: function onClick(r) {
              return t.handleDelete(r, e);
            }, onKeyDown: function onKeyDown(r) {
              return t.handleDeleteKeyboard(r, e);
            }, tabIndex: 0, role: "button" }, "×"));
        } }, { key: "renderCurrentIcons", value: function value() {
          var e = this;return this.props.isMulti ? this.props.value.length ? this.props.value.map(function (t) {
            return e.renderIcon(t);
          }) : this.renderEmptyIcon() : this.renderIcon(this.props.value);
        } }, { key: "render", value: function value() {
          var e = { onClick: this.handleClick, onKeyDown: this.handleKeyDown, onFocus: this.handleFocus, onBlur: this.handleBlur, tabIndex: 0 },
              t = (0, o.default)("rfipbtn__button", "rfipbtn__button--".concat(this.props.isOpen ? "open" : "close")),
              r = (0, o.default)(this.props.className);return n.default.createElement("div", u({ className: r, ref: this.props.domRef }, e), n.default.createElement("div", { className: "rfipbtn__current" }, this.renderCurrentIcons()), n.default.createElement("div", { className: t }, n.default.createElement("i", { className: "fipicon-angle-down", role: "presentation", "aria-label": "Open" })));
        } }]) && c(r.prototype, a), t;
    }();Object.defineProperty(d, "propTypes", { configurable: !0, enumerable: !0, writable: !0, value: { className: a.default.string.isRequired, isOpen: a.default.bool.isRequired, onClick: a.default.func.isRequired, domRef: a.default.object.isRequired, isMulti: a.default.bool.isRequired, value: a.default.oneOfType([a.default.number, a.default.string, a.default.arrayOf(a.default.oneOfType([a.default.number, a.default.string]))]).isRequired, renderIcon: a.default.func.isRequired, handleDeleteValue: a.default.func.isRequired, noSelectedPlaceholder: a.default.string.isRequired } });var p = d;t.default = p;
  }, function (e, t) {
    e.exports = a;
  }, function (e, t, r) {
    "use strict";
    Object.defineProperty(t, "__esModule", { value: !0 }), t.default = void 0;var n = f(r(1)),
        a = f(r(0)),
        o = f(r(3)),
        l = r(13),
        i = f(r(12)),
        u = f(r(11)),
        c = f(r(7)),
        s = r(2);function f(e) {
      return e && e.__esModule ? e : { default: e };
    }function d(e) {
      return (d = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (e) {
        return typeof e === "undefined" ? "undefined" : _typeof(e);
      } : function (e) {
        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e === "undefined" ? "undefined" : _typeof(e);
      })(e);
    }function p(e) {
      return function (e) {
        if (Array.isArray(e)) {
          for (var t = 0, r = new Array(e.length); t < e.length; t++) {
            r[t] = e[t];
          }return r;
        }
      }(e) || function (e) {
        if (Symbol.iterator in Object(e) || "[object Arguments]" === Object.prototype.toString.call(e)) return Array.from(e);
      }(e) || function () {
        throw new TypeError("Invalid attempt to spread non-iterable instance");
      }();
    }function h(e, t, r) {
      return t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
    }function y(e, t) {
      for (var r = 0; r < t.length; r++) {
        var n = t[r];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
      }
    }function b(e, t, r) {
      return t && y(e.prototype, t), r && y(e, r), e;
    }function g(e) {
      if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e;
    }var m = [],
        v = "",
        P = function (e) {
      function t(e) {
        var r, a;return function (e, t) {
          if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
        }(this, t), this, a = (t.__proto__ || Object.getPrototypeOf(t)).call(this, e), r = !a || "object" !== d(a) && "function" != typeof a ? g(this) : a, Object.defineProperty(g(r), "handleOuterClick", { configurable: !0, enumerable: !0, writable: !0, value: function value(e) {
            var t = e.target;r.isClickWithin(t) || r.closeDropdown();
          } }), Object.defineProperty(g(r), "handleEscapeKeyboard", { configurable: !0, enumerable: !0, writable: !0, value: function value(e) {
            27 === e.keyCode && r.closeDropdown();
          } }), Object.defineProperty(g(r), "isClickWithin", { configurable: !0, enumerable: !0, writable: !0, value: function value(e) {
            return r.fipButtonRef.current.contains(e) || r.fipDropDownRef.current && r.fipDropDownRef.current.contains(e);
          } }), Object.defineProperty(g(r), "handleToggle", { configurable: !0, enumerable: !0, writable: !0, value: function value() {
            r.setState(function (e) {
              return r.handleDropDown(!e.isOpen, !1);
            });
          } }), Object.defineProperty(g(r), "closeDropdown", { configurable: !0, enumerable: !0, writable: !0, value: function value() {
            r.handleDropDown(!1);
          } }), Object.defineProperty(g(r), "handleDropDown", { configurable: !0, enumerable: !0, writable: !0, value: function value(e) {
            var n = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
                a = { isOpen: e };return a.elemClass = t.getDerivedClassName("rfip", r.props.theme, r.props.isMulti, e), a.btnClass = t.getDerivedClassName("rfipbtn", r.props.theme, r.props.isMulti, e), a.ddClass = t.getDerivedClassName("rfipdropdown", r.props.theme, r.props.isMulti, e), n && r.setState(a), a;
          } }), Object.defineProperty(g(r), "handleChangeValue", { configurable: !0, enumerable: !0, writable: !0, value: function value(e) {
            var t;r.props.isMulti ? (t = p(r.state.value)).includes(e) ? (t = t.filter(function (t) {
              return t !== e;
            })).length || (t = m) : t.push(e) : t = e === r.state.value ? v : e, r.setState({ value: t, isOpen: !r.props.closeOnSelect }), r.props.onChange(t);
          } }), Object.defineProperty(g(r), "handleDeleteValue", { configurable: !0, enumerable: !0, writable: !0, value: function value(e) {
            var n;n = r.props.isMulti ? r.state.value.filter(function (t) {
              return t !== e;
            }) : t.getDerivedValue(n, r.props.isMulti), r.setState({ value: n }), r.props.onChange(n);
          } }), Object.defineProperty(g(r), "handleChangePage", { configurable: !0, enumerable: !0, writable: !0, value: function value(e) {
            r.setState({ currentPage: e });
          } }), Object.defineProperty(g(r), "handleChangeCategory", { configurable: !0, enumerable: !0, writable: !0, value: function value(e) {
            r.setState({ currentCategory: e, currentPage: 0 });
          } }), Object.defineProperty(g(r), "handleChangeSearch", { configurable: !0, enumerable: !0, writable: !0, value: function value(e) {
            r.setState({ currentSearch: e, currentPage: 0 });
          } }), Object.defineProperty(g(r), "resetPortalStyle", { configurable: !0, enumerable: !0, writable: !0, value: function value(e) {
            ["maxHeight", "paddingTop", "paddingBottom"].forEach(function (t) {
              e.style[t] = null;
            });
          } }), Object.defineProperty(g(r), "handlePortalEnter", { configurable: !0, enumerable: !0, writable: !0, value: function value(e) {
            var t = e.childNodes[0];r.resetPortalStyle(t);var n = getComputedStyle(t);r.fipPortalComputedStyle = { height: n.height, paddingTop: n.paddingTop, paddingBottom: n.paddingBottom }, ["maxHeight", "paddingTop", "paddingBottom"].forEach(function (e) {
              t.style[e] = "0px";
            });
          } }), Object.defineProperty(g(r), "handlePortalEntering", { configurable: !0, enumerable: !0, writable: !0, value: function value(e) {
            var t = e.childNodes[0];t.style.maxHeight = r.fipPortalComputedStyle.height, t.style.paddingTop = r.fipPortalComputedStyle.paddingTop, t.style.paddingBottom = r.fipPortalComputedStyle.paddingBottom;
          } }), Object.defineProperty(g(r), "handlePortalEntered", { configurable: !0, enumerable: !0, writable: !0, value: function value(e) {
            var t = e.childNodes[0];r.resetPortalStyle(t), r.props.showSearch && void 0 === window.orientation && -1 === navigator.userAgent.indexOf("IEMobile") && t.querySelector(".rfipsearch__input").focus();
          } }), Object.defineProperty(g(r), "handlePortalExit", { configurable: !0, enumerable: !0, writable: !0, value: function value(e) {
            var t = e.childNodes[0];r.resetPortalStyle(t);var n = getComputedStyle(t).height;t.style.maxHeight = n;
          } }), Object.defineProperty(g(r), "handlePortalExiting", { configurable: !0, enumerable: !0, writable: !0, value: function value(e) {
            var t = e.childNodes[0];t.style.maxHeight = "0px", t.style.paddingTop = "0px", t.style.paddingBottom = "0px";
          } }), Object.defineProperty(g(r), "renderIcon", { configurable: !0, enumerable: !0, writable: !0, value: function value(e) {
            if ("function" == typeof r.props.renderFunc) return r.props.renderFunc(e);if ("class" === r.props.renderUsing) return n.default.createElement("i", { className: e });var t = h({}, r.props.renderUsing, r.props.convertHex ? (0, s.convertToHex)(e) : e);return n.default.createElement("i", t);
          } }), r.fipButtonRef = n.default.createRef(), r.fipDropDownRef = n.default.createRef(), r.state = { currentCategory: 0, currentPage: 0, isOpen: !1, currentSearch: "" }, r.fipPortalComputedStyle = null, r;
      }return function (e, t) {
        if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function");e.prototype = Object.create(t && t.prototype, { constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 } }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
      }(t, n.default.PureComponent), b(t, null, [{ key: "getDerivedStateFromProps", value: function value(e, r) {
          var n = {};return n.elemClass = t.getDerivedClassName("rfip", e.theme, e.isMulti, r.isOpen), n.btnClass = t.getDerivedClassName("rfipbtn", e.theme, e.isMulti, r.isOpen), n.ddClass = t.getDerivedClassName("rfipdropdown", e.theme, e.isMulti, r.isOpen), n.value = t.getDerivedValue(e.value, e.isMulti), e.showCategory || (n.currentCategory = 0, n.currentPage = 0), e.showSearch || (n.currentSearch = "", n.currentPage = 0), n;
        } }, { key: "getDerivedClassName", value: function value(e, t, r, n) {
          return (0, o.default)(e, "".concat(e, "--").concat(t), h({}, "".concat(e, "--multi"), r), "".concat(e, "--").concat(n ? "open" : "close"));
        } }, { key: "getDerivedValue", value: function value(e, t) {
          var r = e;return t ? r = Array.isArray(e) ? p(e) : m : "number" != typeof e && "string" != typeof e && (r = v), r;
        } }]), b(t, [{ key: "componentDidMount", value: function value() {
          var e = this;["click"].forEach(function (t) {
            document.addEventListener(t, e.handleOuterClick, !1);
          }), document.addEventListener("keydown", this.handleEscapeKeyboard, !1), this.props.onChange(this.state.value);
        } }, { key: "componentWillUnmount", value: function value() {
          var e = this;["click"].forEach(function (t) {
            document.removeEventListener(t, e.handleOuterClick, !1);
          }), document.removeEventListener("keydown", this.handleEscapeKeyboard, !1);
        } }, { key: "render", value: function value() {
          var e = { currentCategory: this.state.currentCategory, currentPage: this.state.currentPage, currentSearch: this.state.currentSearch, value: this.state.value, isMulti: this.props.isMulti, icons: this.props.icons, search: this.props.search, showCategory: this.props.showCategory, showSearch: this.props.showSearch, iconsPerPage: this.props.iconsPerPage, allCatPlaceholder: this.props.allCatPlaceholder, searchPlaceholder: this.props.searchPlaceholder, noIconPlaceholder: this.props.noIconPlaceholder, renderIcon: this.renderIcon, handleChangeValue: this.handleChangeValue, handleChangeCategory: this.handleChangeCategory, handleChangePage: this.handleChangePage, handleChangeSearch: this.handleChangeSearch };return n.default.createElement("div", { className: this.state.elemClass, ref: this.fipRef }, n.default.createElement(i.default, { className: this.state.btnClass, isOpen: this.state.isOpen, onClick: this.handleToggle, domRef: this.fipButtonRef, isMulti: this.props.isMulti, value: this.state.value, renderIcon: this.renderIcon, handleDeleteValue: this.handleDeleteValue, noSelectedPlaceholder: this.props.noSelectedPlaceholder }), n.default.createElement(l.CSSTransition, { classNames: "fipappear", timeout: 300, in: this.state.isOpen, unmountOnExit: !0, onEnter: this.handlePortalEnter, onEntering: this.handlePortalEntering, onEntered: this.handlePortalEntered, onExit: this.handlePortalExit, onExiting: this.handlePortalExiting }, n.default.createElement(c.default, { appendRoot: this.props.appendTo, domRef: this.fipDropDownRef, btnRef: this.fipButtonRef, className: this.state.ddClass }, n.default.createElement(u.default, e))));
        } }]), t;
    }();Object.defineProperty(P, "propTypes", { configurable: !0, enumerable: !0, writable: !0, value: { icons: a.default.oneOfType([a.default.arrayOf(a.default.string), a.default.arrayOf(a.default.number), a.default.objectOf(a.default.oneOfType([a.default.arrayOf(a.default.number), a.default.arrayOf(a.default.string)]))]).isRequired, search: a.default.oneOfType([a.default.objectOf(a.default.arrayOf(a.default.string)), a.default.arrayOf(a.default.string)]), iconsPerPage: a.default.number, theme: a.default.string, onChange: a.default.func.isRequired, showCategory: a.default.bool, showSearch: a.default.bool, value: a.default.oneOfType([a.default.arrayOf(a.default.string), a.default.arrayOf(a.default.number), a.default.number, a.default.string]), isMulti: a.default.bool, renderUsing: a.default.string, convertHex: a.default.bool, renderFunc: a.default.func, appendTo: a.default.oneOfType([a.default.bool, a.default.string]), allCatPlaceholder: a.default.string, searchPlaceholder: a.default.string, noIconPlaceholder: a.default.string, noSelectedPlaceholder: a.default.string, closeOnSelect: a.default.bool } }), Object.defineProperty(P, "defaultProps", { configurable: !0, enumerable: !0, writable: !0, value: { search: null, iconsPerPage: 20, theme: "default", showCategory: !0, showSearch: !0, value: null, isMulti: !1, renderUsing: "class", convertHex: !0, renderFunc: null, appendTo: !1, allCatPlaceholder: "Show from all", searchPlaceholder: "Search Icons", noIconPlaceholder: "No icons found", noSelectedPlaceholder: "Select icon", closeOnSelect: !1 } }), Object.defineProperty(P, "displayName", { configurable: !0, enumerable: !0, writable: !0, value: "FontIconPicker" });var O = P;t.default = O;
  }, function (e, t, r) {
    "use strict";
    var n;Object.defineProperty(t, "__esModule", { value: !0 }), t.default = void 0;var a = ((n = r(14)) && n.__esModule ? n : { default: n }).default;t.default = a;
  }]).default;
});
//# sourceMappingURL=fonticonpicker.react.js.map
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(49)(module)))

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var global = __webpack_require__(20);
var core = __webpack_require__(13);
var ctx = __webpack_require__(117);
var hide = __webpack_require__(33);
var has = __webpack_require__(28);
var PROTOTYPE = 'prototype';

var $export = function $export(type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var IS_WRAP = type & $export.W;
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE];
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
  var key, own, out;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    if (own && has(exports, key)) continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? function (C) {
      var F = function F(a, b, c) {
        if (this instanceof C) {
          switch (arguments.length) {
            case 0:
              return new C();
            case 1:
              return new C(a);
            case 2:
              return new C(a, b);
          }return new C(a, b, c);
        }return C.apply(this, arguments);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
      // make static versions for prototype methods
    }(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
    if (IS_PROTO) {
      (exports.virtual || (exports.virtual = {}))[key] = out;
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
    }
  }
};
// type bitmap
$export.F = 1; // forced
$export.G = 2; // global
$export.S = 4; // static
$export.P = 8; // proto
$export.B = 16; // bind
$export.W = 32; // wrap
$export.U = 64; // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var anObject = __webpack_require__(41);
var IE8_DOM_DEFINE = __webpack_require__(118);
var toPrimitive = __webpack_require__(72);
var dP = Object.defineProperty;

exports.f = __webpack_require__(27) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) {/* empty */}
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__(35)(function () {
  return Object.defineProperty({}, 'a', { get: function get() {
      return 7;
    } }).a != 7;
});

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var baseIsNative = __webpack_require__(141),
    getValue = __webpack_require__(144);

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

module.exports = getNative;

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = PremiumFilters;

var _singleRangeControl = __webpack_require__(3);

var _singleRangeControl2 = _interopRequireDefault(_singleRangeControl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __ = wp.i18n.__;
var Fragment = wp.element.Fragment;
var _wp$components = wp.components,
    Dropdown = _wp$components.Dropdown,
    Button = _wp$components.Button;
function PremiumFilters(props) {
    var label = props.label,
        blur = props.blur,
        bright = props.bright,
        contrast = props.contrast,
        saturation = props.saturation,
        hue = props.hue,
        _props$onChangeBlur = props.onChangeBlur,
        onChangeBlur = _props$onChangeBlur === undefined ? function () {} : _props$onChangeBlur,
        _props$onChangeBright = props.onChangeBright,
        onChangeBright = _props$onChangeBright === undefined ? function () {} : _props$onChangeBright,
        _props$onChangeContra = props.onChangeContrast,
        onChangeContrast = _props$onChangeContra === undefined ? function () {} : _props$onChangeContra,
        _props$onChangeSat = props.onChangeSat,
        onChangeSat = _props$onChangeSat === undefined ? function () {} : _props$onChangeSat,
        _props$onChangeHue = props.onChangeHue,
        onChangeHue = _props$onChangeHue === undefined ? function () {} : _props$onChangeHue;


    return React.createElement(
        "div",
        { className: "premium-control-toggle" },
        React.createElement(
            "strong",
            null,
            __(label || "CSS Filters")
        ),
        React.createElement(Dropdown, {
            className: "premium-control-toggle-btn",
            contentClassName: "premium-control-toggle-content",
            position: "bottom right",
            renderToggle: function renderToggle(_ref) {
                var isOpen = _ref.isOpen,
                    onToggle = _ref.onToggle;
                return React.createElement(
                    Button,
                    { isSmall: true, onClick: onToggle, "aria-expanded": isOpen },
                    React.createElement("i", { className: "dashicons dashicons-edit" })
                );
            },
            renderContent: function renderContent() {
                return React.createElement(
                    Fragment,
                    null,
                    React.createElement(_singleRangeControl2.default, {
                        label: __("Blur"),
                        value: blur,
                        onChange: onChangeBlur,
                        showUnit: false,
                        defaultValue: 0
                    }),
                    React.createElement(_singleRangeControl2.default, {
                        label: __("Brightness"),
                        min: "0",
                        max: "200",
                        value: bright,
                        onChange: onChangeBright,
                        showUnit: false,
                        defaultValue: 100
                    }),
                    React.createElement(_singleRangeControl2.default, {
                        label: __("Contrast"),
                        min: "0",
                        max: "200",
                        value: contrast,
                        onChange: onChangeContrast,
                        showUnit: false,
                        defaultValue: 100
                    }),
                    React.createElement(_singleRangeControl2.default, {
                        label: __("Saturation"),
                        min: "0",
                        max: "200",
                        value: saturation,
                        onChange: onChangeSat,
                        showUnit: false,
                        defaultValue: 100
                    }),
                    React.createElement(_singleRangeControl2.default, {
                        label: __("Hue"),
                        min: "0",
                        max: "360",
                        value: hue,
                        onChange: onChangeHue,
                        showUnit: false,
                        defaultValue: 0
                    })
                );
            }
        })
    );
}

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
        value: true
});
var iconsList = {
        Dashicons: ["", "dashicons dashicons-menu", "dashicons dashicons-admin-site", "dashicons dashicons-dashboard", "dashicons dashicons-admin-post", "dashicons dashicons-admin-media", "dashicons dashicons-admin-links", "dashicons dashicons-admin-page", "dashicons dashicons-admin-comments", "dashicons dashicons-admin-appearance", "dashicons dashicons-admin-plugins", "dashicons dashicons-admin-users", "dashicons dashicons-admin-tools", "dashicons dashicons-admin-settings", "dashicons dashicons-admin-network", "dashicons dashicons-admin-home", "dashicons dashicons-admin-generic", "dashicons dashicons-admin-collapse", "dashicons dashicons-filter", "dashicons dashicons-admin-customizer", "dashicons dashicons-admin-multisite", "dashicons dashicons-welcome-write-blog", "dashicons dashicons-welcome-add-page", "dashicons dashicons-welcome-view-site", "dashicons dashicons-welcome-widgets-menus", "dashicons dashicons-welcome-comments", "dashicons dashicons-welcome-learn-more", "dashicons dashicons-format-aside", "dashicons dashicons-format-image", "dashicons dashicons-format-gallery", "dashicons dashicons-format-video", "dashicons dashicons-format-status", "dashicons dashicons-format-quote", "dashicons dashicons-format-chat", "dashicons dashicons-format-audio", "dashicons dashicons-camera", "dashicons dashicons-images-alt", "dashicons dashicons-images-alt2", "dashicons dashicons-video-alt", "dashicons dashicons-video-alt2", "dashicons dashicons-video-alt3", "dashicons dashicons-media-archive", "dashicons dashicons-media-audio", "dashicons dashicons-media-code", "dashicons dashicons-media-default", "dashicons dashicons-media-document", "dashicons dashicons-media-interactive", "dashicons dashicons-media-spreadsheet", "dashicons dashicons-media-text", "dashicons dashicons-media-video", "dashicons dashicons-playlist-audio", "dashicons dashicons-playlist-video", "dashicons dashicons-controls-play", "dashicons dashicons-controls-pause", "dashicons dashicons-controls-forward", "dashicons dashicons-controls-skipforward", "dashicons dashicons-controls-back", "dashicons dashicons-controls-skipback", "dashicons dashicons-controls-repeat", "dashicons dashicons-controls-volumeon", "dashicons dashicons-controls-volumeoff", "dashicons dashicons-image-crop", "dashicons dashicons-image-rotate", "dashicons dashicons-image-rotate-left", "dashicons dashicons-image-rotate-right", "dashicons dashicons-image-flip-vertical", "dashicons dashicons-image-flip-horizontal", "dashicons dashicons-image-filter", "dashicons dashicons-undo", "dashicons dashicons-redo", "dashicons dashicons-editor-bold", "dashicons dashicons-editor-italic", "dashicons dashicons-editor-ul", "dashicons dashicons-editor-ol", "dashicons dashicons-editor-quote", "dashicons dashicons-editor-alignleft", "dashicons dashicons-editor-aligncenter", "dashicons dashicons-editor-alignright", "dashicons dashicons-editor-insertmore", "dashicons dashicons-editor-spellcheck", "dashicons dashicons-editor-expand", "dashicons dashicons-editor-contract", "dashicons dashicons-editor-kitchensink", "dashicons dashicons-editor-underline", "dashicons dashicons-editor-justify", "dashicons dashicons-editor-textcolor", "dashicons dashicons-editor-paste-word", "dashicons dashicons-editor-paste-text", "dashicons dashicons-editor-removeformatting", "dashicons dashicons-editor-video", "dashicons dashicons-editor-customchar", "dashicons dashicons-editor-outdent", "dashicons dashicons-editor-indent", "dashicons dashicons-editor-help", "dashicons dashicons-editor-strikethrough", "dashicons dashicons-editor-unlink", "dashicons dashicons-editor-rtl", "dashicons dashicons-editor-break", "dashicons dashicons-editor-code", "dashicons dashicons-editor-paragraph", "dashicons dashicons-editor-table", "dashicons dashicons-align-left", "dashicons dashicons-align-right", "dashicons dashicons-align-center", "dashicons dashicons-align-none", "dashicons dashicons-lock", "dashicons dashicons-unlock", "dashicons dashicons-calendar", "dashicons dashicons-calendar-alt", "dashicons dashicons-visibility", "dashicons dashicons-hidden", "dashicons dashicons-post-status", "dashicons dashicons-edit", "dashicons dashicons-trash", "dashicons dashicons-sticky", "dashicons dashicons-external", "dashicons dashicons-arrow-up", "dashicons dashicons-arrow-down", "dashicons dashicons-arrow-right", "dashicons dashicons-arrow-left", "dashicons dashicons-arrow-up-alt", "dashicons dashicons-arrow-down-alt", "dashicons dashicons-arrow-right-alt", "dashicons dashicons-arrow-left-alt", "dashicons dashicons-arrow-up-alt2", "dashicons dashicons-arrow-down-alt2", "dashicons dashicons-arrow-right-alt2", "dashicons dashicons-arrow-left-alt2", "dashicons dashicons-sort", "dashicons dashicons-leftright", "dashicons dashicons-randomize", "dashicons dashicons-list-view", "dashicons dashicons-exerpt-view", "dashicons dashicons-grid-view", "dashicons dashicons-move", "dashicons dashicons-share", "dashicons dashicons-share-alt", "dashicons dashicons-share-alt2", "dashicons dashicons-twitter", "dashicons dashicons-rss", "dashicons dashicons-email", "dashicons dashicons-email-alt", "dashicons dashicons-facebook", "dashicons dashicons-facebook-alt", "dashicons dashicons-googleplus", "dashicons dashicons-networking", "dashicons dashicons-hammer", "dashicons dashicons-art", "dashicons dashicons-migrate", "dashicons dashicons-performance", "dashicons dashicons-universal-access", "dashicons dashicons-universal-access-alt", "dashicons dashicons-tickets", "dashicons dashicons-nametag", "dashicons dashicons-clipboard", "dashicons dashicons-heart", "dashicons dashicons-megaphone", "dashicons dashicons-schedule", "dashicons dashicons-wordpress", "dashicons dashicons-wordpress-alt", "dashicons dashicons-pressthis", "dashicons dashicons-update", "dashicons dashicons-screenoptions", "dashicons dashicons-info", "dashicons dashicons-cart", "dashicons dashicons-feedback", "dashicons dashicons-cloud", "dashicons dashicons-translation", "dashicons dashicons-tag", "dashicons dashicons-category", "dashicons dashicons-archive", "dashicons dashicons-tagcloud", "dashicons dashicons-text", "dashicons dashicons-yes", "dashicons dashicons-no", "dashicons dashicons-no-alt", "dashicons dashicons-plus", "dashicons dashicons-plus-alt", "dashicons dashicons-minus", "dashicons dashicons-dismiss", "dashicons dashicons-marker", "dashicons dashicons-star-filled", "dashicons dashicons-star-half", "dashicons dashicons-star-empty", "dashicons dashicons-flag", "dashicons dashicons-warning", "dashicons dashicons-location", "dashicons dashicons-location-alt", "dashicons dashicons-vault", "dashicons dashicons-shield", "dashicons dashicons-shield-alt", "dashicons dashicons-sos", "dashicons dashicons-search", "dashicons dashicons-slides", "dashicons dashicons-analytics", "dashicons dashicons-chart-pie", "dashicons dashicons-chart-bar", "dashicons dashicons-chart-line", "dashicons dashicons-chart-area", "dashicons dashicons-groups", "dashicons dashicons-businessman", "dashicons dashicons-id", "dashicons dashicons-id-alt", "dashicons dashicons-products", "dashicons dashicons-awards", "dashicons dashicons-forms", "dashicons dashicons-testimonial", "dashicons dashicons-portfolio", "dashicons dashicons-book", "dashicons dashicons-book-alt", "dashicons dashicons-download", "dashicons dashicons-upload", "dashicons dashicons-backup", "dashicons dashicons-clock", "dashicons dashicons-lightbulb", "dashicons dashicons-microphone", "dashicons dashicons-desktop", "dashicons dashicons-laptop", "dashicons dashicons-tablet", "dashicons dashicons-smartphone", "dashicons dashicons-phone", "dashicons dashicons-index-card", "dashicons dashicons-carrot", "dashicons dashicons-building", "dashicons dashicons-store", "dashicons dashicons-album", "dashicons dashicons-palmtree", "dashicons dashicons-tickets-alt", "dashicons dashicons-money", "dashicons dashicons-smiley", "dashicons dashicons-thumbs-up", "dashicons dashicons-thumbs-down", "dashicons dashicons-layout", "dashicons dashicons-paperclip"],
        "Font Awesome Icons": ["fa fa-glass", "fa fa-music", "fa fa-search", "fa fa-envelope-o", "fa fa-heart", "fa fa-star", "fa fa-star-o", "fa fa-user", "fa fa-film", "fa fa-th-large", "fa fa-th", "fa fa-th-list", "fa fa-check", "fa fa-times", "fa fa-search-plus", "fa fa-search-minus", "fa fa-power-off", "fa fa-signal", "fa fa-cog", "fa fa-trash-o", "fa fa-home", "fa fa-file-o", "fa fa-clock-o", "fa fa-road", "fa fa-download", "fa fa-arrow-circle-o-down", "fa fa-arrow-circle-o-up", "fa fa-inbox", "fa fa-play-circle-o", "fa fa-repeat", "fa fa-refresh", "fa fa-list-alt", "fa fa-lock", "fa fa-flag", "fa fa-headphones", "fa fa-volume-off", "fa fa-volume-down", "fa fa-volume-up", "fa fa-qrcode", "fa fa-barcode", "fa fa-tag", "fa fa-tags", "fa fa-book", "fa fa-bookmark", "fa fa-print", "fa fa-camera", "fa fa-font", "fa fa-bold", "fa fa-italic", "fa fa-text-height", "fa fa-text-width", "fa fa-align-left", "fa fa-align-center", "fa fa-align-right", "fa fa-align-justify", "fa fa-list", "fa fa-outdent", "fa fa-indent", "fa fa-video-camera", "fa fa-picture-o", "fa fa-pencil", "fa fa-map-marker", "fa fa-adjust", "fa fa-tint", "fa fa-pencil-square-o", "fa fa-share-square-o", "fa fa-check-square-o", "fa fa-arrows", "fa fa-step-backward", "fa fa-fast-backward", "fa fa-backward", "fa fa-play", "fa fa-pause", "fa fa-stop", "fa fa-forward", "fa fa-fast-forward", "fa fa-step-forward", "fa fa-eject", "fa fa-chevron-left", "fa fa-chevron-right", "fa fa-plus-circle", "fa fa-minus-circle", "fa fa-times-circle", "fa fa-check-circle", "fa fa-question-circle", "fa fa-info-circle", "fa fa-crosshairs", "fa fa-times-circle-o", "fa fa-check-circle-o", "fa fa-ban", "fa fa-arrow-left", "fa fa-arrow-right", "fa fa-arrow-up", "fa fa-arrow-down", "fa fa-share", "fa fa-expand", "fa fa-compress", "fa fa-plus", "fa fa-minus", "fa fa-asterisk", "fa fa-exclamation-circle", "fa fa-gift", "fa fa-leaf", "fa fa-fire", "fa fa-eye", "fa fa-eye-slash", "fa fa-exclamation-triangle", "fa fa-plane", "fa fa-calendar", "fa fa-random", "fa fa-comment", "fa fa-magnet", "fa fa-chevron-up", "fa fa-chevron-down", "fa fa-retweet", "fa fa-shopping-cart", "fa fa-folder", "fa fa-folder-open", "fa fa-arrows-v", "fa fa-arrows-h", "fa fa-bar-chart", "fa fa-twitter-square", "fa fa-facebook-square", "fa fa-camera-retro", "fa fa-key", "fa fa-cogs", "fa fa-comments", "fa fa-thumbs-o-up", "fa fa-thumbs-o-down", "fa fa-star-half", "fa fa-heart-o", "fa fa-sign-out", "fa fa-linkedin-square", "fa fa-thumb-tack", "fa fa-external-link", "fa fa-sign-in", "fa fa-trophy", "fa fa-github-square", "fa fa-upload", "fa fa-lemon-o", "fa fa-phone", "fa fa-square-o", "fa fa-bookmark-o", "fa fa-phone-square", "fa fa-twitter", "fa-brands fa-facebook", "fa fa-github", "fa fa-unlock", "fa fa-credit-card", "fa fa-rss", "fa fa-hdd-o", "fa fa-bullhorn", "fa fa-bell", "fa fa-certificate", "fa fa-hand-o-right", "fa fa-hand-o-left", "fa fa-hand-o-up", "fa fa-hand-o-down", "fa fa-arrow-circle-left", "fa fa-arrow-circle-right", "fa fa-arrow-circle-up", "fa fa-arrow-circle-down", "fa fa-globe", "fa fa-wrench", "fa fa-tasks", "fa fa-filter", "fa fa-briefcase", "fa fa-arrows-alt", "fa fa-users", "fa fa-link", "fa fa-cloud", "fa fa-flask", "fa fa-scissors", "fa fa-files-o", "fa fa-paperclip", "fa fa-floppy-o", "fa fa-square", "fa fa-bars", "fa fa-list-ul", "fa fa-list-ol", "fa fa-strikethrough", "fa fa-underline", "fa fa-table", "fa fa-magic", "fa fa-truck", "fa fa-pinterest", "fa fa-pinterest-square", "fa fa-google-plus-square", "fa fa-google-plus", "fa fa-money", "fa fa-caret-down", "fa fa-caret-up", "fa fa-caret-left", "fa fa-caret-right", "fa fa-columns", "fa fa-sort", "fa fa-sort-desc", "fa fa-sort-asc", "fa fa-envelope", "fa fa-linkedin", "fa fa-undo", "fa fa-gavel", "fa fa-tachometer", "fa fa-comment-o", "fa fa-comments-o", "fa fa-bolt", "fa fa-sitemap", "fa fa-umbrella", "fa fa-clipboard", "fa fa-lightbulb-o", "fa fa-exchange", "fa fa-cloud-download", "fa fa-cloud-upload", "fa fa-user-md", "fa fa-stethoscope", "fa fa-suitcase", "fa fa-bell-o", "fa fa-coffee", "fa fa-cutlery", "fa fa-file-text-o", "fa fa-building-o", "fa fa-hospital-o", "fa fa-ambulance", "fa fa-medkit", "fa fa-fighter-jet", "fa fa-beer", "fa fa-h-square", "fa fa-plus-square", "fa fa-angle-double-left", "fa fa-angle-double-right", "fa fa-angle-double-up", "fa fa-angle-double-down", "fa fa-angle-left", "fa fa-angle-right", "fa fa-angle-up", "fa fa-angle-down", "fa fa-desktop", "fa fa-laptop", "fa fa-tablet", "fa fa-mobile", "fa fa-circle-o", "fa fa-quote-left", "fa fa-quote-right", "fa fa-spinner", "fa fa-circle", "fa fa-reply", "fa fa-github-alt", "fa fa-folder-o", "fa fa-folder-open-o", "fa fa-smile-o", "fa fa-frown-o", "fa fa-meh-o", "fa fa-gamepad", "fa fa-keyboard-o", "fa fa-flag-o", "fa fa-flag-checkered", "fa fa-terminal", "fa fa-code", "fa fa-reply-all", "fa fa-star-half-o", "fa fa-location-arrow", "fa fa-crop", "fa fa-code-fork", "fa fa-chain-broken", "fa fa-question", "fa fa-info", "fa fa-exclamation", "fa fa-superscript", "fa fa-subscript", "fa fa-eraser", "fa fa-puzzle-piece", "fa fa-microphone", "fa fa-microphone-slash", "fa fa-shield", "fa fa-calendar-o", "fa fa-fire-extinguisher", "fa fa-rocket", "fa fa-maxcdn", "fa fa-chevron-circle-left", "fa fa-chevron-circle-right", "fa fa-chevron-circle-up", "fa fa-chevron-circle-down", "fa fa-html5", "fa fa-css3", "fa fa-anchor", "fa fa-unlock-alt", "fa fa-bullseye", "fa fa-ellipsis-h", "fa fa-ellipsis-v", "fa fa-rss-square", "fa fa-play-circle", "fa fa-ticket", "fa fa-minus-square", "fa fa-minus-square-o", "fa fa-level-up", "fa fa-level-down", "fa fa-check-square", "fa fa-pencil-square", "fa fa-external-link-square", "fa fa-share-square", "fa fa-compass", "fa fa-caret-square-o-down", "fa fa-caret-square-o-up", "fa fa-caret-square-o-right", "fa fa-eur", "fa fa-gbp", "fa fa-usd", "fa fa-inr", "fa fa-jpy", "fa fa-rub", "fa fa-krw", "fa fa-btc", "fa fa-file", "fa fa-file-text", "fa fa-sort-alpha-asc", "fa fa-sort-alpha-desc", "fa fa-sort-amount-asc", "fa fa-sort-amount-desc", "fa fa-sort-numeric-asc", "fa fa-sort-numeric-desc", "fa fa-thumbs-up", "fa fa-thumbs-down", "fa fa-youtube-square", "fa fa-youtube", "fa fa-xing", "fa fa-xing-square", "fa fa-youtube-play", "fa fa-dropbox", "fa fa-stack-overflow", "fa fa-instagram", "fa fa-flickr", "fa fa-adn", "fa fa-bitbucket", "fa fa-bitbucket-square", "fa fa-tumblr", "fa fa-tumblr-square", "fa fa-long-arrow-down", "fa fa-long-arrow-up", "fa fa-long-arrow-left", "fa fa-long-arrow-right", "fa fa-apple", "fa fa-windows", "fa fa-android", "fa fa-linux", "fa fa-dribbble", "fa fa-skype", "fa fa-foursquare", "fa fa-trello", "fa fa-female", "fa fa-male", "fa fa-gratipay", "fa fa-sun-o", "fa fa-moon-o", "fa fa-archive", "fa fa-bug", "fa fa-vk", "fa fa-weibo", "fa fa-renren", "fa fa-pagelines", "fa fa-stack-exchange", "fa fa-arrow-circle-o-right", "fa fa-arrow-circle-o-left", "fa fa-caret-square-o-left", "fa fa-dot-circle-o", "fa fa-wheelchair", "fa fa-vimeo-square", "fa fa-try", "fa fa-plus-square-o", "fa fa-space-shuttle", "fa fa-slack", "fa fa-envelope-square", "fa fa-wordpress", "fa fa-openid", "fa fa-university", "fa fa-graduation-cap", "fa fa-yahoo", "fa fa-google", "fa fa-reddit", "fa fa-reddit-square", "fa fa-stumbleupon-circle", "fa fa-stumbleupon", "fa fa-delicious", "fa fa-digg", "fa fa-pied-piper-pp", "fa fa-pied-piper-alt", "fa fa-drupal", "fa fa-joomla", "fa fa-language", "fa fa-fax", "fa fa-building", "fa fa-child", "fa fa-paw", "fa fa-spoon", "fa fa-cube", "fa fa-cubes", "fa fa-behance", "fa fa-behance-square", "fa fa-steam", "fa fa-steam-square", "fa fa-recycle", "fa fa-car", "fa fa-taxi", "fa fa-tree", "fa fa-spotify", "fa fa-deviantart", "fa fa-soundcloud", "fa fa-database", "fa fa-file-pdf-o", "fa fa-file-word-o", "fa fa-file-excel-o", "fa fa-file-powerpoint-o", "fa fa-file-image-o", "fa fa-file-archive-o", "fa fa-file-audio-o", "fa fa-file-video-o", "fa fa-file-code-o", "fa fa-vine", "fa fa-codepen", "fa fa-jsfiddle", "fa fa-life-ring", "fa fa-circle-o-notch", "fa fa-rebel", "fa fa-empire", "fa fa-git-square", "fa fa-git", "fa fa-hacker-news", "fa fa-tencent-weibo", "fa fa-qq", "fa fa-weixin", "fa fa-paper-plane", "fa fa-paper-plane-o", "fa fa-history", "fa fa-circle-thin", "fa fa-header", "fa fa-paragraph", "fa fa-sliders", "fa fa-share-alt", "fa fa-share-alt-square", "fa fa-bomb", "fa fa-futbol-o", "fa fa-tty", "fa fa-binoculars", "fa fa-plug", "fa fa-slideshare", "fa fa-twitch", "fa fa-yelp", "fa fa-newspaper-o", "fa fa-wifi", "fa fa-calculator", "fa fa-paypal", "fa fa-google-wallet", "fa fa-cc-visa", "fa fa-cc-mastercard", "fa fa-cc-discover", "fa fa-cc-amex", "fa fa-cc-paypal", "fa fa-cc-stripe", "fa fa-bell-slash", "fa fa-bell-slash-o", "fa fa-trash", "fa fa-copyright", "fa fa-at", "fa fa-eyedropper", "fa fa-paint-brush", "fa fa-birthday-cake", "fa fa-area-chart", "fa fa-pie-chart", "fa fa-line-chart", "fa fa-lastfm", "fa fa-lastfm-square", "fa fa-toggle-off", "fa fa-toggle-on", "fa fa-bicycle", "fa fa-bus", "fa fa-ioxhost", "fa fa-angellist", "fa fa-cc", "fa fa-ils", "fa fa-meanpath", "fa fa-buysellads", "fa fa-connectdevelop", "fa fa-dashcube", "fa fa-forumbee", "fa fa-leanpub", "fa fa-sellsy", "fa fa-shirtsinbulk", "fa fa-simplybuilt", "fa fa-skyatlas", "fa fa-cart-plus", "fa fa-cart-arrow-down", "fa fa-diamond", "fa fa-ship", "fa fa-user-secret", "fa fa-motorcycle", "fa fa-street-view", "fa fa-heartbeat", "fa fa-venus", "fa fa-mars", "fa fa-mercury", "fa fa-transgender", "fa fa-transgender-alt", "fa fa-venus-double", "fa fa-mars-double", "fa fa-venus-mars", "fa fa-mars-stroke", "fa fa-mars-stroke-v", "fa fa-mars-stroke-h", "fa fa-neuter", "fa fa-genderless", "fa fa-facebook-official", "fa fa-pinterest-p", "fa fa-whatsapp", "fa fa-server", "fa fa-user-plus", "fa fa-user-times", "fa fa-bed", "fa fa-viacoin", "fa fa-train", "fa fa-subway", "fa fa-medium", "fa fa-y-combinator", "fa fa-optin-monster", "fa fa-opencart", "fa fa-expeditedssl", "fa fa-battery-full", "fa fa-battery-three-quarters", "fa fa-battery-half", "fa fa-battery-quarter", "fa fa-battery-empty", "fa fa-mouse-pointer", "fa fa-i-cursor", "fa fa-object-group", "fa fa-object-ungroup", "fa fa-sticky-note", "fa fa-sticky-note-o", "fa fa-cc-jcb", "fa fa-cc-diners-club", "fa fa-clone", "fa fa-balance-scale", "fa fa-hourglass-o", "fa fa-hourglass-start", "fa fa-hourglass-half", "fa fa-hourglass-end", "fa fa-hourglass", "fa fa-hand-rock-o", "fa fa-hand-paper-o", "fa fa-hand-scissors-o", "fa fa-hand-lizard-o", "fa fa-hand-spock-o", "fa fa-hand-pointer-o", "fa fa-hand-peace-o", "fa fa-trademark", "fa fa-registered", "fa fa-creative-commons", "fa fa-gg", "fa fa-gg-circle", "fa fa-tripadvisor", "fa fa-odnoklassniki", "fa fa-odnoklassniki-square", "fa fa-get-pocket", "fa fa-wikipedia-w", "fa fa-safari", "fa fa-chrome", "fa fa-firefox", "fa fa-opera", "fa fa-internet-explorer", "fa fa-television", "fa fa-contao", "fa fa-500px", "fa fa-amazon", "fa fa-calendar-plus-o", "fa fa-calendar-minus-o", "fa fa-calendar-times-o", "fa fa-calendar-check-o", "fa fa-industry", "fa fa-map-pin", "fa fa-map-signs", "fa fa-map-o", "fa fa-map", "fa fa-commenting", "fa fa-commenting-o", "fa fa-houzz", "fa fa-vimeo", "fa fa-black-tie", "fa fa-fonticons", "fa fa-reddit-alien", "fa fa-edge", "fa fa-credit-card-alt", "fa fa-codiepie", "fa fa-modx", "fa fa-fort-awesome", "fa fa-usb", "fa fa-product-hunt", "fa fa-mixcloud", "fa fa-scribd", "fa fa-pause-circle", "fa fa-pause-circle-o", "fa fa-stop-circle", "fa fa-stop-circle-o", "fa fa-shopping-bag", "fa fa-shopping-basket", "fa fa-hashtag", "fa fa-bluetooth", "fa fa-bluetooth-b", "fa fa-percent", "fa fa-gitlab", "fa fa-wpbeginner", "fa fa-wpforms", "fa fa-envira", "fa fa-universal-access", "fa fa-wheelchair-alt", "fa fa-question-circle-o", "fa fa-blind", "fa fa-audio-description", "fa fa-volume-control-phone", "fa fa-braille", "fa fa-assistive-listening-systems", "fa fa-american-sign-language-interpreting", "fa fa-deaf", "fa fa-glide", "fa fa-glide-g", "fa fa-sign-language", "fa fa-low-vision", "fa fa-viadeo", "fa fa-viadeo-square", "fa fa-snapchat", "fa fa-snapchat-ghost", "fa fa-snapchat-square", "fa fa-pied-piper", "fa fa-first-order", "fa fa-yoast", "fa fa-themeisle", "fa fa-google-plus-official", "fa fa-font-awesome"]
};

exports.default = iconsList;

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var placeHolder = PremiumBlocksSettings.defaultAuthImg;

var Component = wp.element.Component;

var DefaultImage = function (_Component) {
    _inherits(DefaultImage, _Component);

    function DefaultImage() {
        _classCallCheck(this, DefaultImage);

        return _possibleConstructorReturn(this, (DefaultImage.__proto__ || Object.getPrototypeOf(DefaultImage)).apply(this, arguments));
    }

    _createClass(DefaultImage, [{
        key: "render",
        value: function render() {
            return React.createElement("img", { src: placeHolder, className: this.props.className });
        }
    }]);

    return DefaultImage;
}(Component);

exports.default = DefaultImage;

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var dP = __webpack_require__(26);
var createDesc = __webpack_require__(54);
module.exports = __webpack_require__(27) ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

module.exports = function (it) {
  return (typeof it === 'undefined' ? 'undefined' : _typeof(it)) === 'object' ? it !== null : typeof it === 'function';
};

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = __webpack_require__(121);
var defined = __webpack_require__(73);
module.exports = function (it) {
  return IObject(defined(it));
};

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var store = __webpack_require__(76)('wks');
var uid = __webpack_require__(57);
var _Symbol = __webpack_require__(20).Symbol;
var USE_SYMBOL = typeof _Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] = USE_SYMBOL && _Symbol[name] || (USE_SYMBOL ? _Symbol : uid)('Symbol.' + name));
};

$exports.store = store;

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _Symbol = __webpack_require__(43),
    getRawTag = __webpack_require__(133),
    objectToString = __webpack_require__(134);

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
    if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
    }
    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
}

module.exports = baseGetTag;

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object';
}

module.exports = isObjectLike;

/***/ }),
/* 40 */
/***/ (function(module, exports) {

module.exports = ReactDOM;

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isObject = __webpack_require__(34);
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};

/***/ }),
/* 42 */
/***/ (function(module, exports) {

/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */
module.exports = __webpack_amd_options__;

/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var root = __webpack_require__(15);

/** Built-in value references. */
var _Symbol = root.Symbol;

module.exports = _Symbol;

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var getNative = __webpack_require__(29);

/* Built-in method references that are verified to be native. */
var nativeCreate = getNative(Object, 'create');

module.exports = nativeCreate;

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var listCacheClear = __webpack_require__(149),
    listCacheDelete = __webpack_require__(150),
    listCacheGet = __webpack_require__(151),
    listCacheHas = __webpack_require__(152),
    listCacheSet = __webpack_require__(153);

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

module.exports = ListCache;

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var eq = __webpack_require__(92);

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

module.exports = assocIndexOf;

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isKeyable = __webpack_require__(155);

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
}

module.exports = getMapData;

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isSymbol = __webpack_require__(60);

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = value + '';
  return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}

module.exports = toKey;

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function () {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function get() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function get() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/* global define */

(function () {
	'use strict';

	var hasOwn = {}.hasOwnProperty;

	function classNames() {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg === 'undefined' ? 'undefined' : _typeof(arg);

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg) && arg.length) {
				var inner = classNames.apply(null, arg);
				if (inner) {
					classes.push(inner);
				}
			} else if (argType === 'object') {
				for (var key in arg) {
					if (hasOwn.call(arg, key) && arg[key]) {
						classes.push(key);
					}
				}
			}
		}

		return classes.join(' ');
	}

	if (typeof module !== 'undefined' && module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else if ("function" === 'function' && _typeof(__webpack_require__(42)) === 'object' && __webpack_require__(42)) {
		// register as 'classnames', consistent with npm package name
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
			return classNames;
		}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		window.classNames = classNames;
	}
})();

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _premiumSizeUnits = __webpack_require__(21);

var _premiumSizeUnits2 = _interopRequireDefault(_premiumSizeUnits);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __ = wp.i18n.__;
var _wp$element = wp.element,
    useState = _wp$element.useState,
    useEffect = _wp$element.useEffect,
    Fragment = _wp$element.Fragment;
var _wp$data = wp.data,
    useSelect = _wp$data.useSelect,
    useDispatch = _wp$data.useDispatch;

var SpacingComponent = function SpacingComponent(props) {
    var value = props.value,
        responsive = props.responsive,
        showUnits = props.showUnits,
        label = props.label;

    var _useState = useState("Desktop"),
        _useState2 = _slicedToArray(_useState, 2),
        device = _useState2[0],
        setDevice = _useState2[1];

    var defaultValue = {
        value: {
            top: "",
            right: "",
            bottom: "",
            left: ""
        },
        unit: 'px'

    };
    var ResDefaultParam = {
        Desktop: defaultValue.value,
        Tablet: defaultValue.value,
        Mobile: defaultValue.value,
        unit: defaultValue.unit

    };
    var defaultValues = responsive ? ResDefaultParam : defaultValue.value;
    value = value ? _extends({}, defaultValues, value) : defaultValues;

    var _useState3 = useState(value),
        _useState4 = _slicedToArray(_useState3, 2),
        state = _useState4[0],
        setState = _useState4[1];

    var _useState5 = useState(false),
        _useState6 = _slicedToArray(_useState5, 2),
        link = _useState6[0],
        setLink = _useState6[1];

    useEffect(function () {
        if (state !== value) {
            setState(value);
        }
    }, [props]);

    var onSpacingChange = function onSpacingChange(v, choiceID) {
        var updateState = _extends({}, state);
        var deviceUpdateState = responsive ? _extends({}, updateState[device]) : _extends({}, updateState);
        if (link) {
            deviceUpdateState['top'] = v;
            deviceUpdateState['right'] = v;
            deviceUpdateState['bottom'] = v;
            deviceUpdateState['left'] = v;
        } else {
            deviceUpdateState[choiceID] = v;
        }
        responsive ? updateState[device] = deviceUpdateState : updateState = deviceUpdateState;
        props.onChange(updateState);
        setState(updateState);
    };

    var onLinkClickHandler = function onLinkClickHandler() {
        var linkValue = responsive ? state[device]['top'] : state['top'];
        var updateState = _extends({}, state);
        var deviceUpdateState = responsive ? _extends({}, updateState[device]) : _extends({}, updateState);
        var choices = ['top', 'right', 'bottom', "left"];
        for (var choice in choices) {
            deviceUpdateState[choices[choice]] = linkValue;
        }
        responsive ? updateState[device] = deviceUpdateState : updateState = deviceUpdateState;
        props.onChange(updateState);
        setState(updateState);
    };

    var renderInputHtml = function renderInputHtml(device) {
        var active = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

        var htmlChoices = void 0;
        htmlChoices = ['top', 'right', 'bottom', 'left'].map(function (side) {
            var inputValue = responsive ? state[device][side] : state[side];
            return React.createElement(
                "li",
                {
                    key: side,
                    className: "premium-spacing-input-item"
                },
                React.createElement("input", {
                    type: "number",
                    className: "premium-spacing-input",
                    value: inputValue,
                    onChange: function onChange(_ref) {
                        var value = _ref.target.value;
                        return onSpacingChange(Number(value), side);
                    },
                    "data-id": side,
                    disabled: inputValue === "disabled" ? true : false
                }),
                React.createElement(
                    "span",
                    { className: "premium-spacing-title" },
                    {
                        top: __('Top', 'premium-blocks-for-gutenberg'),
                        bottom: __('Bottom', 'premium-blocks-for-gutenberg'),
                        left: __('Left', 'premium-blocks-for-gutenberg'),
                        right: __('Right', 'premium-blocks-for-gutenberg')
                    }[side]
                )
            );
        });
        var linkHtml = '';
        if (link) {
            linkHtml = React.createElement(
                "li",
                { className: "premium-spacing-input-item" },
                React.createElement("button", {
                    className: "linked-btn is-button dashicons dashicons-admin-links connected ",
                    onClick: function onClick() {
                        setLink(false);
                    }
                })
            );
        } else {
            linkHtml = React.createElement(
                "li",
                { className: "premium-spacing-input-item" },
                React.createElement("button", {
                    className: "linked-btn is-button dashicons dashicons-editor-unlink disconnected",
                    onClick: function onClick() {
                        onLinkClickHandler();
                        setLink(true);
                    }
                })
            );
        }

        ;
        return React.createElement(
            "ul",
            {
                className: "premium-spacing-wrapper " + device + " " + active
            },
            htmlChoices,
            linkHtml
        );
    };

    var inputHtml = null;

    inputHtml = React.createElement(
        Fragment,
        null,
        renderInputHtml(device, "active")
    );
    var devices = ['Desktop', 'Tablet', 'Mobile'];

    var customSetPreviewDeviceType = function customSetPreviewDeviceType(device) {
        setDevice(device.toLowerCase());
    };

    if (wp.data.select('core/edit-post')) {
        var theDevice = useSelect(function (select) {
            var _select = select('core/edit-post'),
                _select$__experimenta = _select.__experimentalGetPreviewDeviceType,
                __experimentalGetPreviewDeviceType = _select$__experimenta === undefined ? null : _select$__experimenta;

            return __experimentalGetPreviewDeviceType ? __experimentalGetPreviewDeviceType() : 'Desktop';
        }, []);
        if (theDevice !== device) {
            setDevice(theDevice);
        }

        var _useDispatch = useDispatch('core/edit-post'),
            _useDispatch$__experi = _useDispatch.__experimentalSetPreviewDeviceType,
            __experimentalSetPreviewDeviceType = _useDispatch$__experi === undefined ? null : _useDispatch$__experi;

        customSetPreviewDeviceType = function customSetPreviewDeviceType(device) {
            __experimentalSetPreviewDeviceType(device);
            setDevice(device);
        };
    }
    var onUnitChange = function onUnitChange(unitValue) {
        var updateState = _extends({}, state);
        updateState["unit"] = unitValue;
        props.onChange(updateState);
        setState(updateState);
    };
    return React.createElement(
        "div",
        { className: "premium-spacing-responsive" },
        React.createElement(
            "header",
            null,
            React.createElement(
                "div",
                { className: "premium-slider-title-wrap" },
                React.createElement(
                    "span",
                    { className: "customize-control-title premium-control-title" },
                    "  ",
                    label
                ),
                responsive && React.createElement(
                    "ul",
                    { className: "premium-responsive-control-btns premium-responsive-slider-btns" },
                    devices.map(function (deviceType, key) {
                        var activeClass = deviceType === device ? ' active' : '';
                        var icon = deviceType.toLowerCase() === 'mobile' ? 'smartphone' : deviceType.toLowerCase();
                        return React.createElement(
                            "li",
                            { key: key, className: "" + deviceType + activeClass },
                            React.createElement(
                                "button",
                                { type: "button", className: "preview-" + deviceType + activeClass, "data-device": deviceType },
                                React.createElement("i", { "class": "dashicons dashicons-" + icon, onClick: function onClick() {
                                        var nextDevice = key + 1 > devices.length - 1 ? devices[0] : devices[key + 1];
                                        customSetPreviewDeviceType(nextDevice);
                                    } })
                            )
                        );
                    })
                )
            ),
            showUnits && React.createElement(_premiumSizeUnits2.default, {
                activeUnit: state["unit"],
                onChangeSizeUnit: function onChangeSizeUnit(unitKey) {
                    return onUnitChange(unitKey);
                }
            })
        ),
        React.createElement(
            "div",
            { className: "premium-spacing-responsive-outer-wrapper" },
            React.createElement(
                "div",
                { className: "input-wrapper premium-spacing-responsive-wrapper" },
                inputHtml
            ),
            React.createElement(
                "div",
                { className: "premium-spacing-btn-reset-wrap" },
                React.createElement("button", {
                    className: "premium-reset-btn ",
                    disabled: JSON.stringify(state) === JSON.stringify(defaultValues),
                    onClick: function onClick(e) {
                        e.preventDefault();
                        props.onChange(defaultValues);
                        setState(defaultValues);
                    }
                })
            )
        )
    );
};

exports.default = SpacingComponent;

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _premiumMargin = __webpack_require__(276);

var _premiumMargin2 = _interopRequireDefault(_premiumMargin);

var _premiumSizeUnits = __webpack_require__(21);

var _premiumSizeUnits2 = _interopRequireDefault(_premiumSizeUnits);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _wp$data = wp.data,
    useSelect = _wp$data.useSelect,
    useDispatch = _wp$data.useDispatch;
var useState = wp.element.useState;
var __ = wp.i18n.__;


function PremiumResponsiveMargin(props) {
    var directions = props.directions,
        marginTop = props.marginTop,
        marginRight = props.marginRight,
        marginBottom = props.marginBottom,
        marginLeft = props.marginLeft,
        marginTopTablet = props.marginTopTablet,
        marginRightTablet = props.marginRightTablet,
        marginBottomTablet = props.marginBottomTablet,
        marginLeftTablet = props.marginLeftTablet,
        marginTopMobile = props.marginTopMobile,
        marginRightMobile = props.marginRightMobile,
        marginBottomMobile = props.marginBottomMobile,
        marginLeftMobile = props.marginLeftMobile,
        selectedUnit = props.selectedUnit,
        showUnits = props.showUnits,
        onChangeMarSizeUnit = props.onChangeMarSizeUnit;

    var _useState = useState('Desktop'),
        _useState2 = _slicedToArray(_useState, 2),
        deviceType = _useState2[0],
        setDeviceType = _useState2[1];

    var customSetPreviewDeviceType = function customSetPreviewDeviceType(device) {
        setDeviceType(device);
    };
    if (wp.data.select('core/edit-post')) {
        var theDevice = useSelect(function (select) {
            var _select = select('core/edit-post'),
                _select$__experimenta = _select.__experimentalGetPreviewDeviceType,
                __experimentalGetPreviewDeviceType = _select$__experimenta === undefined ? null : _select$__experimenta;

            return __experimentalGetPreviewDeviceType ? __experimentalGetPreviewDeviceType() : 'Desktop';
        }, []);
        if (theDevice !== deviceType) {
            setDeviceType(theDevice);
        }

        var _useDispatch = useDispatch('core/edit-post'),
            _useDispatch$__experi = _useDispatch.__experimentalSetPreviewDeviceType,
            __experimentalSetPreviewDeviceType = _useDispatch$__experi === undefined ? null : _useDispatch$__experi;

        customSetPreviewDeviceType = function customSetPreviewDeviceType(device) {
            __experimentalSetPreviewDeviceType(device);
            setDeviceType(device);
        };
    }
    var devices = ['Desktop', 'Tablet', 'Mobile'];
    var output = {};
    output.Mobile = React.createElement(_premiumMargin2.default, {
        directions: directions,
        marginTop: marginTopMobile,
        marginRight: marginRightMobile,
        marginBottom: marginBottomMobile,
        marginLeft: marginLeftMobile,
        onChangeMarTop: function onChangeMarTop(marginTopMobile) {
            return props.onChangeMarginTop("mobile", marginTopMobile);
        },
        onChangeMarRight: function onChangeMarRight(marginRightMobile) {
            return props.onChangeMarginRight("mobile", marginRightMobile);
        },
        onChangeMarBottom: function onChangeMarBottom(marginBottomMobile) {
            return props.onChangeMarginBottom("mobile", marginBottomMobile);
        },
        onChangeMarLeft: function onChangeMarLeft(marginLeftMobile) {
            return props.onChangeMarginLeft("mobile", marginLeftMobile);
        },
        showUnits: showUnits,
        selectedUnit: selectedUnit,
        onChangeMarSizeUnit: onChangeMarSizeUnit
    });
    output.Tablet = React.createElement(_premiumMargin2.default, {
        directions: directions,
        marginTop: marginTopTablet,
        marginRight: marginRightTablet,
        marginBottom: marginBottomTablet,
        marginLeft: marginLeftTablet,
        onChangeMarTop: function onChangeMarTop(marginTopTablet) {
            return props.onChangeMarginTop("tablet", marginTopTablet);
        },
        onChangeMarRight: function onChangeMarRight(marginRightTablet) {
            return props.onChangeMarginRight("tablet", marginRightTablet);
        },
        onChangeMarBottom: function onChangeMarBottom(marginBottomTablet) {
            return props.onChangeMarginBottom("tablet", marginBottomTablet);
        },
        onChangeMarLeft: function onChangeMarLeft(marginLeftTablet) {
            return props.onChangeMarginLeft("tablet", marginLeftTablet);
        },
        showUnits: showUnits,
        selectedUnit: selectedUnit,
        onChangeMarSizeUnit: onChangeMarSizeUnit
    });
    output.Desktop = React.createElement(_premiumMargin2.default, {
        directions: directions,
        marginTop: marginTop,
        marginRight: marginRight,
        marginBottom: marginBottom,
        marginLeft: marginLeft,
        onChangeMarTop: function onChangeMarTop(marginTop) {
            return props.onChangeMarginTop("desktop", marginTop);
        },
        onChangeMarRight: function onChangeMarRight(marginRight) {
            return props.onChangeMarginRight("desktop", marginRight);
        },
        onChangeMarBottom: function onChangeMarBottom(marginBottom) {
            return props.onChangeMarginBottom("desktop", marginBottom);
        },
        onChangeMarLeft: function onChangeMarLeft(marginLeft) {
            return props.onChangeMarginLeft("desktop", marginLeft);
        },
        showUnits: showUnits,
        selectedUnit: selectedUnit,
        onChangeMarSizeUnit: onChangeMarSizeUnit
    });
    return React.createElement(
        'div',
        { className: 'premium-blocks-range-control' },
        React.createElement(
            'header',
            null,
            React.createElement(
                'div',
                { className: 'premium-slider-title-wrap' },
                React.createElement(
                    'span',
                    { className: 'customize-control-title premium-control-title' },
                    '  ',
                    __("Margin")
                ),
                React.createElement(
                    'ul',
                    { className: 'premium-responsive-control-btns premium-responsive-slider-btns' },
                    devices.map(function (device, key) {
                        var activeClass = device === deviceType ? ' active' : '';
                        var icon = device.toLowerCase() === 'mobile' ? 'smartphone' : device.toLowerCase();
                        return React.createElement(
                            'li',
                            { key: key, className: '' + device + activeClass },
                            React.createElement(
                                'button',
                                { type: 'button', className: 'preview-' + device + activeClass, 'data-device': device },
                                React.createElement('i', { 'class': 'dashicons dashicons-' + icon, onClick: function onClick() {
                                        var nextDevice = key + 1 > devices.length - 1 ? devices[0] : devices[key + 1];
                                        customSetPreviewDeviceType(nextDevice);
                                    } })
                            )
                        );
                    })
                )
            ),
            showUnits && React.createElement(_premiumSizeUnits2.default, {
                activeUnit: selectedUnit,
                onChangeSizeUnit: function onChangeSizeUnit(newValue) {
                    return onChangeMarSizeUnit(newValue);
                }
            })
        ),
        output[deviceType] ? output[deviceType] : output.Desktop
    );
}
exports.default = PremiumResponsiveMargin;

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _settings = __webpack_require__(1);

var _icons = __webpack_require__(4);

var _icons2 = _interopRequireDefault(_icons);

var _edit = __webpack_require__(285);

var _edit2 = _interopRequireDefault(_edit);

var _save = __webpack_require__(286);

var _save2 = _interopRequireDefault(_save);

var _deprecated = __webpack_require__(287);

var _deprecated2 = _interopRequireDefault(_deprecated);

var _attributes = __webpack_require__(112);

var _attributes2 = _interopRequireDefault(_attributes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __ = wp.i18n.__;
var registerBlockType = wp.blocks.registerBlockType;


var onChangeVideoURL = function onChangeVideoURL(type, URL) {
    var videoUrl = void 0;
    if (URL) {
        switch (type) {
            case "youtube":
                if (URL.startsWith("http")) {
                    videoUrl = URL.replace("watch?v=", "embed/");
                } else {
                    videoUrl = "https://www.youtube.com/embed/" + URL;
                }
                break;
            case "vimeo":
                if (URL.startsWith("http")) {
                    videoUrl = URL.replace("vimeo.com/", "player.vimeo.com/video/");
                } else {
                    videoUrl = "https://player.vimeo.com/video/" + URL;
                }
                break;
            case "daily":
                if (URL.startsWith("http")) {
                    videoUrl = URL.replace('dai.ly/', 'dailymotion.com/embed/video/');
                } else {
                    videoUrl = "https://dailymotion.com/embed/video/" + URL;
                }
                break;
        }
        return videoUrl;
    }
};

exports.default = onChangeVideoURL;


registerBlockType("premium/video-box", {
    title: __("Video Box"),
    icon: React.createElement(_icons2.default, { icon: "video" }),
    category: "premium-blocks",
    attributes: _attributes2.default,
    supports: {
        inserter: _settings.videoBox
    },
    example: {},
    edit: _edit2.default,
    save: _save2.default,
    deprecated: _deprecated2.default
});

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = __webpack_require__(120);
var enumBugKeys = __webpack_require__(77);

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = true;

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.f = {}.propertyIsEnumerable;

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var isArray = __webpack_require__(14),
    isSymbol = __webpack_require__(60);

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }
  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
  if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
}

module.exports = isKey;

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var baseGetTag = __webpack_require__(38),
    isObjectLike = __webpack_require__(39);

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
    return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
}

module.exports = isSymbol;

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var mapCacheClear = __webpack_require__(138),
    mapCacheDelete = __webpack_require__(154),
    mapCacheGet = __webpack_require__(156),
    mapCacheHas = __webpack_require__(157),
    mapCacheSet = __webpack_require__(158);

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

module.exports = MapCache;

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var getNative = __webpack_require__(29),
    root = __webpack_require__(15);

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map');

module.exports = Map;

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var arrayLikeKeys = __webpack_require__(186),
    baseKeys = __webpack_require__(193),
    isArrayLike = __webpack_require__(66);

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

module.exports = keys;

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = isLength;

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isFunction = __webpack_require__(90),
    isLength = __webpack_require__(65);

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

module.exports = isArrayLike;

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Component = wp.element.Component;

var PremiumLowerQuote = function (_Component) {
    _inherits(PremiumLowerQuote, _Component);

    function PremiumLowerQuote() {
        _classCallCheck(this, PremiumLowerQuote);

        return _possibleConstructorReturn(this, (PremiumLowerQuote.__proto__ || Object.getPrototypeOf(PremiumLowerQuote)).apply(this, arguments));
    }

    _createClass(PremiumLowerQuote, [{
        key: "shouldComponentUpdate",
        value: function shouldComponentUpdate(nextProps) {
            return this.props.size !== nextProps.size || this.props.color !== nextProps.color || this.props.opacity !== nextProps.opacity;
        }
    }, {
        key: "render",
        value: function render() {
            var _props = this.props,
                size = _props.size,
                color = _props.color,
                opacity = _props.opacity;

            return React.createElement(
                "svg",
                {
                    style: { width: size + "em", opacity: opacity / 100 },
                    "aria-hidden": "true",
                    "data-prefix": "fas",
                    "data-icon": "quote-left",
                    "class": "svg-inline--fa fa-quote-left fa-w-16",
                    role: "img",
                    xmlns: "http://www.w3.org/2000/svg",
                    viewBox: "0 0 512 512"
                },
                React.createElement("path", {
                    fill: "" + color,
                    d: "M464 256h-80v-64c0-35.3 28.7-64 64-64h8c13.3 0 24-10.7 24-24V56c0-13.3-10.7-24-24-24h-8c-88.4 0-160 71.6-160 160v240c0 26.5 21.5 48 48 48h128c26.5 0 48-21.5 48-48V304c0-26.5-21.5-48-48-48zm-288 0H96v-64c0-35.3 28.7-64 64-64h8c13.3 0 24-10.7 24-24V56c0-13.3-10.7-24-24-24h-8C71.6 32 0 103.6 0 192v240c0 26.5 21.5 48 48 48h128c26.5 0 48-21.5 48-48V304c0-26.5-21.5-48-48-48z"
                })
            );
        }
    }]);

    return PremiumLowerQuote;
}(Component);

exports.default = PremiumLowerQuote;

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Component = wp.element.Component;

var PremiumUpperQuote = function (_Component) {
    _inherits(PremiumUpperQuote, _Component);

    function PremiumUpperQuote() {
        _classCallCheck(this, PremiumUpperQuote);

        return _possibleConstructorReturn(this, (PremiumUpperQuote.__proto__ || Object.getPrototypeOf(PremiumUpperQuote)).apply(this, arguments));
    }

    _createClass(PremiumUpperQuote, [{
        key: "shouldComponentUpdate",
        value: function shouldComponentUpdate(nextProps) {
            return this.props.size !== nextProps.size || this.props.color !== nextProps.color || this.props.opacity !== nextProps.opacity;
        }
    }, {
        key: "render",
        value: function render() {
            var _props = this.props,
                size = _props.size,
                color = _props.color,
                opacity = _props.opacity;


            return React.createElement(
                "svg",
                {
                    style: { width: size + "em", opacity: opacity / 100 },
                    "aria-hidden": "true",
                    "data-prefix": "fas",
                    "data-icon": "quote-right",
                    "class": "svg-inline--fa fa-quote-right fa-w-16",
                    role: "img",
                    xmlns: "http://www.w3.org/2000/svg",
                    viewBox: "0 0 512 512"
                },
                React.createElement("path", {
                    fill: "" + color,
                    d: "M464 32H336c-26.5 0-48 21.5-48 48v128c0 26.5 21.5 48 48 48h80v64c0 35.3-28.7 64-64 64h-8c-13.3 0-24 10.7-24 24v48c0 13.3 10.7 24 24 24h8c88.4 0 160-71.6 160-160V80c0-26.5-21.5-48-48-48zm-288 0H48C21.5 32 0 53.5 0 80v128c0 26.5 21.5 48 48 48h80v64c0 35.3-28.7 64-64 64h-8c-13.3 0-24 10.7-24 24v48c0 13.3 10.7 24 24 24h8c88.4 0 160-71.6 160-160V80c0-26.5-21.5-48-48-48z"
                })
            );
        }
    }]);

    return PremiumUpperQuote;
}(Component);

exports.default = PremiumUpperQuote;

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.arrayMove = exports.sortableHandle = exports.SortableHandle = exports.sortableElement = exports.SortableElement = exports.sortableContainer = exports.SortableContainer = undefined;

var _extends2 = __webpack_require__(292);

var _extends3 = _interopRequireDefault(_extends2);

var _slicedToArray2 = __webpack_require__(293);

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _objectSpread2 = __webpack_require__(297);

var _objectSpread3 = _interopRequireDefault(_objectSpread2);

var _classCallCheck2 = __webpack_require__(298);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(299);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(300);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _getPrototypeOf2 = __webpack_require__(302);

var _getPrototypeOf3 = _interopRequireDefault(_getPrototypeOf2);

var _inherits2 = __webpack_require__(303);

var _inherits3 = _interopRequireDefault(_inherits2);

var _assertThisInitialized2 = __webpack_require__(116);

var _assertThisInitialized3 = _interopRequireDefault(_assertThisInitialized2);

var _defineProperty2 = __webpack_require__(115);

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _react = __webpack_require__(9);

var _propTypes = __webpack_require__(18);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactDom = __webpack_require__(40);

var _invariant = __webpack_require__(305);

var _invariant2 = _interopRequireDefault(_invariant);

var _toConsumableArray2 = __webpack_require__(306);

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Manager = function () {
  function Manager() {
    (0, _classCallCheck3.default)(this, Manager);

    (0, _defineProperty3.default)(this, "refs", {});
  }

  (0, _createClass3.default)(Manager, [{
    key: "add",
    value: function add(collection, ref) {
      if (!this.refs[collection]) {
        this.refs[collection] = [];
      }

      this.refs[collection].push(ref);
    }
  }, {
    key: "remove",
    value: function remove(collection, ref) {
      var index = this.getIndex(collection, ref);

      if (index !== -1) {
        this.refs[collection].splice(index, 1);
      }
    }
  }, {
    key: "isActive",
    value: function isActive() {
      return this.active;
    }
  }, {
    key: "getActive",
    value: function getActive() {
      var _this = this;

      return this.refs[this.active.collection].find(function (_ref) {
        var node = _ref.node;
        return node.sortableInfo.index == _this.active.index;
      });
    }
  }, {
    key: "getIndex",
    value: function getIndex(collection, ref) {
      return this.refs[collection].indexOf(ref);
    }
  }, {
    key: "getOrderedRefs",
    value: function getOrderedRefs() {
      var collection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.active.collection;
      return this.refs[collection].sort(sortByIndex);
    }
  }]);

  return Manager;
}();

function sortByIndex(_ref2, _ref3) {
  var index1 = _ref2.node.sortableInfo.index;
  var index2 = _ref3.node.sortableInfo.index;
  return index1 - index2;
}

function arrayMove(array, from, to) {
  if (process.env.NODE_ENV !== 'production') {
    if (typeof console !== 'undefined') {
      console.warn("Deprecation warning: arrayMove will no longer be exported by 'react-sortable-hoc' in the next major release. Please install the `array-move` package locally instead. https://www.npmjs.com/package/array-move");
    }
  }

  array = array.slice();
  array.splice(to < 0 ? array.length + to : to, 0, array.splice(from, 1)[0]);
  return array;
}
function omit(obj, keysToOmit) {
  return Object.keys(obj).reduce(function (acc, key) {
    if (keysToOmit.indexOf(key) === -1) {
      acc[key] = obj[key];
    }

    return acc;
  }, {});
}
var events = {
  end: ['touchend', 'touchcancel', 'mouseup'],
  move: ['touchmove', 'mousemove'],
  start: ['touchstart', 'mousedown']
};
var vendorPrefix = function () {
  if (typeof window === 'undefined' || typeof document === 'undefined') {
    return '';
  }

  var styles = window.getComputedStyle(document.documentElement, '') || ['-moz-hidden-iframe'];
  var pre = (Array.prototype.slice.call(styles).join('').match(/-(moz|webkit|ms)-/) || styles.OLink === '' && ['', 'o'])[1];

  switch (pre) {
    case 'ms':
      return 'ms';

    default:
      return pre && pre.length ? pre[0].toUpperCase() + pre.substr(1) : '';
  }
}();
function setInlineStyles(node, styles) {
  Object.keys(styles).forEach(function (key) {
    node.style[key] = styles[key];
  });
}
function setTranslate3d(node, translate) {
  node.style["".concat(vendorPrefix, "Transform")] = translate == null ? '' : "translate3d(".concat(translate.x, "px,").concat(translate.y, "px,0)");
}
function setTransitionDuration(node, duration) {
  node.style["".concat(vendorPrefix, "TransitionDuration")] = duration == null ? '' : "".concat(duration, "ms");
}
function closest(el, fn) {
  while (el) {
    if (fn(el)) {
      return el;
    }

    el = el.parentNode;
  }

  return null;
}
function limit(min, max, value) {
  return Math.max(min, Math.min(value, max));
}

function getPixelValue(stringValue) {
  if (stringValue.substr(-2) === 'px') {
    return parseFloat(stringValue);
  }

  return 0;
}

function getElementMargin(element) {
  var style = window.getComputedStyle(element);
  return {
    bottom: getPixelValue(style.marginBottom),
    left: getPixelValue(style.marginLeft),
    right: getPixelValue(style.marginRight),
    top: getPixelValue(style.marginTop)
  };
}
function provideDisplayName(prefix, Component$$1) {
  var componentName = Component$$1.displayName || Component$$1.name;
  return componentName ? "".concat(prefix, "(").concat(componentName, ")") : prefix;
}
function getScrollAdjustedBoundingClientRect(node, scrollDelta) {
  var boundingClientRect = node.getBoundingClientRect();
  return {
    top: boundingClientRect.top + scrollDelta.top,
    left: boundingClientRect.left + scrollDelta.left
  };
}
function getPosition(event) {
  if (event.touches && event.touches.length) {
    return {
      x: event.touches[0].pageX,
      y: event.touches[0].pageY
    };
  } else if (event.changedTouches && event.changedTouches.length) {
    return {
      x: event.changedTouches[0].pageX,
      y: event.changedTouches[0].pageY
    };
  } else {
    return {
      x: event.pageX,
      y: event.pageY
    };
  }
}
function isTouchEvent(event) {
  return event.touches && event.touches.length || event.changedTouches && event.changedTouches.length;
}
function getEdgeOffset(node, parent) {
  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
    left: 0,
    top: 0
  };

  if (!node) {
    return undefined;
  }

  var nodeOffset = {
    left: offset.left + node.offsetLeft,
    top: offset.top + node.offsetTop
  };

  if (node.parentNode === parent) {
    return nodeOffset;
  }

  return getEdgeOffset(node.parentNode, parent, nodeOffset);
}
function getTargetIndex(newIndex, prevIndex, oldIndex) {
  if (newIndex < oldIndex && newIndex > prevIndex) {
    return newIndex - 1;
  } else if (newIndex > oldIndex && newIndex < prevIndex) {
    return newIndex + 1;
  } else {
    return newIndex;
  }
}
function getLockPixelOffset(_ref) {
  var lockOffset = _ref.lockOffset,
      width = _ref.width,
      height = _ref.height;
  var offsetX = lockOffset;
  var offsetY = lockOffset;
  var unit = 'px';

  if (typeof lockOffset === 'string') {
    var match = /^[+-]?\d*(?:\.\d*)?(px|%)$/.exec(lockOffset);
    (0, _invariant2.default)(match !== null, 'lockOffset value should be a number or a string of a ' + 'number followed by "px" or "%". Given %s', lockOffset);
    offsetX = parseFloat(lockOffset);
    offsetY = parseFloat(lockOffset);
    unit = match[1];
  }

  (0, _invariant2.default)(isFinite(offsetX) && isFinite(offsetY), 'lockOffset value should be a finite. Given %s', lockOffset);

  if (unit === '%') {
    offsetX = offsetX * width / 100;
    offsetY = offsetY * height / 100;
  }

  return {
    x: offsetX,
    y: offsetY
  };
}
function getLockPixelOffsets(_ref2) {
  var height = _ref2.height,
      width = _ref2.width,
      lockOffset = _ref2.lockOffset;
  var offsets = Array.isArray(lockOffset) ? lockOffset : [lockOffset, lockOffset];
  (0, _invariant2.default)(offsets.length === 2, 'lockOffset prop of SortableContainer should be a single ' + 'value or an array of exactly two values. Given %s', lockOffset);

  var _offsets = (0, _slicedToArray3.default)(offsets, 2),
      minLockOffset = _offsets[0],
      maxLockOffset = _offsets[1];

  return [getLockPixelOffset({
    height: height,
    lockOffset: minLockOffset,
    width: width
  }), getLockPixelOffset({
    height: height,
    lockOffset: maxLockOffset,
    width: width
  })];
}

function isScrollable(el) {
  var computedStyle = window.getComputedStyle(el);
  var overflowRegex = /(auto|scroll)/;
  var properties = ['overflow', 'overflowX', 'overflowY'];
  return properties.find(function (property) {
    return overflowRegex.test(computedStyle[property]);
  });
}

function getScrollingParent(el) {
  if (!(el instanceof HTMLElement)) {
    return null;
  } else if (isScrollable(el)) {
    return el;
  } else {
    return getScrollingParent(el.parentNode);
  }
}
function getContainerGridGap(element) {
  var style = window.getComputedStyle(element);

  if (style.display === 'grid') {
    return {
      x: getPixelValue(style.gridColumnGap),
      y: getPixelValue(style.gridRowGap)
    };
  }

  return {
    x: 0,
    y: 0
  };
}
var KEYCODE = {
  TAB: 9,
  ESC: 27,
  SPACE: 32,
  LEFT: 37,
  UP: 38,
  RIGHT: 39,
  DOWN: 40
};
var NodeType = {
  Anchor: 'A',
  Button: 'BUTTON',
  Canvas: 'CANVAS',
  Input: 'INPUT',
  Option: 'OPTION',
  Textarea: 'TEXTAREA',
  Select: 'SELECT'
};
function cloneNode(node) {
  var selector = 'input, textarea, select, canvas, [contenteditable]';
  var fields = node.querySelectorAll(selector);
  var clonedNode = node.cloneNode(true);

  var clonedFields = (0, _toConsumableArray3.default)(clonedNode.querySelectorAll(selector));

  clonedFields.forEach(function (field, i) {
    if (field.type !== 'file') {
      field.value = fields[i].value;
    }

    if (field.type === 'radio' && field.name) {
      field.name = "__sortableClone__".concat(field.name);
    }

    if (field.tagName === NodeType.Canvas && fields[i].width > 0 && fields[i].height > 0) {
      var destCtx = field.getContext('2d');
      destCtx.drawImage(fields[i], 0, 0);
    }
  });
  return clonedNode;
}

function sortableHandle(WrappedComponent) {
  var _class, _temp;

  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    withRef: false
  };
  return _temp = _class = function (_React$Component) {
    (0, _inherits3.default)(WithSortableHandle, _React$Component);

    function WithSortableHandle() {
      (0, _classCallCheck3.default)(this, WithSortableHandle);

      return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf3.default)(WithSortableHandle).apply(this, arguments));
    }

    (0, _createClass3.default)(WithSortableHandle, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var node = (0, _reactDom.findDOMNode)(this);
        node.sortableHandle = true;
      }
    }, {
      key: "getWrappedInstance",
      value: function getWrappedInstance() {
        (0, _invariant2.default)(config.withRef, 'To access the wrapped instance, you need to pass in {withRef: true} as the second argument of the SortableHandle() call');
        return this.refs.wrappedInstance;
      }
    }, {
      key: "render",
      value: function render() {
        var ref = config.withRef ? 'wrappedInstance' : null;
        return (0, _react.createElement)(WrappedComponent, (0, _extends3.default)({
          ref: ref
        }, this.props));
      }
    }]);

    return WithSortableHandle;
  }(_react.Component), (0, _defineProperty3.default)(_class, "displayName", provideDisplayName('sortableHandle', WrappedComponent)), _temp;
}
function isSortableHandle(node) {
  return node.sortableHandle != null;
}

var AutoScroller = function () {
  function AutoScroller(container, onScrollCallback) {
    (0, _classCallCheck3.default)(this, AutoScroller);

    this.container = container;
    this.onScrollCallback = onScrollCallback;
  }

  (0, _createClass3.default)(AutoScroller, [{
    key: "clear",
    value: function clear() {
      if (this.interval == null) {
        return;
      }

      clearInterval(this.interval);
      this.interval = null;
    }
  }, {
    key: "update",
    value: function update(_ref) {
      var _this = this;

      var translate = _ref.translate,
          minTranslate = _ref.minTranslate,
          maxTranslate = _ref.maxTranslate,
          width = _ref.width,
          height = _ref.height;
      var direction = {
        x: 0,
        y: 0
      };
      var speed = {
        x: 1,
        y: 1
      };
      var acceleration = {
        x: 10,
        y: 10
      };
      var _this$container = this.container,
          scrollTop = _this$container.scrollTop,
          scrollLeft = _this$container.scrollLeft,
          scrollHeight = _this$container.scrollHeight,
          scrollWidth = _this$container.scrollWidth,
          clientHeight = _this$container.clientHeight,
          clientWidth = _this$container.clientWidth;
      var isTop = scrollTop === 0;
      var isBottom = scrollHeight - scrollTop - clientHeight === 0;
      var isLeft = scrollLeft === 0;
      var isRight = scrollWidth - scrollLeft - clientWidth === 0;

      if (translate.y >= maxTranslate.y - height / 2 && !isBottom) {
        direction.y = 1;
        speed.y = acceleration.y * Math.abs((maxTranslate.y - height / 2 - translate.y) / height);
      } else if (translate.x >= maxTranslate.x - width / 2 && !isRight) {
        direction.x = 1;
        speed.x = acceleration.x * Math.abs((maxTranslate.x - width / 2 - translate.x) / width);
      } else if (translate.y <= minTranslate.y + height / 2 && !isTop) {
        direction.y = -1;
        speed.y = acceleration.y * Math.abs((translate.y - height / 2 - minTranslate.y) / height);
      } else if (translate.x <= minTranslate.x + width / 2 && !isLeft) {
        direction.x = -1;
        speed.x = acceleration.x * Math.abs((translate.x - width / 2 - minTranslate.x) / width);
      }

      if (this.interval) {
        this.clear();
        this.isAutoScrolling = false;
      }

      if (direction.x !== 0 || direction.y !== 0) {
        this.interval = setInterval(function () {
          _this.isAutoScrolling = true;
          var offset = {
            left: speed.x * direction.x,
            top: speed.y * direction.y
          };
          _this.container.scrollTop += offset.top;
          _this.container.scrollLeft += offset.left;

          _this.onScrollCallback(offset);
        }, 5);
      }
    }
  }]);

  return AutoScroller;
}();

function defaultGetHelperDimensions(_ref) {
  var node = _ref.node;
  return {
    height: node.offsetHeight,
    width: node.offsetWidth
  };
}

function defaultShouldCancelStart(event) {
  var interactiveElements = [NodeType.Input, NodeType.Textarea, NodeType.Select, NodeType.Option, NodeType.Button];

  if (interactiveElements.indexOf(event.target.tagName) !== -1) {
    return true;
  }

  if (closest(event.target, function (el) {
    return el.contentEditable === 'true';
  })) {
    return true;
  }

  return false;
}

var propTypes = {
  axis: _propTypes2.default.oneOf(['x', 'y', 'xy']),
  contentWindow: _propTypes2.default.any,
  disableAutoscroll: _propTypes2.default.bool,
  distance: _propTypes2.default.number,
  getContainer: _propTypes2.default.func,
  getHelperDimensions: _propTypes2.default.func,
  helperClass: _propTypes2.default.string,
  helperContainer: _propTypes2.default.oneOfType([_propTypes2.default.func, typeof HTMLElement === 'undefined' ? _propTypes2.default.any : _propTypes2.default.instanceOf(HTMLElement)]),
  hideSortableGhost: _propTypes2.default.bool,
  keyboardSortingTransitionDuration: _propTypes2.default.number,
  lockAxis: _propTypes2.default.string,
  lockOffset: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string, _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]))]),
  lockToContainerEdges: _propTypes2.default.bool,
  onSortEnd: _propTypes2.default.func,
  onSortMove: _propTypes2.default.func,
  onSortOver: _propTypes2.default.func,
  onSortStart: _propTypes2.default.func,
  pressDelay: _propTypes2.default.number,
  pressThreshold: _propTypes2.default.number,
  keyCodes: _propTypes2.default.shape({
    lift: _propTypes2.default.arrayOf(_propTypes2.default.number),
    drop: _propTypes2.default.arrayOf(_propTypes2.default.number),
    cancel: _propTypes2.default.arrayOf(_propTypes2.default.number),
    up: _propTypes2.default.arrayOf(_propTypes2.default.number),
    down: _propTypes2.default.arrayOf(_propTypes2.default.number)
  }),
  shouldCancelStart: _propTypes2.default.func,
  transitionDuration: _propTypes2.default.number,
  updateBeforeSortStart: _propTypes2.default.func,
  useDragHandle: _propTypes2.default.bool,
  useWindowAsScrollContainer: _propTypes2.default.bool
};
var defaultKeyCodes = {
  lift: [KEYCODE.SPACE],
  drop: [KEYCODE.SPACE],
  cancel: [KEYCODE.ESC],
  up: [KEYCODE.UP, KEYCODE.LEFT],
  down: [KEYCODE.DOWN, KEYCODE.RIGHT]
};
var defaultProps = {
  axis: 'y',
  disableAutoscroll: false,
  distance: 0,
  getHelperDimensions: defaultGetHelperDimensions,
  hideSortableGhost: true,
  lockOffset: '50%',
  lockToContainerEdges: false,
  pressDelay: 0,
  pressThreshold: 5,
  keyCodes: defaultKeyCodes,
  shouldCancelStart: defaultShouldCancelStart,
  transitionDuration: 300,
  useWindowAsScrollContainer: false
};
var omittedProps = Object.keys(propTypes);
function validateProps(props) {
  (0, _invariant2.default)(!(props.distance && props.pressDelay), 'Attempted to set both `pressDelay` and `distance` on SortableContainer, you may only use one or the other, not both at the same time.');
}

function _finallyRethrows(body, finalizer) {
  try {
    var result = body();
  } catch (e) {
    return finalizer(true, e);
  }

  if (result && result.then) {
    return result.then(finalizer.bind(null, false), finalizer.bind(null, true));
  }

  return finalizer(false, value);
}
function sortableContainer(WrappedComponent) {
  var _class, _temp;

  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    withRef: false
  };
  return _temp = _class = function (_React$Component) {
    (0, _inherits3.default)(WithSortableContainer, _React$Component);

    function WithSortableContainer(props) {
      var _this;

      (0, _classCallCheck3.default)(this, WithSortableContainer);

      _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf3.default)(WithSortableContainer).call(this, props));

      (0, _defineProperty3.default)((0, _assertThisInitialized3.default)((0, _assertThisInitialized3.default)(_this)), "state", {});

      (0, _defineProperty3.default)((0, _assertThisInitialized3.default)((0, _assertThisInitialized3.default)(_this)), "handleStart", function (event) {
        var _this$props = _this.props,
            distance = _this$props.distance,
            shouldCancelStart = _this$props.shouldCancelStart;

        if (event.button === 2 || shouldCancelStart(event)) {
          return;
        }

        _this.touched = true;
        _this.position = getPosition(event);
        var node = closest(event.target, function (el) {
          return el.sortableInfo != null;
        });

        if (node && node.sortableInfo && _this.nodeIsChild(node) && !_this.state.sorting) {
          var useDragHandle = _this.props.useDragHandle;
          var _node$sortableInfo = node.sortableInfo,
              index = _node$sortableInfo.index,
              collection = _node$sortableInfo.collection,
              disabled = _node$sortableInfo.disabled;

          if (disabled) {
            return;
          }

          if (useDragHandle && !closest(event.target, isSortableHandle)) {
            return;
          }

          _this.manager.active = {
            collection: collection,
            index: index
          };

          if (!isTouchEvent(event) && event.target.tagName === NodeType.Anchor) {
            event.preventDefault();
          }

          if (!distance) {
            if (_this.props.pressDelay === 0) {
              _this.handlePress(event);
            } else {
              _this.pressTimer = setTimeout(function () {
                return _this.handlePress(event);
              }, _this.props.pressDelay);
            }
          }
        }
      });

      (0, _defineProperty3.default)((0, _assertThisInitialized3.default)((0, _assertThisInitialized3.default)(_this)), "nodeIsChild", function (node) {
        return node.sortableInfo.manager === _this.manager;
      });

      (0, _defineProperty3.default)((0, _assertThisInitialized3.default)((0, _assertThisInitialized3.default)(_this)), "handleMove", function (event) {
        var _this$props2 = _this.props,
            distance = _this$props2.distance,
            pressThreshold = _this$props2.pressThreshold;

        if (!_this.state.sorting && _this.touched && !_this._awaitingUpdateBeforeSortStart) {
          var position = getPosition(event);
          var delta = {
            x: _this.position.x - position.x,
            y: _this.position.y - position.y
          };
          var combinedDelta = Math.abs(delta.x) + Math.abs(delta.y);
          _this.delta = delta;

          if (!distance && (!pressThreshold || combinedDelta >= pressThreshold)) {
            clearTimeout(_this.cancelTimer);
            _this.cancelTimer = setTimeout(_this.cancel, 0);
          } else if (distance && combinedDelta >= distance && _this.manager.isActive()) {
            _this.handlePress(event);
          }
        }
      });

      (0, _defineProperty3.default)((0, _assertThisInitialized3.default)((0, _assertThisInitialized3.default)(_this)), "handleEnd", function () {
        _this.touched = false;

        _this.cancel();
      });

      (0, _defineProperty3.default)((0, _assertThisInitialized3.default)((0, _assertThisInitialized3.default)(_this)), "cancel", function () {
        var distance = _this.props.distance;
        var sorting = _this.state.sorting;

        if (!sorting) {
          if (!distance) {
            clearTimeout(_this.pressTimer);
          }

          _this.manager.active = null;
        }
      });

      (0, _defineProperty3.default)((0, _assertThisInitialized3.default)((0, _assertThisInitialized3.default)(_this)), "handlePress", function (event) {
        try {
          var active = _this.manager.getActive();

          var _temp6 = function () {
            if (active) {
              var _temp7 = function _temp7() {
                var index = _node.sortableInfo.index;
                var margin = getElementMargin(_node);
                var gridGap = getContainerGridGap(_this.container);

                var containerBoundingRect = _this.scrollContainer.getBoundingClientRect();

                var dimensions = _getHelperDimensions({
                  index: index,
                  node: _node,
                  collection: _collection
                });

                _this.node = _node;
                _this.margin = margin;
                _this.gridGap = gridGap;
                _this.width = dimensions.width;
                _this.height = dimensions.height;
                _this.marginOffset = {
                  x: _this.margin.left + _this.margin.right + _this.gridGap.x,
                  y: Math.max(_this.margin.top, _this.margin.bottom, _this.gridGap.y)
                };
                _this.boundingClientRect = _node.getBoundingClientRect();
                _this.containerBoundingRect = containerBoundingRect;
                _this.index = index;
                _this.newIndex = index;
                _this.axis = {
                  x: _axis.indexOf('x') >= 0,
                  y: _axis.indexOf('y') >= 0
                };
                _this.offsetEdge = getEdgeOffset(_node, _this.container);

                if (_isKeySorting) {
                  _this.initialOffset = getPosition((0, _objectSpread3.default)({}, event, {
                    pageX: _this.boundingClientRect.left,
                    pageY: _this.boundingClientRect.top
                  }));
                } else {
                  _this.initialOffset = getPosition(event);
                }

                _this.initialScroll = {
                  left: _this.scrollContainer.scrollLeft,
                  top: _this.scrollContainer.scrollTop
                };
                _this.initialWindowScroll = {
                  left: window.pageXOffset,
                  top: window.pageYOffset
                };
                _this.helper = _this.helperContainer.appendChild(cloneNode(_node));
                setInlineStyles(_this.helper, {
                  boxSizing: 'border-box',
                  height: "".concat(_this.height, "px"),
                  left: "".concat(_this.boundingClientRect.left - margin.left, "px"),
                  pointerEvents: 'none',
                  position: 'fixed',
                  top: "".concat(_this.boundingClientRect.top - margin.top, "px"),
                  width: "".concat(_this.width, "px")
                });

                if (_isKeySorting) {
                  _this.helper.focus();
                }

                if (_hideSortableGhost) {
                  _this.sortableGhost = _node;
                  setInlineStyles(_node, {
                    opacity: 0,
                    visibility: 'hidden'
                  });
                }

                _this.minTranslate = {};
                _this.maxTranslate = {};

                if (_isKeySorting) {
                  var _ref = _useWindowAsScrollContainer ? {
                    top: 0,
                    left: 0,
                    width: _this.contentWindow.innerWidth,
                    height: _this.contentWindow.innerHeight
                  } : _this.containerBoundingRect,
                      containerTop = _ref.top,
                      containerLeft = _ref.left,
                      containerWidth = _ref.width,
                      containerHeight = _ref.height;

                  var containerBottom = containerTop + containerHeight;
                  var containerRight = containerLeft + containerWidth;

                  if (_this.axis.x) {
                    _this.minTranslate.x = containerLeft - _this.boundingClientRect.left;
                    _this.maxTranslate.x = containerRight - (_this.boundingClientRect.left + _this.width);
                  }

                  if (_this.axis.y) {
                    _this.minTranslate.y = containerTop - _this.boundingClientRect.top;
                    _this.maxTranslate.y = containerBottom - (_this.boundingClientRect.top + _this.height);
                  }
                } else {
                  if (_this.axis.x) {
                    _this.minTranslate.x = (_useWindowAsScrollContainer ? 0 : containerBoundingRect.left) - _this.boundingClientRect.left - _this.width / 2;
                    _this.maxTranslate.x = (_useWindowAsScrollContainer ? _this.contentWindow.innerWidth : containerBoundingRect.left + containerBoundingRect.width) - _this.boundingClientRect.left - _this.width / 2;
                  }

                  if (_this.axis.y) {
                    _this.minTranslate.y = (_useWindowAsScrollContainer ? 0 : containerBoundingRect.top) - _this.boundingClientRect.top - _this.height / 2;
                    _this.maxTranslate.y = (_useWindowAsScrollContainer ? _this.contentWindow.innerHeight : containerBoundingRect.top + containerBoundingRect.height) - _this.boundingClientRect.top - _this.height / 2;
                  }
                }

                if (_helperClass) {
                  _helperClass.split(' ').forEach(function (className) {
                    return _this.helper.classList.add(className);
                  });
                }

                _this.listenerNode = event.touches ? _node : _this.contentWindow;

                if (_isKeySorting) {
                  _this.listenerNode.addEventListener('wheel', _this.handleKeyEnd, true);

                  _this.listenerNode.addEventListener('mousedown', _this.handleKeyEnd, true);

                  _this.listenerNode.addEventListener('keydown', _this.handleKeyDown);
                } else {
                  events.move.forEach(function (eventName) {
                    return _this.listenerNode.addEventListener(eventName, _this.handleSortMove, false);
                  });
                  events.end.forEach(function (eventName) {
                    return _this.listenerNode.addEventListener(eventName, _this.handleSortEnd, false);
                  });
                }

                _this.setState({
                  sorting: true,
                  sortingIndex: index
                });

                if (_onSortStart) {
                  _onSortStart({
                    node: _node,
                    index: index,
                    collection: _collection,
                    isKeySorting: _isKeySorting,
                    nodes: _this.manager.getOrderedRefs(),
                    helper: _this.helper
                  }, event);
                }

                if (_isKeySorting) {
                  _this.keyMove(0);
                }
              };

              var _this$props3 = _this.props,
                  _axis = _this$props3.axis,
                  _getHelperDimensions = _this$props3.getHelperDimensions,
                  _helperClass = _this$props3.helperClass,
                  _hideSortableGhost = _this$props3.hideSortableGhost,
                  updateBeforeSortStart = _this$props3.updateBeforeSortStart,
                  _onSortStart = _this$props3.onSortStart,
                  _useWindowAsScrollContainer = _this$props3.useWindowAsScrollContainer;
              var _node = active.node,
                  _collection = active.collection;
              var _isKeySorting = _this.manager.isKeySorting;

              var _temp8 = function () {
                if (typeof updateBeforeSortStart === 'function') {
                  _this._awaitingUpdateBeforeSortStart = true;

                  var _temp9 = _finallyRethrows(function () {
                    var index = _node.sortableInfo.index;
                    return Promise.resolve(updateBeforeSortStart({
                      collection: _collection,
                      index: index,
                      node: _node,
                      isKeySorting: _isKeySorting
                    }, event)).then(function () {});
                  }, function (_wasThrown, _result) {
                    _this._awaitingUpdateBeforeSortStart = false;
                    if (_wasThrown) throw _result;
                    return _result;
                  });

                  if (_temp9 && _temp9.then) return _temp9.then(function () {});
                }
              }();

              return _temp8 && _temp8.then ? _temp8.then(_temp7) : _temp7(_temp8);
            }
          }();

          return Promise.resolve(_temp6 && _temp6.then ? _temp6.then(function () {}) : void 0);
        } catch (e) {
          return Promise.reject(e);
        }
      });

      (0, _defineProperty3.default)((0, _assertThisInitialized3.default)((0, _assertThisInitialized3.default)(_this)), "handleSortMove", function (event) {
        var onSortMove = _this.props.onSortMove;

        if (typeof event.preventDefault === 'function') {
          event.preventDefault();
        }

        _this.updateHelperPosition(event);

        _this.animateNodes();

        _this.autoscroll();

        if (onSortMove) {
          onSortMove(event);
        }
      });

      (0, _defineProperty3.default)((0, _assertThisInitialized3.default)((0, _assertThisInitialized3.default)(_this)), "handleSortEnd", function (event) {
        var _this$props4 = _this.props,
            hideSortableGhost = _this$props4.hideSortableGhost,
            onSortEnd = _this$props4.onSortEnd;
        var _this$manager = _this.manager,
            collection = _this$manager.active.collection,
            isKeySorting = _this$manager.isKeySorting;

        var nodes = _this.manager.getOrderedRefs();

        if (_this.listenerNode) {
          if (isKeySorting) {
            _this.listenerNode.removeEventListener('wheel', _this.handleKeyEnd, true);

            _this.listenerNode.removeEventListener('mousedown', _this.handleKeyEnd, true);

            _this.listenerNode.removeEventListener('keydown', _this.handleKeyDown);
          } else {
            events.move.forEach(function (eventName) {
              return _this.listenerNode.removeEventListener(eventName, _this.handleSortMove);
            });
            events.end.forEach(function (eventName) {
              return _this.listenerNode.removeEventListener(eventName, _this.handleSortEnd);
            });
          }
        }

        _this.helper.parentNode.removeChild(_this.helper);

        if (hideSortableGhost && _this.sortableGhost) {
          setInlineStyles(_this.sortableGhost, {
            opacity: '',
            visibility: ''
          });
        }

        for (var i = 0, len = nodes.length; i < len; i++) {
          var _node2 = nodes[i];
          var el = _node2.node;
          _node2.edgeOffset = null;
          _node2.boundingClientRect = null;
          setTranslate3d(el, null);
          setTransitionDuration(el, null);
          _node2.translate = null;
        }

        _this.autoScroller.clear();

        _this.manager.active = null;
        _this.manager.isKeySorting = false;

        _this.setState({
          sorting: false,
          sortingIndex: null
        });

        if (typeof onSortEnd === 'function') {
          onSortEnd({
            collection: collection,
            newIndex: _this.newIndex,
            oldIndex: _this.index,
            isKeySorting: isKeySorting,
            nodes: nodes
          }, event);
        }

        _this.touched = false;
      });

      (0, _defineProperty3.default)((0, _assertThisInitialized3.default)((0, _assertThisInitialized3.default)(_this)), "autoscroll", function () {
        var disableAutoscroll = _this.props.disableAutoscroll;
        var isKeySorting = _this.manager.isKeySorting;

        if (disableAutoscroll) {
          _this.autoScroller.clear();

          return;
        }

        if (isKeySorting) {
          var translate = (0, _objectSpread3.default)({}, _this.translate);

          var scrollX = 0;
          var scrollY = 0;

          if (_this.axis.x) {
            translate.x = Math.min(_this.maxTranslate.x, Math.max(_this.minTranslate.x, _this.translate.x));
            scrollX = _this.translate.x - translate.x;
          }

          if (_this.axis.y) {
            translate.y = Math.min(_this.maxTranslate.y, Math.max(_this.minTranslate.y, _this.translate.y));
            scrollY = _this.translate.y - translate.y;
          }

          _this.translate = translate;
          setTranslate3d(_this.helper, _this.translate);
          _this.scrollContainer.scrollLeft += scrollX;
          _this.scrollContainer.scrollTop += scrollY;
          return;
        }

        _this.autoScroller.update({
          height: _this.height,
          maxTranslate: _this.maxTranslate,
          minTranslate: _this.minTranslate,
          translate: _this.translate,
          width: _this.width
        });
      });

      (0, _defineProperty3.default)((0, _assertThisInitialized3.default)((0, _assertThisInitialized3.default)(_this)), "onAutoScroll", function (offset) {
        _this.translate.x += offset.left;
        _this.translate.y += offset.top;

        _this.animateNodes();
      });

      (0, _defineProperty3.default)((0, _assertThisInitialized3.default)((0, _assertThisInitialized3.default)(_this)), "handleKeyDown", function (event) {
        var keyCode = event.keyCode;
        var _this$props5 = _this.props,
            shouldCancelStart = _this$props5.shouldCancelStart,
            _this$props5$keyCodes = _this$props5.keyCodes,
            customKeyCodes = _this$props5$keyCodes === void 0 ? {} : _this$props5$keyCodes;

        var keyCodes = (0, _objectSpread3.default)({}, defaultKeyCodes, customKeyCodes);

        if (_this.manager.active && !_this.manager.isKeySorting || !_this.manager.active && (!keyCodes.lift.includes(keyCode) || shouldCancelStart(event) || !_this.isValidSortingTarget(event))) {
          return;
        }

        event.stopPropagation();
        event.preventDefault();

        if (keyCodes.lift.includes(keyCode) && !_this.manager.active) {
          _this.keyLift(event);
        } else if (keyCodes.drop.includes(keyCode) && _this.manager.active) {
          _this.keyDrop(event);
        } else if (keyCodes.cancel.includes(keyCode)) {
          _this.newIndex = _this.manager.active.index;

          _this.keyDrop(event);
        } else if (keyCodes.up.includes(keyCode)) {
          _this.keyMove(-1);
        } else if (keyCodes.down.includes(keyCode)) {
          _this.keyMove(1);
        }
      });

      (0, _defineProperty3.default)((0, _assertThisInitialized3.default)((0, _assertThisInitialized3.default)(_this)), "keyLift", function (event) {
        var target = event.target;
        var node = closest(target, function (el) {
          return el.sortableInfo != null;
        });
        var _node$sortableInfo2 = node.sortableInfo,
            index = _node$sortableInfo2.index,
            collection = _node$sortableInfo2.collection;
        _this.initialFocusedNode = target;
        _this.manager.isKeySorting = true;
        _this.manager.active = {
          index: index,
          collection: collection
        };

        _this.handlePress(event);
      });

      (0, _defineProperty3.default)((0, _assertThisInitialized3.default)((0, _assertThisInitialized3.default)(_this)), "keyMove", function (shift) {
        var nodes = _this.manager.getOrderedRefs();

        var lastIndex = nodes[nodes.length - 1].node.sortableInfo.index;
        var newIndex = _this.newIndex + shift;
        var prevIndex = _this.newIndex;

        if (newIndex < 0 || newIndex > lastIndex) {
          return;
        }

        _this.prevIndex = prevIndex;
        _this.newIndex = newIndex;
        var targetIndex = getTargetIndex(_this.newIndex, _this.prevIndex, _this.index);
        var target = nodes.find(function (_ref2) {
          var node = _ref2.node;
          return node.sortableInfo.index === targetIndex;
        });
        var targetNode = target.node;
        var scrollDelta = _this.containerScrollDelta;
        var targetBoundingClientRect = target.boundingClientRect || getScrollAdjustedBoundingClientRect(targetNode, scrollDelta);
        var targetTranslate = target.translate || {
          x: 0,
          y: 0
        };
        var targetPosition = {
          top: targetBoundingClientRect.top + targetTranslate.y - scrollDelta.top,
          left: targetBoundingClientRect.left + targetTranslate.x - scrollDelta.left
        };
        var shouldAdjustForSize = prevIndex < newIndex;
        var sizeAdjustment = {
          x: shouldAdjustForSize && _this.axis.x ? targetNode.offsetWidth - _this.width : 0,
          y: shouldAdjustForSize && _this.axis.y ? targetNode.offsetHeight - _this.height : 0
        };

        _this.handleSortMove({
          pageX: targetPosition.left + sizeAdjustment.x,
          pageY: targetPosition.top + sizeAdjustment.y,
          ignoreTransition: shift === 0
        });
      });

      (0, _defineProperty3.default)((0, _assertThisInitialized3.default)((0, _assertThisInitialized3.default)(_this)), "keyDrop", function (event) {
        _this.handleSortEnd(event);

        if (_this.initialFocusedNode) {
          _this.initialFocusedNode.focus();
        }
      });

      (0, _defineProperty3.default)((0, _assertThisInitialized3.default)((0, _assertThisInitialized3.default)(_this)), "handleKeyEnd", function (event) {
        if (_this.manager.active) {
          _this.keyDrop(event);
        }
      });

      (0, _defineProperty3.default)((0, _assertThisInitialized3.default)((0, _assertThisInitialized3.default)(_this)), "isValidSortingTarget", function (event) {
        var useDragHandle = _this.props.useDragHandle;
        var target = event.target;
        var node = closest(target, function (el) {
          return el.sortableInfo != null;
        });
        return node && node.sortableInfo && !node.sortableInfo.disabled && (useDragHandle ? isSortableHandle(target) : target.sortableInfo);
      });

      validateProps(props);
      _this.manager = new Manager();
      _this.events = {
        end: _this.handleEnd,
        move: _this.handleMove,
        start: _this.handleStart
      };
      return _this;
    }

    (0, _createClass3.default)(WithSortableContainer, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          manager: this.manager
        };
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        var useWindowAsScrollContainer = this.props.useWindowAsScrollContainer;
        var container = this.getContainer();
        Promise.resolve(container).then(function (containerNode) {
          _this2.container = containerNode;
          _this2.document = _this2.container.ownerDocument || document;
          var contentWindow = _this2.props.contentWindow || _this2.document.defaultView || window;
          _this2.contentWindow = typeof contentWindow === 'function' ? contentWindow() : contentWindow;
          _this2.scrollContainer = useWindowAsScrollContainer ? _this2.document.scrollingElement || _this2.document.documentElement : getScrollingParent(_this2.container) || _this2.container;
          _this2.autoScroller = new AutoScroller(_this2.scrollContainer, _this2.onAutoScroll);
          Object.keys(_this2.events).forEach(function (key) {
            return events[key].forEach(function (eventName) {
              return _this2.container.addEventListener(eventName, _this2.events[key], false);
            });
          });

          _this2.container.addEventListener('keydown', _this2.handleKeyDown);
        });
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        var _this3 = this;

        if (this.helper && this.helper.parentNode) {
          this.helper.parentNode.removeChild(this.helper);
        }

        if (!this.container) {
          return;
        }

        Object.keys(this.events).forEach(function (key) {
          return events[key].forEach(function (eventName) {
            return _this3.container.removeEventListener(eventName, _this3.events[key]);
          });
        });
        this.container.removeEventListener('keydown', this.handleKeyDown);
      }
    }, {
      key: "updateHelperPosition",
      value: function updateHelperPosition(event) {
        var _this$props6 = this.props,
            lockAxis = _this$props6.lockAxis,
            lockOffset = _this$props6.lockOffset,
            lockToContainerEdges = _this$props6.lockToContainerEdges,
            transitionDuration = _this$props6.transitionDuration,
            _this$props6$keyboard = _this$props6.keyboardSortingTransitionDuration,
            keyboardSortingTransitionDuration = _this$props6$keyboard === void 0 ? transitionDuration : _this$props6$keyboard;
        var isKeySorting = this.manager.isKeySorting;
        var ignoreTransition = event.ignoreTransition;
        var offset = getPosition(event);
        var translate = {
          x: offset.x - this.initialOffset.x,
          y: offset.y - this.initialOffset.y
        };
        translate.y -= window.pageYOffset - this.initialWindowScroll.top;
        translate.x -= window.pageXOffset - this.initialWindowScroll.left;
        this.translate = translate;

        if (lockToContainerEdges) {
          var _getLockPixelOffsets = getLockPixelOffsets({
            height: this.height,
            lockOffset: lockOffset,
            width: this.width
          }),
              _getLockPixelOffsets2 = (0, _slicedToArray3.default)(_getLockPixelOffsets, 2),
              minLockOffset = _getLockPixelOffsets2[0],
              maxLockOffset = _getLockPixelOffsets2[1];

          var minOffset = {
            x: this.width / 2 - minLockOffset.x,
            y: this.height / 2 - minLockOffset.y
          };
          var maxOffset = {
            x: this.width / 2 - maxLockOffset.x,
            y: this.height / 2 - maxLockOffset.y
          };
          translate.x = limit(this.minTranslate.x + minOffset.x, this.maxTranslate.x - maxOffset.x, translate.x);
          translate.y = limit(this.minTranslate.y + minOffset.y, this.maxTranslate.y - maxOffset.y, translate.y);
        }

        if (lockAxis === 'x') {
          translate.y = 0;
        } else if (lockAxis === 'y') {
          translate.x = 0;
        }

        if (isKeySorting && keyboardSortingTransitionDuration && !ignoreTransition) {
          setTransitionDuration(this.helper, keyboardSortingTransitionDuration);
        }

        setTranslate3d(this.helper, translate);
      }
    }, {
      key: "animateNodes",
      value: function animateNodes() {
        var _this$props7 = this.props,
            transitionDuration = _this$props7.transitionDuration,
            hideSortableGhost = _this$props7.hideSortableGhost,
            onSortOver = _this$props7.onSortOver;
        var containerScrollDelta = this.containerScrollDelta,
            windowScrollDelta = this.windowScrollDelta;
        var nodes = this.manager.getOrderedRefs();
        var sortingOffset = {
          left: this.offsetEdge.left + this.translate.x + containerScrollDelta.left,
          top: this.offsetEdge.top + this.translate.y + containerScrollDelta.top
        };
        var isKeySorting = this.manager.isKeySorting;
        var prevIndex = this.newIndex;
        this.newIndex = null;

        for (var i = 0, len = nodes.length; i < len; i++) {
          var _node3 = nodes[i].node;
          var index = _node3.sortableInfo.index;
          var width = _node3.offsetWidth;
          var height = _node3.offsetHeight;
          var offset = {
            height: this.height > height ? height / 2 : this.height / 2,
            width: this.width > width ? width / 2 : this.width / 2
          };
          var mustShiftBackward = isKeySorting && index > this.index && index <= prevIndex;
          var mustShiftForward = isKeySorting && index < this.index && index >= prevIndex;
          var translate = {
            x: 0,
            y: 0
          };
          var edgeOffset = nodes[i].edgeOffset;

          if (!edgeOffset) {
            edgeOffset = getEdgeOffset(_node3, this.container);
            nodes[i].edgeOffset = edgeOffset;

            if (isKeySorting) {
              nodes[i].boundingClientRect = getScrollAdjustedBoundingClientRect(_node3, containerScrollDelta);
            }
          }

          var nextNode = i < nodes.length - 1 && nodes[i + 1];
          var prevNode = i > 0 && nodes[i - 1];

          if (nextNode && !nextNode.edgeOffset) {
            nextNode.edgeOffset = getEdgeOffset(nextNode.node, this.container);

            if (isKeySorting) {
              nextNode.boundingClientRect = getScrollAdjustedBoundingClientRect(nextNode.node, containerScrollDelta);
            }
          }

          if (index === this.index) {
            if (hideSortableGhost) {
              this.sortableGhost = _node3;
              setInlineStyles(_node3, {
                opacity: 0,
                visibility: 'hidden'
              });
            }

            continue;
          }

          if (transitionDuration) {
            setTransitionDuration(_node3, transitionDuration);
          }

          if (this.axis.x) {
            if (this.axis.y) {
              if (mustShiftForward || index < this.index && (sortingOffset.left + windowScrollDelta.left - offset.width <= edgeOffset.left && sortingOffset.top + windowScrollDelta.top <= edgeOffset.top + offset.height || sortingOffset.top + windowScrollDelta.top + offset.height <= edgeOffset.top)) {
                translate.x = this.width + this.marginOffset.x;

                if (edgeOffset.left + translate.x > this.containerBoundingRect.width - offset.width) {
                  if (nextNode) {
                    translate.x = nextNode.edgeOffset.left - edgeOffset.left;
                    translate.y = nextNode.edgeOffset.top - edgeOffset.top;
                  }
                }

                if (this.newIndex === null) {
                  this.newIndex = index;
                }
              } else if (mustShiftBackward || index > this.index && (sortingOffset.left + windowScrollDelta.left + offset.width >= edgeOffset.left && sortingOffset.top + windowScrollDelta.top + offset.height >= edgeOffset.top || sortingOffset.top + windowScrollDelta.top + offset.height >= edgeOffset.top + height)) {
                translate.x = -(this.width + this.marginOffset.x);

                if (edgeOffset.left + translate.x < this.containerBoundingRect.left + offset.width) {
                  if (prevNode) {
                    translate.x = prevNode.edgeOffset.left - edgeOffset.left;
                    translate.y = prevNode.edgeOffset.top - edgeOffset.top;
                  }
                }

                this.newIndex = index;
              }
            } else {
              if (mustShiftBackward || index > this.index && sortingOffset.left + windowScrollDelta.left + offset.width >= edgeOffset.left) {
                translate.x = -(this.width + this.marginOffset.x);
                this.newIndex = index;
              } else if (mustShiftForward || index < this.index && sortingOffset.left + windowScrollDelta.left <= edgeOffset.left + offset.width) {
                translate.x = this.width + this.marginOffset.x;

                if (this.newIndex == null) {
                  this.newIndex = index;
                }
              }
            }
          } else if (this.axis.y) {
            if (mustShiftBackward || index > this.index && sortingOffset.top + windowScrollDelta.top + offset.height >= edgeOffset.top) {
              translate.y = -(this.height + this.marginOffset.y);
              this.newIndex = index;
            } else if (mustShiftForward || index < this.index && sortingOffset.top + windowScrollDelta.top <= edgeOffset.top + offset.height) {
              translate.y = this.height + this.marginOffset.y;

              if (this.newIndex == null) {
                this.newIndex = index;
              }
            }
          }

          setTranslate3d(_node3, translate);
          nodes[i].translate = translate;
        }

        if (this.newIndex == null) {
          this.newIndex = this.index;
        }

        if (isKeySorting) {
          this.newIndex = prevIndex;
        }

        var oldIndex = isKeySorting ? this.prevIndex : prevIndex;

        if (onSortOver && this.newIndex !== oldIndex) {
          onSortOver({
            collection: this.manager.active.collection,
            index: this.index,
            newIndex: this.newIndex,
            oldIndex: oldIndex,
            isKeySorting: isKeySorting,
            nodes: nodes,
            helper: this.helper
          });
        }
      }
    }, {
      key: "getWrappedInstance",
      value: function getWrappedInstance() {
        (0, _invariant2.default)(config.withRef, 'To access the wrapped instance, you need to pass in {withRef: true} as the second argument of the SortableContainer() call');
        return this.refs.wrappedInstance;
      }
    }, {
      key: "getContainer",
      value: function getContainer() {
        var getContainer = this.props.getContainer;

        if (typeof getContainer !== 'function') {
          return (0, _reactDom.findDOMNode)(this);
        }

        return getContainer(config.withRef ? this.getWrappedInstance() : undefined);
      }
    }, {
      key: "render",
      value: function render() {
        var ref = config.withRef ? 'wrappedInstance' : null;
        return (0, _react.createElement)(WrappedComponent, (0, _extends3.default)({
          ref: ref
        }, omit(this.props, omittedProps)));
      }
    }, {
      key: "helperContainer",
      get: function get() {
        var helperContainer = this.props.helperContainer;

        if (typeof helperContainer === 'function') {
          return helperContainer();
        }

        return this.props.helperContainer || this.document.body;
      }
    }, {
      key: "containerScrollDelta",
      get: function get() {
        var useWindowAsScrollContainer = this.props.useWindowAsScrollContainer;

        if (useWindowAsScrollContainer) {
          return {
            left: 0,
            top: 0
          };
        }

        return {
          left: this.scrollContainer.scrollLeft - this.initialScroll.left,
          top: this.scrollContainer.scrollTop - this.initialScroll.top
        };
      }
    }, {
      key: "windowScrollDelta",
      get: function get() {
        return {
          left: this.contentWindow.pageXOffset - this.initialWindowScroll.left,
          top: this.contentWindow.pageYOffset - this.initialWindowScroll.top
        };
      }
    }]);

    return WithSortableContainer;
  }(_react.Component), (0, _defineProperty3.default)(_class, "displayName", provideDisplayName('sortableList', WrappedComponent)), (0, _defineProperty3.default)(_class, "defaultProps", defaultProps), (0, _defineProperty3.default)(_class, "propTypes", propTypes), (0, _defineProperty3.default)(_class, "childContextTypes", {
    manager: _propTypes2.default.object.isRequired
  }), _temp;
}

var propTypes$1 = {
  index: _propTypes2.default.number.isRequired,
  collection: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
  disabled: _propTypes2.default.bool
};
var omittedProps$1 = Object.keys(propTypes$1);
function sortableElement(WrappedComponent) {
  var _class, _temp;

  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    withRef: false
  };
  return _temp = _class = function (_React$Component) {
    (0, _inherits3.default)(WithSortableElement, _React$Component);

    function WithSortableElement() {
      (0, _classCallCheck3.default)(this, WithSortableElement);

      return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf3.default)(WithSortableElement).apply(this, arguments));
    }

    (0, _createClass3.default)(WithSortableElement, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.register();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (this.node) {
          if (prevProps.index !== this.props.index) {
            this.node.sortableInfo.index = this.props.index;
          }

          if (prevProps.disabled !== this.props.disabled) {
            this.node.sortableInfo.disabled = this.props.disabled;
          }
        }

        if (prevProps.collection !== this.props.collection) {
          this.unregister(prevProps.collection);
          this.register();
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.unregister();
      }
    }, {
      key: "register",
      value: function register() {
        var _this$props = this.props,
            collection = _this$props.collection,
            disabled = _this$props.disabled,
            index = _this$props.index;
        var node = (0, _reactDom.findDOMNode)(this);
        node.sortableInfo = {
          collection: collection,
          disabled: disabled,
          index: index,
          manager: this.context.manager
        };
        this.node = node;
        this.ref = {
          node: node
        };
        this.context.manager.add(collection, this.ref);
      }
    }, {
      key: "unregister",
      value: function unregister() {
        var collection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props.collection;
        this.context.manager.remove(collection, this.ref);
      }
    }, {
      key: "getWrappedInstance",
      value: function getWrappedInstance() {
        (0, _invariant2.default)(config.withRef, 'To access the wrapped instance, you need to pass in {withRef: true} as the second argument of the SortableElement() call');
        return this.refs.wrappedInstance;
      }
    }, {
      key: "render",
      value: function render() {
        var ref = config.withRef ? 'wrappedInstance' : null;
        return (0, _react.createElement)(WrappedComponent, (0, _extends3.default)({
          ref: ref
        }, omit(this.props, omittedProps$1)));
      }
    }]);

    return WithSortableElement;
  }(_react.Component), (0, _defineProperty3.default)(_class, "displayName", provideDisplayName('sortableElement', WrappedComponent)), (0, _defineProperty3.default)(_class, "contextTypes", {
    manager: _propTypes2.default.object.isRequired
  }), (0, _defineProperty3.default)(_class, "propTypes", propTypes$1), (0, _defineProperty3.default)(_class, "defaultProps", {
    collection: 0
  }), _temp;
}

exports.SortableContainer = sortableContainer;
exports.sortableContainer = sortableContainer;
exports.SortableElement = sortableElement;
exports.sortableElement = sortableElement;
exports.SortableHandle = sortableHandle;
exports.sortableHandle = sortableHandle;
exports.arrayMove = arrayMove;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)))

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = __webpack_require__(314);

var _stringify2 = _interopRequireDefault(_stringify);

var _extends2 = __webpack_require__(316);

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = __webpack_require__(325);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(329);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(330);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(334);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(356);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(9);

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(18);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _lottieWeb = __webpack_require__(364);

var _lottieWeb2 = _interopRequireDefault(_lottieWeb);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

var Lottie = function (_React$Component) {
  (0, _inherits3.default)(Lottie, _React$Component);

  function Lottie() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, Lottie);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Lottie.__proto__ || (0, _getPrototypeOf2.default)(Lottie)).call.apply(_ref, [this].concat(args))), _this), _this.handleClickToPause = function () {
      // The pause() method is for handling pausing by passing a prop isPaused
      // This method is for handling the ability to pause by clicking on the animation
      if (_this.anim.isPaused) {
        _this.anim.play();
      } else {
        _this.anim.pause();
      }
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(Lottie, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _props = this.props,
          options = _props.options,
          playSegments = _props.playSegments,
          goToAndPlay = _props.goToAndPlay,
          goToAndStop = _props.goToAndStop,
          eventListeners = _props.eventListeners;
      var loop = options.loop,
          autoplay = options.autoplay,
          animationData = options.animationData,
          rendererSettings = options.rendererSettings;

      this.options = {
        container: this.el,
        renderer: 'svg',
        loop: loop !== false,
        autoplay: autoplay !== false,
        playSegments: playSegments.segments !== null,
        goToAndPlay: goToAndPlay.value !== null,
        goToAndStop: goToAndStop.value !== null,
        animationData: animationData,
        rendererSettings: rendererSettings
      };

      this.options = (0, _extends3.default)({}, this.options, options);
      this.anim = _lottieWeb2.default.loadAnimation(this.options);

      // Immediately handle goTo's if necessary.
      if (this.options.goToAndPlay) {
        this.goToAndPlay();
      }
      if (this.options.goToAndStop) {
        this.goToAndStop();
      }
      if (this.options.playSegments) {
        this.playSegments();
      }
      this.registerEvents(eventListeners);
    }
  }, {
    key: 'componentWillUpdate',
    value: function componentWillUpdate(nextProps /* , nextState */) {
      /* Recreate the animation handle if the data is changed */
      if (this.options.animationData !== nextProps.options.animationData) {
        this.deRegisterEvents(this.props.eventListeners);
        this.destroy();
        this.options = (0, _extends3.default)({}, this.options, nextProps.options);
        this.anim = _lottieWeb2.default.loadAnimation(this.options);
        this.registerEvents(nextProps.eventListeners);
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      if (this.props.isStopped) {
        this.stop();
      } else if (this.options.playSegments) {
        this.playSegments();
      } else {
        this.play();
      }

      if ((0, _stringify2.default)(this.props.goToAndPlay) !== (0, _stringify2.default)(prevProps.goToAndPlay)) {
        this.goToAndPlay();
      }

      if ((0, _stringify2.default)(this.props.goToAndStop) !== (0, _stringify2.default)(prevProps.goToAndStop)) {
        this.goToAndStop();
      }

      this.pause();
      this.setSpeed();
      this.setDirection();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.deRegisterEvents(this.props.eventListeners);
      this.destroy();
      this.options.animationData = null;
      this.anim = null;
    }
  }, {
    key: 'setSpeed',
    value: function setSpeed() {
      this.anim.setSpeed(this.props.speed);
    }
  }, {
    key: 'setDirection',
    value: function setDirection() {
      this.anim.setDirection(this.props.direction);
    }
  }, {
    key: 'play',
    value: function play() {
      this.anim.play();
    }
  }, {
    key: 'playSegments',
    value: function playSegments() {
      var _props$playSegments = this.props.playSegments,
          segments = _props$playSegments.segments,
          forceFlag = _props$playSegments.forceFlag;

      this.anim.playSegments(segments, forceFlag);
    }
  }, {
    key: 'stop',
    value: function stop() {
      this.anim.stop();
    }
  }, {
    key: 'pause',
    value: function pause() {
      if (this.props.isPaused && !this.anim.isPaused) {
        this.anim.pause();
      } else if (!this.props.isPaused && this.anim.isPaused) {
        this.anim.pause();
      }
    }
  }, {
    key: 'goToAndPlay',
    value: function goToAndPlay() {
      console.log('#goToAndPlay ', this.props.goToAndPlay);
      var _props$goToAndPlay = this.props.goToAndPlay,
          value = _props$goToAndPlay.value,
          isFrame = _props$goToAndPlay.isFrame;

      this.anim.goToAndPlay(value, isFrame);
    }
  }, {
    key: 'goToAndStop',
    value: function goToAndStop() {
      var _props$goToAndStop = this.props.goToAndStop,
          value = _props$goToAndStop.value,
          isFrame = _props$goToAndStop.isFrame;

      this.anim.goToAndStop(value, isFrame);
    }
  }, {
    key: 'destroy',
    value: function destroy() {
      this.anim.destroy();
    }
  }, {
    key: 'registerEvents',
    value: function registerEvents(eventListeners) {
      var _this2 = this;

      eventListeners.forEach(function (eventListener) {
        _this2.anim.addEventListener(eventListener.eventName, eventListener.callback);
      });
    }
  }, {
    key: 'deRegisterEvents',
    value: function deRegisterEvents(eventListeners) {
      var _this3 = this;

      eventListeners.forEach(function (eventListener) {
        _this3.anim.removeEventListener(eventListener.eventName, eventListener.callback);
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this4 = this;

      var _props2 = this.props,
          width = _props2.width,
          height = _props2.height,
          ariaRole = _props2.ariaRole,
          ariaLabel = _props2.ariaLabel,
          isClickToPauseDisabled = _props2.isClickToPauseDisabled,
          title = _props2.title;

      var getSize = function getSize(initial) {
        var size = void 0;

        if (typeof initial === 'number') {
          size = initial + 'px';
        } else {
          size = initial || '100%';
        }

        return size;
      };

      var lottieStyles = (0, _extends3.default)({
        width: getSize(width),
        height: getSize(height),
        overflow: 'hidden',
        margin: '0 auto',
        outline: 'none'
      }, this.props.style);

      var onClickHandler = isClickToPauseDisabled ? function () {
        return null;
      } : this.handleClickToPause;

      return (
        // Bug with eslint rules https://github.com/airbnb/javascript/issues/1374
        // eslint-disable-next-line jsx-a11y/no-static-element-interactions
        _react2.default.createElement('div', {
          ref: function ref(c) {
            _this4.el = c;
          },
          style: lottieStyles,
          onClick: onClickHandler,
          title: title,
          role: ariaRole,
          'aria-label': ariaLabel,
          tabIndex: '0'
        })
      );
    }
  }]);
  return Lottie;
}(_react2.default.Component);

exports.default = Lottie;

Lottie.propTypes = {
  eventListeners: _propTypes2.default.arrayOf(_propTypes2.default.object),
  options: _propTypes2.default.object.isRequired,
  height: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  width: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  isStopped: _propTypes2.default.bool,
  isPaused: _propTypes2.default.bool,
  goToAndPlay: _propTypes2.default.shape({
    value: _propTypes2.default.number,
    isFrame: _propTypes2.default.bool
  }),
  goToAndStop: _propTypes2.default.shape({
    value: _propTypes2.default.number,
    isFrame: _propTypes2.default.bool
  }),
  speed: _propTypes2.default.number,
  playSegments: _propTypes2.default.shape({
    segments: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.number), _propTypes2.default.arrayOf(_propTypes2.default.arrayOf(_propTypes2.default.number))]),
    forceFlag: _propTypes2.default.bool
  }),
  direction: _propTypes2.default.number,
  ariaRole: _propTypes2.default.string,
  ariaLabel: _propTypes2.default.string,
  isClickToPauseDisabled: _propTypes2.default.bool,
  title: _propTypes2.default.string,
  style: _propTypes2.default.string
};

Lottie.defaultProps = {
  eventListeners: [],
  isStopped: false,
  isPaused: false,
  goToAndPlay: {
    value: null,
    isFrame: false
  },
  goToAndStop: {
    value: null,
    isFrame: false
  },
  playSegments: {
    segments: null,
    forceFlag: false
  },
  speed: 1,
  ariaRole: 'button',
  ariaLabel: 'animation',
  isClickToPauseDisabled: false,
  title: ''
};

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__(34);
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var shared = __webpack_require__(76)('keys');
var uid = __webpack_require__(57);
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var core = __webpack_require__(13);
var global = __webpack_require__(20);
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: core.version,
  mode: __webpack_require__(56) ? 'pure' : 'global',
  copyright: '© 2018 Denis Pushkarev (zloirock.ru)'
});

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// IE 8- don't enum bug keys
module.exports = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.f = Object.getOwnPropertySymbols;

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// 7.1.13 ToObject(argument)
var defined = __webpack_require__(73);
module.exports = function (it) {
  return Object(defined(it));
};

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {};

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = __webpack_require__(41);
var dPs = __webpack_require__(340);
var enumBugKeys = __webpack_require__(77);
var IE_PROTO = __webpack_require__(75)('IE_PROTO');
var Empty = function Empty() {/* empty */};
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var _createDict = function createDict() {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = __webpack_require__(119)('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  __webpack_require__(341).appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  _createDict = iframeDocument.F;
  while (i--) {
    delete _createDict[PROTOTYPE][enumBugKeys[i]];
  }return _createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = _createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var def = __webpack_require__(26).f;
var has = __webpack_require__(28);
var TAG = __webpack_require__(37)('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.f = __webpack_require__(37);

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var global = __webpack_require__(20);
var core = __webpack_require__(13);
var LIBRARY = __webpack_require__(56);
var wksExt = __webpack_require__(83);
var defineProperty = __webpack_require__(26).f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var baseGet = __webpack_require__(86);

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

module.exports = get;

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var castPath = __webpack_require__(87),
    toKey = __webpack_require__(48);

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = castPath(path, object);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return index && index == length ? object : undefined;
}

module.exports = baseGet;

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isArray = __webpack_require__(14),
    isKey = __webpack_require__(59),
    stringToPath = __webpack_require__(135),
    toString = __webpack_require__(159);

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value, object) {
  if (isArray(value)) {
    return value;
  }
  return isKey(value, object) ? [value] : stringToPath(toString(value));
}

module.exports = castPath;

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/** Detect free variable `global` from Node.js. */
var freeGlobal = (typeof global === 'undefined' ? 'undefined' : _typeof(global)) == 'object' && global && global.Object === Object && global;

module.exports = freeGlobal;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(89)))

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var g;

// This works in non-strict mode
g = function () {
	return this;
}();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1, eval)("this");
} catch (e) {
	// This works if the window reference is available
	if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var baseGetTag = __webpack_require__(38),
    isObject = __webpack_require__(62);

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
    if (!isObject(value)) {
        return false;
    }
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.
    var tag = baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

module.exports = isFunction;

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/** Used for built-in method references. */
var funcProto = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return func + '';
    } catch (e) {}
  }
  return '';
}

module.exports = toSource;

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || value !== value && other !== other;
}

module.exports = eq;

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

module.exports = arrayMap;

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var arrayMap = __webpack_require__(93),
    baseIteratee = __webpack_require__(161),
    baseMap = __webpack_require__(211),
    isArray = __webpack_require__(14);

/**
 * Creates an array of values by running each element in `collection` thru
 * `iteratee`. The iteratee is invoked with three arguments:
 * (value, index|key, collection).
 *
 * Many lodash methods are guarded to work as iteratees for methods like
 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
 *
 * The guarded methods are:
 * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
 * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
 * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
 * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * _.map([4, 8], square);
 * // => [16, 64]
 *
 * _.map({ 'a': 4, 'b': 8 }, square);
 * // => [16, 64] (iteration order is not guaranteed)
 *
 * var users = [
 *   { 'user': 'barney' },
 *   { 'user': 'fred' }
 * ];
 *
 * // The `_.property` iteratee shorthand.
 * _.map(users, 'user');
 * // => ['barney', 'fred']
 */
function map(collection, iteratee) {
  var func = isArray(collection) ? arrayMap : baseMap;
  return func(collection, baseIteratee(iteratee, 3));
}

module.exports = map;

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var ListCache = __webpack_require__(45),
    stackClear = __webpack_require__(164),
    stackDelete = __webpack_require__(165),
    stackGet = __webpack_require__(166),
    stackHas = __webpack_require__(167),
    stackSet = __webpack_require__(168);

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

module.exports = Stack;

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var baseIsEqualDeep = __webpack_require__(169),
    isObjectLike = __webpack_require__(39);

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}

module.exports = baseIsEqual;

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var SetCache = __webpack_require__(170),
    arraySome = __webpack_require__(173),
    cacheHas = __webpack_require__(174);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Check that cyclic values are equal.
  var arrStacked = stack.get(array);
  var othStacked = stack.get(other);
  if (arrStacked && othStacked) {
    return arrStacked == other && othStacked == array;
  }
  var index = -1,
      result = true,
      seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function (othValue, othIndex) {
        if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          return seen.push(othIndex);
        }
      })) {
        result = false;
        break;
      }
    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

module.exports = equalArrays;

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var baseIsArguments = __webpack_require__(188),
    isObjectLike = __webpack_require__(39);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function () {
    return arguments;
}()) ? baseIsArguments : function (value) {
    return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
};

module.exports = isArguments;

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var root = __webpack_require__(15),
    stubFalse = __webpack_require__(189);

/** Detect free variable `exports`. */
var freeExports = ( false ? 'undefined' : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && ( false ? 'undefined' : _typeof(module)) == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

module.exports = isBuffer;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(49)(module)))

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
  length = length == null ? MAX_SAFE_INTEGER : length;

  return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
}

module.exports = isIndex;

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var baseIsTypedArray = __webpack_require__(190),
    baseUnary = __webpack_require__(191),
    nodeUtil = __webpack_require__(192);

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

module.exports = isTypedArray;

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isObject = __webpack_require__(62);

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */
function isStrictComparable(value) {
  return value === value && !isObject(value);
}

module.exports = isStrictComparable;

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function matchesStrictComparable(key, srcValue) {
  return function (object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
  };
}

module.exports = matchesStrictComparable;

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_RESULT__;

/* Web Font Loader v1.6.28 - (c) Adobe Systems, Google. License: Apache 2.0 */(function () {
  function aa(a, b, c) {
    return a.call.apply(a.bind, arguments);
  }function ba(a, b, c) {
    if (!a) throw Error();if (2 < arguments.length) {
      var d = Array.prototype.slice.call(arguments, 2);return function () {
        var c = Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c, d);return a.apply(b, c);
      };
    }return function () {
      return a.apply(b, arguments);
    };
  }function p(a, b, c) {
    p = Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? aa : ba;return p.apply(null, arguments);
  }var q = Date.now || function () {
    return +new Date();
  };function ca(a, b) {
    this.a = a;this.o = b || a;this.c = this.o.document;
  }var da = !!window.FontFace;function t(a, b, c, d) {
    b = a.c.createElement(b);if (c) for (var e in c) {
      c.hasOwnProperty(e) && ("style" == e ? b.style.cssText = c[e] : b.setAttribute(e, c[e]));
    }d && b.appendChild(a.c.createTextNode(d));return b;
  }function u(a, b, c) {
    a = a.c.getElementsByTagName(b)[0];a || (a = document.documentElement);a.insertBefore(c, a.lastChild);
  }function v(a) {
    a.parentNode && a.parentNode.removeChild(a);
  }
  function w(a, b, c) {
    b = b || [];c = c || [];for (var d = a.className.split(/\s+/), e = 0; e < b.length; e += 1) {
      for (var f = !1, g = 0; g < d.length; g += 1) {
        if (b[e] === d[g]) {
          f = !0;break;
        }
      }f || d.push(b[e]);
    }b = [];for (e = 0; e < d.length; e += 1) {
      f = !1;for (g = 0; g < c.length; g += 1) {
        if (d[e] === c[g]) {
          f = !0;break;
        }
      }f || b.push(d[e]);
    }a.className = b.join(" ").replace(/\s+/g, " ").replace(/^\s+|\s+$/, "");
  }function y(a, b) {
    for (var c = a.className.split(/\s+/), d = 0, e = c.length; d < e; d++) {
      if (c[d] == b) return !0;
    }return !1;
  }
  function ea(a) {
    return a.o.location.hostname || a.a.location.hostname;
  }function z(a, b, c) {
    function d() {
      m && e && f && (m(g), m = null);
    }b = t(a, "link", { rel: "stylesheet", href: b, media: "all" });var e = !1,
        f = !0,
        g = null,
        m = c || null;da ? (b.onload = function () {
      e = !0;d();
    }, b.onerror = function () {
      e = !0;g = Error("Stylesheet failed to load");d();
    }) : setTimeout(function () {
      e = !0;d();
    }, 0);u(a, "head", b);
  }
  function A(a, b, c, d) {
    var e = a.c.getElementsByTagName("head")[0];if (e) {
      var f = t(a, "script", { src: b }),
          g = !1;f.onload = f.onreadystatechange = function () {
        g || this.readyState && "loaded" != this.readyState && "complete" != this.readyState || (g = !0, c && c(null), f.onload = f.onreadystatechange = null, "HEAD" == f.parentNode.tagName && e.removeChild(f));
      };e.appendChild(f);setTimeout(function () {
        g || (g = !0, c && c(Error("Script load timeout")));
      }, d || 5E3);return f;
    }return null;
  };function B() {
    this.a = 0;this.c = null;
  }function C(a) {
    a.a++;return function () {
      a.a--;D(a);
    };
  }function E(a, b) {
    a.c = b;D(a);
  }function D(a) {
    0 == a.a && a.c && (a.c(), a.c = null);
  };function F(a) {
    this.a = a || "-";
  }F.prototype.c = function (a) {
    for (var b = [], c = 0; c < arguments.length; c++) {
      b.push(arguments[c].replace(/[\W_]+/g, "").toLowerCase());
    }return b.join(this.a);
  };function G(a, b) {
    this.c = a;this.f = 4;this.a = "n";var c = (b || "n4").match(/^([nio])([1-9])$/i);c && (this.a = c[1], this.f = parseInt(c[2], 10));
  }function fa(a) {
    return H(a) + " " + (a.f + "00") + " 300px " + I(a.c);
  }function I(a) {
    var b = [];a = a.split(/,\s*/);for (var c = 0; c < a.length; c++) {
      var d = a[c].replace(/['"]/g, "");-1 != d.indexOf(" ") || /^\d/.test(d) ? b.push("'" + d + "'") : b.push(d);
    }return b.join(",");
  }function J(a) {
    return a.a + a.f;
  }function H(a) {
    var b = "normal";"o" === a.a ? b = "oblique" : "i" === a.a && (b = "italic");return b;
  }
  function ga(a) {
    var b = 4,
        c = "n",
        d = null;a && ((d = a.match(/(normal|oblique|italic)/i)) && d[1] && (c = d[1].substr(0, 1).toLowerCase()), (d = a.match(/([1-9]00|normal|bold)/i)) && d[1] && (/bold/i.test(d[1]) ? b = 7 : /[1-9]00/.test(d[1]) && (b = parseInt(d[1].substr(0, 1), 10))));return c + b;
  };function ha(a, b) {
    this.c = a;this.f = a.o.document.documentElement;this.h = b;this.a = new F("-");this.j = !1 !== b.events;this.g = !1 !== b.classes;
  }function ia(a) {
    a.g && w(a.f, [a.a.c("wf", "loading")]);K(a, "loading");
  }function L(a) {
    if (a.g) {
      var b = y(a.f, a.a.c("wf", "active")),
          c = [],
          d = [a.a.c("wf", "loading")];b || c.push(a.a.c("wf", "inactive"));w(a.f, c, d);
    }K(a, "inactive");
  }function K(a, b, c) {
    if (a.j && a.h[b]) if (c) a.h[b](c.c, J(c));else a.h[b]();
  };function ja() {
    this.c = {};
  }function ka(a, b, c) {
    var d = [],
        e;for (e in b) {
      if (b.hasOwnProperty(e)) {
        var f = a.c[e];f && d.push(f(b[e], c));
      }
    }return d;
  };function M(a, b) {
    this.c = a;this.f = b;this.a = t(this.c, "span", { "aria-hidden": "true" }, this.f);
  }function N(a) {
    u(a.c, "body", a.a);
  }function O(a) {
    return "display:block;position:absolute;top:-9999px;left:-9999px;font-size:300px;width:auto;height:auto;line-height:normal;margin:0;padding:0;font-variant:normal;white-space:nowrap;font-family:" + I(a.c) + ";" + ("font-style:" + H(a) + ";font-weight:" + (a.f + "00") + ";");
  };function P(a, b, c, d, e, f) {
    this.g = a;this.j = b;this.a = d;this.c = c;this.f = e || 3E3;this.h = f || void 0;
  }P.prototype.start = function () {
    var a = this.c.o.document,
        b = this,
        c = q(),
        d = new Promise(function (d, e) {
      function f() {
        q() - c >= b.f ? e() : a.fonts.load(fa(b.a), b.h).then(function (a) {
          1 <= a.length ? d() : setTimeout(f, 25);
        }, function () {
          e();
        });
      }f();
    }),
        e = null,
        f = new Promise(function (a, d) {
      e = setTimeout(d, b.f);
    });Promise.race([f, d]).then(function () {
      e && (clearTimeout(e), e = null);b.g(b.a);
    }, function () {
      b.j(b.a);
    });
  };function Q(a, b, c, d, e, f, g) {
    this.v = a;this.B = b;this.c = c;this.a = d;this.s = g || "BESbswy";this.f = {};this.w = e || 3E3;this.u = f || null;this.m = this.j = this.h = this.g = null;this.g = new M(this.c, this.s);this.h = new M(this.c, this.s);this.j = new M(this.c, this.s);this.m = new M(this.c, this.s);a = new G(this.a.c + ",serif", J(this.a));a = O(a);this.g.a.style.cssText = a;a = new G(this.a.c + ",sans-serif", J(this.a));a = O(a);this.h.a.style.cssText = a;a = new G("serif", J(this.a));a = O(a);this.j.a.style.cssText = a;a = new G("sans-serif", J(this.a));a = O(a);this.m.a.style.cssText = a;N(this.g);N(this.h);N(this.j);N(this.m);
  }var R = { D: "serif", C: "sans-serif" },
      S = null;function T() {
    if (null === S) {
      var a = /AppleWebKit\/([0-9]+)(?:\.([0-9]+))/.exec(window.navigator.userAgent);S = !!a && (536 > parseInt(a[1], 10) || 536 === parseInt(a[1], 10) && 11 >= parseInt(a[2], 10));
    }return S;
  }Q.prototype.start = function () {
    this.f.serif = this.j.a.offsetWidth;this.f["sans-serif"] = this.m.a.offsetWidth;this.A = q();U(this);
  };
  function la(a, b, c) {
    for (var d in R) {
      if (R.hasOwnProperty(d) && b === a.f[R[d]] && c === a.f[R[d]]) return !0;
    }return !1;
  }function U(a) {
    var b = a.g.a.offsetWidth,
        c = a.h.a.offsetWidth,
        d;(d = b === a.f.serif && c === a.f["sans-serif"]) || (d = T() && la(a, b, c));d ? q() - a.A >= a.w ? T() && la(a, b, c) && (null === a.u || a.u.hasOwnProperty(a.a.c)) ? V(a, a.v) : V(a, a.B) : ma(a) : V(a, a.v);
  }function ma(a) {
    setTimeout(p(function () {
      U(this);
    }, a), 50);
  }function V(a, b) {
    setTimeout(p(function () {
      v(this.g.a);v(this.h.a);v(this.j.a);v(this.m.a);b(this.a);
    }, a), 0);
  };function W(a, b, c) {
    this.c = a;this.a = b;this.f = 0;this.m = this.j = !1;this.s = c;
  }var X = null;W.prototype.g = function (a) {
    var b = this.a;b.g && w(b.f, [b.a.c("wf", a.c, J(a).toString(), "active")], [b.a.c("wf", a.c, J(a).toString(), "loading"), b.a.c("wf", a.c, J(a).toString(), "inactive")]);K(b, "fontactive", a);this.m = !0;na(this);
  };
  W.prototype.h = function (a) {
    var b = this.a;if (b.g) {
      var c = y(b.f, b.a.c("wf", a.c, J(a).toString(), "active")),
          d = [],
          e = [b.a.c("wf", a.c, J(a).toString(), "loading")];c || d.push(b.a.c("wf", a.c, J(a).toString(), "inactive"));w(b.f, d, e);
    }K(b, "fontinactive", a);na(this);
  };function na(a) {
    0 == --a.f && a.j && (a.m ? (a = a.a, a.g && w(a.f, [a.a.c("wf", "active")], [a.a.c("wf", "loading"), a.a.c("wf", "inactive")]), K(a, "active")) : L(a.a));
  };function oa(a) {
    this.j = a;this.a = new ja();this.h = 0;this.f = this.g = !0;
  }oa.prototype.load = function (a) {
    this.c = new ca(this.j, a.context || this.j);this.g = !1 !== a.events;this.f = !1 !== a.classes;pa(this, new ha(this.c, a), a);
  };
  function qa(a, b, c, d, e) {
    var f = 0 == --a.h;(a.f || a.g) && setTimeout(function () {
      var a = e || null,
          m = d || null || {};if (0 === c.length && f) L(b.a);else {
        b.f += c.length;f && (b.j = f);var h,
            l = [];for (h = 0; h < c.length; h++) {
          var k = c[h],
              n = m[k.c],
              r = b.a,
              x = k;r.g && w(r.f, [r.a.c("wf", x.c, J(x).toString(), "loading")]);K(r, "fontloading", x);r = null;if (null === X) if (window.FontFace) {
            var x = /Gecko.*Firefox\/(\d+)/.exec(window.navigator.userAgent),
                xa = /OS X.*Version\/10\..*Safari/.exec(window.navigator.userAgent) && /Apple/.exec(window.navigator.vendor);
            X = x ? 42 < parseInt(x[1], 10) : xa ? !1 : !0;
          } else X = !1;X ? r = new P(p(b.g, b), p(b.h, b), b.c, k, b.s, n) : r = new Q(p(b.g, b), p(b.h, b), b.c, k, b.s, a, n);l.push(r);
        }for (h = 0; h < l.length; h++) {
          l[h].start();
        }
      }
    }, 0);
  }function pa(a, b, c) {
    var d = [],
        e = c.timeout;ia(b);var d = ka(a.a, c, a.c),
        f = new W(a.c, b, e);a.h = d.length;b = 0;for (c = d.length; b < c; b++) {
      d[b].load(function (b, d, c) {
        qa(a, f, b, d, c);
      });
    }
  };function ra(a, b) {
    this.c = a;this.a = b;
  }
  ra.prototype.load = function (a) {
    function b() {
      if (f["__mti_fntLst" + d]) {
        var c = f["__mti_fntLst" + d](),
            e = [],
            h;if (c) for (var l = 0; l < c.length; l++) {
          var k = c[l].fontfamily;void 0 != c[l].fontStyle && void 0 != c[l].fontWeight ? (h = c[l].fontStyle + c[l].fontWeight, e.push(new G(k, h))) : e.push(new G(k));
        }a(e);
      } else setTimeout(function () {
        b();
      }, 50);
    }var c = this,
        d = c.a.projectId,
        e = c.a.version;if (d) {
      var f = c.c.o;A(this.c, (c.a.api || "https://fast.fonts.net/jsapi") + "/" + d + ".js" + (e ? "?v=" + e : ""), function (e) {
        e ? a([]) : (f["__MonotypeConfiguration__" + d] = function () {
          return c.a;
        }, b());
      }).id = "__MonotypeAPIScript__" + d;
    } else a([]);
  };function sa(a, b) {
    this.c = a;this.a = b;
  }sa.prototype.load = function (a) {
    var b,
        c,
        d = this.a.urls || [],
        e = this.a.families || [],
        f = this.a.testStrings || {},
        g = new B();b = 0;for (c = d.length; b < c; b++) {
      z(this.c, d[b], C(g));
    }var m = [];b = 0;for (c = e.length; b < c; b++) {
      if (d = e[b].split(":"), d[1]) for (var h = d[1].split(","), l = 0; l < h.length; l += 1) {
        m.push(new G(d[0], h[l]));
      } else m.push(new G(d[0]));
    }E(g, function () {
      a(m, f);
    });
  };function ta(a, b) {
    a ? this.c = a : this.c = ua;this.a = [];this.f = [];this.g = b || "";
  }var ua = "https://fonts.googleapis.com/css";function va(a, b) {
    for (var c = b.length, d = 0; d < c; d++) {
      var e = b[d].split(":");3 == e.length && a.f.push(e.pop());var f = "";2 == e.length && "" != e[1] && (f = ":");a.a.push(e.join(f));
    }
  }
  function wa(a) {
    if (0 == a.a.length) throw Error("No fonts to load!");if (-1 != a.c.indexOf("kit=")) return a.c;for (var b = a.a.length, c = [], d = 0; d < b; d++) {
      c.push(a.a[d].replace(/ /g, "+"));
    }b = a.c + "?family=" + c.join("%7C");0 < a.f.length && (b += "&subset=" + a.f.join(","));0 < a.g.length && (b += "&text=" + encodeURIComponent(a.g));return b;
  };function ya(a) {
    this.f = a;this.a = [];this.c = {};
  }
  var za = { latin: "BESbswy", "latin-ext": "\xE7\xF6\xFC\u011F\u015F", cyrillic: "\u0439\u044F\u0416", greek: "\u03B1\u03B2\u03A3", khmer: "\u1780\u1781\u1782", Hanuman: "\u1780\u1781\u1782" },
      Aa = { thin: "1", extralight: "2", "extra-light": "2", ultralight: "2", "ultra-light": "2", light: "3", regular: "4", book: "4", medium: "5", "semi-bold": "6", semibold: "6", "demi-bold": "6", demibold: "6", bold: "7", "extra-bold": "8", extrabold: "8", "ultra-bold": "8", ultrabold: "8", black: "9", heavy: "9", l: "3", r: "4", b: "7" },
      Ba = { i: "i", italic: "i", n: "n", normal: "n" },
      Ca = /^(thin|(?:(?:extra|ultra)-?)?light|regular|book|medium|(?:(?:semi|demi|extra|ultra)-?)?bold|black|heavy|l|r|b|[1-9]00)?(n|i|normal|italic)?$/;
  function Da(a) {
    for (var b = a.f.length, c = 0; c < b; c++) {
      var d = a.f[c].split(":"),
          e = d[0].replace(/\+/g, " "),
          f = ["n4"];if (2 <= d.length) {
        var g;var m = d[1];g = [];if (m) for (var m = m.split(","), h = m.length, l = 0; l < h; l++) {
          var k;k = m[l];if (k.match(/^[\w-]+$/)) {
            var n = Ca.exec(k.toLowerCase());if (null == n) k = "";else {
              k = n[2];k = null == k || "" == k ? "n" : Ba[k];n = n[1];if (null == n || "" == n) n = "4";else var r = Aa[n],
                  n = r ? r : isNaN(n) ? "4" : n.substr(0, 1);k = [k, n].join("");
            }
          } else k = "";k && g.push(k);
        }0 < g.length && (f = g);3 == d.length && (d = d[2], g = [], d = d ? d.split(",") : g, 0 < d.length && (d = za[d[0]]) && (a.c[e] = d));
      }a.c[e] || (d = za[e]) && (a.c[e] = d);for (d = 0; d < f.length; d += 1) {
        a.a.push(new G(e, f[d]));
      }
    }
  };function Ea(a, b) {
    this.c = a;this.a = b;
  }var Fa = { Arimo: !0, Cousine: !0, Tinos: !0 };Ea.prototype.load = function (a) {
    var b = new B(),
        c = this.c,
        d = new ta(this.a.api, this.a.text),
        e = this.a.families;va(d, e);var f = new ya(e);Da(f);z(c, wa(d), C(b));E(b, function () {
      a(f.a, f.c, Fa);
    });
  };function Ga(a, b) {
    this.c = a;this.a = b;
  }Ga.prototype.load = function (a) {
    var b = this.a.id,
        c = this.c.o;b ? A(this.c, (this.a.api || "https://use.typekit.net") + "/" + b + ".js", function (b) {
      if (b) a([]);else if (c.Typekit && c.Typekit.config && c.Typekit.config.fn) {
        b = c.Typekit.config.fn;for (var e = [], f = 0; f < b.length; f += 2) {
          for (var g = b[f], m = b[f + 1], h = 0; h < m.length; h++) {
            e.push(new G(g, m[h]));
          }
        }try {
          c.Typekit.load({ events: !1, classes: !1, async: !0 });
        } catch (l) {}a(e);
      }
    }, 2E3) : a([]);
  };function Ha(a, b) {
    this.c = a;this.f = b;this.a = [];
  }Ha.prototype.load = function (a) {
    var b = this.f.id,
        c = this.c.o,
        d = this;b ? (c.__webfontfontdeckmodule__ || (c.__webfontfontdeckmodule__ = {}), c.__webfontfontdeckmodule__[b] = function (b, c) {
      for (var g = 0, m = c.fonts.length; g < m; ++g) {
        var h = c.fonts[g];d.a.push(new G(h.name, ga("font-weight:" + h.weight + ";font-style:" + h.style)));
      }a(d.a);
    }, A(this.c, (this.f.api || "https://f.fontdeck.com/s/css/js/") + ea(this.c) + "/" + b + ".js", function (b) {
      b && a([]);
    })) : a([]);
  };var Y = new oa(window);Y.a.c.custom = function (a, b) {
    return new sa(b, a);
  };Y.a.c.fontdeck = function (a, b) {
    return new Ha(b, a);
  };Y.a.c.monotype = function (a, b) {
    return new ra(b, a);
  };Y.a.c.typekit = function (a, b) {
    return new Ga(b, a);
  };Y.a.c.google = function (a, b) {
    return new Ea(b, a);
  };var Z = { load: p(Y.load, Y) }; true ? !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
    return Z;
  }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : "undefined" !== typeof module && module.exports ? module.exports = Z : (window.WebFont = Z, window.WebFontConfig && Y.load(window.WebFontConfig));
})();

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = PremiumBackground;

var _ColorComponent = __webpack_require__(2);

var _ColorComponent2 = _interopRequireDefault(_ColorComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __ = wp.i18n.__;
var Fragment = wp.element.Fragment;
var _wp$components = wp.components,
    SelectControl = _wp$components.SelectControl,
    ToggleControl = _wp$components.ToggleControl,
    Tooltip = _wp$components.Tooltip,
    Dashicon = _wp$components.Dashicon;
var MediaUpload = wp.blockEditor.MediaUpload;
function PremiumBackground(props) {
    var type = props.type,
        colorValue = props.colorValue,
        imageID = props.imageID,
        imageURL = props.imageURL,
        backgroundPosition = props.backgroundPosition,
        backgroundRepeat = props.backgroundRepeat,
        backgroundSize = props.backgroundSize,
        fixed = props.fixed,
        _props$onChangeColor = props.onChangeColor,
        onChangeColor = _props$onChangeColor === undefined ? function () {} : _props$onChangeColor,
        _props$onSelectMedia = props.onSelectMedia,
        onSelectMedia = _props$onSelectMedia === undefined ? function () {} : _props$onSelectMedia,
        _props$onRemoveImage = props.onRemoveImage,
        onRemoveImage = _props$onRemoveImage === undefined ? function () {} : _props$onRemoveImage,
        _props$onChangeBackPo = props.onChangeBackPos,
        onChangeBackPos = _props$onChangeBackPo === undefined ? function () {} : _props$onChangeBackPo,
        _props$onchangeBackRe = props.onchangeBackRepeat,
        onchangeBackRepeat = _props$onchangeBackRe === undefined ? function () {} : _props$onchangeBackRe,
        _props$onChangeBackSi = props.onChangeBackSize,
        onChangeBackSize = _props$onChangeBackSi === undefined ? function () {} : _props$onChangeBackSi,
        _props$onChangeFixed = props.onChangeFixed,
        onChangeFixed = _props$onChangeFixed === undefined ? function () {} : _props$onChangeFixed;


    var POSITION = [{
        value: "top left",
        label: __("Top Left")
    }, {
        value: "top center",
        label: __("Top Center")
    }, {
        value: "top right",
        label: __("Top Right")
    }, {
        value: "center left",
        label: __("Center Left")
    }, {
        value: "center center",
        label: __("Center Center")
    }, {
        value: "center right",
        label: __("Center Right")
    }, {
        value: "bottom left",
        label: __("Bottom Left")
    }, {
        value: "bottom center",
        label: __("Bottom Center")
    }, {
        value: "bottom right",
        label: __("Bottom Right")
    }];

    var REPEAT = [{
        value: "no-repeat",
        label: __("No Repeat")
    }, {
        value: "repeat",
        label: __("Repeat")
    }, {
        value: "repeat-x",
        label: __("Repeat Horizontally")
    }, {
        value: "repeat-y",
        label: __("Repeat Vertically")
    }];

    var SIZE = [{
        value: "auto",
        label: __("Auto")
    }, {
        value: "cover",
        label: __("Cover")
    }, {
        value: "contain",
        label: __("Contain")
    }];

    return type === "color" ? React.createElement(
        Fragment,
        null,
        React.createElement(_ColorComponent2.default, {
            label: __("Background Color", ''),
            colorValue: colorValue,
            colorDefault: '',
            onColorChange: onChangeColor
        })
    ) : React.createElement(
        Fragment,
        null,
        React.createElement(MediaUpload, {
            allowedTypes: ["image"],
            onSelect: onSelectMedia,
            type: "image",
            value: imageID,
            render: function render(_ref) {
                var open = _ref.open;
                return React.createElement(
                    Fragment,
                    null,
                    imageURL && React.createElement(
                        "span",
                        { className: "premium-image-media" },
                        React.createElement("img", {
                            src: imageURL,
                            className: "premium-image-upload"
                        }),
                        React.createElement(
                            "div",
                            { className: "premium-image-actions" },
                            React.createElement(
                                Tooltip,
                                { text: __("Edit") },
                                React.createElement(
                                    "button",
                                    {
                                        className: "premium-image-button",
                                        "aria-label": __("Edit"),
                                        onClick: open,
                                        role: "button"
                                    },
                                    React.createElement("span", {
                                        "aria-label": __("Edit"),
                                        className: "fa fa-pencil"
                                    })
                                )
                            ),
                            React.createElement(
                                Tooltip,
                                { text: __("Remove") },
                                React.createElement(
                                    "button",
                                    {
                                        className: "premium-image-button",
                                        "aria-label": __("Remove"),
                                        onClick: onRemoveImage,
                                        role: "button"
                                    },
                                    React.createElement("span", {
                                        "aria-label": __("Close"),
                                        className: "fa fa-trash-o"
                                    })
                                )
                            )
                        )
                    ),
                    !imageURL && React.createElement(
                        "div",
                        {
                            onClick: open,
                            className: "premium-placeholder-image"
                        },
                        React.createElement(Dashicon, { icon: "insert" }),
                        React.createElement(
                            "span",
                            null,
                            __("Insert Background ")
                        )
                    )
                );
            }
        }),
        imageURL && React.createElement(
            Fragment,
            null,
            React.createElement(SelectControl, {
                label: __("Position"),
                options: POSITION,
                value: backgroundPosition,
                onChange: onChangeBackPos
            }),
            React.createElement(SelectControl, {
                label: __("Repeat"),
                options: REPEAT,
                value: backgroundRepeat,
                onChange: onchangeBackRepeat
            }),
            React.createElement(SelectControl, {
                label: __("Size"),
                options: SIZE,
                value: backgroundSize,
                onChange: onChangeBackSize
            }),
            React.createElement(ToggleControl, {
                label: __("Fixed Background"),
                checked: fixed,
                onChange: onChangeFixed
            })
        )
    );
}

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

if (process.env.NODE_ENV === 'production') {
  module.exports = __webpack_require__(247);
} else {
  module.exports = __webpack_require__(248);
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)))

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _CSSTransition = _interopRequireDefault(__webpack_require__(253));

var _ReplaceTransition = _interopRequireDefault(__webpack_require__(258));

var _TransitionGroup = _interopRequireDefault(__webpack_require__(111));

var _Transition = _interopRequireDefault(__webpack_require__(108));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

module.exports = {
  Transition: _Transition.default,
  TransitionGroup: _TransitionGroup.default,
  ReplaceTransition: _ReplaceTransition.default,
  CSSTransition: _CSSTransition.default
};

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

exports.__esModule = true;
exports.default = exports.EXITING = exports.ENTERED = exports.ENTERING = exports.EXITED = exports.UNMOUNTED = void 0;

var PropTypes = _interopRequireWildcard(__webpack_require__(18));

var _react = _interopRequireDefault(__webpack_require__(9));

var _reactDom = _interopRequireDefault(__webpack_require__(40));

var _reactLifecyclesCompat = __webpack_require__(109);

var _PropTypes = __webpack_require__(110);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};if (desc.get || desc.set) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
    }newObj.default = obj;return newObj;
  }
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};var target = {};var sourceKeys = Object.keys(source);var key, i;for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];if (excluded.indexOf(key) >= 0) continue;target[key] = source[key];
  }return target;
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);subClass.prototype.constructor = subClass;subClass.__proto__ = superClass;
}

var UNMOUNTED = 'unmounted';
exports.UNMOUNTED = UNMOUNTED;
var EXITED = 'exited';
exports.EXITED = EXITED;
var ENTERING = 'entering';
exports.ENTERING = ENTERING;
var ENTERED = 'entered';
exports.ENTERED = ENTERED;
var EXITING = 'exiting';
/**
 * The Transition component lets you describe a transition from one component
 * state to another _over time_ with a simple declarative API. Most commonly
 * it's used to animate the mounting and unmounting of a component, but can also
 * be used to describe in-place transition states as well.
 *
 * ---
 *
 * **Note**: `Transition` is a platform-agnostic base component. If you're using
 * transitions in CSS, you'll probably want to use
 * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)
 * instead. It inherits all the features of `Transition`, but contains
 * additional features necessary to play nice with CSS transitions (hence the
 * name of the component).
 *
 * ---
 *
 * By default the `Transition` component does not alter the behavior of the
 * component it renders, it only tracks "enter" and "exit" states for the
 * components. It's up to you to give meaning and effect to those states. For
 * example we can add styles to a component when it enters or exits:
 *
 * ```jsx
 * import { Transition } from 'react-transition-group';
 *
 * const duration = 300;
 *
 * const defaultStyle = {
 *   transition: `opacity ${duration}ms ease-in-out`,
 *   opacity: 0,
 * }
 *
 * const transitionStyles = {
 *   entering: { opacity: 0 },
 *   entered:  { opacity: 1 },
 * };
 *
 * const Fade = ({ in: inProp }) => (
 *   <Transition in={inProp} timeout={duration}>
 *     {state => (
 *       <div style={{
 *         ...defaultStyle,
 *         ...transitionStyles[state]
 *       }}>
 *         I'm a fade Transition!
 *       </div>
 *     )}
 *   </Transition>
 * );
 * ```
 *
 * There are 4 main states a Transition can be in:
 *  - `'entering'`
 *  - `'entered'`
 *  - `'exiting'`
 *  - `'exited'`
 *
 * Transition state is toggled via the `in` prop. When `true` the component
 * begins the "Enter" stage. During this stage, the component will shift from
 * its current transition state, to `'entering'` for the duration of the
 * transition and then to the `'entered'` stage once it's complete. Let's take
 * the following example (we'll use the
 * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):
 *
 * ```jsx
 * function App() {
 *   const [inProp, setInProp] = useState(false);
 *   return (
 *     <div>
 *       <Transition in={inProp} timeout={500}>
 *         {state => (
 *           // ...
 *         )}
 *       </Transition>
 *       <button onClick={() => setInProp(true)}>
 *         Click to Enter
 *       </button>
 *     </div>
 *   );
 * }
 * ```
 *
 * When the button is clicked the component will shift to the `'entering'` state
 * and stay there for 500ms (the value of `timeout`) before it finally switches
 * to `'entered'`.
 *
 * When `in` is `false` the same thing happens except the state moves from
 * `'exiting'` to `'exited'`.
 */

exports.EXITING = EXITING;

var Transition =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(Transition, _React$Component);

  function Transition(props, context) {
    var _this;

    _this = _React$Component.call(this, props, context) || this;
    var parentGroup = context.transitionGroup; // In the context of a TransitionGroup all enters are really appears

    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
    var initialStatus;
    _this.appearStatus = null;

    if (props.in) {
      if (appear) {
        initialStatus = EXITED;
        _this.appearStatus = ENTERING;
      } else {
        initialStatus = ENTERED;
      }
    } else {
      if (props.unmountOnExit || props.mountOnEnter) {
        initialStatus = UNMOUNTED;
      } else {
        initialStatus = EXITED;
      }
    }

    _this.state = {
      status: initialStatus
    };
    _this.nextCallback = null;
    return _this;
  }

  var _proto = Transition.prototype;

  _proto.getChildContext = function getChildContext() {
    return {
      transitionGroup: null // allows for nested Transitions

    };
  };

  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
    var nextIn = _ref.in;

    if (nextIn && prevState.status === UNMOUNTED) {
      return {
        status: EXITED
      };
    }

    return null;
  }; // getSnapshotBeforeUpdate(prevProps) {
  //   let nextStatus = null
  //   if (prevProps !== this.props) {
  //     const { status } = this.state
  //     if (this.props.in) {
  //       if (status !== ENTERING && status !== ENTERED) {
  //         nextStatus = ENTERING
  //       }
  //     } else {
  //       if (status === ENTERING || status === ENTERED) {
  //         nextStatus = EXITING
  //       }
  //     }
  //   }
  //   return { nextStatus }
  // }


  _proto.componentDidMount = function componentDidMount() {
    this.updateStatus(true, this.appearStatus);
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var nextStatus = null;

    if (prevProps !== this.props) {
      var status = this.state.status;

      if (this.props.in) {
        if (status !== ENTERING && status !== ENTERED) {
          nextStatus = ENTERING;
        }
      } else {
        if (status === ENTERING || status === ENTERED) {
          nextStatus = EXITING;
        }
      }
    }

    this.updateStatus(false, nextStatus);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.cancelNextCallback();
  };

  _proto.getTimeouts = function getTimeouts() {
    var timeout = this.props.timeout;
    var exit, enter, appear;
    exit = enter = appear = timeout;

    if (timeout != null && typeof timeout !== 'number') {
      exit = timeout.exit;
      enter = timeout.enter; // TODO: remove fallback for next major

      appear = timeout.appear !== undefined ? timeout.appear : enter;
    }

    return {
      exit: exit,
      enter: enter,
      appear: appear
    };
  };

  _proto.updateStatus = function updateStatus(mounting, nextStatus) {
    if (mounting === void 0) {
      mounting = false;
    }

    if (nextStatus !== null) {
      // nextStatus will always be ENTERING or EXITING.
      this.cancelNextCallback();

      var node = _reactDom.default.findDOMNode(this);

      if (nextStatus === ENTERING) {
        this.performEnter(node, mounting);
      } else {
        this.performExit(node);
      }
    } else if (this.props.unmountOnExit && this.state.status === EXITED) {
      this.setState({
        status: UNMOUNTED
      });
    }
  };

  _proto.performEnter = function performEnter(node, mounting) {
    var _this2 = this;

    var enter = this.props.enter;
    var appearing = this.context.transitionGroup ? this.context.transitionGroup.isMounting : mounting;
    var timeouts = this.getTimeouts();
    var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED
    // if we are mounting and running this it means appear _must_ be set

    if (!mounting && !enter) {
      this.safeSetState({
        status: ENTERED
      }, function () {
        _this2.props.onEntered(node);
      });
      return;
    }

    this.props.onEnter(node, appearing);
    this.safeSetState({
      status: ENTERING
    }, function () {
      _this2.props.onEntering(node, appearing);

      _this2.onTransitionEnd(node, enterTimeout, function () {
        _this2.safeSetState({
          status: ENTERED
        }, function () {
          _this2.props.onEntered(node, appearing);
        });
      });
    });
  };

  _proto.performExit = function performExit(node) {
    var _this3 = this;

    var exit = this.props.exit;
    var timeouts = this.getTimeouts(); // no exit animation skip right to EXITED

    if (!exit) {
      this.safeSetState({
        status: EXITED
      }, function () {
        _this3.props.onExited(node);
      });
      return;
    }

    this.props.onExit(node);
    this.safeSetState({
      status: EXITING
    }, function () {
      _this3.props.onExiting(node);

      _this3.onTransitionEnd(node, timeouts.exit, function () {
        _this3.safeSetState({
          status: EXITED
        }, function () {
          _this3.props.onExited(node);
        });
      });
    });
  };

  _proto.cancelNextCallback = function cancelNextCallback() {
    if (this.nextCallback !== null) {
      this.nextCallback.cancel();
      this.nextCallback = null;
    }
  };

  _proto.safeSetState = function safeSetState(nextState, callback) {
    // This shouldn't be necessary, but there are weird race conditions with
    // setState callbacks and unmounting in testing, so always make sure that
    // we can cancel any pending setState callbacks after we unmount.
    callback = this.setNextCallback(callback);
    this.setState(nextState, callback);
  };

  _proto.setNextCallback = function setNextCallback(callback) {
    var _this4 = this;

    var active = true;

    this.nextCallback = function (event) {
      if (active) {
        active = false;
        _this4.nextCallback = null;
        callback(event);
      }
    };

    this.nextCallback.cancel = function () {
      active = false;
    };

    return this.nextCallback;
  };

  _proto.onTransitionEnd = function onTransitionEnd(node, timeout, handler) {
    this.setNextCallback(handler);
    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;

    if (!node || doesNotHaveTimeoutOrListener) {
      setTimeout(this.nextCallback, 0);
      return;
    }

    if (this.props.addEndListener) {
      this.props.addEndListener(node, this.nextCallback);
    }

    if (timeout != null) {
      setTimeout(this.nextCallback, timeout);
    }
  };

  _proto.render = function render() {
    var status = this.state.status;

    if (status === UNMOUNTED) {
      return null;
    }

    var _this$props = this.props,
        children = _this$props.children,
        childProps = _objectWithoutPropertiesLoose(_this$props, ["children"]); // filter props for Transtition


    delete childProps.in;
    delete childProps.mountOnEnter;
    delete childProps.unmountOnExit;
    delete childProps.appear;
    delete childProps.enter;
    delete childProps.exit;
    delete childProps.timeout;
    delete childProps.addEndListener;
    delete childProps.onEnter;
    delete childProps.onEntering;
    delete childProps.onEntered;
    delete childProps.onExit;
    delete childProps.onExiting;
    delete childProps.onExited;

    if (typeof children === 'function') {
      return children(status, childProps);
    }

    var child = _react.default.Children.only(children);

    return _react.default.cloneElement(child, childProps);
  };

  return Transition;
}(_react.default.Component);

Transition.contextTypes = {
  transitionGroup: PropTypes.object
};
Transition.childContextTypes = {
  transitionGroup: function transitionGroup() {}
};
Transition.propTypes = process.env.NODE_ENV !== "production" ? {
  /**
   * A `function` child can be used instead of a React element. This function is
   * called with the current transition status (`'entering'`, `'entered'`,
   * `'exiting'`, `'exited'`, `'unmounted'`), which can be used to apply context
   * specific props to a component.
   *
   * ```jsx
   * <Transition in={this.state.in} timeout={150}>
   *   {state => (
   *     <MyComponent className={`fade fade-${state}`} />
   *   )}
   * </Transition>
   * ```
   */
  children: PropTypes.oneOfType([PropTypes.func.isRequired, PropTypes.element.isRequired]).isRequired,

  /**
   * Show the component; triggers the enter or exit states
   */
  in: PropTypes.bool,

  /**
   * By default the child component is mounted immediately along with
   * the parent `Transition` component. If you want to "lazy mount" the component on the
   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
   * mounted, even on "exited", unless you also specify `unmountOnExit`.
   */
  mountOnEnter: PropTypes.bool,

  /**
   * By default the child component stays mounted after it reaches the `'exited'` state.
   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
   */
  unmountOnExit: PropTypes.bool,

  /**
   * Normally a component is not transitioned if it is shown when the `<Transition>` component mounts.
   * If you want to transition on the first mount set `appear` to `true`, and the
   * component will transition in as soon as the `<Transition>` mounts.
   *
   * > Note: there are no specific "appear" states. `appear` only adds an additional `enter` transition.
   */
  appear: PropTypes.bool,

  /**
   * Enable or disable enter transitions.
   */
  enter: PropTypes.bool,

  /**
   * Enable or disable exit transitions.
   */
  exit: PropTypes.bool,

  /**
   * The duration of the transition, in milliseconds.
   * Required unless `addEndListener` is provided.
   *
   * You may specify a single timeout for all transitions:
   *
   * ```jsx
   * timeout={500}
   * ```
   *
   * or individually:
   *
   * ```jsx
   * timeout={{
   *  appear: 500,
   *  enter: 300,
   *  exit: 500,
   * }}
   * ```
   *
   * - `appear` defaults to the value of `enter`
   * - `enter` defaults to `0`
   * - `exit` defaults to `0`
   *
   * @type {number | { enter?: number, exit?: number, appear?: number }}
   */
  timeout: function timeout(props) {
    var pt = _PropTypes.timeoutsShape;
    if (!props.addEndListener) pt = pt.isRequired;

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    return pt.apply(void 0, [props].concat(args));
  },

  /**
   * Add a custom transition end trigger. Called with the transitioning
   * DOM node and a `done` callback. Allows for more fine grained transition end
   * logic. **Note:** Timeouts are still used as a fallback if provided.
   *
   * ```jsx
   * addEndListener={(node, done) => {
   *   // use the css transitionend event to mark the finish of a transition
   *   node.addEventListener('transitionend', done, false);
   * }}
   * ```
   */
  addEndListener: PropTypes.func,

  /**
   * Callback fired before the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */
  onEnter: PropTypes.func,

  /**
   * Callback fired after the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEntering: PropTypes.func,

  /**
   * Callback fired after the "entered" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */
  onEntered: PropTypes.func,

  /**
   * Callback fired before the "exiting" status is applied.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExit: PropTypes.func,

  /**
   * Callback fired after the "exiting" status is applied.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExiting: PropTypes.func,

  /**
   * Callback fired after the "exited" status is applied.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExited: PropTypes.func // Name the function so it is clearer in the documentation

} : {};

function noop() {}

Transition.defaultProps = {
  in: false,
  mountOnEnter: false,
  unmountOnExit: false,
  appear: false,
  enter: true,
  exit: true,
  onEnter: noop,
  onEntering: noop,
  onEntered: noop,
  onExit: noop,
  onExiting: noop,
  onExited: noop
};
Transition.UNMOUNTED = 0;
Transition.EXITED = 1;
Transition.ENTERING = 2;
Transition.ENTERED = 3;
Transition.EXITING = 4;

var _default = (0, _reactLifecyclesCompat.polyfill)(Transition);

exports.default = _default;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)))

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

function componentWillMount() {
  // Call this.constructor.gDSFP to support sub-classes.
  var state = this.constructor.getDerivedStateFromProps(this.props, this.state);
  if (state !== null && state !== undefined) {
    this.setState(state);
  }
}

function componentWillReceiveProps(nextProps) {
  // Call this.constructor.gDSFP to support sub-classes.
  // Use the setState() updater to ensure state isn't stale in certain edge cases.
  function updater(prevState) {
    var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);
    return state !== null && state !== undefined ? state : null;
  }
  // Binding "this" is important for shallow renderer support.
  this.setState(updater.bind(this));
}

function componentWillUpdate(nextProps, nextState) {
  try {
    var prevProps = this.props;
    var prevState = this.state;
    this.props = nextProps;
    this.state = nextState;
    this.__reactInternalSnapshotFlag = true;
    this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(prevProps, prevState);
  } finally {
    this.props = prevProps;
    this.state = prevState;
  }
}

// React may warn about cWM/cWRP/cWU methods being deprecated.
// Add a flag to suppress these warnings for this special case.
componentWillMount.__suppressDeprecationWarning = true;
componentWillReceiveProps.__suppressDeprecationWarning = true;
componentWillUpdate.__suppressDeprecationWarning = true;

function polyfill(Component) {
  var prototype = Component.prototype;

  if (!prototype || !prototype.isReactComponent) {
    throw new Error('Can only polyfill class components');
  }

  if (typeof Component.getDerivedStateFromProps !== 'function' && typeof prototype.getSnapshotBeforeUpdate !== 'function') {
    return Component;
  }

  // If new component APIs are defined, "unsafe" lifecycles won't be called.
  // Error if any of these lifecycles are present,
  // Because they would work differently between older and newer (16.3+) versions of React.
  var foundWillMountName = null;
  var foundWillReceivePropsName = null;
  var foundWillUpdateName = null;
  if (typeof prototype.componentWillMount === 'function') {
    foundWillMountName = 'componentWillMount';
  } else if (typeof prototype.UNSAFE_componentWillMount === 'function') {
    foundWillMountName = 'UNSAFE_componentWillMount';
  }
  if (typeof prototype.componentWillReceiveProps === 'function') {
    foundWillReceivePropsName = 'componentWillReceiveProps';
  } else if (typeof prototype.UNSAFE_componentWillReceiveProps === 'function') {
    foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
  }
  if (typeof prototype.componentWillUpdate === 'function') {
    foundWillUpdateName = 'componentWillUpdate';
  } else if (typeof prototype.UNSAFE_componentWillUpdate === 'function') {
    foundWillUpdateName = 'UNSAFE_componentWillUpdate';
  }
  if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
    var componentName = Component.displayName || Component.name;
    var newApiName = typeof Component.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';

    throw Error('Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + componentName + ' uses ' + newApiName + ' but also contains the following legacy lifecycles:' + (foundWillMountName !== null ? '\n  ' + foundWillMountName : '') + (foundWillReceivePropsName !== null ? '\n  ' + foundWillReceivePropsName : '') + (foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : '') + '\n\nThe above lifecycles should be removed. Learn more about this warning here:\n' + 'https://fb.me/react-async-component-lifecycle-hooks');
  }

  // React <= 16.2 does not support static getDerivedStateFromProps.
  // As a workaround, use cWM and cWRP to invoke the new static lifecycle.
  // Newer versions of React will ignore these lifecycles if gDSFP exists.
  if (typeof Component.getDerivedStateFromProps === 'function') {
    prototype.componentWillMount = componentWillMount;
    prototype.componentWillReceiveProps = componentWillReceiveProps;
  }

  // React <= 16.2 does not support getSnapshotBeforeUpdate.
  // As a workaround, use cWU to invoke the new lifecycle.
  // Newer versions of React will ignore that lifecycle if gSBU exists.
  if (typeof prototype.getSnapshotBeforeUpdate === 'function') {
    if (typeof prototype.componentDidUpdate !== 'function') {
      throw new Error('Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype');
    }

    prototype.componentWillUpdate = componentWillUpdate;

    var componentDidUpdate = prototype.componentDidUpdate;

    prototype.componentDidUpdate = function componentDidUpdatePolyfill(prevProps, prevState, maybeSnapshot) {
      // 16.3+ will not execute our will-update method;
      // It will pass a snapshot value to did-update though.
      // Older versions will require our polyfilled will-update value.
      // We need to handle both cases, but can't just check for the presence of "maybeSnapshot",
      // Because for <= 15.x versions this might be a "prevContext" object.
      // We also can't just check "__reactInternalSnapshot",
      // Because get-snapshot might return a falsy value.
      // So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.
      var snapshot = this.__reactInternalSnapshotFlag ? this.__reactInternalSnapshot : maybeSnapshot;

      componentDidUpdate.call(this, prevProps, prevState, snapshot);
    };
  }

  return Component;
}

exports.polyfill = polyfill;

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

exports.__esModule = true;
exports.classNamesShape = exports.timeoutsShape = void 0;

var _propTypes = _interopRequireDefault(__webpack_require__(18));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

var timeoutsShape = process.env.NODE_ENV !== 'production' ? _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
  enter: _propTypes.default.number,
  exit: _propTypes.default.number,
  appear: _propTypes.default.number
}).isRequired]) : null;
exports.timeoutsShape = timeoutsShape;
var classNamesShape = process.env.NODE_ENV !== 'production' ? _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.shape({
  enter: _propTypes.default.string,
  exit: _propTypes.default.string,
  active: _propTypes.default.string
}), _propTypes.default.shape({
  enter: _propTypes.default.string,
  enterDone: _propTypes.default.string,
  enterActive: _propTypes.default.string,
  exit: _propTypes.default.string,
  exitDone: _propTypes.default.string,
  exitActive: _propTypes.default.string
})]) : null;
exports.classNamesShape = classNamesShape;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)))

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

exports.__esModule = true;
exports.default = void 0;

var _propTypes = _interopRequireDefault(__webpack_require__(18));

var _react = _interopRequireDefault(__webpack_require__(9));

var _reactLifecyclesCompat = __webpack_require__(109);

var _ChildMapping = __webpack_require__(259);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};var target = {};var sourceKeys = Object.keys(source);var key, i;for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];if (excluded.indexOf(key) >= 0) continue;target[key] = source[key];
  }return target;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }return target;
  };return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);subClass.prototype.constructor = subClass;subClass.__proto__ = superClass;
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return self;
}

var values = Object.values || function (obj) {
  return Object.keys(obj).map(function (k) {
    return obj[k];
  });
};

var defaultProps = {
  component: 'div',
  childFactory: function childFactory(child) {
    return child;
  }
  /**
   * The `<TransitionGroup>` component manages a set of transition components
   * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition
   * components, `<TransitionGroup>` is a state machine for managing the mounting
   * and unmounting of components over time.
   *
   * Consider the example below. As items are removed or added to the TodoList the
   * `in` prop is toggled automatically by the `<TransitionGroup>`.
   *
   * Note that `<TransitionGroup>`  does not define any animation behavior!
   * Exactly _how_ a list item animates is up to the individual transition
   * component. This means you can mix and match animations across different list
   * items.
   */

};

var TransitionGroup =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(TransitionGroup, _React$Component);

  function TransitionGroup(props, context) {
    var _this;

    _this = _React$Component.call(this, props, context) || this;

    var handleExited = _this.handleExited.bind(_assertThisInitialized(_assertThisInitialized(_this))); // Initial children should all be entering, dependent on appear


    _this.state = {
      handleExited: handleExited,
      firstRender: true
    };
    return _this;
  }

  var _proto = TransitionGroup.prototype;

  _proto.getChildContext = function getChildContext() {
    return {
      transitionGroup: {
        isMounting: !this.appeared
      }
    };
  };

  _proto.componentDidMount = function componentDidMount() {
    this.appeared = true;
    this.mounted = true;
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.mounted = false;
  };

  TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
    var prevChildMapping = _ref.children,
        handleExited = _ref.handleExited,
        firstRender = _ref.firstRender;
    return {
      children: firstRender ? (0, _ChildMapping.getInitialChildMapping)(nextProps, handleExited) : (0, _ChildMapping.getNextChildMapping)(nextProps, prevChildMapping, handleExited),
      firstRender: false
    };
  };

  _proto.handleExited = function handleExited(child, node) {
    var currentChildMapping = (0, _ChildMapping.getChildMapping)(this.props.children);
    if (child.key in currentChildMapping) return;

    if (child.props.onExited) {
      child.props.onExited(node);
    }

    if (this.mounted) {
      this.setState(function (state) {
        var children = _extends({}, state.children);

        delete children[child.key];
        return {
          children: children
        };
      });
    }
  };

  _proto.render = function render() {
    var _this$props = this.props,
        Component = _this$props.component,
        childFactory = _this$props.childFactory,
        props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);

    var children = values(this.state.children).map(childFactory);
    delete props.appear;
    delete props.enter;
    delete props.exit;

    if (Component === null) {
      return children;
    }

    return _react.default.createElement(Component, props, children);
  };

  return TransitionGroup;
}(_react.default.Component);

TransitionGroup.childContextTypes = {
  transitionGroup: _propTypes.default.object.isRequired
};
TransitionGroup.propTypes = process.env.NODE_ENV !== "production" ? {
  /**
   * `<TransitionGroup>` renders a `<div>` by default. You can change this
   * behavior by providing a `component` prop.
   * If you use React v16+ and would like to avoid a wrapping `<div>` element
   * you can pass in `component={null}`. This is useful if the wrapping div
   * borks your css styles.
   */
  component: _propTypes.default.any,

  /**
   * A set of `<Transition>` components, that are toggled `in` and out as they
   * leave. the `<TransitionGroup>` will inject specific transition props, so
   * remember to spread them through if you are wrapping the `<Transition>` as
   * with our `<Fade>` example.
   *
   * While this component is meant for multiple `Transition` or `CSSTransition`
   * children, sometimes you may want to have a single transition child with
   * content that you want to be transitioned out and in when you change it
   * (e.g. routes, images etc.) In that case you can change the `key` prop of
   * the transition child as you change its content, this will cause
   * `TransitionGroup` to transition the child out and back in.
   */
  children: _propTypes.default.node,

  /**
   * A convenience prop that enables or disables appear animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  appear: _propTypes.default.bool,

  /**
   * A convenience prop that enables or disables enter animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  enter: _propTypes.default.bool,

  /**
   * A convenience prop that enables or disables exit animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  exit: _propTypes.default.bool,

  /**
   * You may need to apply reactive updates to a child as it is exiting.
   * This is generally done by using `cloneElement` however in the case of an exiting
   * child the element has already been removed and not accessible to the consumer.
   *
   * If you do need to update a child as it leaves you can provide a `childFactory`
   * to wrap every child, even the ones that are leaving.
   *
   * @type Function(child: ReactElement) -> ReactElement
   */
  childFactory: _propTypes.default.func
} : {};
TransitionGroup.defaultProps = defaultProps;

var _default = (0, _reactLifecyclesCompat.polyfill)(TransitionGroup);

exports.default = _default;
module.exports = exports["default"];
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)))

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
var __ = wp.i18n.__;

var videoBoxAttrs = {
    block_id: {
        type: 'string'
    },
    borderBoxUpdated: {
        type: "boolean",
        default: false
    },
    videoBoxId: {
        type: "string"
    },
    videoType: {
        type: "string",
        default: "youtube"
    },
    videoURL: {
        type: "string"
    },
    videoID: {
        type: "string"
    },
    autoPlay: {
        type: "boolean",
        default: false
    },
    loop: {
        type: "boolean",
        default: false
    },
    controls: {
        type: "boolean",
        default: true
    },
    relatedVideos: {
        type: "boolean",
        default: false
    },
    mute: {
        type: "boolean",
        default: false
    },
    overlay: {
        type: "boolean",
        default: false
    },
    videoDesc: {
        type: "boolean"
    },
    playIcon: {
        type: "boolean",
        default: true
    },
    // Old props
    playLeft: {
        type: "number"
    },
    classMigrate: {
        type: 'boolean',
        default: false
    },
    hideDesktop: {
        type: 'boolean',
        default: false
    },
    hideTablet: {
        type: 'boolean',
        default: false
    },
    hideMobile: {
        type: 'boolean',
        default: false
    },
    ratioValue: {
        type: "string",
        default: '169'
    },
    boxStyles: {
        type: 'array',
        default: [{
            boxBorderType: 'none',
            boxBorderWidth: 1,
            boxBorderTop: '',
            boxBorderRight: '',
            boxBorderBottom: '',
            boxBorderLeft: '',
            boxBorderRadius: '',
            boxBorderColor: '',
            shadowColor: '',
            shadowBlur: '',
            shadowHorizontal: '',
            shadowVertical: '',
            shadowPosition: '',
            borderBoxUpdated: false
        }]
    },
    overlayStyles: {
        type: 'array',
        default: [{
            overlayImgID: '',
            overlayImgURL: '',
            blur: 0,
            bright: 100,
            contrast: 100,
            saturation: 100,
            hue: 0
        }]
    },
    playStyles: {
        type: 'array',
        default: [{
            playTop: '',
            playSize: '',
            playPadding: '',
            playBorderType: 'none',
            playBorderWidth: 1,
            playBorderRadius: '',
            playBorderColor: '',
            playBorderTop: '',
            playBorderRight: '',
            playBorderBottom: '',
            playBorderLeft: '',
            playColor: '',
            playBack: '',
            playOpacity: 1,
            playHoverColor: '',
            playHoverBackColor: '',
            borderPlayUpdated: false

        }]

    },
    descStyles: {
        type: 'array',
        default: [{
            videoDescText: '',
            videoDescFamily: __('Default'),
            videoDescSize: '',
            videoDescSizeUnit: 'px',
            videoDescSizeMobile: '',
            videoDescSizeTablet: '',
            videoDescWeight: '',
            videoDescLetter: '',
            videoDescStyle: '',
            videoDescUpper: false,
            videoDescPadding: '',
            videoDescBorderRadius: '',
            descShadowColor: '',
            descShadowBlur: 0,
            descShadowHorizontal: 0,
            descShadowVertical: 0,
            descLeft: '',
            descTop: '',
            videoDescColor: '',
            videoDescBack: '',
            videoDescOpacity: 1
        }]
    }

};
exports.default = videoBoxAttrs;

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _unsupportedIterableToArray;

var _arrayLikeToArray = __webpack_require__(114);

var _arrayLikeToArray2 = _interopRequireDefault(_arrayLikeToArray);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return (0, _arrayLikeToArray2.default)(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, _arrayLikeToArray2.default)(o, minLen);
}

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _arrayLikeToArray;
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _defineProperty;
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _assertThisInitialized;
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// optional / simple context binding
var aFunction = __webpack_require__(320);
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1:
      return function (a) {
        return fn.call(that, a);
      };
    case 2:
      return function (a, b) {
        return fn.call(that, a, b);
      };
    case 3:
      return function (a, b, c) {
        return fn.call(that, a, b, c);
      };
  }
  return function () /* ...args */{
    return fn.apply(that, arguments);
  };
};

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = !__webpack_require__(27) && !__webpack_require__(35)(function () {
  return Object.defineProperty(__webpack_require__(119)('div'), 'a', { get: function get() {
      return 7;
    } }).a != 7;
});

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isObject = __webpack_require__(34);
var document = __webpack_require__(20).document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var has = __webpack_require__(28);
var toIObject = __webpack_require__(36);
var arrayIndexOf = __webpack_require__(322)(false);
var IE_PROTO = __webpack_require__(75)('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) {
    if (key != IE_PROTO) has(O, key) && result.push(key);
  } // Don't enum bug & hidden keys
  while (names.length > i) {
    if (has(O, key = names[i++])) {
      ~arrayIndexOf(result, key) || result.push(key);
    }
  }return result;
};

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = __webpack_require__(122);
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = __webpack_require__(28);
var toObject = __webpack_require__(79);
var IE_PROTO = __webpack_require__(75)('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  }return O instanceof Object ? ObjectProto : null;
};

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.__esModule = true;

var _iterator = __webpack_require__(335);

var _iterator2 = _interopRequireDefault(_iterator);

var _symbol = __webpack_require__(346);

var _symbol2 = _interopRequireDefault(_symbol);

var _typeof = typeof _symbol2.default === "function" && _typeof2(_iterator2.default) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
} : function (obj) {
  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
};

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var LIBRARY = __webpack_require__(56);
var $export = __webpack_require__(25);
var redefine = __webpack_require__(126);
var hide = __webpack_require__(33);
var Iterators = __webpack_require__(80);
var $iterCreate = __webpack_require__(339);
var setToStringTag = __webpack_require__(82);
var getPrototypeOf = __webpack_require__(123);
var ITERATOR = __webpack_require__(37)('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function returnThis() {
  return this;
};

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function getMethod(kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS:
        return function keys() {
          return new Constructor(this, kind);
        };
      case VALUES:
        return function values() {
          return new Constructor(this, kind);
        };
    }return function entries() {
      return new Constructor(this, kind);
    };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() {
      return $native.call(this);
    };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(33);

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = __webpack_require__(120);
var hiddenKeys = __webpack_require__(77).concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var pIE = __webpack_require__(58);
var createDesc = __webpack_require__(54);
var toIObject = __webpack_require__(36);
var toPrimitive = __webpack_require__(72);
var has = __webpack_require__(28);
var IE8_DOM_DEFINE = __webpack_require__(118);
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = __webpack_require__(27) ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) {/* empty */}
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var root = __webpack_require__(398);

/** Built-in value references. */
var _Symbol = root.Symbol;

module.exports = _Symbol;

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _settings = __webpack_require__(1);

__webpack_require__(131);

__webpack_require__(225);

__webpack_require__(230);

__webpack_require__(235);

__webpack_require__(240);

__webpack_require__(245);

__webpack_require__(263);

__webpack_require__(268);

__webpack_require__(269);

__webpack_require__(274);

__webpack_require__(280);

__webpack_require__(53);

__webpack_require__(288);

__webpack_require__(312);

__webpack_require__(369);

__webpack_require__(374);

__webpack_require__(378);

__webpack_require__(383);

__webpack_require__(405);

window.PremiumOptionsSettings = {
    FontAwesomeEnabled: _settings.FontAwesomeEnabled
};

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _settings = __webpack_require__(1);

var _icons = __webpack_require__(4);

var _icons2 = _interopRequireDefault(_icons);

var _edit = __webpack_require__(132);

var _edit2 = _interopRequireDefault(_edit);

var _save = __webpack_require__(222);

var _save2 = _interopRequireDefault(_save);

var _attributes = __webpack_require__(223);

var _attributes2 = _interopRequireDefault(_attributes);

var _deprecated = __webpack_require__(224);

var _deprecated2 = _interopRequireDefault(_deprecated);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __ = wp.i18n.__;
var registerBlockType = wp.blocks.registerBlockType;


registerBlockType("premium/accordion", {
    title: __("Accordion"),
    icon: React.createElement(_icons2.default, { icon: "accordion" }),
    category: "premium-blocks",
    attributes: _attributes2.default,
    supports: {
        inserter: _settings.accordion
    },
    example: {},
    edit: _edit2.default,
    save: _save2.default,
    deprecated: _deprecated2.default
});

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _classnames = __webpack_require__(0);

var _classnames2 = _interopRequireDefault(_classnames);

var _premiumBorder = __webpack_require__(6);

var _premiumBorder2 = _interopRequireDefault(_premiumBorder);

var _PremiumResponsivePadding = __webpack_require__(16);

var _PremiumResponsivePadding2 = _interopRequireDefault(_PremiumResponsivePadding);

var _premiumTypo = __webpack_require__(7);

var _premiumTypo2 = _interopRequireDefault(_premiumTypo);

var _PremiumShadow = __webpack_require__(5);

var _PremiumShadow2 = _interopRequireDefault(_PremiumShadow);

var _ColorComponent = __webpack_require__(2);

var _ColorComponent2 = _interopRequireDefault(_ColorComponent);

var _radioControl = __webpack_require__(10);

var _radioControl2 = _interopRequireDefault(_radioControl);

var _singleRangeControl = __webpack_require__(3);

var _singleRangeControl2 = _interopRequireDefault(_singleRangeControl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _wp$element = wp.element,
    Component = _wp$element.Component,
    Fragment = _wp$element.Fragment;
var __ = wp.i18n.__;
var withSelect = wp.data.withSelect;
var _wp$components = wp.components,
    PanelBody = _wp$components.PanelBody,
    SelectControl = _wp$components.SelectControl;
var _wp$blockEditor = wp.blockEditor,
    InspectorControls = _wp$blockEditor.InspectorControls,
    RichText = _wp$blockEditor.RichText,
    InnerBlocks = _wp$blockEditor.InnerBlocks;


var isAccUpdated = null;

var PremiumAccordion = function (_Component) {
    _inherits(PremiumAccordion, _Component);

    function PremiumAccordion() {
        _classCallCheck(this, PremiumAccordion);

        var _this = _possibleConstructorReturn(this, (PremiumAccordion.__proto__ || Object.getPrototypeOf(PremiumAccordion)).apply(this, arguments));

        _this.initAccordion = _this.initAccordion.bind(_this);
        _this.getPreviewSize = _this.getPreviewSize.bind(_this);
        _this.accordionRef = React.createRef();
        return _this;
    }

    _createClass(PremiumAccordion, [{
        key: "getPreviewSize",
        value: function getPreviewSize(device, desktopSize, tabletSize, mobileSize) {
            if (device === 'Mobile') {
                if (undefined !== mobileSize && '' !== mobileSize) {
                    return mobileSize;
                } else if (undefined !== tabletSize && '' !== tabletSize) {
                    return tabletSize;
                }
            } else if (device === 'Tablet') {
                if (undefined !== tabletSize && '' !== tabletSize) {
                    return tabletSize;
                }
            }
            return desktopSize;
        }
    }, {
        key: "componentDidMount",
        value: function componentDidMount() {
            var _props = this.props,
                attributes = _props.attributes,
                setAttributes = _props.setAttributes,
                clientId = _props.clientId;

            if (!attributes.accordionId) {
                setAttributes({ accordionId: "premium-accordion-" + clientId });
            }
            this.initAccordion();
        }
    }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps, prevState) {
            clearTimeout(isAccUpdated);
            isAccUpdated = setTimeout(this.initAccordion, 500);
        }
    }, {
        key: "initAccordion",
        value: function initAccordion() {
            var accordionId = this.props.attributes.accordionId;

            if (!this.props.attributes.accordionId) return null;
            var title = this.accordionRef.current.getElementsByClassName("premium-accordion__title_wrap")[0];
            title.addEventListener("click", function () {
                title.getElementsByClassName("premium-accordion__icon")[0].classList.toggle("premium-accordion__closed");
                title.nextSibling.classList.toggle("premium-accordion__desc_close");
            });
        }
    }, {
        key: "render",
        value: function render() {
            var _props2 = this.props,
                isSelected = _props2.isSelected,
                setAttributes = _props2.setAttributes,
                className = _props2.className;
            var _props$attributes = this.props.attributes,
                accordionId = _props$attributes.accordionId,
                repeaterItems = _props$attributes.repeaterItems,
                direction = _props$attributes.direction,
                titleTag = _props$attributes.titleTag,
                titleStyles = _props$attributes.titleStyles,
                arrowStyles = _props$attributes.arrowStyles,
                descStyles = _props$attributes.descStyles,
                contentType = _props$attributes.contentType,
                textShadowColor = _props$attributes.textShadowColor,
                textShadowBlur = _props$attributes.textShadowBlur,
                textShadowHorizontal = _props$attributes.textShadowHorizontal,
                textShadowVertical = _props$attributes.textShadowVertical,
                titleBorderWidth = _props$attributes.titleBorderWidth,
                titleBorderTop = _props$attributes.titleBorderTop,
                titleBorderRight = _props$attributes.titleBorderRight,
                titleBorderBottom = _props$attributes.titleBorderBottom,
                titleBorderLeft = _props$attributes.titleBorderLeft,
                titleBorderUpdated = _props$attributes.titleBorderUpdated,
                titlePaddingT = _props$attributes.titlePaddingT,
                titlePaddingR = _props$attributes.titlePaddingR,
                titlePaddingB = _props$attributes.titlePaddingB,
                titlePaddingL = _props$attributes.titlePaddingL,
                descBorderWidth = _props$attributes.descBorderWidth,
                descBorderUpdated = _props$attributes.descBorderUpdated,
                descBorderTop = _props$attributes.descBorderTop,
                descBorderRight = _props$attributes.descBorderRight,
                descBorderBottom = _props$attributes.descBorderBottom,
                descBorderLeft = _props$attributes.descBorderLeft,
                descPaddingT = _props$attributes.descPaddingT,
                descPaddingR = _props$attributes.descPaddingR,
                descPaddingB = _props$attributes.descPaddingB,
                descPaddingL = _props$attributes.descPaddingL,
                titlePaddingTTablet = _props$attributes.titlePaddingTTablet,
                titlePaddingRTablet = _props$attributes.titlePaddingRTablet,
                titlePaddingBTablet = _props$attributes.titlePaddingBTablet,
                titlePaddingLTablet = _props$attributes.titlePaddingLTablet,
                titlePaddingTMobile = _props$attributes.titlePaddingTMobile,
                titlePaddingRMobile = _props$attributes.titlePaddingRMobile,
                titlePaddingBMobile = _props$attributes.titlePaddingBMobile,
                titlePaddingLMobile = _props$attributes.titlePaddingLMobile,
                descPaddingTTablet = _props$attributes.descPaddingTTablet,
                descPaddingRTablet = _props$attributes.descPaddingRTablet,
                descPaddingBTablet = _props$attributes.descPaddingBTablet,
                descPaddingLTablet = _props$attributes.descPaddingLTablet,
                descPaddingTMobile = _props$attributes.descPaddingTMobile,
                descPaddingRMobile = _props$attributes.descPaddingRMobile,
                descPaddingBMobile = _props$attributes.descPaddingBMobile,
                descPaddingLMobile = _props$attributes.descPaddingLMobile;


            var DIRECTION = [{
                value: "ltr",
                label: "LTR"
            }, {
                value: "rtl",
                label: "RTL"
            }];

            var ARROW = [{
                value: "in",
                label: __("In", 'premium-blocks-for-gutenberg')
            }, {
                value: "out",
                label: __("Out", 'premium-blocks-for-gutenberg')
            }];

            var TYPE = [{
                value: "text",
                label: __("Text", 'premium-blocks-for-gutenberg')
            }, {
                value: "block",
                label: __("Gutenberg Block", 'premium-blocks-for-gutenberg')
            }];

            var saveTitleStyles = function saveTitleStyles(value) {
                var newUpdate = titleStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({
                    titleStyles: newUpdate
                });
            };

            var saveArrowStyles = function saveArrowStyles(value) {
                var newUpdate = arrowStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({ arrowStyles: newUpdate });
            };

            var SaveDescStyles = function SaveDescStyles(value) {
                var newUpdate = descStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({
                    descStyles: newUpdate
                });
            };

            var onAccordionChange = function onAccordionChange(attr, value, index) {
                var items = repeaterItems;
                return items.map(function (item, currIndex) {
                    if (index == currIndex) {
                        item[attr] = value;
                    }
                    return item;
                });
            };

            var titlePaddingTop = this.getPreviewSize(this.props.deviceType, titlePaddingT, titlePaddingTTablet, titlePaddingTMobile);
            var titlePaddingRight = this.getPreviewSize(this.props.deviceType, titlePaddingR, titlePaddingRTablet, titlePaddingRMobile);
            var titlePaddingBottom = this.getPreviewSize(this.props.deviceType, titlePaddingB, titlePaddingBTablet, titlePaddingBMobile);
            var titlePaddingLeft = this.getPreviewSize(this.props.deviceType, titlePaddingL, titlePaddingLTablet, titlePaddingLMobile);
            var descPaddingTop = this.getPreviewSize(this.props.deviceType, descPaddingT, descPaddingTTablet, descPaddingTMobile);
            var descPaddingRight = this.getPreviewSize(this.props.deviceType, descPaddingR, descPaddingRTablet, descPaddingRMobile);
            var descPaddingBottom = this.getPreviewSize(this.props.deviceType, descPaddingB, descPaddingBTablet, descPaddingBMobile);
            var descPaddingLeft = this.getPreviewSize(this.props.deviceType, descPaddingL, descPaddingLTablet, descPaddingLMobile);

            var mainClasses = (0, _classnames2.default)(className, "premium-accordion");

            var accordionItems = repeaterItems.map(function (item, index) {
                return React.createElement(
                    "div",
                    {
                        id: "premium-accordion__layer" + index,
                        className: "premium-accordion__content_wrap"
                    },
                    React.createElement(
                        "div",
                        {
                            className: "premium-accordion__title_wrap premium-accordion__" + direction + " premium-accordion__" + arrowStyles[0].arrowPos,
                            style: {
                                backgroundColor: titleStyles[0].titleBack,
                                borderStyle: titleStyles[0].titleBorder,
                                borderWidth: titleBorderUpdated ? titleBorderTop + "px " + titleBorderRight + "px " + titleBorderBottom + "px " + titleBorderLeft + "px" : titleBorderWidth + "px",
                                borderRadius: titleStyles[0].titleBorderRadius + "px",
                                borderColor: titleStyles[0].titleBorderColor,
                                paddingTop: titlePaddingTop,
                                paddingRight: titlePaddingRight,
                                paddingBottom: titlePaddingBottom,
                                paddingLeft: titlePaddingLeft
                            }
                        },
                        React.createElement(
                            "div",
                            { className: "premium-accordion__title" },
                            React.createElement(RichText, {
                                tagName: titleTag.toLowerCase(),
                                className: "premium-accordion__title_text",
                                onChange: function onChange(newText) {
                                    return setAttributes({
                                        repeaterItems: onAccordionChange("titleText", newText, index)
                                    });
                                },
                                placeholder: __("Awesome Title", 'premium-blocks-for-gutenberg'),
                                value: item.titleText,
                                style: {
                                    color: titleStyles[0].titleColor,
                                    fontSize: titleStyles[0].titleSize + "px",
                                    letterSpacing: titleStyles[0].titleLetter + "px",
                                    textTransform: titleStyles[0].titleUpper ? "uppercase" : "none",
                                    fontStyle: titleStyles[0].titleStyle,
                                    fontWeight: titleStyles[0].titleWeight,
                                    textShadow: titleStyles[0].titleShadowHorizontal + "px " + titleStyles[0].titleShadowVertical + "px " + titleStyles[0].titleShadowBlur + "px " + titleStyles[0].titleShadowColor,
                                    lineHeight: titleStyles[0].titleLine + "px"
                                }
                            })
                        ),
                        React.createElement(
                            "div",
                            { className: "premium-accordion__icon_wrap" },
                            React.createElement(
                                "svg",
                                {
                                    className: "premium-accordion__icon",
                                    role: "img",
                                    focusable: "false",
                                    xmlns: "http://www.w3.org/2000/svg",
                                    width: arrowStyles[0].arrowSize,
                                    height: arrowStyles[0].arrowSize,
                                    viewBox: "0 0 20 20",
                                    style: {
                                        fill: arrowStyles[0].arrowColor,
                                        backgroundColor: arrowStyles[0].arrowBack,
                                        padding: arrowStyles[0].arrowPadding + "px",
                                        borderRadius: arrowStyles[0].arrowRadius + "px"
                                    }
                                },
                                React.createElement("polygon", { points: "16.7,3.3 10,10 3.3,3.4 0,6.7 10,16.7 10,16.6 20,6.7 " })
                            )
                        )
                    ),
                    React.createElement(
                        "div",
                        {
                            className: "premium-accordion__desc_wrap",
                            style: {
                                textAlign: descStyles[0].descAlign,
                                backgroundColor: descStyles[0].descBack,
                                borderStyle: descStyles[0].descBorder,
                                borderWidth: descBorderUpdated ? descBorderTop + "px " + descBorderRight + "px " + descBorderBottom + "px " + descBorderLeft + "px" : descBorderWidth + "px",
                                borderRadius: descStyles[0].descBorderRadius + "px",
                                borderColor: descStyles[0].descBorderColor,
                                paddingTop: descPaddingTop,
                                paddingRight: descPaddingRight,
                                paddingBottom: descPaddingBottom,
                                paddingLeft: descPaddingLeft
                            }
                        },
                        "text" === contentType && React.createElement(RichText, {
                            tagName: "p",
                            className: "premium-accordion__desc",
                            onChange: function onChange(newText) {
                                return setAttributes({
                                    repeaterItems: onAccordionChange("descText", newText, index)
                                });
                            },
                            value: item.descText,
                            style: {
                                color: descStyles[0].descColor,
                                fontSize: descStyles[0].descSize + "px",
                                letterSpacing: descStyles[0].descLetter + "px",
                                textTransform: descStyles[0].descUpper ? "uppercase" : "none",
                                textShadow: textShadowHorizontal + "px " + textShadowVertical + "px " + textShadowBlur + "px " + textShadowColor,
                                fontStyle: descStyles[0].descStyle,
                                fontWeight: descStyles[0].descWeight,
                                lineHeight: descStyles[0].descLine + "px"
                            }
                        }),
                        "block" === contentType && React.createElement(InnerBlocks, { templateLock: false })
                    )
                );
            });

            return [isSelected && React.createElement(
                InspectorControls,
                { key: "inspector" },
                React.createElement(
                    PanelBody,
                    {
                        title: __("Title", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(_radioControl2.default, {
                        choices: ['H1', 'H2', 'H3', 'H4', 'H5', 'H6'],
                        value: titleTag,
                        onChange: function onChange(newValue) {
                            return setAttributes({ titleTag: newValue });
                        },
                        label: __("Title Tag", 'premium-blocks-for-gutenberg')
                    }),
                    React.createElement(SelectControl, {
                        label: __("Direction", 'premium-blocks-for-gutenberg'),
                        options: DIRECTION,
                        value: direction,
                        onChange: function onChange(newEffect) {
                            return setAttributes({ direction: newEffect });
                        }
                    }),
                    React.createElement(_premiumTypo2.default, {
                        components: ["size", "weight", "style", "upper", "spacing", "line"],
                        size: titleStyles[0].titleSize,
                        weight: titleStyles[0].titleWeight,
                        style: titleStyles[0].titleStyle,
                        spacing: titleStyles[0].titleLetter,
                        line: titleStyles[0].titleLine,
                        upper: titleStyles[0].titleUpper,
                        onChangeSize: function onChangeSize(newSize) {
                            return saveTitleStyles({ titleSize: newSize });
                        },
                        onChangeWeight: function onChangeWeight(newWeight) {
                            return saveTitleStyles({ titleWeight: newWeight });
                        },
                        onChangeStyle: function onChangeStyle(newStyle) {
                            return saveTitleStyles({ titleStyle: newStyle });
                        },
                        onChangeSpacing: function onChangeSpacing(newValue) {
                            return saveTitleStyles({ titleLetter: newValue });
                        },
                        onChangeLine: function onChangeLine(newValue) {
                            return saveTitleStyles({ titleLine: newValue });
                        },
                        onChangeUpper: function onChangeUpper(check) {
                            return saveTitleStyles({ titleUpper: check });
                        }
                    }),
                    React.createElement(_ColorComponent2.default, {
                        label: __("Text Color", 'premium-blocks-for-gutenberg'),
                        colorValue: titleStyles[0].titleColor,
                        colorDefault: '',
                        onColorChange: function onColorChange(value) {
                            return saveTitleStyles({ titleColor: value });
                        }
                    }),
                    React.createElement(_ColorComponent2.default, {
                        label: __("Background Color", 'premium-blocks-for-gutenberg'),
                        colorValue: titleStyles[0].titleBack,
                        colorDefault: '',
                        onColorChange: function onColorChange(value) {
                            return saveTitleStyles({ titleBack: value });
                        }
                    }),
                    React.createElement(_premiumBorder2.default, {
                        borderType: titleStyles[0].titleBorder,
                        borderWidth: titleBorderWidth,
                        top: titleBorderTop,
                        right: titleBorderRight,
                        bottom: titleBorderBottom,
                        left: titleBorderLeft,
                        borderColor: titleStyles[0].titleBorderColor,
                        borderRadius: titleStyles[0].titleBorderRadius,
                        onChangeType: function onChangeType(newType) {
                            return saveTitleStyles({ titleBorder: newType });
                        },
                        onChangeWidth: function onChangeWidth(_ref) {
                            var top = _ref.top,
                                right = _ref.right,
                                bottom = _ref.bottom,
                                left = _ref.left;
                            return setAttributes({
                                titleBorderUpdated: true,
                                titleBorderTop: top,
                                titleBorderRight: right,
                                titleBorderBottom: bottom,
                                titleBorderLeft: left
                            });
                        },
                        onChangeColor: function onChangeColor(colorValue) {
                            return saveTitleStyles({ titleBorderColor: colorValue });
                        },
                        onChangeRadius: function onChangeRadius(newrRadius) {
                            return saveTitleStyles({ titleBorderRadius: newrRadius });
                        }
                    }),
                    React.createElement(_PremiumShadow2.default, {
                        label: __("Text Shadow", "premium-blocks-for-gutenberg"),
                        color: titleStyles[0].titleShadowColor,
                        blur: titleStyles[0].titleShadowBlur,
                        horizontal: titleStyles[0].titleShadowHorizontal,
                        vertical: titleStyles[0].titleShadowVertical,
                        onChangeColor: function onChangeColor(newColor) {
                            return saveTitleStyles({ titleShadowColor: newColor });
                        },
                        onChangeBlur: function onChangeBlur(newBlur) {
                            return saveTitleStyles({ titleShadowBlur: newBlur });
                        },
                        onChangehHorizontal: function onChangehHorizontal(newValue) {
                            return saveTitleStyles({ titleShadowHorizontal: newValue });
                        },
                        onChangeVertical: function onChangeVertical(newValue) {
                            return saveTitleStyles({ titleShadowVertical: newValue });
                        }
                    }),
                    React.createElement(_PremiumResponsivePadding2.default, {
                        paddingTop: titlePaddingT,
                        paddingRight: titlePaddingR,
                        paddingBottom: titlePaddingB,
                        paddingLeft: titlePaddingL,
                        paddingTopTablet: titlePaddingTTablet,
                        paddingRightTablet: titlePaddingRTablet,
                        paddingBottomTablet: titlePaddingBTablet,
                        paddingLeftTablet: titlePaddingLTablet,
                        paddingTopMobile: titlePaddingTMobile,
                        paddingRightMobile: titlePaddingRMobile,
                        paddingBottomMobile: titlePaddingBMobile,
                        paddingLeftMobile: titlePaddingLMobile,
                        onChangePaddingTop: function onChangePaddingTop(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ titlePaddingT: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ titlePaddingTTablet: newValue });
                            } else {
                                setAttributes({ titlePaddingTMobile: newValue });
                            }
                        },
                        onChangePaddingRight: function onChangePaddingRight(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ titlePaddingR: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ titlePaddingRTablet: newValue });
                            } else {
                                setAttributes({ titlePaddingRMobile: newValue });
                            }
                        },
                        onChangePaddingBottom: function onChangePaddingBottom(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ titlePaddingB: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ titlePaddingBTablet: newValue });
                            } else {
                                setAttributes({ titlePaddingBMobile: newValue });
                            }
                        },
                        onChangePaddingLeft: function onChangePaddingLeft(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ titlePaddingL: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ titlePaddingLTablet: newValue });
                            } else {
                                setAttributes({ titlePaddingLMobile: newValue });
                            }
                        }
                    })
                ),
                React.createElement(
                    PanelBody,
                    {
                        title: __("Arrow", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(SelectControl, {
                        label: __("Position", 'premium-blocks-for-gutenberg'),
                        options: ARROW,
                        value: arrowStyles[0].arrowPos,
                        onChange: function onChange(newEffect) {
                            return saveArrowStyles({ arrowPos: newEffect });
                        }
                    }),
                    React.createElement(_singleRangeControl2.default, {
                        label: __("Size", 'premium-blocks-for-gutenberg'),
                        value: arrowStyles[0].arrowSize,
                        onChange: function onChange(newValue) {
                            return saveArrowStyles({ arrowSize: newValue });
                        },
                        showUnit: false,
                        defaultValue: 20
                    }),
                    React.createElement(_ColorComponent2.default, {
                        label: __("Arrow Color", 'premium-blocks-for-gutenberg'),
                        colorValue: arrowStyles[0].arrowColor,
                        colorDefault: '',
                        onColorChange: function onColorChange(newValue) {
                            return saveArrowStyles({ arrowColor: newValue });
                        }
                    }),
                    React.createElement(_ColorComponent2.default, {
                        label: __("Background Color", 'premium-blocks-for-gutenberg'),
                        colorValue: arrowStyles[0].arrowBack,
                        colorDefault: '',
                        onColorChange: function onColorChange(newValue) {
                            return saveArrowStyles({ arrowBack: newValue });
                        }
                    }),
                    React.createElement(_singleRangeControl2.default, {
                        label: __("Border Radius", 'premium-blocks-for-gutenberg'),
                        value: arrowStyles[0].arrowRadius,
                        onChange: function onChange(newValue) {
                            return saveArrowStyles({ arrowRadius: newValue === undefined ? 0 : newValue });
                        },
                        defaultValue: 0,
                        showUnit: false
                    }),
                    React.createElement(_singleRangeControl2.default, {
                        label: __("Padding", 'premium-blocks-for-gutenberg'),
                        value: arrowStyles[0].arrowPadding,
                        onChange: function onChange(newValue) {
                            return saveArrowStyles({ arrowPadding: newValue === undefined ? 0 : newValue });
                        },
                        defaultValue: 0,
                        showUnit: false
                    })
                ),
                React.createElement(
                    PanelBody,
                    {
                        title: __("Content", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(SelectControl, {
                        label: __("Type", 'premium-blocks-for-gutenberg'),
                        options: TYPE,
                        value: contentType,
                        onChange: function onChange(newType) {
                            return setAttributes({ contentType: newType });
                        },
                        help: __("Gutenberg Block works only with single accordion item", 'premium-blocks-for-gutenberg')
                    }),
                    React.createElement(_radioControl2.default, {
                        choices: ["left", "center", "right"],
                        label: __("Align Content "),
                        onChange: function onChange(align) {
                            return SaveDescStyles({ descAlign: align });
                        },
                        value: descStyles[0].descAlign
                    }),
                    "text" === contentType && React.createElement(
                        Fragment,
                        null,
                        React.createElement(_premiumTypo2.default, {
                            components: ["size", "weight", "style", "upper", "spacing", "line"],
                            size: descStyles[0].descSize,
                            weight: descStyles[0].descWeight,
                            style: descStyles[0].descStyle,
                            spacing: descStyles[0].descLetter,
                            line: descStyles[0].descLine,
                            upper: descStyles[0].descUpper,
                            onChangeSize: function onChangeSize(newSize) {
                                return SaveDescStyles({ descSize: newSize });
                            },
                            onChangeWeight: function onChangeWeight(newWeight) {
                                return SaveDescStyles({ descWeight: newWeight });
                            },
                            onChangeStyle: function onChangeStyle(newStyle) {
                                return SaveDescStyles({ descStyle: newStyle });
                            },
                            onChangeSpacing: function onChangeSpacing(newValue) {
                                return SaveDescStyles({ descLetter: newValue });
                            },
                            onChangeLine: function onChangeLine(newValue) {
                                return SaveDescStyles({ descLine: newValue });
                            },
                            onChangeUpper: function onChangeUpper(check) {
                                return SaveDescStyles({ descUpper: check });
                            }
                        }),
                        React.createElement(_ColorComponent2.default, {
                            label: __("Text Color", 'premium-blocks-for-gutenberg'),
                            colorValue: descStyles[0].descColor,
                            colorDefault: '',
                            onColorChange: function onColorChange(value) {
                                return SaveDescStyles({ descColor: value });
                            }
                        }),
                        React.createElement(_ColorComponent2.default, {
                            label: __("Background Color", 'premium-blocks-for-gutenberg'),
                            colorValue: descStyles[0].descBack,
                            colorDefault: '',
                            onColorChange: function onColorChange(value) {
                                return SaveDescStyles({ descBack: value });
                            }
                        })
                    ),
                    React.createElement(_premiumBorder2.default, {
                        borderType: descStyles[0].descBorder,
                        borderWidth: descBorderWidth,
                        top: descBorderTop,
                        right: descBorderRight,
                        bottom: descBorderBottom,
                        left: descBorderLeft,
                        borderColor: descStyles[0].descBorderColor,
                        borderRadius: descStyles[0].descBorderRadius,
                        onChangeType: function onChangeType(newType) {
                            return SaveDescStyles({ descBorder: newType });
                        },
                        onChangeWidth: function onChangeWidth(_ref2) {
                            var top = _ref2.top,
                                right = _ref2.right,
                                bottom = _ref2.bottom,
                                left = _ref2.left;
                            return setAttributes({
                                descBorderUpdated: true,
                                descBorderTop: top,
                                descBorderRight: right,
                                descBorderBottom: bottom,
                                descBorderLeft: left
                            });
                        },
                        onChangeColor: function onChangeColor(colorValue) {
                            return SaveDescStyles({ descBorderColor: colorValue });
                        },
                        onChangeRadius: function onChangeRadius(newrRadius) {
                            return SaveDescStyles({ descBorderRadius: newrRadius });
                        }
                    }),
                    "text" === contentType && React.createElement(_PremiumShadow2.default, {
                        label: __("Text Shadow ", "premium-blocks-for-gutenberg"),
                        color: textShadowColor,
                        blur: textShadowBlur,
                        horizontal: textShadowHorizontal,
                        vertical: textShadowVertical,
                        onChangeColor: function onChangeColor(newColor) {
                            return setAttributes({ textShadowColor: newColor === undefined ? "transparent" : newColor });
                        },
                        onChangeBlur: function onChangeBlur(newBlur) {
                            return setAttributes({ textShadowBlur: newBlur === undefined ? 0 : newBlur });
                        },
                        onChangehHorizontal: function onChangehHorizontal(newValue) {
                            return setAttributes({ textShadowHorizontal: newValue === undefined ? 0 : newValue });
                        },
                        onChangeVertical: function onChangeVertical(newValue) {
                            return setAttributes({ textShadowVertical: newValue === undefined ? 0 : newValue });
                        }
                    }),
                    React.createElement(_PremiumResponsivePadding2.default, {
                        paddingT: descPaddingT,
                        paddingR: descPaddingR,
                        paddingB: descPaddingB,
                        paddingL: descPaddingL,
                        paddingTTablet: descPaddingTTablet,
                        paddingRTablet: descPaddingRTablet,
                        paddingBTablet: descPaddingBTablet,
                        paddingLTablet: descPaddingLTablet,
                        paddingTMobile: descPaddingTMobile,
                        paddingRMobile: descPaddingRMobile,
                        paddingBMobile: descPaddingBMobile,
                        paddingLMobile: descPaddingLMobile,
                        onChangePaddingTop: function onChangePaddingTop(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ descPaddingT: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ descPaddingTTablet: newValue });
                            } else {
                                setAttributes({ descPaddingTMobile: newValue });
                            }
                        },
                        onChangePaddingRight: function onChangePaddingRight(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ descPaddingR: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ descPaddingRTablet: newValue });
                            } else {
                                setAttributes({ descPaddingRMobile: newValue });
                            }
                        },
                        onChangePaddingBottom: function onChangePaddingBottom(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ descPaddingB: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ descPaddingBTablet: newValue });
                            } else {
                                setAttributes({ descPaddingBMobile: newValue });
                            }
                        },
                        onChangePaddingLeft: function onChangePaddingLeft(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ descPaddingL: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ descPaddingLTablet: newValue });
                            } else {
                                setAttributes({ descPaddingLMobile: newValue });
                            }
                        }
                    })
                )
            ), React.createElement(
                Fragment,
                null,
                React.createElement(
                    "div",
                    { ref: this.accordionRef, id: accordionId, className: "" + mainClasses },
                    accordionItems
                ),
                React.createElement(
                    "div",
                    { className: "premium-repeater" },
                    React.createElement(
                        "button",
                        {
                            className: "premium-repeater-btn",
                            onClick: function onClick() {
                                return setAttributes({
                                    repeaterItems: repeaterItems.concat([{
                                        titleText: __("Awesome Title", 'premium-blocks-for-gutenberg'),
                                        descText: __("Cool Description", 'premium-blocks-for-gutenberg')
                                    }])
                                });
                            }
                        },
                        React.createElement("i", { className: "dashicons dashicons-plus premium-repeater-icon" }),
                        __("Add New Item", 'premium-blocks-for-gutenberg')
                    ),
                    React.createElement(
                        "p",
                        null,
                        __("Add the items you need then reload the page", 'premium-blocks-for-gutenberg')
                    )
                )
            )];
        }
    }]);

    return PremiumAccordion;
}(Component);

exports.default = withSelect(function (select, props) {
    var _select = select('core/edit-post'),
        _select$__experimenta = _select.__experimentalGetPreviewDeviceType,
        __experimentalGetPreviewDeviceType = _select$__experimenta === undefined ? null : _select$__experimenta;

    var deviceType = __experimentalGetPreviewDeviceType ? __experimentalGetPreviewDeviceType() : null;

    return {
        deviceType: deviceType
    };
})(PremiumAccordion);

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _Symbol = __webpack_require__(43);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var memoizeCapped = __webpack_require__(136);

/** Used to match property names within property paths. */
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoizeCapped(function (string) {
  var result = [];
  if (string.charCodeAt(0) === 46 /* . */) {
      result.push('');
    }
  string.replace(rePropName, function (match, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
  });
  return result;
});

module.exports = stringToPath;

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var memoize = __webpack_require__(137);

/** Used as the maximum memoize cache size. */
var MAX_MEMOIZE_SIZE = 500;

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */
function memoizeCapped(func) {
  var result = memoize(func, function (key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });

  var cache = result.cache;
  return result;
}

module.exports = memoizeCapped;

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var MapCache = __webpack_require__(61);

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function memoized() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache)();
  return memoized;
}

// Expose `MapCache`.
memoize.Cache = MapCache;

module.exports = memoize;

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Hash = __webpack_require__(139),
    ListCache = __webpack_require__(45),
    Map = __webpack_require__(63);

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash(),
    'map': new (Map || ListCache)(),
    'string': new Hash()
  };
}

module.exports = mapCacheClear;

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var hashClear = __webpack_require__(140),
    hashDelete = __webpack_require__(145),
    hashGet = __webpack_require__(146),
    hashHas = __webpack_require__(147),
    hashSet = __webpack_require__(148);

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

module.exports = Hash;

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var nativeCreate = __webpack_require__(44);

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

module.exports = hashClear;

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isFunction = __webpack_require__(90),
    isMasked = __webpack_require__(142),
    isObject = __webpack_require__(62),
    toSource = __webpack_require__(91);

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

module.exports = baseIsNative;

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var coreJsData = __webpack_require__(143);

/** Used to detect methods masquerading as native. */
var maskSrcKey = function () {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? 'Symbol(src)_1.' + uid : '';
}();

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && maskSrcKey in func;
}

module.exports = isMasked;

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var root = __webpack_require__(15);

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

module.exports = coreJsData;

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

module.exports = getValue;

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = hashDelete;

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var nativeCreate = __webpack_require__(44);

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

module.exports = hashGet;

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var nativeCreate = __webpack_require__(44);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}

module.exports = hashHas;

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var nativeCreate = __webpack_require__(44);

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
  return this;
}

module.exports = hashSet;

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

module.exports = listCacheClear;

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assocIndexOf = __webpack_require__(46);

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

module.exports = listCacheDelete;

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assocIndexOf = __webpack_require__(46);

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

module.exports = listCacheGet;

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assocIndexOf = __webpack_require__(46);

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

module.exports = listCacheHas;

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assocIndexOf = __webpack_require__(46);

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

module.exports = listCacheSet;

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var getMapData = __webpack_require__(47);

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = mapCacheDelete;

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
  return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
}

module.exports = isKeyable;

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var getMapData = __webpack_require__(47);

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

module.exports = mapCacheGet;

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var getMapData = __webpack_require__(47);

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

module.exports = mapCacheHas;

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var getMapData = __webpack_require__(47);

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

module.exports = mapCacheSet;

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var baseToString = __webpack_require__(160);

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

module.exports = toString;

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _Symbol = __webpack_require__(43),
    arrayMap = __webpack_require__(93),
    isArray = __webpack_require__(14),
    isSymbol = __webpack_require__(60);

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto = _Symbol ? _Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + '';
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = value + '';
  return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}

module.exports = baseToString;

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var baseMatches = __webpack_require__(162),
    baseMatchesProperty = __webpack_require__(203),
    identity = __webpack_require__(207),
    isArray = __webpack_require__(14),
    property = __webpack_require__(208);

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */
function baseIteratee(value) {
  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if (typeof value == 'function') {
    return value;
  }
  if (value == null) {
    return identity;
  }
  if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object') {
    return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
  }
  return property(value);
}

module.exports = baseIteratee;

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var baseIsMatch = __webpack_require__(163),
    getMatchData = __webpack_require__(202),
    matchesStrictComparable = __webpack_require__(103);

/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatches(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
  }
  return function (object) {
    return object === source || baseIsMatch(object, source, matchData);
  };
}

module.exports = baseMatches;

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Stack = __webpack_require__(95),
    baseIsEqual = __webpack_require__(96);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */
function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack();
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
        return false;
      }
    }
  }
  return true;
}

module.exports = baseIsMatch;

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var ListCache = __webpack_require__(45);

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache();
  this.size = 0;
}

module.exports = stackClear;

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

module.exports = stackDelete;

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

module.exports = stackGet;

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

module.exports = stackHas;

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var ListCache = __webpack_require__(45),
    Map = __webpack_require__(63),
    MapCache = __webpack_require__(61);

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

module.exports = stackSet;

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Stack = __webpack_require__(95),
    equalArrays = __webpack_require__(97),
    equalByTag = __webpack_require__(175),
    equalObjects = __webpack_require__(179),
    getTag = __webpack_require__(197),
    isArray = __webpack_require__(14),
    isBuffer = __webpack_require__(99),
    isTypedArray = __webpack_require__(101);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = objIsArr ? arrayTag : getTag(object),
      othTag = othIsArr ? arrayTag : getTag(other);

  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;

  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack());
    return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack());
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack());
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

module.exports = baseIsEqualDeep;

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var MapCache = __webpack_require__(61),
    setCacheAdd = __webpack_require__(171),
    setCacheHas = __webpack_require__(172);

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
    var index = -1,
        length = values == null ? 0 : values.length;

    this.__data__ = new MapCache();
    while (++index < length) {
        this.add(values[index]);
    }
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

module.exports = SetCache;

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

module.exports = setCacheAdd;

/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

module.exports = setCacheHas;

/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

module.exports = arraySome;

/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

module.exports = cacheHas;

/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _Symbol = __webpack_require__(43),
    Uint8Array = __webpack_require__(176),
    eq = __webpack_require__(92),
    equalArrays = __webpack_require__(97),
    mapToArray = __webpack_require__(177),
    setToArray = __webpack_require__(178);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]';

/** Used to convert symbols to primitives and strings. */
var symbolProto = _Symbol ? _Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == other + '';

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

module.exports = equalByTag;

/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var root = __webpack_require__(15);

/** Built-in value references. */
var Uint8Array = root.Uint8Array;

module.exports = Uint8Array;

/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function (value, key) {
    result[++index] = [key, value];
  });
  return result;
}

module.exports = mapToArray;

/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function (value) {
    result[++index] = value;
  });
  return result;
}

module.exports = setToArray;

/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var getAllKeys = __webpack_require__(180);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  // Check that cyclic values are equal.
  var objStacked = stack.get(object);
  var othStacked = stack.get(other);
  if (objStacked && othStacked) {
    return objStacked == other && othStacked == object;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

module.exports = equalObjects;

/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var baseGetAllKeys = __webpack_require__(181),
    getSymbols = __webpack_require__(183),
    keys = __webpack_require__(64);

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

module.exports = getAllKeys;

/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var arrayPush = __webpack_require__(182),
    isArray = __webpack_require__(14);

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

module.exports = baseGetAllKeys;

/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

module.exports = arrayPush;

/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var arrayFilter = __webpack_require__(184),
    stubArray = __webpack_require__(185);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter(nativeGetSymbols(object), function (symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};

module.exports = getSymbols;

/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

module.exports = arrayFilter;

/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

module.exports = stubArray;

/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var baseTimes = __webpack_require__(187),
    isArguments = __webpack_require__(98),
    isArray = __webpack_require__(14),
    isBuffer = __webpack_require__(99),
    isIndex = __webpack_require__(100),
    isTypedArray = __webpack_require__(101);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (
    // Safari 9 has enumerable `arguments.length` in strict mode.
    key == 'length' ||
    // Node.js 0.10 has enumerable non-index properties on buffers.
    isBuff && (key == 'offset' || key == 'parent') ||
    // PhantomJS 2 has enumerable non-index properties on typed arrays.
    isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') ||
    // Skip index properties.
    isIndex(key, length)))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = arrayLikeKeys;

/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

module.exports = baseTimes;

/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var baseGetTag = __webpack_require__(38),
    isObjectLike = __webpack_require__(39);

/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

module.exports = baseIsArguments;

/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;

/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var baseGetTag = __webpack_require__(38),
    isLength = __webpack_require__(65),
    isObjectLike = __webpack_require__(39);

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

module.exports = baseIsTypedArray;

/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function (value) {
    return func(value);
  };
}

module.exports = baseUnary;

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var freeGlobal = __webpack_require__(88);

/** Detect free variable `exports`. */
var freeExports = ( false ? 'undefined' : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && ( false ? 'undefined' : _typeof(module)) == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = function () {
  try {
    // Use `util.types` for Node.js 10+.
    var types = freeModule && freeModule.require && freeModule.require('util').types;

    if (types) {
      return types;
    }

    // Legacy `process.binding('util')` for Node.js < 10.
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}();

module.exports = nodeUtil;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(49)(module)))

/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isPrototype = __webpack_require__(194),
    nativeKeys = __webpack_require__(195);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeys;

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;

  return value === proto;
}

module.exports = isPrototype;

/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var overArg = __webpack_require__(196);

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

module.exports = nativeKeys;

/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function (arg) {
    return func(transform(arg));
  };
}

module.exports = overArg;

/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var DataView = __webpack_require__(198),
    Map = __webpack_require__(63),
    Promise = __webpack_require__(199),
    Set = __webpack_require__(200),
    WeakMap = __webpack_require__(201),
    baseGetTag = __webpack_require__(38),
    toSource = __webpack_require__(91);

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    setTag = '[object Set]',
    weakMapTag = '[object WeakMap]';

var dataViewTag = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
    getTag = function getTag(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
            switch (ctorString) {
                case dataViewCtorString:
                    return dataViewTag;
                case mapCtorString:
                    return mapTag;
                case promiseCtorString:
                    return promiseTag;
                case setCtorString:
                    return setTag;
                case weakMapCtorString:
                    return weakMapTag;
            }
        }
        return result;
    };
}

module.exports = getTag;

/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var getNative = __webpack_require__(29),
    root = __webpack_require__(15);

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView');

module.exports = DataView;

/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var getNative = __webpack_require__(29),
    root = __webpack_require__(15);

/* Built-in method references that are verified to be native. */
var Promise = getNative(root, 'Promise');

module.exports = Promise;

/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var getNative = __webpack_require__(29),
    root = __webpack_require__(15);

/* Built-in method references that are verified to be native. */
var Set = getNative(root, 'Set');

module.exports = Set;

/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var getNative = __webpack_require__(29),
    root = __webpack_require__(15);

/* Built-in method references that are verified to be native. */
var WeakMap = getNative(root, 'WeakMap');

module.exports = WeakMap;

/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isStrictComparable = __webpack_require__(102),
    keys = __webpack_require__(64);

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */
function getMatchData(object) {
    var result = keys(object),
        length = result.length;

    while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
    }
    return result;
}

module.exports = getMatchData;

/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var baseIsEqual = __webpack_require__(96),
    get = __webpack_require__(85),
    hasIn = __webpack_require__(204),
    isKey = __webpack_require__(59),
    isStrictComparable = __webpack_require__(102),
    matchesStrictComparable = __webpack_require__(103),
    toKey = __webpack_require__(48);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatchesProperty(path, srcValue) {
  if (isKey(path) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey(path), srcValue);
  }
  return function (object) {
    var objValue = get(object, path);
    return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
  };
}

module.exports = baseMatchesProperty;

/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var baseHasIn = __webpack_require__(205),
    hasPath = __webpack_require__(206);

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}

module.exports = hasIn;

/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}

module.exports = baseHasIn;

/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var castPath = __webpack_require__(87),
    isArguments = __webpack_require__(98),
    isArray = __webpack_require__(14),
    isIndex = __webpack_require__(100),
    isLength = __webpack_require__(65),
    toKey = __webpack_require__(48);

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath(object, path, hasFunc) {
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      result = false;

  while (++index < length) {
    var key = toKey(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result || ++index != length) {
    return result;
  }
  length = object == null ? 0 : object.length;
  return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
}

module.exports = hasPath;

/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = identity;

/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var baseProperty = __webpack_require__(209),
    basePropertyDeep = __webpack_require__(210),
    isKey = __webpack_require__(59),
    toKey = __webpack_require__(48);

/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */
function property(path) {
  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}

module.exports = property;

/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function (object) {
    return object == null ? undefined : object[key];
  };
}

module.exports = baseProperty;

/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var baseGet = __webpack_require__(86);

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyDeep(path) {
  return function (object) {
    return baseGet(object, path);
  };
}

module.exports = basePropertyDeep;

/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var baseEach = __webpack_require__(212),
    isArrayLike = __webpack_require__(66);

/**
 * The base implementation of `_.map` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function baseMap(collection, iteratee) {
  var index = -1,
      result = isArrayLike(collection) ? Array(collection.length) : [];

  baseEach(collection, function (value, key, collection) {
    result[++index] = iteratee(value, key, collection);
  });
  return result;
}

module.exports = baseMap;

/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var baseForOwn = __webpack_require__(213),
    createBaseEach = __webpack_require__(216);

/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */
var baseEach = createBaseEach(baseForOwn);

module.exports = baseEach;

/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var baseFor = __webpack_require__(214),
    keys = __webpack_require__(64);

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return object && baseFor(object, iteratee, keys);
}

module.exports = baseForOwn;

/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var createBaseFor = __webpack_require__(215);

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

module.exports = baseFor;

/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function (object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

module.exports = createBaseFor;

/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isArrayLike = __webpack_require__(66);

/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseEach(eachFunc, fromRight) {
  return function (collection, iteratee) {
    if (collection == null) {
      return collection;
    }
    if (!isArrayLike(collection)) {
      return eachFunc(collection, iteratee);
    }
    var length = collection.length,
        index = fromRight ? length : -1,
        iterable = Object(collection);

    while (fromRight ? index-- : ++index < length) {
      if (iteratee(iterable[index], index, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}

module.exports = createBaseEach;

/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var r = { grad: .9, turn: 360, rad: 360 / (2 * Math.PI) },
    t = function t(r) {
  return "string" == typeof r ? r.length > 0 : "number" == typeof r;
},
    n = function n(r, t, _n) {
  return void 0 === t && (t = 0), void 0 === _n && (_n = Math.pow(10, t)), Math.round(_n * r) / _n + 0;
},
    e = function e(r, t, n) {
  return void 0 === t && (t = 0), void 0 === n && (n = 1), r > n ? n : r > t ? r : t;
},
    u = function u(r) {
  return (r = isFinite(r) ? r % 360 : 0) > 0 ? r : r + 360;
},
    a = function a(r) {
  return { r: e(r.r, 0, 255), g: e(r.g, 0, 255), b: e(r.b, 0, 255), a: e(r.a) };
},
    o = function o(r) {
  return { r: n(r.r), g: n(r.g), b: n(r.b), a: n(r.a, 3) };
},
    i = /^#([0-9a-f]{3,8})$/i,
    s = function s(r) {
  var t = r.toString(16);return t.length < 2 ? "0" + t : t;
},
    h = function h(r) {
  var t = r.r,
      n = r.g,
      e = r.b,
      u = r.a,
      a = Math.max(t, n, e),
      o = a - Math.min(t, n, e),
      i = o ? a === t ? (n - e) / o : a === n ? 2 + (e - t) / o : 4 + (t - n) / o : 0;return { h: 60 * (i < 0 ? i + 6 : i), s: a ? o / a * 100 : 0, v: a / 255 * 100, a: u };
},
    b = function b(r) {
  var t = r.h,
      n = r.s,
      e = r.v,
      u = r.a;t = t / 360 * 6, n /= 100, e /= 100;var a = Math.floor(t),
      o = e * (1 - n),
      i = e * (1 - (t - a) * n),
      s = e * (1 - (1 - t + a) * n),
      h = a % 6;return { r: 255 * [e, i, o, o, s, e][h], g: 255 * [s, e, e, i, o, o][h], b: 255 * [o, o, s, e, e, i][h], a: u };
},
    g = function g(r) {
  return { h: u(r.h), s: e(r.s, 0, 100), l: e(r.l, 0, 100), a: e(r.a) };
},
    d = function d(r) {
  return { h: n(r.h), s: n(r.s), l: n(r.l), a: n(r.a, 3) };
},
    f = function f(r) {
  return b((n = (t = r).s, { h: t.h, s: (n *= ((e = t.l) < 50 ? e : 100 - e) / 100) > 0 ? 2 * n / (e + n) * 100 : 0, v: e + n, a: t.a }));var t, n, e;
},
    c = function c(r) {
  return { h: (t = h(r)).h, s: (u = (200 - (n = t.s)) * (e = t.v) / 100) > 0 && u < 200 ? n * e / 100 / (u <= 100 ? u : 200 - u) * 100 : 0, l: u / 2, a: t.a };var t, n, e, u;
},
    l = /^hsla?\(\s*([+-]?\d*\.?\d+)(deg|rad|grad|turn)?\s*,\s*([+-]?\d*\.?\d+)%\s*,\s*([+-]?\d*\.?\d+)%\s*(?:,\s*([+-]?\d*\.?\d+)(%)?\s*)?\)$/i,
    p = /^hsla?\(\s*([+-]?\d*\.?\d+)(deg|rad|grad|turn)?\s+([+-]?\d*\.?\d+)%\s+([+-]?\d*\.?\d+)%\s*(?:\/\s*([+-]?\d*\.?\d+)(%)?\s*)?\)$/i,
    v = /^rgba?\(\s*([+-]?\d*\.?\d+)(%)?\s*,\s*([+-]?\d*\.?\d+)(%)?\s*,\s*([+-]?\d*\.?\d+)(%)?\s*(?:,\s*([+-]?\d*\.?\d+)(%)?\s*)?\)$/i,
    m = /^rgba?\(\s*([+-]?\d*\.?\d+)(%)?\s+([+-]?\d*\.?\d+)(%)?\s+([+-]?\d*\.?\d+)(%)?\s*(?:\/\s*([+-]?\d*\.?\d+)(%)?\s*)?\)$/i,
    y = { string: [[function (r) {
    var t = i.exec(r);return t ? (r = t[1]).length <= 4 ? { r: parseInt(r[0] + r[0], 16), g: parseInt(r[1] + r[1], 16), b: parseInt(r[2] + r[2], 16), a: 4 === r.length ? n(parseInt(r[3] + r[3], 16) / 255, 2) : 1 } : 6 === r.length || 8 === r.length ? { r: parseInt(r.substr(0, 2), 16), g: parseInt(r.substr(2, 2), 16), b: parseInt(r.substr(4, 2), 16), a: 8 === r.length ? n(parseInt(r.substr(6, 2), 16) / 255, 2) : 1 } : null : null;
  }, "hex"], [function (r) {
    var t = v.exec(r) || m.exec(r);return t ? t[2] !== t[4] || t[4] !== t[6] ? null : a({ r: Number(t[1]) / (t[2] ? 100 / 255 : 1), g: Number(t[3]) / (t[4] ? 100 / 255 : 1), b: Number(t[5]) / (t[6] ? 100 / 255 : 1), a: void 0 === t[7] ? 1 : Number(t[7]) / (t[8] ? 100 : 1) }) : null;
  }, "rgb"], [function (t) {
    var n = l.exec(t) || p.exec(t);if (!n) return null;var e,
        u,
        a = g({ h: (e = n[1], u = n[2], void 0 === u && (u = "deg"), Number(e) * (r[u] || 1)), s: Number(n[3]), l: Number(n[4]), a: void 0 === n[5] ? 1 : Number(n[5]) / (n[6] ? 100 : 1) });return f(a);
  }, "hsl"]], object: [[function (r) {
    var n = r.r,
        e = r.g,
        u = r.b,
        o = r.a,
        i = void 0 === o ? 1 : o;return t(n) && t(e) && t(u) ? a({ r: Number(n), g: Number(e), b: Number(u), a: Number(i) }) : null;
  }, "rgb"], [function (r) {
    var n = r.h,
        e = r.s,
        u = r.l,
        a = r.a,
        o = void 0 === a ? 1 : a;if (!t(n) || !t(e) || !t(u)) return null;var i = g({ h: Number(n), s: Number(e), l: Number(u), a: Number(o) });return f(i);
  }, "hsl"], [function (r) {
    var n = r.h,
        a = r.s,
        o = r.v,
        i = r.a,
        s = void 0 === i ? 1 : i;if (!t(n) || !t(a) || !t(o)) return null;var h = function (r) {
      return { h: u(r.h), s: e(r.s, 0, 100), v: e(r.v, 0, 100), a: e(r.a) };
    }({ h: Number(n), s: Number(a), v: Number(o), a: Number(s) });return b(h);
  }, "hsv"]] },
    N = function N(r, t) {
  for (var n = 0; n < t.length; n++) {
    var e = t[n][0](r);if (e) return [e, t[n][1]];
  }return [null, void 0];
},
    x = function x(r) {
  return "string" == typeof r ? N(r.trim(), y.string) : "object" == (typeof r === "undefined" ? "undefined" : _typeof(r)) && null !== r ? N(r, y.object) : [null, void 0];
},
    I = function I(r) {
  return x(r)[1];
},
    M = function M(r, t) {
  var n = c(r);return { h: n.h, s: e(n.s + 100 * t, 0, 100), l: n.l, a: n.a };
},
    H = function H(r) {
  return (299 * r.r + 587 * r.g + 114 * r.b) / 1e3 / 255;
},
    $ = function $(r, t) {
  var n = c(r);return { h: n.h, s: n.s, l: e(n.l + 100 * t, 0, 100), a: n.a };
},
    j = function () {
  function r(r) {
    this.parsed = x(r)[0], this.rgba = this.parsed || { r: 0, g: 0, b: 0, a: 1 };
  }return r.prototype.isValid = function () {
    return null !== this.parsed;
  }, r.prototype.brightness = function () {
    return n(H(this.rgba), 2);
  }, r.prototype.isDark = function () {
    return H(this.rgba) < .5;
  }, r.prototype.isLight = function () {
    return H(this.rgba) >= .5;
  }, r.prototype.toHex = function () {
    return r = o(this.rgba), t = r.r, e = r.g, u = r.b, i = (a = r.a) < 1 ? s(n(255 * a)) : "", "#" + s(t) + s(e) + s(u) + i;var r, t, e, u, a, i;
  }, r.prototype.toRgb = function () {
    return o(this.rgba);
  }, r.prototype.toRgbString = function () {
    return r = o(this.rgba), t = r.r, n = r.g, e = r.b, (u = r.a) < 1 ? "rgba(" + t + ", " + n + ", " + e + ", " + u + ")" : "rgb(" + t + ", " + n + ", " + e + ")";var r, t, n, e, u;
  }, r.prototype.toHsl = function () {
    return d(c(this.rgba));
  }, r.prototype.toHslString = function () {
    return r = d(c(this.rgba)), t = r.h, n = r.s, e = r.l, (u = r.a) < 1 ? "hsla(" + t + ", " + n + "%, " + e + "%, " + u + ")" : "hsl(" + t + ", " + n + "%, " + e + "%)";var r, t, n, e, u;
  }, r.prototype.toHsv = function () {
    return r = h(this.rgba), { h: n(r.h), s: n(r.s), v: n(r.v), a: n(r.a, 3) };var r;
  }, r.prototype.invert = function () {
    return w({ r: 255 - (r = this.rgba).r, g: 255 - r.g, b: 255 - r.b, a: r.a });var r;
  }, r.prototype.saturate = function (r) {
    return void 0 === r && (r = .1), w(M(this.rgba, r));
  }, r.prototype.desaturate = function (r) {
    return void 0 === r && (r = .1), w(M(this.rgba, -r));
  }, r.prototype.grayscale = function () {
    return w(M(this.rgba, -1));
  }, r.prototype.lighten = function (r) {
    return void 0 === r && (r = .1), w($(this.rgba, r));
  }, r.prototype.darken = function (r) {
    return void 0 === r && (r = .1), w($(this.rgba, -r));
  }, r.prototype.rotate = function (r) {
    return void 0 === r && (r = 15), this.hue(this.hue() + r);
  }, r.prototype.alpha = function (r) {
    return "number" == typeof r ? w({ r: (t = this.rgba).r, g: t.g, b: t.b, a: r }) : n(this.rgba.a, 3);var t;
  }, r.prototype.hue = function (r) {
    var t = c(this.rgba);return "number" == typeof r ? w({ h: r, s: t.s, l: t.l, a: t.a }) : n(t.h);
  }, r.prototype.isEqual = function (r) {
    return this.toHex() === w(r).toHex();
  }, r;
}(),
    w = function w(r) {
  return r instanceof j ? r : new j(r);
},
    S = [],
    k = function k(r) {
  r.forEach(function (r) {
    S.indexOf(r) < 0 && (r(j, y), S.push(r));
  });
},
    E = function E() {
  return new j({ r: 255 * Math.random(), g: 255 * Math.random(), b: 255 * Math.random() });
};exports.Colord = j;
exports.colord = w;
exports.extend = k;
exports.getFormat = I;
exports.random = E;

/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _premiumSizeUnits = __webpack_require__(21);

var _premiumSizeUnits2 = _interopRequireDefault(_premiumSizeUnits);

var _react = __webpack_require__(9);

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var __ = wp.i18n.__;

var PremiumPadding = function (_Component) {
    _inherits(PremiumPadding, _Component);

    function PremiumPadding(props) {
        _classCallCheck(this, PremiumPadding);

        var _this = _possibleConstructorReturn(this, (PremiumPadding.__proto__ || Object.getPrototypeOf(PremiumPadding)).call(this, props));

        _this.state = {
            isLinked: false,
            top: _this.props.paddingTop || '',
            right: _this.props.paddingRight || '',
            bottom: _this.props.paddingBottom || '',
            left: _this.props.paddingLeft || ''

        };
        _this.defaultValue = {
            isLinked: false,
            top: '',
            right: '',
            bottom: '',
            left: ''
        };
        _this.onInputChange = _this.onInputChange.bind(_this);
        _this.onButtonClick = _this.onButtonClick.bind(_this);
        _this.changeFunction = _this.changeFunction.bind(_this);
        return _this;
    }

    _createClass(PremiumPadding, [{
        key: "onButtonClick",
        value: function onButtonClick() {
            this.setState({ isLinked: !this.state.isLinked });
        }
    }, {
        key: "changeFunction",
        value: function changeFunction(value) {
            var top = value.top,
                right = value.right,
                bottom = value.bottom,
                left = value.left;

            this.props.onChangePadTop(top);
            this.props.onChangePadRight(right);
            this.props.onChangePadBottom(bottom);
            this.props.onChangePadLeft(left);
        }
    }, {
        key: "onInputChange",
        value: function onInputChange(event) {
            var _this2 = this;

            var _state = this.state,
                isLinked = _state.isLinked,
                top = _state.top,
                right = _state.right,
                bottom = _state.bottom,
                left = _state.left;
            var _event$target = event.target,
                name = _event$target.name,
                value = _event$target.value;

            if (isLinked) {
                top = right = bottom = left = parseInt(value) || 0;
                this.setState({ top: top, right: right, bottom: bottom, left: left }, function () {
                    _this2.changeFunction(_this2.state);
                });
            } else {
                this.setState(_defineProperty({}, name, parseInt(value) || 0), function () {
                    _this2.changeFunction(_this2.state);
                });
            }
        }
    }, {
        key: "render",
        value: function render() {
            var _this3 = this;

            var _state2 = this.state,
                top = _state2.top,
                right = _state2.right,
                bottom = _state2.bottom,
                left = _state2.left,
                isLinked = _state2.isLinked;
            var _props = this.props,
                _props$onChangePadSiz = _props.onChangePadSizeUnit,
                onChangePadSizeUnit = _props$onChangePadSiz === undefined ? function () {} : _props$onChangePadSiz,
                selectedUnit = _props.selectedUnit;


            return _react2.default.createElement(
                "div",
                { className: "premium-spacing-responsive" },
                this.props.label && _react2.default.createElement(
                    "header",
                    { className: "premium-control-label-container" },
                    _react2.default.createElement(
                        "div",
                        { className: "premium-slider-title-wrap" },
                        __("Padding", 'premium-blocks-for-gutenberg')
                    ),
                    this.props.showUnits && _react2.default.createElement(_premiumSizeUnits2.default, {
                        activeUnit: selectedUnit,
                        onChangeSizeUnit: function onChangeSizeUnit(newValue) {
                            return onChangePadSizeUnit(newValue);
                        }
                    })
                ),
                _react2.default.createElement(
                    "div",
                    { className: "premium-spacing-responsive-outer-wrapper" },
                    _react2.default.createElement(
                        "div",
                        { className: "input-wrapper premium-spacing-responsive-wrapper" },
                        _react2.default.createElement(
                            "ul",
                            { className: "premium-spacing-wrapper" },
                            _react2.default.createElement(
                                "li",
                                { className: "premium-spacing-input-item" },
                                _react2.default.createElement("input", {
                                    type: "number",
                                    name: "top",
                                    value: top,
                                    onChange: this.onInputChange,
                                    className: "premium-spacing-input"
                                }),
                                _react2.default.createElement(
                                    "span",
                                    { className: "premium-spacing-title" },
                                    __("Top")
                                )
                            ),
                            _react2.default.createElement(
                                "li",
                                { className: "premium-spacing-input-item" },
                                _react2.default.createElement("input", {
                                    type: "number",
                                    name: "right",
                                    value: right,
                                    onChange: this.onInputChange,
                                    className: "premium-spacing-input"
                                }),
                                _react2.default.createElement(
                                    "span",
                                    { className: "premium-spacing-title" },
                                    __('Right')
                                )
                            ),
                            _react2.default.createElement(
                                "li",
                                { className: "premium-spacing-input-item" },
                                _react2.default.createElement("input", {
                                    type: "number",
                                    name: "bottom",
                                    value: bottom,
                                    onChange: this.onInputChange,
                                    className: "premium-spacing-input"
                                }),
                                _react2.default.createElement(
                                    "span",
                                    { className: "premium-spacing-title" },
                                    __('Bottom')
                                )
                            ),
                            _react2.default.createElement(
                                "li",
                                { className: "premium-spacing-input-item" },
                                _react2.default.createElement("input", {
                                    type: "number",
                                    name: "left",
                                    value: left,
                                    onChange: this.onInputChange,
                                    className: "premium-spacing-input"
                                }),
                                _react2.default.createElement(
                                    "span",
                                    { className: "premium-spacing-title" },
                                    __('Left')
                                )
                            ),
                            _react2.default.createElement(
                                "li",
                                null,
                                _react2.default.createElement("button", {
                                    className: "linked-btn is-button dashicons dashicons-" + (isLinked ? "admin-links connected" : "editor-unlink disconnected"),
                                    onClick: this.onButtonClick
                                })
                            )
                        )
                    ),
                    _react2.default.createElement(
                        "div",
                        { className: "premium-spacing-btn-reset-wrap" },
                        _react2.default.createElement("button", {
                            className: "premium-reset-btn ",
                            disabled: JSON.stringify(this.state) === JSON.stringify(this.defaultValue),
                            onClick: function onClick(e) {
                                e.preventDefault();
                                _this3.setState(_extends({}, _this3.state, _this3.defaultValue));
                                _this3.changeFunction(_this3.defaultValue);
                            }
                        })
                    )
                )
            );
        }
    }]);

    return PremiumPadding;
}(_react.Component);

exports.default = PremiumPadding;

/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * Google Fonts for the FontFamily component.
 */

var fonts = {};
fonts["ABeeZee"] = { "v": ["regular", "italic"], "subset": ["latin"], "weight": ["400"], "i": ["normal", "italic"] };
fonts["Abel"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Abhaya Libre"] = { "v": ["regular", "500", "600", "700", "800"], "subset": ["latin-ext", "sinhala", "latin"], "weight": ["400", "500", "600", "700", "800"], "i": ["normal"] };
fonts["Abril Fatface"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Aclonica"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Acme"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Actor"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Adamina"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Advent Pro"] = { "v": ["100", "200", "300", "regular", "500", "600", "700"], "subset": ["latin-ext", "greek", "latin"], "weight": ["100", "200", "300", "400", "500", "600", "700"], "i": ["normal"] };
fonts["Aguafina Script"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Akronim"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Aladin"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Aldrich"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Alef"] = { "v": ["regular", "700"], "subset": ["hebrew", "latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Alegreya"] = { "v": ["regular", "italic", "500", "500italic", "700", "700italic", "800", "800italic", "900", "900italic"], "subset": ["cyrillic", "cyrillic-ext", "greek-ext", "latin-ext", "greek", "vietnamese", "latin"], "weight": ["400", "500", "700", "800", "900"], "i": ["normal", "italic"] };
fonts["Alegreya SC"] = { "v": ["regular", "italic", "500", "500italic", "700", "700italic", "800", "800italic", "900", "900italic"], "subset": ["cyrillic", "cyrillic-ext", "greek-ext", "latin-ext", "greek", "vietnamese", "latin"], "weight": ["400", "500", "700", "800", "900"], "i": ["normal", "italic"] };
fonts["Alegreya Sans"] = { "v": ["100", "100italic", "300", "300italic", "regular", "italic", "500", "500italic", "700", "700italic", "800", "800italic", "900", "900italic"], "subset": ["cyrillic", "cyrillic-ext", "greek-ext", "latin-ext", "greek", "vietnamese", "latin"], "weight": ["100", "300", "400", "500", "700", "800", "900"], "i": ["normal", "italic"] };
fonts["Alegreya Sans SC"] = { "v": ["100", "100italic", "300", "300italic", "regular", "italic", "500", "500italic", "700", "700italic", "800", "800italic", "900", "900italic"], "subset": ["cyrillic", "cyrillic-ext", "greek-ext", "latin-ext", "greek", "vietnamese", "latin"], "weight": ["100", "300", "400", "500", "700", "800", "900"], "i": ["normal", "italic"] };
fonts["Alex Brush"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Alfa Slab One"] = { "v": ["regular"], "subset": ["latin-ext", "vietnamese", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Alice"] = { "v": ["regular"], "subset": ["cyrillic", "cyrillic-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Alike"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Alike Angular"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Allan"] = { "v": ["regular", "700"], "subset": ["latin-ext", "latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Allerta"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Allerta Stencil"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Allura"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Almendra"] = { "v": ["regular", "italic", "700", "700italic"], "subset": ["latin-ext", "latin"], "weight": ["400", "700"], "i": ["normal", "italic"] };
fonts["Almendra Display"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Almendra SC"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Amarante"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Amaranth"] = { "v": ["regular", "italic", "700", "700italic"], "subset": ["latin"], "weight": ["400", "700"], "i": ["normal", "italic"] };
fonts["Amatic SC"] = { "v": ["regular", "700"], "subset": ["cyrillic", "latin-ext", "hebrew", "vietnamese", "latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Amethysta"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Amiko"] = { "v": ["regular", "600", "700"], "subset": ["latin-ext", "devanagari", "latin"], "weight": ["400", "600", "700"], "i": ["normal"] };
fonts["Amiri"] = { "v": ["regular", "italic", "700", "700italic"], "subset": ["latin-ext", "arabic", "latin"], "weight": ["400", "700"], "i": ["normal", "italic"] };
fonts["Amita"] = { "v": ["regular", "700"], "subset": ["latin-ext", "devanagari", "latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Anaheim"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Andada"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Andika"] = { "v": ["regular"], "subset": ["cyrillic", "cyrillic-ext", "latin-ext", "vietnamese", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Angkor"] = { "v": ["regular"], "subset": ["khmer"], "weight": ["400"], "i": ["normal"] };
fonts["Annie Use Your Telescope"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Anonymous Pro"] = { "v": ["regular", "italic", "700", "700italic"], "subset": ["cyrillic", "latin-ext", "greek", "latin"], "weight": ["400", "700"], "i": ["normal", "italic"] };
fonts["Antic"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Antic Didone"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Antic Slab"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Anton"] = { "v": ["regular"], "subset": ["latin-ext", "vietnamese", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Arapey"] = { "v": ["regular", "italic"], "subset": ["latin"], "weight": ["400"], "i": ["normal", "italic"] };
fonts["Arbutus"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Arbutus Slab"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Architects Daughter"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Archivo"] = { "v": ["regular", "italic", "500", "500italic", "600", "600italic", "700", "700italic"], "subset": ["latin-ext", "vietnamese", "latin"], "weight": ["400", "500", "600", "700"], "i": ["normal", "italic"] };
fonts["Archivo Black"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Archivo Narrow"] = { "v": ["regular", "italic", "500", "500italic", "600", "600italic", "700", "700italic"], "subset": ["latin-ext", "latin"], "weight": ["400", "500", "600", "700"], "i": ["normal", "italic"] };
fonts["Aref Ruqaa"] = { "v": ["regular", "700"], "subset": ["arabic", "latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Arima Madurai"] = { "v": ["100", "200", "300", "regular", "500", "700", "800", "900"], "subset": ["latin-ext", "tamil", "vietnamese", "latin"], "weight": ["100", "200", "300", "400", "500", "700", "800", "900"], "i": ["normal"] };
fonts["Arimo"] = { "v": ["regular", "italic", "700", "700italic"], "subset": ["cyrillic", "cyrillic-ext", "greek-ext", "latin-ext", "hebrew", "greek", "vietnamese", "latin"], "weight": ["400", "700"], "i": ["normal", "italic"] };
fonts["Arizonia"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Armata"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Arsenal"] = { "v": ["regular", "italic", "700", "700italic"], "subset": ["cyrillic", "cyrillic-ext", "latin-ext", "vietnamese", "latin"], "weight": ["400", "700"], "i": ["normal", "italic"] };
fonts["Artifika"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Arvo"] = { "v": ["regular", "italic", "700", "700italic"], "subset": ["latin"], "weight": ["400", "700"], "i": ["normal", "italic"] };
fonts["Arya"] = { "v": ["regular", "700"], "subset": ["latin-ext", "devanagari", "latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Asap"] = { "v": ["regular", "italic", "500", "500italic", "600", "600italic", "700", "700italic"], "subset": ["latin-ext", "vietnamese", "latin"], "weight": ["400", "500", "600", "700"], "i": ["normal", "italic"] };
fonts["Asap Condensed"] = { "v": ["regular", "italic", "500", "500italic", "600", "600italic", "700", "700italic"], "subset": ["latin-ext", "vietnamese", "latin"], "weight": ["400", "500", "600", "700"], "i": ["normal", "italic"] };
fonts["Asar"] = { "v": ["regular"], "subset": ["latin-ext", "devanagari", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Asset"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Assistant"] = { "v": ["200", "300", "regular", "600", "700", "800"], "subset": ["hebrew", "latin"], "weight": ["200", "300", "400", "600", "700", "800"], "i": ["normal"] };
fonts["Astloch"] = { "v": ["regular", "700"], "subset": ["latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Asul"] = { "v": ["regular", "700"], "subset": ["latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Athiti"] = { "v": ["200", "300", "regular", "500", "600", "700"], "subset": ["latin-ext", "thai", "vietnamese", "latin"], "weight": ["200", "300", "400", "500", "600", "700"], "i": ["normal"] };
fonts["Atma"] = { "v": ["300", "regular", "500", "600", "700"], "subset": ["latin-ext", "bengali", "latin"], "weight": ["300", "400", "500", "600", "700"], "i": ["normal"] };
fonts["Atomic Age"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Aubrey"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Audiowide"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Autour One"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Average"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Average Sans"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Averia Gruesa Libre"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Averia Libre"] = { "v": ["300", "300italic", "regular", "italic", "700", "700italic"], "subset": ["latin"], "weight": ["300", "400", "700"], "i": ["normal", "italic"] };
fonts["Averia Sans Libre"] = { "v": ["300", "300italic", "regular", "italic", "700", "700italic"], "subset": ["latin"], "weight": ["300", "400", "700"], "i": ["normal", "italic"] };
fonts["Averia Serif Libre"] = { "v": ["300", "300italic", "regular", "italic", "700", "700italic"], "subset": ["latin"], "weight": ["300", "400", "700"], "i": ["normal", "italic"] };
fonts["Bad Script"] = { "v": ["regular"], "subset": ["cyrillic", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Bahiana"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Baloo"] = { "v": ["regular"], "subset": ["latin-ext", "devanagari", "vietnamese", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Baloo Bhai"] = { "v": ["regular"], "subset": ["latin-ext", "gujarati", "vietnamese", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Baloo Bhaijaan"] = { "v": ["regular"], "subset": ["latin-ext", "arabic", "vietnamese", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Baloo Bhaina"] = { "v": ["regular"], "subset": ["latin-ext", "oriya", "vietnamese", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Baloo Chettan"] = { "v": ["regular"], "subset": ["malayalam", "latin-ext", "vietnamese", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Baloo Da"] = { "v": ["regular"], "subset": ["latin-ext", "vietnamese", "bengali", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Baloo Paaji"] = { "v": ["regular"], "subset": ["latin-ext", "gurmukhi", "vietnamese", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Baloo Tamma"] = { "v": ["regular"], "subset": ["latin-ext", "vietnamese", "latin", "kannada"], "weight": ["400"], "i": ["normal"] };
fonts["Baloo Tammudu"] = { "v": ["regular"], "subset": ["latin-ext", "telugu", "vietnamese", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Baloo Thambi"] = { "v": ["regular"], "subset": ["latin-ext", "tamil", "vietnamese", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Balthazar"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Bangers"] = { "v": ["regular"], "subset": ["latin-ext", "vietnamese", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Barlow"] = { "v": ["100", "100italic", "200", "200italic", "300", "300italic", "regular", "italic", "500", "500italic", "600", "600italic", "700", "700italic", "800", "800italic", "900", "900italic"], "subset": ["latin-ext", "latin"], "weight": ["100", "200", "300", "400", "500", "600", "700", "800", "900"], "i": ["normal", "italic"] };
fonts["Barlow Condensed"] = { "v": ["100", "100italic", "200", "200italic", "300", "300italic", "regular", "italic", "500", "500italic", "600", "600italic", "700", "700italic", "800", "800italic", "900", "900italic"], "subset": ["latin-ext", "latin"], "weight": ["100", "200", "300", "400", "500", "600", "700", "800", "900"], "i": ["normal", "italic"] };
fonts["Barlow Semi Condensed"] = { "v": ["100", "100italic", "200", "200italic", "300", "300italic", "regular", "italic", "500", "500italic", "600", "600italic", "700", "700italic", "800", "800italic", "900", "900italic"], "subset": ["latin-ext", "latin"], "weight": ["100", "200", "300", "400", "500", "600", "700", "800", "900"], "i": ["normal", "italic"] };
fonts["Barrio"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Basic"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Battambang"] = { "v": ["regular", "700"], "subset": ["khmer"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Baumans"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Bayon"] = { "v": ["regular"], "subset": ["khmer"], "weight": ["400"], "i": ["normal"] };
fonts["Belgrano"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Bellefair"] = { "v": ["regular"], "subset": ["latin-ext", "hebrew", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Belleza"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["BenchNine"] = { "v": ["300", "regular", "700"], "subset": ["latin-ext", "latin"], "weight": ["300", "400", "700"], "i": ["normal"] };
fonts["Bentham"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Berkshire Swash"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Bevan"] = { "v": ["regular"], "subset": ["latin-ext", "vietnamese", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Bigelow Rules"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Bigshot One"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Bilbo"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Bilbo Swash Caps"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["BioRhyme"] = { "v": ["200", "300", "regular", "700", "800"], "subset": ["latin-ext", "latin"], "weight": ["200", "300", "400", "700", "800"], "i": ["normal"] };
fonts["BioRhyme Expanded"] = { "v": ["200", "300", "regular", "700", "800"], "subset": ["latin-ext", "latin"], "weight": ["200", "300", "400", "700", "800"], "i": ["normal"] };
fonts["Biryani"] = { "v": ["200", "300", "regular", "600", "700", "800", "900"], "subset": ["latin-ext", "devanagari", "latin"], "weight": ["200", "300", "400", "600", "700", "800", "900"], "i": ["normal"] };
fonts["Bitter"] = { "v": ["regular", "italic", "700"], "subset": ["latin-ext", "latin"], "weight": ["400", "700"], "i": ["normal", "italic"] };
fonts["Black And White Picture"] = { "v": ["regular"], "subset": ["korean", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Black Han Sans"] = { "v": ["regular"], "subset": ["korean", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Black Ops One"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Bokor"] = { "v": ["regular"], "subset": ["khmer"], "weight": ["400"], "i": ["normal"] };
fonts["Bonbon"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Boogaloo"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Bowlby One"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Bowlby One SC"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Brawler"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Bree Serif"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Bubblegum Sans"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Bubbler One"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Buda"] = { "v": ["300"], "subset": ["latin"], "weight": ["300"], "i": [] };
fonts["Buenard"] = { "v": ["regular", "700"], "subset": ["latin-ext", "latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Bungee"] = { "v": ["regular"], "subset": ["latin-ext", "vietnamese", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Bungee Hairline"] = { "v": ["regular"], "subset": ["latin-ext", "vietnamese", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Bungee Inline"] = { "v": ["regular"], "subset": ["latin-ext", "vietnamese", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Bungee Outline"] = { "v": ["regular"], "subset": ["latin-ext", "vietnamese", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Bungee Shade"] = { "v": ["regular"], "subset": ["latin-ext", "vietnamese", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Butcherman"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Butterfly Kids"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Cabin"] = { "v": ["regular", "italic", "500", "500italic", "600", "600italic", "700", "700italic"], "subset": ["latin-ext", "vietnamese", "latin"], "weight": ["400", "500", "600", "700"], "i": ["normal", "italic"] };
fonts["Cabin Condensed"] = { "v": ["regular", "500", "600", "700"], "subset": ["latin-ext", "vietnamese", "latin"], "weight": ["400", "500", "600", "700"], "i": ["normal"] };
fonts["Cabin Sketch"] = { "v": ["regular", "700"], "subset": ["latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Caesar Dressing"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Cagliostro"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Cairo"] = { "v": ["200", "300", "regular", "600", "700", "900"], "subset": ["latin-ext", "arabic", "latin"], "weight": ["200", "300", "400", "600", "700", "900"], "i": ["normal"] };
fonts["Calligraffitti"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Cambay"] = { "v": ["regular", "italic", "700", "700italic"], "subset": ["latin-ext", "devanagari", "latin"], "weight": ["400", "700"], "i": ["normal", "italic"] };
fonts["Cambo"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Candal"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Cantarell"] = { "v": ["regular", "italic", "700", "700italic"], "subset": ["latin"], "weight": ["400", "700"], "i": ["normal", "italic"] };
fonts["Cantata One"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Cantora One"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Capriola"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Cardo"] = { "v": ["regular", "italic", "700"], "subset": ["greek-ext", "latin-ext", "greek", "latin"], "weight": ["400", "700"], "i": ["normal", "italic"] };
fonts["Carme"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Carrois Gothic"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Carrois Gothic SC"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Carter One"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Catamaran"] = { "v": ["100", "200", "300", "regular", "500", "600", "700", "800", "900"], "subset": ["latin-ext", "tamil", "latin"], "weight": ["100", "200", "300", "400", "500", "600", "700", "800", "900"], "i": ["normal"] };
fonts["Caudex"] = { "v": ["regular", "italic", "700", "700italic"], "subset": ["greek-ext", "latin-ext", "greek", "latin"], "weight": ["400", "700"], "i": ["normal", "italic"] };
fonts["Caveat"] = { "v": ["regular", "700"], "subset": ["cyrillic", "latin-ext", "latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Caveat Brush"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Cedarville Cursive"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Ceviche One"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Changa"] = { "v": ["200", "300", "regular", "500", "600", "700", "800"], "subset": ["latin-ext", "arabic", "latin"], "weight": ["200", "300", "400", "500", "600", "700", "800"], "i": ["normal"] };
fonts["Changa One"] = { "v": ["regular", "italic"], "subset": ["latin"], "weight": ["400"], "i": ["normal", "italic"] };
fonts["Chango"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Chathura"] = { "v": ["100", "300", "regular", "700", "800"], "subset": ["telugu", "latin"], "weight": ["100", "300", "400", "700", "800"], "i": ["normal"] };
fonts["Chau Philomene One"] = { "v": ["regular", "italic"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal", "italic"] };
fonts["Chela One"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Chelsea Market"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Chenla"] = { "v": ["regular"], "subset": ["khmer"], "weight": ["400"], "i": ["normal"] };
fonts["Cherry Cream Soda"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Cherry Swash"] = { "v": ["regular", "700"], "subset": ["latin-ext", "latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Chewy"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Chicle"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Chivo"] = { "v": ["300", "300italic", "regular", "italic", "700", "700italic", "900", "900italic"], "subset": ["latin-ext", "latin"], "weight": ["300", "400", "700", "900"], "i": ["normal", "italic"] };
fonts["Chonburi"] = { "v": ["regular"], "subset": ["latin-ext", "thai", "vietnamese", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Cinzel"] = { "v": ["regular", "700", "900"], "subset": ["latin-ext", "latin"], "weight": ["400", "700", "900"], "i": ["normal"] };
fonts["Cinzel Decorative"] = { "v": ["regular", "700", "900"], "subset": ["latin"], "weight": ["400", "700", "900"], "i": ["normal"] };
fonts["Clicker Script"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Coda"] = { "v": ["regular", "800"], "subset": ["latin-ext", "latin"], "weight": ["400", "800"], "i": ["normal"] };
fonts["Coda Caption"] = { "v": ["800"], "subset": ["latin-ext", "latin"], "weight": ["800"], "i": [] };
fonts["Codystar"] = { "v": ["300", "regular"], "subset": ["latin-ext", "latin"], "weight": ["300", "400"], "i": ["normal"] };
fonts["Coiny"] = { "v": ["regular"], "subset": ["latin-ext", "tamil", "vietnamese", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Combo"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Comfortaa"] = { "v": ["300", "regular", "700"], "subset": ["cyrillic", "cyrillic-ext", "latin-ext", "greek", "vietnamese", "latin"], "weight": ["300", "400", "700"], "i": ["normal"] };
fonts["Coming Soon"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Concert One"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Condiment"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Content"] = { "v": ["regular", "700"], "subset": ["khmer"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Contrail One"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Convergence"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Cookie"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Copse"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Corben"] = { "v": ["regular", "700"], "subset": ["latin-ext", "latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Cormorant"] = { "v": ["300", "300italic", "regular", "italic", "500", "500italic", "600", "600italic", "700", "700italic"], "subset": ["cyrillic", "cyrillic-ext", "latin-ext", "vietnamese", "latin"], "weight": ["300", "400", "500", "600", "700"], "i": ["normal", "italic"] };
fonts["Cormorant Garamond"] = { "v": ["300", "300italic", "regular", "italic", "500", "500italic", "600", "600italic", "700", "700italic"], "subset": ["cyrillic", "cyrillic-ext", "latin-ext", "vietnamese", "latin"], "weight": ["300", "400", "500", "600", "700"], "i": ["normal", "italic"] };
fonts["Cormorant Infant"] = { "v": ["300", "300italic", "regular", "italic", "500", "500italic", "600", "600italic", "700", "700italic"], "subset": ["cyrillic", "cyrillic-ext", "latin-ext", "vietnamese", "latin"], "weight": ["300", "400", "500", "600", "700"], "i": ["normal", "italic"] };
fonts["Cormorant SC"] = { "v": ["300", "regular", "500", "600", "700"], "subset": ["cyrillic", "cyrillic-ext", "latin-ext", "vietnamese", "latin"], "weight": ["300", "400", "500", "600", "700"], "i": ["normal"] };
fonts["Cormorant Unicase"] = { "v": ["300", "regular", "500", "600", "700"], "subset": ["cyrillic", "cyrillic-ext", "latin-ext", "vietnamese", "latin"], "weight": ["300", "400", "500", "600", "700"], "i": ["normal"] };
fonts["Cormorant Upright"] = { "v": ["300", "regular", "500", "600", "700"], "subset": ["latin-ext", "vietnamese", "latin"], "weight": ["300", "400", "500", "600", "700"], "i": ["normal"] };
fonts["Courgette"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Cousine"] = { "v": ["regular", "italic", "700", "700italic"], "subset": ["cyrillic", "cyrillic-ext", "greek-ext", "latin-ext", "hebrew", "greek", "vietnamese", "latin"], "weight": ["400", "700"], "i": ["normal", "italic"] };
fonts["Coustard"] = { "v": ["regular", "900"], "subset": ["latin"], "weight": ["400", "900"], "i": ["normal"] };
fonts["Covered By Your Grace"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Crafty Girls"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Creepster"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Crete Round"] = { "v": ["regular", "italic"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal", "italic"] };
fonts["Crimson Text"] = { "v": ["regular", "italic", "600", "600italic", "700", "700italic"], "subset": ["latin"], "weight": ["400", "600", "700"], "i": ["normal", "italic"] };
fonts["Croissant One"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Crushed"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Cuprum"] = { "v": ["regular", "italic", "700", "700italic"], "subset": ["cyrillic", "cyrillic-ext", "latin-ext", "vietnamese", "latin"], "weight": ["400", "700"], "i": ["normal", "italic"] };
fonts["Cute Font"] = { "v": ["regular"], "subset": ["korean", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Cutive"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Cutive Mono"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Damion"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Dancing Script"] = { "v": ["regular", "700"], "subset": ["latin-ext", "vietnamese", "latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Dangrek"] = { "v": ["regular"], "subset": ["khmer"], "weight": ["400"], "i": ["normal"] };
fonts["David Libre"] = { "v": ["regular", "500", "700"], "subset": ["latin-ext", "hebrew", "vietnamese", "latin"], "weight": ["400", "500", "700"], "i": ["normal"] };
fonts["Dawning of a New Day"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Days One"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Dekko"] = { "v": ["regular"], "subset": ["latin-ext", "devanagari", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Delius"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Delius Swash Caps"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Delius Unicase"] = { "v": ["regular", "700"], "subset": ["latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Della Respira"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Denk One"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Devonshire"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Dhurjati"] = { "v": ["regular"], "subset": ["telugu", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Didact Gothic"] = { "v": ["regular"], "subset": ["cyrillic", "cyrillic-ext", "greek-ext", "latin-ext", "greek", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Diplomata"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Diplomata SC"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Do Hyeon"] = { "v": ["regular"], "subset": ["korean", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Dokdo"] = { "v": ["regular"], "subset": ["korean", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Domine"] = { "v": ["regular", "700"], "subset": ["latin-ext", "latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Donegal One"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Doppio One"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Dorsa"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Dosis"] = { "v": ["200", "300", "regular", "500", "600", "700", "800"], "subset": ["latin-ext", "latin"], "weight": ["200", "300", "400", "500", "600", "700", "800"], "i": ["normal"] };
fonts["Dr Sugiyama"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Duru Sans"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Dynalight"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["EB Garamond"] = { "v": ["regular", "italic", "500", "500italic", "600", "600italic", "700", "700italic", "800", "800italic"], "subset": ["cyrillic", "cyrillic-ext", "greek-ext", "latin-ext", "greek", "vietnamese", "latin"], "weight": ["400", "500", "600", "700", "800"], "i": ["normal", "italic"] };
fonts["Eagle Lake"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["East Sea Dokdo"] = { "v": ["regular"], "subset": ["korean", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Eater"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Economica"] = { "v": ["regular", "italic", "700", "700italic"], "subset": ["latin-ext", "latin"], "weight": ["400", "700"], "i": ["normal", "italic"] };
fonts["Eczar"] = { "v": ["regular", "500", "600", "700", "800"], "subset": ["latin-ext", "devanagari", "latin"], "weight": ["400", "500", "600", "700", "800"], "i": ["normal"] };
fonts["El Messiri"] = { "v": ["regular", "500", "600", "700"], "subset": ["cyrillic", "arabic", "latin"], "weight": ["400", "500", "600", "700"], "i": ["normal"] };
fonts["Electrolize"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Elsie"] = { "v": ["regular", "900"], "subset": ["latin-ext", "latin"], "weight": ["400", "900"], "i": ["normal"] };
fonts["Elsie Swash Caps"] = { "v": ["regular", "900"], "subset": ["latin-ext", "latin"], "weight": ["400", "900"], "i": ["normal"] };
fonts["Emblema One"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Emilys Candy"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Encode Sans"] = { "v": ["100", "200", "300", "regular", "500", "600", "700", "800", "900"], "subset": ["latin-ext", "vietnamese", "latin"], "weight": ["100", "200", "300", "400", "500", "600", "700", "800", "900"], "i": ["normal"] };
fonts["Encode Sans Condensed"] = { "v": ["100", "200", "300", "regular", "500", "600", "700", "800", "900"], "subset": ["latin-ext", "vietnamese", "latin"], "weight": ["100", "200", "300", "400", "500", "600", "700", "800", "900"], "i": ["normal"] };
fonts["Encode Sans Expanded"] = { "v": ["100", "200", "300", "regular", "500", "600", "700", "800", "900"], "subset": ["latin-ext", "vietnamese", "latin"], "weight": ["100", "200", "300", "400", "500", "600", "700", "800", "900"], "i": ["normal"] };
fonts["Encode Sans Semi Condensed"] = { "v": ["100", "200", "300", "regular", "500", "600", "700", "800", "900"], "subset": ["latin-ext", "vietnamese", "latin"], "weight": ["100", "200", "300", "400", "500", "600", "700", "800", "900"], "i": ["normal"] };
fonts["Encode Sans Semi Expanded"] = { "v": ["100", "200", "300", "regular", "500", "600", "700", "800", "900"], "subset": ["latin-ext", "vietnamese", "latin"], "weight": ["100", "200", "300", "400", "500", "600", "700", "800", "900"], "i": ["normal"] };
fonts["Engagement"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Englebert"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Enriqueta"] = { "v": ["regular", "700"], "subset": ["latin-ext", "latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Erica One"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Esteban"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Euphoria Script"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Ewert"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Exo"] = { "v": ["100", "100italic", "200", "200italic", "300", "300italic", "regular", "italic", "500", "500italic", "600", "600italic", "700", "700italic", "800", "800italic", "900", "900italic"], "subset": ["latin-ext", "vietnamese", "latin"], "weight": ["100", "200", "300", "400", "500", "600", "700", "800", "900"], "i": ["normal", "italic"] };
fonts["Exo 2"] = { "v": ["100", "100italic", "200", "200italic", "300", "300italic", "regular", "italic", "500", "500italic", "600", "600italic", "700", "700italic", "800", "800italic", "900", "900italic"], "subset": ["cyrillic", "latin-ext", "latin"], "weight": ["100", "200", "300", "400", "500", "600", "700", "800", "900"], "i": ["normal", "italic"] };
fonts["Expletus Sans"] = { "v": ["regular", "italic", "500", "500italic", "600", "600italic", "700", "700italic"], "subset": ["latin"], "weight": ["400", "500", "600", "700"], "i": ["normal", "italic"] };
fonts["Fanwood Text"] = { "v": ["regular", "italic"], "subset": ["latin"], "weight": ["400"], "i": ["normal", "italic"] };
fonts["Farsan"] = { "v": ["regular"], "subset": ["latin-ext", "gujarati", "vietnamese", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Fascinate"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Fascinate Inline"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Faster One"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Fasthand"] = { "v": ["regular"], "subset": ["khmer"], "weight": ["400"], "i": ["normal"] };
fonts["Fauna One"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Faustina"] = { "v": ["regular", "italic", "500", "500italic", "600", "600italic", "700", "700italic"], "subset": ["latin-ext", "vietnamese", "latin"], "weight": ["400", "500", "600", "700"], "i": ["normal", "italic"] };
fonts["Federant"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Federo"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Felipa"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Fenix"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Finger Paint"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Fira Mono"] = { "v": ["regular", "500", "700"], "subset": ["cyrillic", "cyrillic-ext", "greek-ext", "latin-ext", "greek", "latin"], "weight": ["400", "500", "700"], "i": ["normal"] };
fonts["Fira Sans"] = { "v": ["100", "100italic", "200", "200italic", "300", "300italic", "regular", "italic", "500", "500italic", "600", "600italic", "700", "700italic", "800", "800italic", "900", "900italic"], "subset": ["cyrillic", "cyrillic-ext", "greek-ext", "latin-ext", "greek", "vietnamese", "latin"], "weight": ["100", "200", "300", "400", "500", "600", "700", "800", "900"], "i": ["normal", "italic"] };
fonts["Fira Sans Condensed"] = { "v": ["100", "100italic", "200", "200italic", "300", "300italic", "regular", "italic", "500", "500italic", "600", "600italic", "700", "700italic", "800", "800italic", "900", "900italic"], "subset": ["cyrillic", "cyrillic-ext", "greek-ext", "latin-ext", "greek", "vietnamese", "latin"], "weight": ["100", "200", "300", "400", "500", "600", "700", "800", "900"], "i": ["normal", "italic"] };
fonts["Fira Sans Extra Condensed"] = { "v": ["100", "100italic", "200", "200italic", "300", "300italic", "regular", "italic", "500", "500italic", "600", "600italic", "700", "700italic", "800", "800italic", "900", "900italic"], "subset": ["cyrillic", "cyrillic-ext", "greek-ext", "latin-ext", "greek", "vietnamese", "latin"], "weight": ["100", "200", "300", "400", "500", "600", "700", "800", "900"], "i": ["normal", "italic"] };
fonts["Fjalla One"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Fjord One"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Flamenco"] = { "v": ["300", "regular"], "subset": ["latin"], "weight": ["300", "400"], "i": ["normal"] };
fonts["Flavors"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Fondamento"] = { "v": ["regular", "italic"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal", "italic"] };
fonts["Fontdiner Swanky"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Forum"] = { "v": ["regular"], "subset": ["cyrillic", "cyrillic-ext", "latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Francois One"] = { "v": ["regular"], "subset": ["latin-ext", "vietnamese", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Frank Ruhl Libre"] = { "v": ["300", "regular", "500", "700", "900"], "subset": ["latin-ext", "hebrew", "latin"], "weight": ["300", "400", "500", "700", "900"], "i": ["normal"] };
fonts["Freckle Face"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Fredericka the Great"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Fredoka One"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Freehand"] = { "v": ["regular"], "subset": ["khmer"], "weight": ["400"], "i": ["normal"] };
fonts["Fresca"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Frijole"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Fruktur"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Fugaz One"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["GFS Didot"] = { "v": ["regular"], "subset": ["greek"], "weight": ["400"], "i": ["normal"] };
fonts["GFS Neohellenic"] = { "v": ["regular", "italic", "700", "700italic"], "subset": ["greek"], "weight": ["400", "700"], "i": ["normal", "italic"] };
fonts["Gabriela"] = { "v": ["regular"], "subset": ["cyrillic", "cyrillic-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Gaegu"] = { "v": ["300", "regular", "700"], "subset": ["korean", "latin"], "weight": ["300", "400", "700"], "i": ["normal"] };
fonts["Gafata"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Galada"] = { "v": ["regular"], "subset": ["bengali", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Galdeano"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Galindo"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Gamja Flower"] = { "v": ["regular"], "subset": ["korean", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Gentium Basic"] = { "v": ["regular", "italic", "700", "700italic"], "subset": ["latin-ext", "latin"], "weight": ["400", "700"], "i": ["normal", "italic"] };
fonts["Gentium Book Basic"] = { "v": ["regular", "italic", "700", "700italic"], "subset": ["latin-ext", "latin"], "weight": ["400", "700"], "i": ["normal", "italic"] };
fonts["Geo"] = { "v": ["regular", "italic"], "subset": ["latin"], "weight": ["400"], "i": ["normal", "italic"] };
fonts["Geostar"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Geostar Fill"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Germania One"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Gidugu"] = { "v": ["regular"], "subset": ["telugu", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Gilda Display"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Give You Glory"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Glass Antiqua"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Glegoo"] = { "v": ["regular", "700"], "subset": ["latin-ext", "devanagari", "latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Gloria Hallelujah"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Goblin One"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Gochi Hand"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Gorditas"] = { "v": ["regular", "700"], "subset": ["latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Gothic A1"] = { "v": ["100", "200", "300", "regular", "500", "600", "700", "800", "900"], "subset": ["korean", "latin"], "weight": ["100", "200", "300", "400", "500", "600", "700", "800", "900"], "i": ["normal"] };
fonts["Goudy Bookletter 1911"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Graduate"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Grand Hotel"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Gravitas One"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Great Vibes"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Griffy"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Gruppo"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Gudea"] = { "v": ["regular", "italic", "700"], "subset": ["latin-ext", "latin"], "weight": ["400", "700"], "i": ["normal", "italic"] };
fonts["Gugi"] = { "v": ["regular"], "subset": ["korean", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Gurajada"] = { "v": ["regular"], "subset": ["telugu", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Habibi"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Halant"] = { "v": ["300", "regular", "500", "600", "700"], "subset": ["latin-ext", "devanagari", "latin"], "weight": ["300", "400", "500", "600", "700"], "i": ["normal"] };
fonts["Hammersmith One"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Hanalei"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Hanalei Fill"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Handlee"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Hanuman"] = { "v": ["regular", "700"], "subset": ["khmer"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Happy Monkey"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Harmattan"] = { "v": ["regular"], "subset": ["arabic", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Headland One"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Heebo"] = { "v": ["100", "300", "regular", "500", "700", "800", "900"], "subset": ["hebrew", "latin"], "weight": ["100", "300", "400", "500", "700", "800", "900"], "i": ["normal"] };
fonts["Henny Penny"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Herr Von Muellerhoff"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Hi Melody"] = { "v": ["regular"], "subset": ["korean", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Hind"] = { "v": ["300", "regular", "500", "600", "700"], "subset": ["latin-ext", "devanagari", "latin"], "weight": ["300", "400", "500", "600", "700"], "i": ["normal"] };
fonts["Hind Guntur"] = { "v": ["300", "regular", "500", "600", "700"], "subset": ["latin-ext", "telugu", "latin"], "weight": ["300", "400", "500", "600", "700"], "i": ["normal"] };
fonts["Hind Madurai"] = { "v": ["300", "regular", "500", "600", "700"], "subset": ["latin-ext", "tamil", "latin"], "weight": ["300", "400", "500", "600", "700"], "i": ["normal"] };
fonts["Hind Siliguri"] = { "v": ["300", "regular", "500", "600", "700"], "subset": ["latin-ext", "bengali", "latin"], "weight": ["300", "400", "500", "600", "700"], "i": ["normal"] };
fonts["Hind Vadodara"] = { "v": ["300", "regular", "500", "600", "700"], "subset": ["latin-ext", "gujarati", "latin"], "weight": ["300", "400", "500", "600", "700"], "i": ["normal"] };
fonts["Holtwood One SC"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Homemade Apple"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Homenaje"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["IBM Plex Mono"] = { "v": ["100", "100italic", "200", "200italic", "300", "300italic", "regular", "italic", "500", "500italic", "600", "600italic", "700", "700italic"], "subset": ["cyrillic", "cyrillic-ext", "latin-ext", "vietnamese", "latin"], "weight": ["100", "200", "300", "400", "500", "600", "700"], "i": ["normal", "italic"] };
fonts["IBM Plex Sans"] = { "v": ["100", "100italic", "200", "200italic", "300", "300italic", "regular", "italic", "500", "500italic", "600", "600italic", "700", "700italic"], "subset": ["cyrillic", "cyrillic-ext", "latin-ext", "vietnamese", "latin"], "weight": ["100", "200", "300", "400", "500", "600", "700"], "i": ["normal", "italic"] };
fonts["IBM Plex Sans Condensed"] = { "v": ["100", "100italic", "200", "200italic", "300", "300italic", "regular", "italic", "500", "500italic", "600", "600italic", "700", "700italic"], "subset": ["latin-ext", "vietnamese", "latin"], "weight": ["100", "200", "300", "400", "500", "600", "700"], "i": ["normal", "italic"] };
fonts["IBM Plex Serif"] = { "v": ["100", "100italic", "200", "200italic", "300", "300italic", "regular", "italic", "500", "500italic", "600", "600italic", "700", "700italic"], "subset": ["cyrillic", "cyrillic-ext", "latin-ext", "vietnamese", "latin"], "weight": ["100", "200", "300", "400", "500", "600", "700"], "i": ["normal", "italic"] };
fonts["IM Fell DW Pica"] = { "v": ["regular", "italic"], "subset": ["latin"], "weight": ["400"], "i": ["normal", "italic"] };
fonts["IM Fell DW Pica SC"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["IM Fell Double Pica"] = { "v": ["regular", "italic"], "subset": ["latin"], "weight": ["400"], "i": ["normal", "italic"] };
fonts["IM Fell Double Pica SC"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["IM Fell English"] = { "v": ["regular", "italic"], "subset": ["latin"], "weight": ["400"], "i": ["normal", "italic"] };
fonts["IM Fell English SC"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["IM Fell French Canon"] = { "v": ["regular", "italic"], "subset": ["latin"], "weight": ["400"], "i": ["normal", "italic"] };
fonts["IM Fell French Canon SC"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["IM Fell Great Primer"] = { "v": ["regular", "italic"], "subset": ["latin"], "weight": ["400"], "i": ["normal", "italic"] };
fonts["IM Fell Great Primer SC"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Iceberg"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Iceland"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Imprima"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Inconsolata"] = { "v": ["regular", "700"], "subset": ["latin-ext", "vietnamese", "latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Inder"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Indie Flower"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Inika"] = { "v": ["regular", "700"], "subset": ["latin-ext", "latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Inknut Antiqua"] = { "v": ["300", "regular", "500", "600", "700", "800", "900"], "subset": ["latin-ext", "devanagari", "latin"], "weight": ["300", "400", "500", "600", "700", "800", "900"], "i": ["normal"] };
fonts["Irish Grover"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Istok Web"] = { "v": ["regular", "italic", "700", "700italic"], "subset": ["cyrillic", "cyrillic-ext", "latin-ext", "latin"], "weight": ["400", "700"], "i": ["normal", "italic"] };
fonts["Italiana"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Italianno"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Itim"] = { "v": ["regular"], "subset": ["latin-ext", "thai", "vietnamese", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Jacques Francois"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Jacques Francois Shadow"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Jaldi"] = { "v": ["regular", "700"], "subset": ["latin-ext", "devanagari", "latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Jim Nightshade"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Jockey One"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Jolly Lodger"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Jomhuria"] = { "v": ["regular"], "subset": ["latin-ext", "arabic", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Josefin Sans"] = { "v": ["100", "100italic", "300", "300italic", "regular", "italic", "600", "600italic", "700", "700italic"], "subset": ["latin-ext", "vietnamese", "latin"], "weight": ["100", "300", "400", "600", "700"], "i": ["normal", "italic"] };
fonts["Josefin Slab"] = { "v": ["100", "100italic", "300", "300italic", "regular", "italic", "600", "600italic", "700", "700italic"], "subset": ["latin"], "weight": ["100", "300", "400", "600", "700"], "i": ["normal", "italic"] };
fonts["Joti One"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Jua"] = { "v": ["regular"], "subset": ["korean", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Judson"] = { "v": ["regular", "italic", "700"], "subset": ["latin-ext", "vietnamese", "latin"], "weight": ["400", "700"], "i": ["normal", "italic"] };
fonts["Julee"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Julius Sans One"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Junge"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Jura"] = { "v": ["300", "regular", "500", "600", "700"], "subset": ["cyrillic", "cyrillic-ext", "greek-ext", "latin-ext", "greek", "vietnamese", "latin"], "weight": ["300", "400", "500", "600", "700"], "i": ["normal"] };
fonts["Just Another Hand"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Just Me Again Down Here"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Kadwa"] = { "v": ["regular", "700"], "subset": ["devanagari", "latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Kalam"] = { "v": ["300", "regular", "700"], "subset": ["latin-ext", "devanagari", "latin"], "weight": ["300", "400", "700"], "i": ["normal"] };
fonts["Kameron"] = { "v": ["regular", "700"], "subset": ["latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Kanit"] = { "v": ["100", "100italic", "200", "200italic", "300", "300italic", "regular", "italic", "500", "500italic", "600", "600italic", "700", "700italic", "800", "800italic", "900", "900italic"], "subset": ["latin-ext", "thai", "vietnamese", "latin"], "weight": ["100", "200", "300", "400", "500", "600", "700", "800", "900"], "i": ["normal", "italic"] };
fonts["Kantumruy"] = { "v": ["300", "regular", "700"], "subset": ["khmer"], "weight": ["300", "400", "700"], "i": ["normal"] };
fonts["Karla"] = { "v": ["regular", "italic", "700", "700italic"], "subset": ["latin-ext", "latin"], "weight": ["400", "700"], "i": ["normal", "italic"] };
fonts["Karma"] = { "v": ["300", "regular", "500", "600", "700"], "subset": ["latin-ext", "devanagari", "latin"], "weight": ["300", "400", "500", "600", "700"], "i": ["normal"] };
fonts["Katibeh"] = { "v": ["regular"], "subset": ["latin-ext", "arabic", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Kaushan Script"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Kavivanar"] = { "v": ["regular"], "subset": ["latin-ext", "tamil", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Kavoon"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Kdam Thmor"] = { "v": ["regular"], "subset": ["khmer"], "weight": ["400"], "i": ["normal"] };
fonts["Keania One"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Kelly Slab"] = { "v": ["regular"], "subset": ["cyrillic", "latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Kenia"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Khand"] = { "v": ["300", "regular", "500", "600", "700"], "subset": ["latin-ext", "devanagari", "latin"], "weight": ["300", "400", "500", "600", "700"], "i": ["normal"] };
fonts["Khmer"] = { "v": ["regular"], "subset": ["khmer"], "weight": ["400"], "i": ["normal"] };
fonts["Khula"] = { "v": ["300", "regular", "600", "700", "800"], "subset": ["latin-ext", "devanagari", "latin"], "weight": ["300", "400", "600", "700", "800"], "i": ["normal"] };
fonts["Kirang Haerang"] = { "v": ["regular"], "subset": ["korean", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Kite One"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Knewave"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Kosugi"] = { "v": ["regular"], "subset": ["cyrillic", "japanese", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Kosugi Maru"] = { "v": ["regular"], "subset": ["cyrillic", "japanese", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Kotta One"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Koulen"] = { "v": ["regular"], "subset": ["khmer"], "weight": ["400"], "i": ["normal"] };
fonts["Kranky"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Kreon"] = { "v": ["300", "regular", "700"], "subset": ["latin"], "weight": ["300", "400", "700"], "i": ["normal"] };
fonts["Kristi"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Krona One"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Kumar One"] = { "v": ["regular"], "subset": ["latin-ext", "gujarati", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Kumar One Outline"] = { "v": ["regular"], "subset": ["latin-ext", "gujarati", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Kurale"] = { "v": ["regular"], "subset": ["cyrillic", "cyrillic-ext", "latin-ext", "devanagari", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["La Belle Aurore"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Laila"] = { "v": ["300", "regular", "500", "600", "700"], "subset": ["latin-ext", "devanagari", "latin"], "weight": ["300", "400", "500", "600", "700"], "i": ["normal"] };
fonts["Lakki Reddy"] = { "v": ["regular"], "subset": ["telugu", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Lalezar"] = { "v": ["regular"], "subset": ["latin-ext", "arabic", "vietnamese", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Lancelot"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Lateef"] = { "v": ["regular"], "subset": ["arabic", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Lato"] = { "v": ["100", "100italic", "300", "300italic", "regular", "italic", "700", "700italic", "900", "900italic"], "subset": ["latin-ext", "latin"], "weight": ["100", "300", "400", "700", "900"], "i": ["normal", "italic"] };
fonts["League Script"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Leckerli One"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Ledger"] = { "v": ["regular"], "subset": ["cyrillic", "latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Lekton"] = { "v": ["regular", "italic", "700"], "subset": ["latin-ext", "latin"], "weight": ["400", "700"], "i": ["normal", "italic"] };
fonts["Lemon"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Lemonada"] = { "v": ["300", "regular", "600", "700"], "subset": ["latin-ext", "arabic", "vietnamese", "latin"], "weight": ["300", "400", "600", "700"], "i": ["normal"] };
fonts["Libre Barcode 128"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Libre Barcode 128 Text"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Libre Barcode 39"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Libre Barcode 39 Extended"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Libre Barcode 39 Extended Text"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Libre Barcode 39 Text"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Libre Baskerville"] = { "v": ["regular", "italic", "700"], "subset": ["latin-ext", "latin"], "weight": ["400", "700"], "i": ["normal", "italic"] };
fonts["Libre Franklin"] = { "v": ["100", "100italic", "200", "200italic", "300", "300italic", "regular", "italic", "500", "500italic", "600", "600italic", "700", "700italic", "800", "800italic", "900", "900italic"], "subset": ["latin-ext", "latin"], "weight": ["100", "200", "300", "400", "500", "600", "700", "800", "900"], "i": ["normal", "italic"] };
fonts["Life Savers"] = { "v": ["regular", "700"], "subset": ["latin-ext", "latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Lilita One"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Lily Script One"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Limelight"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Linden Hill"] = { "v": ["regular", "italic"], "subset": ["latin"], "weight": ["400"], "i": ["normal", "italic"] };
fonts["Lobster"] = { "v": ["regular"], "subset": ["cyrillic", "cyrillic-ext", "latin-ext", "vietnamese", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Lobster Two"] = { "v": ["regular", "italic", "700", "700italic"], "subset": ["latin"], "weight": ["400", "700"], "i": ["normal", "italic"] };
fonts["Londrina Outline"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Londrina Shadow"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Londrina Sketch"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Londrina Solid"] = { "v": ["100", "300", "regular", "900"], "subset": ["latin"], "weight": ["100", "300", "400", "900"], "i": ["normal"] };
fonts["Lora"] = { "v": ["regular", "italic", "700", "700italic"], "subset": ["cyrillic", "cyrillic-ext", "latin-ext", "vietnamese", "latin"], "weight": ["400", "700"], "i": ["normal", "italic"] };
fonts["Love Ya Like A Sister"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Loved by the King"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Lovers Quarrel"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Luckiest Guy"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Lusitana"] = { "v": ["regular", "700"], "subset": ["latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Lustria"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["M PLUS 1p"] = { "v": ["100", "300", "regular", "500", "700", "800", "900"], "subset": ["cyrillic", "cyrillic-ext", "greek-ext", "japanese", "latin-ext", "hebrew", "greek", "vietnamese", "latin"], "weight": ["100", "300", "400", "500", "700", "800", "900"], "i": ["normal"] };
fonts["M PLUS Rounded 1c"] = { "v": ["100", "300", "regular", "500", "700", "800", "900"], "subset": ["cyrillic", "cyrillic-ext", "greek-ext", "japanese", "latin-ext", "hebrew", "greek", "vietnamese", "latin"], "weight": ["100", "300", "400", "500", "700", "800", "900"], "i": ["normal"] };
fonts["Macondo"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Macondo Swash Caps"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Mada"] = { "v": ["200", "300", "regular", "500", "600", "700", "900"], "subset": ["arabic", "latin"], "weight": ["200", "300", "400", "500", "600", "700", "900"], "i": ["normal"] };
fonts["Magra"] = { "v": ["regular", "700"], "subset": ["latin-ext", "latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Maiden Orange"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Maitree"] = { "v": ["200", "300", "regular", "500", "600", "700"], "subset": ["latin-ext", "thai", "vietnamese", "latin"], "weight": ["200", "300", "400", "500", "600", "700"], "i": ["normal"] };
fonts["Mako"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Mallanna"] = { "v": ["regular"], "subset": ["telugu", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Mandali"] = { "v": ["regular"], "subset": ["telugu", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Manuale"] = { "v": ["regular", "italic", "500", "500italic", "600", "600italic", "700", "700italic"], "subset": ["latin-ext", "vietnamese", "latin"], "weight": ["400", "500", "600", "700"], "i": ["normal", "italic"] };
fonts["Marcellus"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Marcellus SC"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Marck Script"] = { "v": ["regular"], "subset": ["cyrillic", "latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Margarine"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Markazi Text"] = { "v": ["regular", "500", "600", "700"], "subset": ["latin-ext", "arabic", "vietnamese", "latin"], "weight": ["400", "500", "600", "700"], "i": ["normal"] };
fonts["Marko One"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Marmelad"] = { "v": ["regular"], "subset": ["cyrillic", "latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Martel"] = { "v": ["200", "300", "regular", "600", "700", "800", "900"], "subset": ["latin-ext", "devanagari", "latin"], "weight": ["200", "300", "400", "600", "700", "800", "900"], "i": ["normal"] };
fonts["Martel Sans"] = { "v": ["200", "300", "regular", "600", "700", "800", "900"], "subset": ["latin-ext", "devanagari", "latin"], "weight": ["200", "300", "400", "600", "700", "800", "900"], "i": ["normal"] };
fonts["Marvel"] = { "v": ["regular", "italic", "700", "700italic"], "subset": ["latin"], "weight": ["400", "700"], "i": ["normal", "italic"] };
fonts["Mate"] = { "v": ["regular", "italic"], "subset": ["latin"], "weight": ["400"], "i": ["normal", "italic"] };
fonts["Mate SC"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Maven Pro"] = { "v": ["regular", "500", "700", "900"], "subset": ["latin-ext", "vietnamese", "latin"], "weight": ["400", "500", "700", "900"], "i": ["normal"] };
fonts["McLaren"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Meddon"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["MedievalSharp"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Medula One"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Meera Inimai"] = { "v": ["regular"], "subset": ["tamil", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Megrim"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Meie Script"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Merienda"] = { "v": ["regular", "700"], "subset": ["latin-ext", "latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Merienda One"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Merriweather"] = { "v": ["300", "300italic", "regular", "italic", "700", "700italic", "900", "900italic"], "subset": ["cyrillic", "cyrillic-ext", "latin-ext", "vietnamese", "latin"], "weight": ["300", "400", "700", "900"], "i": ["normal", "italic"] };
fonts["Merriweather Sans"] = { "v": ["300", "300italic", "regular", "italic", "700", "700italic", "800", "800italic"], "subset": ["latin-ext", "latin"], "weight": ["300", "400", "700", "800"], "i": ["normal", "italic"] };
fonts["Metal"] = { "v": ["regular"], "subset": ["khmer"], "weight": ["400"], "i": ["normal"] };
fonts["Metal Mania"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Metamorphous"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Metrophobic"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Michroma"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Milonga"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Miltonian"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Miltonian Tattoo"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Mina"] = { "v": ["regular", "700"], "subset": ["latin-ext", "bengali", "latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Miniver"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Miriam Libre"] = { "v": ["regular", "700"], "subset": ["latin-ext", "hebrew", "latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Mirza"] = { "v": ["regular", "500", "600", "700"], "subset": ["latin-ext", "arabic", "latin"], "weight": ["400", "500", "600", "700"], "i": ["normal"] };
fonts["Miss Fajardose"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Mitr"] = { "v": ["200", "300", "regular", "500", "600", "700"], "subset": ["latin-ext", "thai", "vietnamese", "latin"], "weight": ["200", "300", "400", "500", "600", "700"], "i": ["normal"] };
fonts["Modak"] = { "v": ["regular"], "subset": ["latin-ext", "devanagari", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Modern Antiqua"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Mogra"] = { "v": ["regular"], "subset": ["latin-ext", "gujarati", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Molengo"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Molle"] = { "v": ["italic"], "subset": ["latin-ext", "latin"], "weight": [], "i": ["italic"] };
fonts["Monda"] = { "v": ["regular", "700"], "subset": ["latin-ext", "latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Monofett"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Monoton"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Monsieur La Doulaise"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Montaga"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Montez"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Montserrat"] = { "v": ["100", "100italic", "200", "200italic", "300", "300italic", "regular", "italic", "500", "500italic", "600", "600italic", "700", "700italic", "800", "800italic", "900", "900italic"], "subset": ["cyrillic", "cyrillic-ext", "latin-ext", "vietnamese", "latin"], "weight": ["100", "200", "300", "400", "500", "600", "700", "800", "900"], "i": ["normal", "italic"] };
fonts["Montserrat Alternates"] = { "v": ["100", "100italic", "200", "200italic", "300", "300italic", "regular", "italic", "500", "500italic", "600", "600italic", "700", "700italic", "800", "800italic", "900", "900italic"], "subset": ["cyrillic", "cyrillic-ext", "latin-ext", "vietnamese", "latin"], "weight": ["100", "200", "300", "400", "500", "600", "700", "800", "900"], "i": ["normal", "italic"] };
fonts["Montserrat Subrayada"] = { "v": ["regular", "700"], "subset": ["latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Moul"] = { "v": ["regular"], "subset": ["khmer"], "weight": ["400"], "i": ["normal"] };
fonts["Moulpali"] = { "v": ["regular"], "subset": ["khmer"], "weight": ["400"], "i": ["normal"] };
fonts["Mountains of Christmas"] = { "v": ["regular", "700"], "subset": ["latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Mouse Memoirs"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Mr Bedfort"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Mr Dafoe"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Mr De Haviland"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Mrs Saint Delafield"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Mrs Sheppards"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Mukta"] = { "v": ["200", "300", "regular", "500", "600", "700", "800"], "subset": ["latin-ext", "devanagari", "latin"], "weight": ["200", "300", "400", "500", "600", "700", "800"], "i": ["normal"] };
fonts["Mukta Mahee"] = { "v": ["200", "300", "regular", "500", "600", "700", "800"], "subset": ["latin-ext", "gurmukhi", "latin"], "weight": ["200", "300", "400", "500", "600", "700", "800"], "i": ["normal"] };
fonts["Mukta Malar"] = { "v": ["200", "300", "regular", "500", "600", "700", "800"], "subset": ["latin-ext", "tamil", "latin"], "weight": ["200", "300", "400", "500", "600", "700", "800"], "i": ["normal"] };
fonts["Mukta Vaani"] = { "v": ["200", "300", "regular", "500", "600", "700", "800"], "subset": ["latin-ext", "gujarati", "latin"], "weight": ["200", "300", "400", "500", "600", "700", "800"], "i": ["normal"] };
fonts["Muli"] = { "v": ["200", "200italic", "300", "300italic", "regular", "italic", "600", "600italic", "700", "700italic", "800", "800italic", "900", "900italic"], "subset": ["latin-ext", "vietnamese", "latin"], "weight": ["200", "300", "400", "600", "700", "800", "900"], "i": ["normal", "italic"] };
fonts["Mystery Quest"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["NTR"] = { "v": ["regular"], "subset": ["telugu", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Nanum Brush Script"] = { "v": ["regular"], "subset": ["korean", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Nanum Gothic"] = { "v": ["regular", "700", "800"], "subset": ["korean", "latin"], "weight": ["400", "700", "800"], "i": ["normal"] };
fonts["Nanum Gothic Coding"] = { "v": ["regular", "700"], "subset": ["korean", "latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Nanum Myeongjo"] = { "v": ["regular", "700", "800"], "subset": ["korean", "latin"], "weight": ["400", "700", "800"], "i": ["normal"] };
fonts["Nanum Pen Script"] = { "v": ["regular"], "subset": ["korean", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Neucha"] = { "v": ["regular"], "subset": ["cyrillic", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Neuton"] = { "v": ["200", "300", "regular", "italic", "700", "800"], "subset": ["latin-ext", "latin"], "weight": ["200", "300", "400", "700", "800"], "i": ["normal", "italic"] };
fonts["New Rocker"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["News Cycle"] = { "v": ["regular", "700"], "subset": ["latin-ext", "latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Niconne"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Nixie One"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Nobile"] = { "v": ["regular", "italic", "500", "500italic", "700", "700italic"], "subset": ["latin-ext", "latin"], "weight": ["400", "500", "700"], "i": ["normal", "italic"] };
fonts["Nokora"] = { "v": ["regular", "700"], "subset": ["khmer"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Norican"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Nosifer"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Nothing You Could Do"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Noticia Text"] = { "v": ["regular", "italic", "700", "700italic"], "subset": ["latin-ext", "vietnamese", "latin"], "weight": ["400", "700"], "i": ["normal", "italic"] };
fonts["Noto Sans"] = { "v": ["regular", "italic", "700", "700italic"], "subset": ["cyrillic", "cyrillic-ext", "greek-ext", "latin-ext", "greek", "devanagari", "vietnamese", "latin"], "weight": ["400", "700"], "i": ["normal", "italic"] };
fonts["Noto Sans JP"] = { "v": ["100", "300", "regular", "500", "700", "900"], "subset": ["japanese", "latin"], "weight": ["100", "300", "400", "500", "700", "900"], "i": ["normal"] };
fonts["Noto Sans KR"] = { "v": ["100", "300", "regular", "500", "700", "900"], "subset": ["korean", "latin"], "weight": ["100", "300", "400", "500", "700", "900"], "i": ["normal"] };
fonts["Noto Serif"] = { "v": ["regular", "italic", "700", "700italic"], "subset": ["cyrillic", "cyrillic-ext", "greek-ext", "latin-ext", "greek", "vietnamese", "latin"], "weight": ["400", "700"], "i": ["normal", "italic"] };
fonts["Noto Serif JP"] = { "v": ["200", "300", "regular", "500", "600", "700", "900"], "subset": ["japanese", "latin"], "weight": ["200", "300", "400", "500", "600", "700", "900"], "i": ["normal"] };
fonts["Noto Serif KR"] = { "v": ["200", "300", "regular", "500", "600", "700", "900"], "subset": ["korean", "latin"], "weight": ["200", "300", "400", "500", "600", "700", "900"], "i": ["normal"] };
fonts["Nova Cut"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Nova Flat"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Nova Mono"] = { "v": ["regular"], "subset": ["greek", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Nova Oval"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Nova Round"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Nova Script"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Nova Slim"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Nova Square"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Numans"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Nunito"] = { "v": ["200", "200italic", "300", "300italic", "regular", "italic", "600", "600italic", "700", "700italic", "800", "800italic", "900", "900italic"], "subset": ["latin-ext", "vietnamese", "latin"], "weight": ["200", "300", "400", "600", "700", "800", "900"], "i": ["normal", "italic"] };
fonts["Nunito Sans"] = { "v": ["200", "200italic", "300", "300italic", "regular", "italic", "600", "600italic", "700", "700italic", "800", "800italic", "900", "900italic"], "subset": ["latin-ext", "vietnamese", "latin"], "weight": ["200", "300", "400", "600", "700", "800", "900"], "i": ["normal", "italic"] };
fonts["Odor Mean Chey"] = { "v": ["regular"], "subset": ["khmer"], "weight": ["400"], "i": ["normal"] };
fonts["Offside"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Old Standard TT"] = { "v": ["regular", "italic", "700"], "subset": ["cyrillic", "cyrillic-ext", "latin-ext", "vietnamese", "latin"], "weight": ["400", "700"], "i": ["normal", "italic"] };
fonts["Oldenburg"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Oleo Script"] = { "v": ["regular", "700"], "subset": ["latin-ext", "latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Oleo Script Swash Caps"] = { "v": ["regular", "700"], "subset": ["latin-ext", "latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Open Sans"] = { "v": ["300", "300italic", "regular", "italic", "600", "600italic", "700", "700italic", "800", "800italic"], "subset": ["cyrillic", "cyrillic-ext", "greek-ext", "latin-ext", "greek", "vietnamese", "latin"], "weight": ["300", "400", "600", "700", "800"], "i": ["normal", "italic"] };
fonts["Open Sans Condensed"] = { "v": ["300", "300italic", "700"], "subset": ["cyrillic", "cyrillic-ext", "greek-ext", "latin-ext", "greek", "vietnamese", "latin"], "weight": ["300", "700"], "i": [] };
fonts["Oranienbaum"] = { "v": ["regular"], "subset": ["cyrillic", "cyrillic-ext", "latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Orbitron"] = { "v": ["regular", "500", "700", "900"], "subset": ["latin"], "weight": ["400", "500", "700", "900"], "i": ["normal"] };
fonts["Oregano"] = { "v": ["regular", "italic"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal", "italic"] };
fonts["Orienta"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Original Surfer"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Oswald"] = { "v": ["200", "300", "regular", "500", "600", "700"], "subset": ["cyrillic", "latin-ext", "vietnamese", "latin"], "weight": ["200", "300", "400", "500", "600", "700"], "i": ["normal"] };
fonts["Over the Rainbow"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Overlock"] = { "v": ["regular", "italic", "700", "700italic", "900", "900italic"], "subset": ["latin-ext", "latin"], "weight": ["400", "700", "900"], "i": ["normal", "italic"] };
fonts["Overlock SC"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Overpass"] = { "v": ["100", "100italic", "200", "200italic", "300", "300italic", "regular", "italic", "600", "600italic", "700", "700italic", "800", "800italic", "900", "900italic"], "subset": ["latin-ext", "latin"], "weight": ["100", "200", "300", "400", "600", "700", "800", "900"], "i": ["normal", "italic"] };
fonts["Overpass Mono"] = { "v": ["300", "regular", "600", "700"], "subset": ["latin-ext", "latin"], "weight": ["300", "400", "600", "700"], "i": ["normal"] };
fonts["Ovo"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Oxygen"] = { "v": ["300", "regular", "700"], "subset": ["latin-ext", "latin"], "weight": ["300", "400", "700"], "i": ["normal"] };
fonts["Oxygen Mono"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["PT Mono"] = { "v": ["regular"], "subset": ["cyrillic", "cyrillic-ext", "latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["PT Sans"] = { "v": ["regular", "italic", "700", "700italic"], "subset": ["cyrillic", "cyrillic-ext", "latin-ext", "latin"], "weight": ["400", "700"], "i": ["normal", "italic"] };
fonts["PT Sans Caption"] = { "v": ["regular", "700"], "subset": ["cyrillic", "cyrillic-ext", "latin-ext", "latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["PT Sans Narrow"] = { "v": ["regular", "700"], "subset": ["cyrillic", "cyrillic-ext", "latin-ext", "latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["PT Serif"] = { "v": ["regular", "italic", "700", "700italic"], "subset": ["cyrillic", "cyrillic-ext", "latin-ext", "latin"], "weight": ["400", "700"], "i": ["normal", "italic"] };
fonts["PT Serif Caption"] = { "v": ["regular", "italic"], "subset": ["cyrillic", "cyrillic-ext", "latin-ext", "latin"], "weight": ["400"], "i": ["normal", "italic"] };
fonts["Pacifico"] = { "v": ["regular"], "subset": ["cyrillic", "latin-ext", "vietnamese", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Padauk"] = { "v": ["regular", "700"], "subset": ["myanmar", "latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Palanquin"] = { "v": ["100", "200", "300", "regular", "500", "600", "700"], "subset": ["latin-ext", "devanagari", "latin"], "weight": ["100", "200", "300", "400", "500", "600", "700"], "i": ["normal"] };
fonts["Palanquin Dark"] = { "v": ["regular", "500", "600", "700"], "subset": ["latin-ext", "devanagari", "latin"], "weight": ["400", "500", "600", "700"], "i": ["normal"] };
fonts["Pangolin"] = { "v": ["regular"], "subset": ["cyrillic", "cyrillic-ext", "latin-ext", "vietnamese", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Paprika"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Parisienne"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Passero One"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Passion One"] = { "v": ["regular", "700", "900"], "subset": ["latin-ext", "latin"], "weight": ["400", "700", "900"], "i": ["normal"] };
fonts["Pathway Gothic One"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Patrick Hand"] = { "v": ["regular"], "subset": ["latin-ext", "vietnamese", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Patrick Hand SC"] = { "v": ["regular"], "subset": ["latin-ext", "vietnamese", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Pattaya"] = { "v": ["regular"], "subset": ["cyrillic", "latin-ext", "thai", "vietnamese", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Patua One"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Pavanam"] = { "v": ["regular"], "subset": ["latin-ext", "tamil", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Paytone One"] = { "v": ["regular"], "subset": ["latin-ext", "vietnamese", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Peddana"] = { "v": ["regular"], "subset": ["telugu", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Peralta"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Permanent Marker"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Petit Formal Script"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Petrona"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Philosopher"] = { "v": ["regular", "italic", "700", "700italic"], "subset": ["cyrillic", "cyrillic-ext", "vietnamese", "latin"], "weight": ["400", "700"], "i": ["normal", "italic"] };
fonts["Piedra"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Pinyon Script"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Pirata One"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Plaster"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Play"] = { "v": ["regular", "700"], "subset": ["cyrillic", "cyrillic-ext", "latin-ext", "greek", "vietnamese", "latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Playball"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Playfair Display"] = { "v": ["regular", "italic", "700", "700italic", "900", "900italic"], "subset": ["cyrillic", "latin-ext", "vietnamese", "latin"], "weight": ["400", "700", "900"], "i": ["normal", "italic"] };
fonts["Playfair Display SC"] = { "v": ["regular", "italic", "700", "700italic", "900", "900italic"], "subset": ["cyrillic", "latin-ext", "vietnamese", "latin"], "weight": ["400", "700", "900"], "i": ["normal", "italic"] };
fonts["Podkova"] = { "v": ["regular", "500", "600", "700", "800"], "subset": ["cyrillic", "cyrillic-ext", "latin-ext", "vietnamese", "latin"], "weight": ["400", "500", "600", "700", "800"], "i": ["normal"] };
fonts["Poiret One"] = { "v": ["regular"], "subset": ["cyrillic", "latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Poller One"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Poly"] = { "v": ["regular", "italic"], "subset": ["latin"], "weight": ["400"], "i": ["normal", "italic"] };
fonts["Pompiere"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Pontano Sans"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Poor Story"] = { "v": ["regular"], "subset": ["korean", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Poppins"] = { "v": ["100", "100italic", "200", "200italic", "300", "300italic", "regular", "italic", "500", "500italic", "600", "600italic", "700", "700italic", "800", "800italic", "900", "900italic"], "subset": ["latin-ext", "devanagari", "latin"], "weight": ["100", "200", "300", "400", "500", "600", "700", "800", "900"], "i": ["normal", "italic"] };
fonts["Port Lligat Sans"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Port Lligat Slab"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Pragati Narrow"] = { "v": ["regular", "700"], "subset": ["latin-ext", "devanagari", "latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Prata"] = { "v": ["regular"], "subset": ["cyrillic", "cyrillic-ext", "vietnamese", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Preahvihear"] = { "v": ["regular"], "subset": ["khmer"], "weight": ["400"], "i": ["normal"] };
fonts["Press Start 2P"] = { "v": ["regular"], "subset": ["cyrillic", "cyrillic-ext", "latin-ext", "greek", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Pridi"] = { "v": ["200", "300", "regular", "500", "600", "700"], "subset": ["latin-ext", "thai", "vietnamese", "latin"], "weight": ["200", "300", "400", "500", "600", "700"], "i": ["normal"] };
fonts["Princess Sofia"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Prociono"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Prompt"] = { "v": ["100", "100italic", "200", "200italic", "300", "300italic", "regular", "italic", "500", "500italic", "600", "600italic", "700", "700italic", "800", "800italic", "900", "900italic"], "subset": ["latin-ext", "thai", "vietnamese", "latin"], "weight": ["100", "200", "300", "400", "500", "600", "700", "800", "900"], "i": ["normal", "italic"] };
fonts["Prosto One"] = { "v": ["regular"], "subset": ["cyrillic", "latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Proza Libre"] = { "v": ["regular", "italic", "500", "500italic", "600", "600italic", "700", "700italic", "800", "800italic"], "subset": ["latin-ext", "latin"], "weight": ["400", "500", "600", "700", "800"], "i": ["normal", "italic"] };
fonts["Puritan"] = { "v": ["regular", "italic", "700", "700italic"], "subset": ["latin"], "weight": ["400", "700"], "i": ["normal", "italic"] };
fonts["Purple Purse"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Quando"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Quantico"] = { "v": ["regular", "italic", "700", "700italic"], "subset": ["latin"], "weight": ["400", "700"], "i": ["normal", "italic"] };
fonts["Quattrocento"] = { "v": ["regular", "700"], "subset": ["latin-ext", "latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Quattrocento Sans"] = { "v": ["regular", "italic", "700", "700italic"], "subset": ["latin-ext", "latin"], "weight": ["400", "700"], "i": ["normal", "italic"] };
fonts["Questrial"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Quicksand"] = { "v": ["300", "regular", "500", "700"], "subset": ["latin-ext", "vietnamese", "latin"], "weight": ["300", "400", "500", "700"], "i": ["normal"] };
fonts["Quintessential"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Qwigley"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Racing Sans One"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Radley"] = { "v": ["regular", "italic"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal", "italic"] };
fonts["Rajdhani"] = { "v": ["300", "regular", "500", "600", "700"], "subset": ["latin-ext", "devanagari", "latin"], "weight": ["300", "400", "500", "600", "700"], "i": ["normal"] };
fonts["Rakkas"] = { "v": ["regular"], "subset": ["latin-ext", "arabic", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Raleway"] = { "v": ["100", "100italic", "200", "200italic", "300", "300italic", "regular", "italic", "500", "500italic", "600", "600italic", "700", "700italic", "800", "800italic", "900", "900italic"], "subset": ["latin-ext", "latin"], "weight": ["100", "200", "300", "400", "500", "600", "700", "800", "900"], "i": ["normal", "italic"] };
fonts["Raleway Dots"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Ramabhadra"] = { "v": ["regular"], "subset": ["telugu", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Ramaraja"] = { "v": ["regular"], "subset": ["telugu", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Rambla"] = { "v": ["regular", "italic", "700", "700italic"], "subset": ["latin-ext", "latin"], "weight": ["400", "700"], "i": ["normal", "italic"] };
fonts["Rammetto One"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Ranchers"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Rancho"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Ranga"] = { "v": ["regular", "700"], "subset": ["latin-ext", "devanagari", "latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Rasa"] = { "v": ["300", "regular", "500", "600", "700"], "subset": ["latin-ext", "gujarati", "latin"], "weight": ["300", "400", "500", "600", "700"], "i": ["normal"] };
fonts["Rationale"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Ravi Prakash"] = { "v": ["regular"], "subset": ["telugu", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Redressed"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Reem Kufi"] = { "v": ["regular"], "subset": ["arabic", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Reenie Beanie"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Revalia"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Rhodium Libre"] = { "v": ["regular"], "subset": ["latin-ext", "devanagari", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Ribeye"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Ribeye Marrow"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Righteous"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Risque"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Roboto"] = { "v": ["100", "100italic", "300", "300italic", "regular", "italic", "500", "500italic", "700", "700italic", "900", "900italic"], "subset": ["cyrillic", "cyrillic-ext", "greek-ext", "latin-ext", "greek", "vietnamese", "latin"], "weight": ["100", "300", "400", "500", "700", "900"], "i": ["normal", "italic"] };
fonts["Roboto Condensed"] = { "v": ["300", "300italic", "regular", "italic", "700", "700italic"], "subset": ["cyrillic", "cyrillic-ext", "greek-ext", "latin-ext", "greek", "vietnamese", "latin"], "weight": ["300", "400", "700"], "i": ["normal", "italic"] };
fonts["Roboto Mono"] = { "v": ["100", "100italic", "300", "300italic", "regular", "italic", "500", "500italic", "700", "700italic"], "subset": ["cyrillic", "cyrillic-ext", "greek-ext", "latin-ext", "greek", "vietnamese", "latin"], "weight": ["100", "300", "400", "500", "700"], "i": ["normal", "italic"] };
fonts["Roboto Slab"] = { "v": ["100", "300", "regular", "700"], "subset": ["cyrillic", "cyrillic-ext", "greek-ext", "latin-ext", "greek", "vietnamese", "latin"], "weight": ["100", "300", "400", "700"], "i": ["normal"] };
fonts["Rochester"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Rock Salt"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Rokkitt"] = { "v": ["100", "200", "300", "regular", "500", "600", "700", "800", "900"], "subset": ["latin-ext", "vietnamese", "latin"], "weight": ["100", "200", "300", "400", "500", "600", "700", "800", "900"], "i": ["normal"] };
fonts["Romanesco"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Ropa Sans"] = { "v": ["regular", "italic"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal", "italic"] };
fonts["Rosario"] = { "v": ["regular", "italic", "700", "700italic"], "subset": ["latin"], "weight": ["400", "700"], "i": ["normal", "italic"] };
fonts["Rosarivo"] = { "v": ["regular", "italic"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal", "italic"] };
fonts["Rouge Script"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Rozha One"] = { "v": ["regular"], "subset": ["latin-ext", "devanagari", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Rubik"] = { "v": ["300", "300italic", "regular", "italic", "500", "500italic", "700", "700italic", "900", "900italic"], "subset": ["cyrillic", "latin-ext", "hebrew", "latin"], "weight": ["300", "400", "500", "700", "900"], "i": ["normal", "italic"] };
fonts["Rubik Mono One"] = { "v": ["regular"], "subset": ["cyrillic", "latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Ruda"] = { "v": ["regular", "700", "900"], "subset": ["latin-ext", "latin"], "weight": ["400", "700", "900"], "i": ["normal"] };
fonts["Rufina"] = { "v": ["regular", "700"], "subset": ["latin-ext", "latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Ruge Boogie"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Ruluko"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Rum Raisin"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Ruslan Display"] = { "v": ["regular"], "subset": ["cyrillic", "latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Russo One"] = { "v": ["regular"], "subset": ["cyrillic", "latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Ruthie"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Rye"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Sacramento"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Sahitya"] = { "v": ["regular", "700"], "subset": ["devanagari", "latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Sail"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Saira"] = { "v": ["100", "200", "300", "regular", "500", "600", "700", "800", "900"], "subset": ["latin-ext", "vietnamese", "latin"], "weight": ["100", "200", "300", "400", "500", "600", "700", "800", "900"], "i": ["normal"] };
fonts["Saira Condensed"] = { "v": ["100", "200", "300", "regular", "500", "600", "700", "800", "900"], "subset": ["latin-ext", "vietnamese", "latin"], "weight": ["100", "200", "300", "400", "500", "600", "700", "800", "900"], "i": ["normal"] };
fonts["Saira Extra Condensed"] = { "v": ["100", "200", "300", "regular", "500", "600", "700", "800", "900"], "subset": ["latin-ext", "vietnamese", "latin"], "weight": ["100", "200", "300", "400", "500", "600", "700", "800", "900"], "i": ["normal"] };
fonts["Saira Semi Condensed"] = { "v": ["100", "200", "300", "regular", "500", "600", "700", "800", "900"], "subset": ["latin-ext", "vietnamese", "latin"], "weight": ["100", "200", "300", "400", "500", "600", "700", "800", "900"], "i": ["normal"] };
fonts["Salsa"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Sanchez"] = { "v": ["regular", "italic"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal", "italic"] };
fonts["Sancreek"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Sansita"] = { "v": ["regular", "italic", "700", "700italic", "800", "800italic", "900", "900italic"], "subset": ["latin-ext", "latin"], "weight": ["400", "700", "800", "900"], "i": ["normal", "italic"] };
fonts["Sarala"] = { "v": ["regular", "700"], "subset": ["latin-ext", "devanagari", "latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Sarina"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Sarpanch"] = { "v": ["regular", "500", "600", "700", "800", "900"], "subset": ["latin-ext", "devanagari", "latin"], "weight": ["400", "500", "600", "700", "800", "900"], "i": ["normal"] };
fonts["Satisfy"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Sawarabi Gothic"] = { "v": ["regular"], "subset": ["cyrillic", "japanese", "latin-ext", "vietnamese", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Sawarabi Mincho"] = { "v": ["regular"], "subset": ["japanese", "latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Scada"] = { "v": ["regular", "italic", "700", "700italic"], "subset": ["cyrillic", "cyrillic-ext", "latin-ext", "latin"], "weight": ["400", "700"], "i": ["normal", "italic"] };
fonts["Scheherazade"] = { "v": ["regular", "700"], "subset": ["arabic", "latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Schoolbell"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Scope One"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Seaweed Script"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Secular One"] = { "v": ["regular"], "subset": ["latin-ext", "hebrew", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Sedgwick Ave"] = { "v": ["regular"], "subset": ["latin-ext", "vietnamese", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Sedgwick Ave Display"] = { "v": ["regular"], "subset": ["latin-ext", "vietnamese", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Sevillana"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Seymour One"] = { "v": ["regular"], "subset": ["cyrillic", "latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Shadows Into Light"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Shadows Into Light Two"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Shanti"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Share"] = { "v": ["regular", "italic", "700", "700italic"], "subset": ["latin-ext", "latin"], "weight": ["400", "700"], "i": ["normal", "italic"] };
fonts["Share Tech"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Share Tech Mono"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Shojumaru"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Short Stack"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Shrikhand"] = { "v": ["regular"], "subset": ["latin-ext", "gujarati", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Siemreap"] = { "v": ["regular"], "subset": ["khmer"], "weight": ["400"], "i": ["normal"] };
fonts["Sigmar One"] = { "v": ["regular"], "subset": ["latin-ext", "vietnamese", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Signika"] = { "v": ["300", "regular", "600", "700"], "subset": ["latin-ext", "latin"], "weight": ["300", "400", "600", "700"], "i": ["normal"] };
fonts["Signika Negative"] = { "v": ["300", "regular", "600", "700"], "subset": ["latin-ext", "latin"], "weight": ["300", "400", "600", "700"], "i": ["normal"] };
fonts["Simonetta"] = { "v": ["regular", "italic", "900", "900italic"], "subset": ["latin-ext", "latin"], "weight": ["400", "900"], "i": ["normal", "italic"] };
fonts["Sintony"] = { "v": ["regular", "700"], "subset": ["latin-ext", "latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Sirin Stencil"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Six Caps"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Skranji"] = { "v": ["regular", "700"], "subset": ["latin-ext", "latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Slabo 13px"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Slabo 27px"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Slackey"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Smokum"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Smythe"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Sniglet"] = { "v": ["regular", "800"], "subset": ["latin-ext", "latin"], "weight": ["400", "800"], "i": ["normal"] };
fonts["Snippet"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Snowburst One"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Sofadi One"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Sofia"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Song Myung"] = { "v": ["regular"], "subset": ["korean", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Sonsie One"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Sorts Mill Goudy"] = { "v": ["regular", "italic"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal", "italic"] };
fonts["Source Code Pro"] = { "v": ["200", "300", "regular", "500", "600", "700", "900"], "subset": ["latin-ext", "latin"], "weight": ["200", "300", "400", "500", "600", "700", "900"], "i": ["normal"] };
fonts["Source Sans Pro"] = { "v": ["200", "200italic", "300", "300italic", "regular", "italic", "600", "600italic", "700", "700italic", "900", "900italic"], "subset": ["cyrillic", "cyrillic-ext", "greek-ext", "latin-ext", "greek", "vietnamese", "latin"], "weight": ["200", "300", "400", "600", "700", "900"], "i": ["normal", "italic"] };
fonts["Source Serif Pro"] = { "v": ["regular", "600", "700"], "subset": ["latin-ext", "latin"], "weight": ["400", "600", "700"], "i": ["normal"] };
fonts["Space Mono"] = { "v": ["regular", "italic", "700", "700italic"], "subset": ["latin-ext", "vietnamese", "latin"], "weight": ["400", "700"], "i": ["normal", "italic"] };
fonts["Special Elite"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Spectral"] = { "v": ["200", "200italic", "300", "300italic", "regular", "italic", "500", "500italic", "600", "600italic", "700", "700italic", "800", "800italic"], "subset": ["cyrillic", "latin-ext", "vietnamese", "latin"], "weight": ["200", "300", "400", "500", "600", "700", "800"], "i": ["normal", "italic"] };
fonts["Spectral SC"] = { "v": ["200", "200italic", "300", "300italic", "regular", "italic", "500", "500italic", "600", "600italic", "700", "700italic", "800", "800italic"], "subset": ["cyrillic", "latin-ext", "vietnamese", "latin"], "weight": ["200", "300", "400", "500", "600", "700", "800"], "i": ["normal", "italic"] };
fonts["Spicy Rice"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Spinnaker"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Spirax"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Squada One"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Sree Krushnadevaraya"] = { "v": ["regular"], "subset": ["telugu", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Sriracha"] = { "v": ["regular"], "subset": ["latin-ext", "thai", "vietnamese", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Stalemate"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Stalinist One"] = { "v": ["regular"], "subset": ["cyrillic", "latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Stardos Stencil"] = { "v": ["regular", "700"], "subset": ["latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Stint Ultra Condensed"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Stint Ultra Expanded"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Stoke"] = { "v": ["300", "regular"], "subset": ["latin-ext", "latin"], "weight": ["300", "400"], "i": ["normal"] };
fonts["Strait"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Stylish"] = { "v": ["regular"], "subset": ["korean", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Sue Ellen Francisco"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Suez One"] = { "v": ["regular"], "subset": ["latin-ext", "hebrew", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Sumana"] = { "v": ["regular", "700"], "subset": ["latin-ext", "devanagari", "latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Sunflower"] = { "v": ["300", "500", "700"], "subset": ["korean", "latin"], "weight": ["300", "500", "700"], "i": [] };
fonts["Sunshiney"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Supermercado One"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Sura"] = { "v": ["regular", "700"], "subset": ["latin-ext", "devanagari", "latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Suranna"] = { "v": ["regular"], "subset": ["telugu", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Suravaram"] = { "v": ["regular"], "subset": ["telugu", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Suwannaphum"] = { "v": ["regular"], "subset": ["khmer"], "weight": ["400"], "i": ["normal"] };
fonts["Swanky and Moo Moo"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Syncopate"] = { "v": ["regular", "700"], "subset": ["latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Tajawal"] = { "v": ["200", "300", "regular", "500", "700", "800", "900"], "subset": ["arabic", "latin"], "weight": ["200", "300", "400", "500", "700", "800", "900"], "i": ["normal"] };
fonts["Tangerine"] = { "v": ["regular", "700"], "subset": ["latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Taprom"] = { "v": ["regular"], "subset": ["khmer"], "weight": ["400"], "i": ["normal"] };
fonts["Tauri"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Taviraj"] = { "v": ["100", "100italic", "200", "200italic", "300", "300italic", "regular", "italic", "500", "500italic", "600", "600italic", "700", "700italic", "800", "800italic", "900", "900italic"], "subset": ["latin-ext", "thai", "vietnamese", "latin"], "weight": ["100", "200", "300", "400", "500", "600", "700", "800", "900"], "i": ["normal", "italic"] };
fonts["Teko"] = { "v": ["300", "regular", "500", "600", "700"], "subset": ["latin-ext", "devanagari", "latin"], "weight": ["300", "400", "500", "600", "700"], "i": ["normal"] };
fonts["Telex"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Tenali Ramakrishna"] = { "v": ["regular"], "subset": ["telugu", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Tenor Sans"] = { "v": ["regular"], "subset": ["cyrillic", "latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Text Me One"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["The Girl Next Door"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Tienne"] = { "v": ["regular", "700", "900"], "subset": ["latin"], "weight": ["400", "700", "900"], "i": ["normal"] };
fonts["Tillana"] = { "v": ["regular", "500", "600", "700", "800"], "subset": ["latin-ext", "devanagari", "latin"], "weight": ["400", "500", "600", "700", "800"], "i": ["normal"] };
fonts["Timmana"] = { "v": ["regular"], "subset": ["telugu", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Tinos"] = { "v": ["regular", "italic", "700", "700italic"], "subset": ["cyrillic", "cyrillic-ext", "greek-ext", "latin-ext", "hebrew", "greek", "vietnamese", "latin"], "weight": ["400", "700"], "i": ["normal", "italic"] };
fonts["Titan One"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Titillium Web"] = { "v": ["200", "200italic", "300", "300italic", "regular", "italic", "600", "600italic", "700", "700italic", "900"], "subset": ["latin-ext", "latin"], "weight": ["200", "300", "400", "600", "700", "900"], "i": ["normal", "italic"] };
fonts["Trade Winds"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Trirong"] = { "v": ["100", "100italic", "200", "200italic", "300", "300italic", "regular", "italic", "500", "500italic", "600", "600italic", "700", "700italic", "800", "800italic", "900", "900italic"], "subset": ["latin-ext", "thai", "vietnamese", "latin"], "weight": ["100", "200", "300", "400", "500", "600", "700", "800", "900"], "i": ["normal", "italic"] };
fonts["Trocchi"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Trochut"] = { "v": ["regular", "italic", "700"], "subset": ["latin"], "weight": ["400", "700"], "i": ["normal", "italic"] };
fonts["Trykker"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Tulpen One"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Ubuntu"] = { "v": ["300", "300italic", "regular", "italic", "500", "500italic", "700", "700italic"], "subset": ["cyrillic", "cyrillic-ext", "greek-ext", "latin-ext", "greek", "latin"], "weight": ["300", "400", "500", "700"], "i": ["normal", "italic"] };
fonts["Ubuntu Condensed"] = { "v": ["regular"], "subset": ["cyrillic", "cyrillic-ext", "greek-ext", "latin-ext", "greek", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Ubuntu Mono"] = { "v": ["regular", "italic", "700", "700italic"], "subset": ["cyrillic", "cyrillic-ext", "greek-ext", "latin-ext", "greek", "latin"], "weight": ["400", "700"], "i": ["normal", "italic"] };
fonts["Ultra"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Uncial Antiqua"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Underdog"] = { "v": ["regular"], "subset": ["cyrillic", "latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Unica One"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["UnifrakturCook"] = { "v": ["700"], "subset": ["latin"], "weight": ["700"], "i": [] };
fonts["UnifrakturMaguntia"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Unkempt"] = { "v": ["regular", "700"], "subset": ["latin"], "weight": ["400", "700"], "i": ["normal"] };
fonts["Unlock"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Unna"] = { "v": ["regular", "italic", "700", "700italic"], "subset": ["latin-ext", "latin"], "weight": ["400", "700"], "i": ["normal", "italic"] };
fonts["VT323"] = { "v": ["regular"], "subset": ["latin-ext", "vietnamese", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Vampiro One"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Varela"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Varela Round"] = { "v": ["regular"], "subset": ["latin-ext", "hebrew", "vietnamese", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Vast Shadow"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Vesper Libre"] = { "v": ["regular", "500", "700", "900"], "subset": ["latin-ext", "devanagari", "latin"], "weight": ["400", "500", "700", "900"], "i": ["normal"] };
fonts["Vibur"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Vidaloka"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Viga"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Voces"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Volkhov"] = { "v": ["regular", "italic", "700", "700italic"], "subset": ["latin"], "weight": ["400", "700"], "i": ["normal", "italic"] };
fonts["Vollkorn"] = { "v": ["regular", "italic", "600", "600italic", "700", "700italic", "900", "900italic"], "subset": ["cyrillic", "cyrillic-ext", "latin-ext", "greek", "vietnamese", "latin"], "weight": ["400", "600", "700", "900"], "i": ["normal", "italic"] };
fonts["Vollkorn SC"] = { "v": ["regular", "600", "700", "900"], "subset": ["cyrillic", "cyrillic-ext", "latin-ext", "vietnamese", "latin"], "weight": ["400", "600", "700", "900"], "i": ["normal"] };
fonts["Voltaire"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Waiting for the Sunrise"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Wallpoet"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Walter Turncoat"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Warnes"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Wellfleet"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Wendy One"] = { "v": ["regular"], "subset": ["latin-ext", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Wire One"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Work Sans"] = { "v": ["100", "200", "300", "regular", "500", "600", "700", "800", "900"], "subset": ["latin-ext", "latin"], "weight": ["100", "200", "300", "400", "500", "600", "700", "800", "900"], "i": ["normal"] };
fonts["Yanone Kaffeesatz"] = { "v": ["200", "300", "regular", "700"], "subset": ["cyrillic", "latin-ext", "vietnamese", "latin"], "weight": ["200", "300", "400", "700"], "i": ["normal"] };
fonts["Yantramanav"] = { "v": ["100", "300", "regular", "500", "700", "900"], "subset": ["latin-ext", "devanagari", "latin"], "weight": ["100", "300", "400", "500", "700", "900"], "i": ["normal"] };
fonts["Yatra One"] = { "v": ["regular"], "subset": ["latin-ext", "devanagari", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Yellowtail"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Yeon Sung"] = { "v": ["regular"], "subset": ["korean", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Yeseva One"] = { "v": ["regular"], "subset": ["cyrillic", "cyrillic-ext", "latin-ext", "vietnamese", "latin"], "weight": ["400"], "i": ["normal"] };
fonts["Yesteryear"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Yrsa"] = { "v": ["300", "regular", "500", "600", "700"], "subset": ["latin-ext", "latin"], "weight": ["300", "400", "500", "600", "700"], "i": ["normal"] };
fonts["Zeyada"] = { "v": ["regular"], "subset": ["latin"], "weight": ["400"], "i": ["normal"] };
fonts["Zilla Slab"] = { "v": ["300", "300italic", "regular", "italic", "500", "500italic", "600", "600italic", "700", "700italic"], "subset": ["latin-ext", "latin"], "weight": ["300", "400", "500", "600", "700"], "i": ["normal", "italic"] };
fonts["Zilla Slab Highlight"] = { "v": ["regular", "700"], "subset": ["latin-ext", "latin"], "weight": ["400", "700"], "i": ["normal"] };
exports.default = fonts;

/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
var RangeControl = wp.components.RangeControl;
function PremiumRange(_ref) {
    var _onChange = _ref.onChange,
        _ref$value = _ref.value,
        value = _ref$value === undefined ? '' : _ref$value,
        _ref$step = _ref.step,
        step = _ref$step === undefined ? 1 : _ref$step,
        _ref$max = _ref.max,
        max = _ref$max === undefined ? 100 : _ref$max,
        _ref$min = _ref.min,
        min = _ref$min === undefined ? 0 : _ref$min,
        _ref$beforeIcon = _ref.beforeIcon,
        beforeIcon = _ref$beforeIcon === undefined ? '' : _ref$beforeIcon,
        _ref$help = _ref.help,
        help = _ref$help === undefined ? '' : _ref$help,
        defaultValue = _ref.defaultValue;

    var onChangInput = function onChangInput(event) {
        if (event.target.value === '') {
            _onChange(undefined);
            return;
        }
        var newValue = Number(event.target.value);
        if (newValue === '') {
            _onChange(undefined);
            return;
        }
        if (min < -0.1) {
            if (newValue > max) {
                _onChange(max);
            } else if (newValue < min && newValue !== '-') {
                _onChange(min);
            } else {
                _onChange(newValue);
            }
        } else {
            if (newValue > max) {
                _onChange(max);
            } else if (newValue < -0.1) {
                _onChange(min);
            } else {
                _onChange(newValue);
            }
        }
    };

    return [_onChange && React.createElement(
        'div',
        { className: 'wrapper' },
        React.createElement(
            'div',
            { className: 'input-field-wrapper active' },
            React.createElement(RangeControl, {
                className: 'premium-range-value-input',
                beforeIcon: beforeIcon,
                value: value,
                onChange: function onChange(newVal) {
                    return _onChange(newVal);
                },
                min: min,
                max: max,
                step: step,
                help: help,
                withInputField: false
            }),
            React.createElement(
                'div',
                { className: 'kemet_range_value' },
                React.createElement('input', {
                    value: value,
                    onChange: onChangInput,
                    min: min,
                    max: max,
                    step: step,
                    type: 'number',
                    className: 'components-text-control__input'
                })
            )
        ),
        React.createElement('button', { className: 'premium-slider-reset', disabled: value == defaultValue, onClick: function onClick(e) {
                e.preventDefault();
                _onChange(defaultValue);
            } })
    )];
}
exports.default = PremiumRange;

/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _classnames = __webpack_require__(50);

var _classnames2 = _interopRequireDefault(_classnames);

var _webfontloader = __webpack_require__(104);

var _webfontloader2 = _interopRequireDefault(_webfontloader);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var _wp$element = wp.element,
    useEffect = _wp$element.useEffect,
    useRef = _wp$element.useRef,
    useState = _wp$element.useState;
var __ = wp.i18n.__;


var loadedFonts = [];

var loadGoogleFonts = function loadGoogleFonts(font_families) {
    if (font_families.length === 0) return;

    loadedFonts = [].concat(_toConsumableArray(loadedFonts), _toConsumableArray(font_families.map(function (_ref) {
        var family = _ref.family;
        return family;
    })));
    if (font_families.length > 0) {
        _webfontloader2.default.load(_extends({}, font_families.length > 0 ? {
            google: { families: font_families }
        } : {}, {
            classes: false,
            text: 'abcdefghijklmnopqrstuvwxyz'
        }));
    }
};
var SingleFont = function SingleFont(_ref2) {
    var family = _ref2.family,
        onPickFamily = _ref2.onPickFamily,
        value = _ref2.value;

    return React.createElement(
        'div',
        {
            onClick: function onClick() {
                return onPickFamily(family.value);
            },
            className: (0, _classnames2.default)('premium-typography-single-font', {
                active: family.value === value
            }),
            key: family[0]
        },
        React.createElement(
            'span',
            { className: 'premium-font-name' },
            family.label
        ),
        React.createElement(
            'span',
            {
                style: { fontFamily: family.value },
                className: 'premium-font-preview' },
            'Simply dummy text'
        )
    );
};

var FontsList = function FontsList(_ref3) {
    var value = _ref3.value,
        onPickFamily = _ref3.onPickFamily,
        linearFontsList = _ref3.linearFontsList;

    var listRef = useRef(null);

    var _useState = useState(null),
        _useState2 = _slicedToArray(_useState, 2),
        scrollTimer = _useState2[0],
        setScrollTimer = _useState2[1];

    useEffect(function () {
        if (value.family && listRef.current) {
            listRef.current.querySelector('.active').scrollIntoView();
        }
    }, []);
    var systemFonts = linearFontsList.filter(function (family) {
        return family.google === false;
    });
    var googleFonts = linearFontsList.filter(function (family) {
        return family.google === true;
    });

    var onScroll = function onScroll() {
        scrollTimer && clearTimeout(scrollTimer);
        setScrollTimer(setTimeout(function () {
            if (!listRef.current) {
                return;
            }
            var overscanStartIndex = Math.ceil(listRef.current.scrollTop / 85);
            var perPage = 25;
            var startingPage = Math.ceil((overscanStartIndex + 1) / perPage);
            var pageItems = [].concat(_toConsumableArray(Array(perPage))).map(function (_, i) {
                return (startingPage - 1) * perPage + i;
            }).map(function (index) {
                return googleFonts[index].value;
            }).filter(function (s) {
                return !!s;
            });
            loadGoogleFonts(pageItems);
        }, 10));
    };

    useEffect(function () {
        onScroll();
    }, [linearFontsList]);

    return React.createElement(
        'ul',
        { ref: listRef, className: 'premium-typography-fonts', onScroll: onScroll, style: {
                width: '100%'
            } },
        React.createElement(
            'div',
            null,
            React.createElement(
                'ul',
                null,
                systemFonts.map(function (family) {
                    return SingleFont({ family: family, onPickFamily: onPickFamily, value: value });
                })
            ),
            React.createElement(
                'div',
                { className: 'premium-fonts-source' },
                __('Google  Fonts', "kemet")
            ),
            React.createElement(
                'ul',
                null,
                googleFonts.map(function (family) {
                    return SingleFont({ family: family, onPickFamily: onPickFamily, value: value });
                })
            )
        )
    );
};

exports.default = FontsList;

/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classnames = __webpack_require__(0);

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __ = wp.i18n.__;
var _wp$blockEditor = wp.blockEditor,
    RichText = _wp$blockEditor.RichText,
    InnerBlocks = _wp$blockEditor.InnerBlocks;


var save = function save(props) {
    var className = props.className;
    var _props$attributes = props.attributes,
        accordionId = _props$attributes.accordionId,
        repeaterItems = _props$attributes.repeaterItems,
        direction = _props$attributes.direction,
        titleTag = _props$attributes.titleTag,
        titleStyles = _props$attributes.titleStyles,
        arrowStyles = _props$attributes.arrowStyles,
        descStyles = _props$attributes.descStyles,
        contentType = _props$attributes.contentType,
        titleEditBorder = _props$attributes.titleEditBorder,
        textShadowColor = _props$attributes.textShadowColor,
        textShadowBlur = _props$attributes.textShadowBlur,
        textShadowHorizontal = _props$attributes.textShadowHorizontal,
        textShadowVertical = _props$attributes.textShadowVertical,
        titleBorderWidth = _props$attributes.titleBorderWidth,
        titleBorderTop = _props$attributes.titleBorderTop,
        titleBorderRight = _props$attributes.titleBorderRight,
        titleBorderBottom = _props$attributes.titleBorderBottom,
        titleBorderLeft = _props$attributes.titleBorderLeft,
        titleBorderUpdated = _props$attributes.titleBorderUpdated,
        descBorderWidth = _props$attributes.descBorderWidth,
        descBorderUpdated = _props$attributes.descBorderUpdated,
        descBorderTop = _props$attributes.descBorderTop,
        descBorderRight = _props$attributes.descBorderRight,
        descBorderBottom = _props$attributes.descBorderBottom,
        descBorderLeft = _props$attributes.descBorderLeft;


    var mainClasses = (0, _classnames2.default)(className, 'premium-accordion');

    var accordionItems = repeaterItems.map(function (item, index) {
        return React.createElement(
            'div',
            {
                id: 'premium-accordion__layer' + index,
                className: 'premium-accordion__content_wrap'
            },
            React.createElement(
                'div',
                {
                    className: 'premium-accordion__title_wrap premium-accordion__' + direction + ' premium-accordion__' + arrowStyles[0].arrowPos,
                    style: {
                        backgroundColor: titleStyles[0].titleBack,
                        borderStyle: titleStyles[0].titleBorder,
                        borderWidth: titleBorderUpdated ? titleBorderTop + 'px ' + titleBorderRight + 'px ' + titleBorderBottom + 'px ' + titleBorderLeft + 'px' : titleBorderWidth + "px",
                        borderRadius: titleStyles[0].titleBorderRadius + "px",
                        borderColor: titleStyles[0].titleBorderColor
                    }
                },
                React.createElement(
                    'div',
                    { className: 'premium-accordion__title' },
                    React.createElement(RichText.Content, {
                        tagName: titleTag.toLowerCase(),
                        className: 'premium-accordion__title_text',
                        value: item.titleText,
                        style: {
                            color: titleStyles[0].titleColor,
                            fontSize: titleStyles[0].titleSize + "px",
                            letterSpacing: titleStyles[0].titleLetter + "px",
                            textTransform: titleStyles[0].titleUpper ? "uppercase" : "none",
                            fontStyle: titleStyles[0].titleStyle,
                            fontWeight: titleStyles[0].titleWeight,
                            textShadow: titleStyles[0].titleShadowHorizontal + 'px ' + titleStyles[0].titleShadowVertical + 'px ' + titleStyles[0].titleShadowBlur + 'px ' + titleStyles[0].titleShadowColor,
                            lineHeight: titleStyles[0].titleLine + "px"
                        }
                    })
                ),
                React.createElement(
                    'div',
                    { className: 'premium-accordion__icon_wrap' },
                    React.createElement(
                        'svg',
                        {
                            className: 'premium-accordion__icon premium-accordion__closed',
                            role: 'img',
                            focusable: 'false',
                            xmlns: 'http://www.w3.org/2000/svg',
                            width: arrowStyles[0].arrowSize,
                            height: arrowStyles[0].arrowSize,
                            viewBox: '0 0 20 20',
                            style: {
                                fill: arrowStyles[0].arrowColor,
                                backgroundColor: arrowStyles[0].arrowBack,
                                padding: arrowStyles[0].arrowPadding + "px",
                                borderRadius: arrowStyles[0].arrowRadius + "px"
                            }
                        },
                        React.createElement('polygon', { points: '16.7,3.3 10,10 3.3,3.4 0,6.7 10,16.7 10,16.6 20,6.7 ' })
                    )
                )
            ),
            React.createElement(
                'div',
                {
                    className: 'premium-accordion__desc_wrap premium-accordion__desc_close',
                    style: {
                        textAlign: descStyles[0].descAlign,
                        backgroundColor: descStyles[0].descBack,
                        borderStyle: descStyles[0].descBorder,
                        borderWidth: descBorderUpdated ? descBorderTop + 'px ' + descBorderRight + 'px ' + descBorderBottom + 'px ' + descBorderLeft + 'px' : descBorderWidth + "px",
                        borderRadius: descStyles[0].descBorderRadius + "px",
                        borderColor: descStyles[0].descBorderColor

                    }
                },
                "text" === contentType && React.createElement(RichText.Content, {
                    tagName: 'p',
                    className: 'premium-accordion__desc',
                    value: item.descText,
                    style: {
                        color: descStyles[0].descColor,
                        fontSize: descStyles[0].descSize + "px",
                        letterSpacing: descStyles[0].descLetter + "px",
                        textTransform: descStyles[0].descUpper ? "uppercase" : "none",
                        textShadow: textShadowHorizontal + 'px ' + textShadowVertical + 'px ' + textShadowBlur + 'px ' + textShadowColor,
                        fontStyle: descStyles[0].descStyle,
                        fontWeight: descStyles[0].descWeight,
                        lineHeight: descStyles[0].descLine + "px"
                    }
                }),
                "block" === contentType && React.createElement(InnerBlocks.Content, null)
            )
        );
    });
    return React.createElement(
        'div',
        { id: accordionId, className: '' + mainClasses },
        accordionItems
    );
};
exports.default = save;

/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
var __ = wp.i18n.__;


var attributes = {
    accordionId: {
        type: "string"
    },
    repeaterItems: {
        type: "array",
        default: [{
            titleText: __("Awesome Title", 'premium-blocks-for-gutenberg'),
            descText: "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."
        }]
    },
    direction: {
        type: "string",
        default: "ltr"
    },
    titleTag: {
        type: "string",
        default: "H4"
    },
    titleStyles: {
        type: "array",
        default: [{
            titleColor: "",
            titleSize: '',
            titleLine: '',
            titleLetter: '',
            titleStyle: '',
            titleUpper: '',
            titleWeight: '500',
            titleBorder: 'none',
            titleBorderRadius: '',
            titleBorderColor: '',
            titleBack: '',
            titleShadowColor: '',
            titleShadowBlur: 0,
            titleShadowHorizontal: 0,
            titleShadowVertical: 0
        }]
    },
    arrowStyles: {
        type: "array",
        default: [{
            arrowColor: '',
            arrowBack: '',
            arrowPos: 'out',
            arrowPadding: '',
            arrowRadius: '',
            arrowSize: 20
        }]
    },
    descStyles: {
        type: 'array',
        default: [{
            descAlign: 'left',
            descColor: '',
            descBack: '',
            descBorder: 'none',
            descBorderWidth: 1,
            descBorderUpdated: false,
            descBorderTop: '',
            descBorderRight: '',
            descBorderBottom: '',
            descBorderLeft: '',
            descBorderRadius: 0,
            descBorderColor: '',
            descSize: '',
            descLine: '',
            descLetter: '',
            descStyle: '',
            descUpper: false,
            descWeight: 500,
            descPaddingT: '',
            descPaddingR: '',
            descPaddingB: '',
            descPaddingL: ''
        }]
    },

    contentType: {
        type: "string",
        default: "text"
    },

    titleEditBorder: {
        type: "boolean"
    },

    textShadowColor: {
        type: "string"
    },
    textShadowBlur: {
        type: "number",
        default: "0"
    },
    textShadowHorizontal: {
        type: "number",
        default: "0"
    },
    textShadowVertical: {
        type: "number",
        default: "0"
    },
    titleBorderWidth: {
        type: "number",
        default: "1"
    },
    titleBorderTop: {
        type: "number"
    },
    titleBorderRight: {
        type: "number"
    },
    titleBorderBottom: {
        type: "number"
    },
    titleBorderLeft: {
        type: "number"
    },
    titleBorderUpdated: {
        type: "boolean",
        default: false
    },
    titlePaddingT: {
        type: "number"
    },
    titlePaddingR: {
        type: "number"
    },
    titlePaddingB: {
        type: "number"
    },
    titlePaddingL: {
        type: "number"
    },
    descBorderWidth: {
        type: "number",
        default: "1"
    },
    descBorderUpdated: {
        type: "boolean",
        default: false
    },
    descBorderTop: {
        type: "number"
    },
    descBorderRight: {
        type: "number"
    },
    descBorderBottom: {
        type: "number"
    },
    descBorderLeft: {
        type: "number"
    },
    descPaddingT: {
        type: "number"
    },
    descPaddingR: {
        type: "number"
    },
    descPaddingB: {
        type: "number"
    },
    descPaddingL: {
        type: "number",
        default: 10
    },
    titlePaddingTTablet: {
        type: "number"
    },
    titlePaddingRTablet: {
        type: "number"
    },
    titlePaddingBTablet: {
        type: "number"
    },
    titlePaddingLTablet: {
        type: "number"
    },
    titlePaddingTMobile: {
        type: "number"
    },
    titlePaddingRMobile: {
        type: "number"
    },
    titlePaddingBMobile: {
        type: "number"
    },
    titlePaddingLMobile: {
        type: "number"
    },
    descPaddingTTablet: {
        type: "number"
    },
    descPaddingRTablet: {
        type: "number"
    },
    descPaddingBTablet: {
        type: "number"
    },
    descPaddingLTablet: {
        type: "number"
    },
    descPaddingTMobile: {
        type: "number"
    },
    descPaddingRMobile: {
        type: "number"
    },
    descPaddingBMobile: {
        type: "number"
    },
    descPaddingLMobile: {
        type: "number"
    }
};
exports.default = attributes;

/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classnames = __webpack_require__(0);

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var className = "premium-accordion";

var __ = wp.i18n.__;
var _wp$editor = wp.editor,
    RichText = _wp$editor.RichText,
    InnerBlocks = _wp$editor.InnerBlocks;


var attributes = {
    accordionId: {
        type: "string"
    },
    repeaterItems: {
        type: "array",
        default: [{
            titleText: __("Awesome Title"),
            descText: "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."
        }]
    },
    direction: {
        type: "string",
        default: "ltr"
    },
    titleTag: {
        type: "string",
        default: "H4"
    },
    titleColor: {
        type: "string"
    },
    titleSize: {
        type: "number"
    },
    titleLine: {
        type: "number"
    },
    titleLetter: {
        type: "number"
    },
    titleStyle: {
        type: "string"
    },
    titleUpper: {
        type: "boolean"
    },
    titleWeight: {
        type: "number",
        default: 500
    },
    titleBorder: {
        type: "string",
        default: "none"
    },
    titleBorderWidth: {
        type: "number",
        default: "1"
    },
    titleBorderTop: {
        type: "number"
    },
    titleBorderRight: {
        type: "number"
    },
    titleBorderBottom: {
        type: "number"
    },
    titleBorderLeft: {
        type: "number"
    },
    titleBorderUpdated: {
        type: "boolean",
        default: false
    },
    titleBorderRadius: {
        type: "number",
        default: "0"
    },
    titleBorderColor: {
        type: "string"
    },
    titleBack: {
        type: "string"
    },
    titleShadowColor: {
        type: "string"
    },
    titleShadowBlur: {
        type: "number",
        default: "0"
    },
    titleShadowHorizontal: {
        type: "number",
        default: "0"
    },
    titleShadowVertical: {
        type: "number",
        default: "0"
    },
    titlePaddingT: {
        type: "number"
    },
    titlePaddingR: {
        type: "number"
    },
    titlePaddingB: {
        type: "number"
    },
    titlePaddingL: {
        type: "number"
    },
    arrowColor: {
        type: "string"
    },
    arrowBack: {
        type: "string"
    },
    arrowPos: {
        type: "string",
        default: "out"
    },
    arrowPadding: {
        type: "number"
    },
    arrowRadius: {
        type: "number"
    },
    arrowSize: {
        type: "number",
        default: 20
    },
    contentType: {
        type: "string",
        default: "text"
    },
    descAlign: {
        type: "string",
        default: "left"
    },
    descColor: {
        type: "string"
    },
    descBack: {
        type: "string"
    },
    descBorder: {
        type: "string",
        default: "none"
    },
    descBorderWidth: {
        type: "number",
        default: "1"
    },
    descBorderUpdated: {
        type: "boolean",
        default: false
    },
    descBorderTop: {
        type: "number"
    },
    descBorderRight: {
        type: "number"
    },
    descBorderBottom: {
        type: "number"
    },
    descBorderLeft: {
        type: "number"
    },
    titleEditBorder: {
        type: "boolean"
    },
    descBorderRadius: {
        type: "number",
        default: "0"
    },
    descBorderColor: {
        type: "string"
    },
    descSize: {
        type: "number"
    },
    descLine: {
        type: "number"
    },
    descLetter: {
        type: "number"
    },
    descStyle: {
        type: "string"
    },
    descUpper: {
        type: "boolean"
    },
    descWeight: {
        type: "number",
        default: 500
    },
    textShadowColor: {
        type: "string"
    },
    textShadowBlur: {
        type: "number",
        default: "0"
    },
    textShadowHorizontal: {
        type: "number",
        default: "0"
    },
    textShadowVertical: {
        type: "number",
        default: "0"
    },
    descPaddingT: {
        type: "number"
    },
    descPaddingR: {
        type: "number"
    },
    descPaddingB: {
        type: "number"
    },
    descPaddingL: {
        type: "number",
        default: 10
    }
};

var deprecated = [{
    attributes: attributes,
    migrate: function migrate(attributes) {
        var newAttributes = {
            titleStyles: [{
                titleColor: attributes.titleColor,
                titleSize: attributes.titleSize,
                titleLine: attributes.titleLine,
                titleLetter: attributes.titleLetter,
                titleStyle: attributes.titleStyle,
                titleUpper: attributes.titleUpper,
                titleWeight: attributes.titleWeight,
                titleBorder: attributes.titleBorder,
                titleBorderRadius: attributes.titleBorderRadius,
                titleBorderColor: attributes.titleBorderColor,
                titleBack: attributes.titleBack,
                titleShadowColor: attributes.titleShadowColor,
                titleShadowBlur: attributes.titleShadowBlur,
                titleShadowHorizontal: attributes.titleShadowHorizontal,
                titleShadowVertical: attributes.titleShadowVertical
            }],

            arrowStyles: [{
                arrowColor: attributes.arrowColor,
                arrowBack: attributes.arrowBack,
                arrowPos: attributes.arrowPos,
                arrowPadding: attributes.arrowPadding,
                arrowRadius: attributes.arrowRadius,
                arrowSize: attributes.arrowSize
            }],

            descStyles: [{
                descAlign: attributes.descAlign,
                descColor: attributes.descColor,
                descBack: attributes.descBack,
                descBorder: attributes.descBorder,
                descBorderWidth: attributes.descBorderWidth,
                descBorderUpdated: attributes.descBorderUpdated,
                descBorderTop: attributes.descBorderTop,
                descBorderRight: attributes.descBorderRight,
                descBorderBottom: attributes.descBorderBottom,
                descBorderLeft: attributes.descBorderLeft,
                descBorderRadius: attributes.descBorderRadius,
                descBorderColor: attributes.descBorderColor,
                descSize: attributes.descSize,
                descLine: attributes.descLine,
                descLetter: attributes.descLetter,
                descStyle: attributes.descStyle,
                descUpper: attributes.descUpper,
                descWeight: attributes.descWeight,
                descPaddingT: attributes.descPaddingT,
                descPaddingR: attributes.descPaddingR,
                descPaddingB: attributes.descPaddingB,
                descPaddingL: attributes.descPaddingL
            }],
            titlePaddingTTablet: "0",
            titlePaddingRTablet: "0",
            titlePaddingBTablet: "0",
            titlePaddingLTablet: "0",
            titlePaddingTMobile: "0",
            titlePaddingRMobile: "0",
            titlePaddingBMobile: "0",
            titlePaddingLMobile: "0",
            arrowPaddingTTablet: "0",
            arrowPaddingRTablet: "0",
            arrowPaddingBTablet: "0",
            arrowPaddingLTablet: "0",
            arrowPaddingTMobile: "0",
            arrowPaddingRMobile: "0",
            arrowPaddingBMobile: "0",
            arrowPaddingLMobile: "0",
            descPaddingTTablet: "0",
            descPaddingRTablet: "0",
            descPaddingBTablet: "0",
            descPaddingLTablet: "0",
            descPaddingTMobile: "0",
            descPaddingRMobile: "0",
            descPaddingBMobile: "0",
            descPaddingLMobile: "0"

        };
        return Object.assign(attributes, newAttributes);
    },
    save: function save(props) {
        var _props$attributes = props.attributes,
            accordionId = _props$attributes.accordionId,
            repeaterItems = _props$attributes.repeaterItems,
            direction = _props$attributes.direction,
            titleTag = _props$attributes.titleTag,
            titleSize = _props$attributes.titleSize,
            titleLine = _props$attributes.titleLine,
            titleLetter = _props$attributes.titleLetter,
            titleStyle = _props$attributes.titleStyle,
            titleUpper = _props$attributes.titleUpper,
            titleWeight = _props$attributes.titleWeight,
            titleColor = _props$attributes.titleColor,
            titleBorder = _props$attributes.titleBorder,
            titleBorderWidth = _props$attributes.titleBorderWidth,
            titleBorderColor = _props$attributes.titleBorderColor,
            titleBorderTop = _props$attributes.titleBorderTop,
            titleBorderRight = _props$attributes.titleBorderRight,
            titleBorderBottom = _props$attributes.titleBorderBottom,
            titleBorderLeft = _props$attributes.titleBorderLeft,
            titleBorderRadius = _props$attributes.titleBorderRadius,
            titleBack = _props$attributes.titleBack,
            titleShadowBlur = _props$attributes.titleShadowBlur,
            titleShadowColor = _props$attributes.titleShadowColor,
            titleShadowHorizontal = _props$attributes.titleShadowHorizontal,
            titleShadowVertical = _props$attributes.titleShadowVertical,
            titlePaddingT = _props$attributes.titlePaddingT,
            titlePaddingR = _props$attributes.titlePaddingR,
            titlePaddingB = _props$attributes.titlePaddingB,
            titlePaddingL = _props$attributes.titlePaddingL,
            arrowColor = _props$attributes.arrowColor,
            arrowBack = _props$attributes.arrowBack,
            arrowPos = _props$attributes.arrowPos,
            arrowPadding = _props$attributes.arrowPadding,
            arrowSize = _props$attributes.arrowSize,
            arrowRadius = _props$attributes.arrowRadius,
            contentType = _props$attributes.contentType,
            descAlign = _props$attributes.descAlign,
            descSize = _props$attributes.descSize,
            descLine = _props$attributes.descLine,
            descLetter = _props$attributes.descLetter,
            descStyle = _props$attributes.descStyle,
            descUpper = _props$attributes.descUpper,
            descWeight = _props$attributes.descWeight,
            descColor = _props$attributes.descColor,
            descBack = _props$attributes.descBack,
            descBorder = _props$attributes.descBorder,
            descBorderColor = _props$attributes.descBorderColor,
            descBorderRadius = _props$attributes.descBorderRadius,
            descBorderWidth = _props$attributes.descBorderWidth,
            descBorderTop = _props$attributes.descBorderTop,
            descBorderRight = _props$attributes.descBorderRight,
            descBorderBottom = _props$attributes.descBorderBottom,
            descBorderLeft = _props$attributes.descBorderLeft,
            textShadowBlur = _props$attributes.textShadowBlur,
            textShadowColor = _props$attributes.textShadowColor,
            textShadowHorizontal = _props$attributes.textShadowHorizontal,
            textShadowVertical = _props$attributes.textShadowVertical,
            descPaddingT = _props$attributes.descPaddingT,
            descPaddingR = _props$attributes.descPaddingR,
            descPaddingB = _props$attributes.descPaddingB,
            descPaddingL = _props$attributes.descPaddingL,
            titleBorderUpdated = _props$attributes.titleBorderUpdated,
            descBorderUpdated = _props$attributes.descBorderUpdated;


        var mainClasses = (0, _classnames2.default)(className, 'premium-accordion');

        var accordionItems = repeaterItems.map(function (item, index) {
            return React.createElement(
                "div",
                {
                    id: "premium-accordion__layer" + index,
                    className: "premium-accordion__content_wrap"
                },
                React.createElement(
                    "div",
                    {
                        className: "premium-accordion__title_wrap premium-accordion__" + direction + " premium-accordion__" + arrowPos,
                        style: {
                            backgroundColor: titleBack,
                            borderStyle: titleBorder,
                            borderWidth: titleBorderUpdated ? titleBorderTop + "px " + titleBorderRight + "px " + titleBorderBottom + "px " + titleBorderLeft + "px" : titleBorderWidth + "px",
                            borderRadius: titleBorderRadius + "px",
                            borderColor: titleBorderColor,
                            paddingTop: titlePaddingT,
                            paddingRight: titlePaddingR,
                            paddingBottom: titlePaddingB,
                            paddingLeft: titlePaddingL
                        }
                    },
                    React.createElement(
                        "div",
                        { className: "premium-accordion__title" },
                        React.createElement(RichText.Content, {
                            tagName: titleTag.toLowerCase(),
                            className: "premium-accordion__title_text",
                            value: item.titleText,
                            style: {
                                color: titleColor,
                                fontSize: titleSize + "px",
                                letterSpacing: titleLetter + "px",
                                textTransform: titleUpper ? "uppercase" : "none",
                                fontStyle: titleStyle,
                                fontWeight: titleWeight,
                                textShadow: titleShadowHorizontal + "px " + titleShadowVertical + "px " + titleShadowBlur + "px " + titleShadowColor,
                                lineHeight: titleLine + "px"
                            }
                        })
                    ),
                    React.createElement(
                        "div",
                        { className: "premium-accordion__icon_wrap" },
                        React.createElement(
                            "svg",
                            {
                                className: "premium-accordion__icon premium-accordion__closed",
                                role: "img",
                                focusable: "false",
                                xmlns: "http://www.w3.org/2000/svg",
                                width: arrowSize,
                                height: arrowSize,
                                viewBox: "0 0 20 20",
                                style: {
                                    fill: arrowColor,
                                    backgroundColor: arrowBack,
                                    padding: arrowPadding + "px",
                                    borderRadius: arrowRadius + "px"
                                }
                            },
                            React.createElement("polygon", { points: "16.7,3.3 10,10 3.3,3.4 0,6.7 10,16.7 10,16.6 20,6.7 " })
                        )
                    )
                ),
                React.createElement(
                    "div",
                    {
                        className: "premium-accordion__desc_wrap premium-accordion__desc_close",
                        style: {
                            textAlign: descAlign,
                            backgroundColor: descBack,
                            borderStyle: descBorder,
                            borderWidth: descBorderUpdated ? descBorderTop + "px " + descBorderRight + "px " + descBorderBottom + "px " + descBorderLeft + "px" : descBorderWidth + "px",
                            borderRadius: descBorderRadius + "px",
                            borderColor: descBorderColor,
                            paddingTop: descPaddingT,
                            paddingRight: descPaddingR,
                            paddingBottom: descPaddingB,
                            paddingLeft: descPaddingL
                        }
                    },
                    "text" === contentType && React.createElement(RichText.Content, {
                        tagName: "p",
                        className: "premium-accordion__desc",
                        value: item.descText,
                        style: {
                            color: descColor,
                            fontSize: descSize + "px",
                            letterSpacing: descLetter + "px",
                            textTransform: descUpper ? "uppercase" : "none",
                            textShadow: textShadowHorizontal + "px " + textShadowVertical + "px " + textShadowBlur + "px " + textShadowColor,
                            fontStyle: descStyle,
                            fontWeight: descWeight,
                            lineHeight: descLine + "px"
                        }
                    }),
                    "block" === contentType && React.createElement(InnerBlocks.Content, null)
                )
            );
        });
        return React.createElement(
            "div",
            { id: accordionId, className: "" + mainClasses },
            accordionItems
        );
    }
}, {
    attributes: attributes,

    save: function save(props) {
        var _props$attributes2 = props.attributes,
            accordionId = _props$attributes2.accordionId,
            repeaterItems = _props$attributes2.repeaterItems,
            direction = _props$attributes2.direction,
            titleTag = _props$attributes2.titleTag,
            titleSize = _props$attributes2.titleSize,
            titleLine = _props$attributes2.titleLine,
            titleLetter = _props$attributes2.titleLetter,
            titleStyle = _props$attributes2.titleStyle,
            titleUpper = _props$attributes2.titleUpper,
            titleWeight = _props$attributes2.titleWeight,
            titleColor = _props$attributes2.titleColor,
            titleBorder = _props$attributes2.titleBorder,
            titleBorderColor = _props$attributes2.titleBorderColor,
            titleBorderWidth = _props$attributes2.titleBorderWidth,
            titleBorderRadius = _props$attributes2.titleBorderRadius,
            titleBack = _props$attributes2.titleBack,
            titleShadowBlur = _props$attributes2.titleShadowBlur,
            titleShadowColor = _props$attributes2.titleShadowColor,
            titleShadowHorizontal = _props$attributes2.titleShadowHorizontal,
            titleShadowVertical = _props$attributes2.titleShadowVertical,
            titlePaddingT = _props$attributes2.titlePaddingT,
            titlePaddingR = _props$attributes2.titlePaddingR,
            titlePaddingB = _props$attributes2.titlePaddingB,
            titlePaddingL = _props$attributes2.titlePaddingL,
            arrowColor = _props$attributes2.arrowColor,
            arrowBack = _props$attributes2.arrowBack,
            arrowPos = _props$attributes2.arrowPos,
            arrowPadding = _props$attributes2.arrowPadding,
            arrowSize = _props$attributes2.arrowSize,
            arrowRadius = _props$attributes2.arrowRadius,
            contentType = _props$attributes2.contentType,
            descAlign = _props$attributes2.descAlign,
            descSize = _props$attributes2.descSize,
            descLine = _props$attributes2.descLine,
            descLetter = _props$attributes2.descLetter,
            descStyle = _props$attributes2.descStyle,
            descUpper = _props$attributes2.descUpper,
            descWeight = _props$attributes2.descWeight,
            descColor = _props$attributes2.descColor,
            descBack = _props$attributes2.descBack,
            descBorder = _props$attributes2.descBorder,
            descBorderColor = _props$attributes2.descBorderColor,
            descBorderRadius = _props$attributes2.descBorderRadius,
            descBorderWidth = _props$attributes2.descBorderWidth,
            textShadowBlur = _props$attributes2.textShadowBlur,
            textShadowColor = _props$attributes2.textShadowColor,
            textShadowHorizontal = _props$attributes2.textShadowHorizontal,
            textShadowVertical = _props$attributes2.textShadowVertical,
            descPaddingT = _props$attributes2.descPaddingT,
            descPaddingR = _props$attributes2.descPaddingR,
            descPaddingB = _props$attributes2.descPaddingB,
            descPaddingL = _props$attributes2.descPaddingL;

        var accordionItems = repeaterItems.map(function (item, index) {
            return React.createElement(
                "div",
                {
                    id: "premium-accordion__layer" + index,
                    className: "premium-accordion__content_wrap"
                },
                React.createElement(
                    "div",
                    {
                        className: "premium-accordion__title_wrap premium-accordion__" + direction + " premium-accordion__" + arrowPos,
                        style: {
                            backgroundColor: titleBack,
                            border: titleBorder,
                            borderWidth: titleBorderWidth + "px",
                            borderRadius: titleBorderRadius + "px",
                            borderColor: titleBorderColor,
                            paddingTop: titlePaddingT,
                            paddingRight: titlePaddingR,
                            paddingBottom: titlePaddingB,
                            paddingLeft: titlePaddingL
                        }
                    },
                    React.createElement(
                        "div",
                        { className: "premium-accordion__title" },
                        React.createElement(RichText.Content, {
                            tagName: titleTag.toLowerCase(),
                            className: "premium-accordion__title_text",
                            value: item.titleText,
                            style: {
                                color: titleColor,
                                fontSize: titleSize + "px",
                                letterSpacing: titleLetter + "px",
                                textTransform: titleUpper ? "uppercase" : "none",
                                fontStyle: titleStyle,
                                fontWeight: titleWeight,
                                textShadow: titleShadowHorizontal + "px " + titleShadowVertical + "px " + titleShadowBlur + "px " + titleShadowColor,
                                lineHeight: titleLine + "px"
                            }
                        })
                    ),
                    React.createElement(
                        "div",
                        { className: "premium-accordion__icon_wrap" },
                        React.createElement(
                            "svg",
                            {
                                className: "premium-accordion__icon premium-accordion__closed",
                                role: "img",
                                focusable: "false",
                                xmlns: "http://www.w3.org/2000/svg",
                                width: arrowSize,
                                height: arrowSize,
                                viewBox: "0 0 20 20",
                                style: {
                                    fill: arrowColor,
                                    backgroundColor: arrowBack,
                                    padding: arrowPadding + "px",
                                    borderRadius: arrowRadius + "px"
                                }
                            },
                            React.createElement("polygon", { points: "16.7,3.3 10,10 3.3,3.4 0,6.7 10,16.7 10,16.6 20,6.7 " })
                        )
                    )
                ),
                React.createElement(
                    "div",
                    {
                        className: "premium-accordion__desc_wrap premium-accordion__desc_close",
                        style: {
                            textAlign: descAlign,
                            backgroundColor: descBack,
                            border: descBorder,
                            borderWidth: descBorderWidth + "px",
                            borderRadius: descBorderRadius + "px",
                            borderColor: descBorderColor,
                            paddingTop: descPaddingT,
                            paddingRight: descPaddingR,
                            paddingBottom: descPaddingB,
                            paddingLeft: descPaddingL
                        }
                    },
                    "text" === contentType && React.createElement(RichText.Content, {
                        tagName: "p",
                        className: "premium-accordion__desc",
                        value: item.descText,
                        style: {
                            color: descColor,
                            fontSize: descSize + "px",
                            letterSpacing: descLetter + "px",
                            textTransform: descUpper ? "uppercase" : "none",
                            textShadow: textShadowHorizontal + "px " + textShadowVertical + "px " + textShadowBlur + "px " + textShadowColor,
                            fontStyle: descStyle,
                            fontWeight: descWeight,
                            lineHeight: descLine + "px"
                        }
                    }),
                    "block" === contentType && React.createElement(InnerBlocks.Content, null)
                )
            );
        });
        return React.createElement(
            "div",
            { id: accordionId, className: "" + className },
            accordionItems
        );
    }
}, {
    attributes: attributes,
    save: function save(props) {
        var _props$attributes3 = props.attributes,
            accordionId = _props$attributes3.accordionId,
            repeaterItems = _props$attributes3.repeaterItems,
            direction = _props$attributes3.direction,
            titleTag = _props$attributes3.titleTag,
            titleSize = _props$attributes3.titleSize,
            titleLine = _props$attributes3.titleLine,
            titleLetter = _props$attributes3.titleLetter,
            titleStyle = _props$attributes3.titleStyle,
            titleUpper = _props$attributes3.titleUpper,
            titleWeight = _props$attributes3.titleWeight,
            titleColor = _props$attributes3.titleColor,
            titleBorder = _props$attributes3.titleBorder,
            titleBorderColor = _props$attributes3.titleBorderColor,
            titleBorderWidth = _props$attributes3.titleBorderWidth,
            titleBorderRadius = _props$attributes3.titleBorderRadius,
            titleBack = _props$attributes3.titleBack,
            titleShadowBlur = _props$attributes3.titleShadowBlur,
            titleShadowColor = _props$attributes3.titleShadowColor,
            titleShadowHorizontal = _props$attributes3.titleShadowHorizontal,
            titleShadowVertical = _props$attributes3.titleShadowVertical,
            titlePaddingT = _props$attributes3.titlePaddingT,
            titlePaddingR = _props$attributes3.titlePaddingR,
            titlePaddingB = _props$attributes3.titlePaddingB,
            titlePaddingL = _props$attributes3.titlePaddingL,
            arrowColor = _props$attributes3.arrowColor,
            arrowBack = _props$attributes3.arrowBack,
            arrowPos = _props$attributes3.arrowPos,
            arrowPadding = _props$attributes3.arrowPadding,
            arrowSize = _props$attributes3.arrowSize,
            arrowRadius = _props$attributes3.arrowRadius,
            contentType = _props$attributes3.contentType,
            descAlign = _props$attributes3.descAlign,
            descSize = _props$attributes3.descSize,
            descLine = _props$attributes3.descLine,
            descLetter = _props$attributes3.descLetter,
            descStyle = _props$attributes3.descStyle,
            descUpper = _props$attributes3.descUpper,
            descWeight = _props$attributes3.descWeight,
            descColor = _props$attributes3.descColor,
            descBack = _props$attributes3.descBack,
            descBorder = _props$attributes3.descBorder,
            descBorderColor = _props$attributes3.descBorderColor,
            descBorderRadius = _props$attributes3.descBorderRadius,
            descBorderWidth = _props$attributes3.descBorderWidth,
            descPaddingT = _props$attributes3.descPaddingT,
            descPaddingR = _props$attributes3.descPaddingR,
            descPaddingB = _props$attributes3.descPaddingB,
            descPaddingL = _props$attributes3.descPaddingL;


        var accordionItems = repeaterItems.map(function (item, index) {
            return React.createElement(
                "div",
                {
                    id: className + "__layer" + index,
                    className: className + "__content_wrap"
                },
                React.createElement(
                    "div",
                    {
                        className: className + "__title_wrap " + className + "__" + direction + " " + className + "__" + arrowPos,
                        style: {
                            backgroundColor: titleBack,
                            border: titleBorder,
                            borderWidth: titleBorderWidth + "px",
                            borderRadius: titleBorderRadius + "px",
                            borderColor: titleBorderColor,
                            paddingTop: titlePaddingT,
                            paddingRight: titlePaddingR,
                            paddingBottom: titlePaddingB,
                            paddingLeft: titlePaddingL
                        }
                    },
                    React.createElement(
                        "div",
                        { className: className + "__title" },
                        React.createElement(RichText.Content, {
                            tagName: titleTag.toLowerCase(),
                            className: className + "__title_text",
                            value: item.titleText,
                            style: {
                                color: titleColor,
                                fontSize: titleSize + "px",
                                letterSpacing: titleLetter + "px",
                                textTransform: titleUpper ? "uppercase" : "none",
                                fontStyle: titleStyle,
                                fontWeight: titleWeight,
                                textShadow: titleShadowHorizontal + "px " + titleShadowVertical + "px " + titleShadowBlur + "px " + titleShadowColor,
                                lineHeight: titleLine + "px"
                            }
                        })
                    ),
                    React.createElement(
                        "div",
                        { className: className + "__icon_wrap" },
                        React.createElement(
                            "svg",
                            {
                                className: className + "__icon premium-accordion__closed",
                                role: "img",
                                focusable: "false",
                                xmlns: "http://www.w3.org/2000/svg",
                                width: arrowSize,
                                height: arrowSize,
                                viewBox: "0 0 20 20",
                                style: {
                                    fill: arrowColor,
                                    backgroundColor: arrowBack,
                                    padding: arrowPadding + "px",
                                    borderRadius: arrowRadius + "px"
                                }
                            },
                            React.createElement("polygon", { points: "16.7,3.3 10,10 3.3,3.4 0,6.7 10,16.7 10,16.6 20,6.7 " })
                        )
                    )
                ),
                React.createElement(
                    "div",
                    {
                        className: className + "__desc_wrap premium-accordion__desc_close",
                        style: {
                            textAlign: descAlign,
                            backgroundColor: descBack,
                            border: descBorder,
                            borderWidth: descBorderWidth + "px",
                            borderRadius: descBorderRadius + "px",
                            borderColor: descBorderColor,
                            paddingTop: descPaddingT,
                            paddingRight: descPaddingR,
                            paddingBottom: descPaddingB,
                            paddingLeft: descPaddingL
                        }
                    },
                    "text" === contentType && React.createElement(RichText.Content, {
                        tagName: "p",
                        className: className + "__desc",
                        value: item.descText,
                        style: {
                            color: descColor,
                            fontSize: descSize + "px",
                            letterSpacing: descLetter + "px",
                            textTransform: descUpper ? "uppercase" : "none",
                            fontStyle: descStyle,
                            fontWeight: descWeight,
                            lineHeight: descLine + "px"
                        }
                    }),
                    "block" === contentType && React.createElement(InnerBlocks.Content, null)
                )
            );
        });
        return React.createElement(
            "div",
            { id: accordionId, className: "" + className },
            accordionItems
        );
    }
}];
exports.default = deprecated;

/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _settings = __webpack_require__(1);

var _icons = __webpack_require__(4);

var _icons2 = _interopRequireDefault(_icons);

var _edit = __webpack_require__(226);

var _edit2 = _interopRequireDefault(_edit);

var _save = __webpack_require__(227);

var _save2 = _interopRequireDefault(_save);

var _deprecated = __webpack_require__(228);

var _deprecated2 = _interopRequireDefault(_deprecated);

var _attributes = __webpack_require__(229);

var _attributes2 = _interopRequireDefault(_attributes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __ = wp.i18n.__;
var registerBlockType = wp.blocks.registerBlockType;

registerBlockType("premium/banner", {
    title: __("Banner"),
    icon: React.createElement(_icons2.default, { icon: "banner" }),
    category: "premium-blocks",
    attributes: _attributes2.default,
    supports: {
        inserter: _settings.banner
    },
    example: {},
    edit: _edit2.default,
    save: _save2.default,
    deprecated: _deprecated2.default
});

/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.edit = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _classnames = __webpack_require__(0);

var _classnames2 = _interopRequireDefault(_classnames);

var _premiumBorder = __webpack_require__(6);

var _premiumBorder2 = _interopRequireDefault(_premiumBorder);

var _premiumTypo = __webpack_require__(7);

var _premiumTypo2 = _interopRequireDefault(_premiumTypo);

var _premiumFilters = __webpack_require__(30);

var _premiumFilters2 = _interopRequireDefault(_premiumFilters);

var _PremiumResponsivePadding = __webpack_require__(16);

var _PremiumResponsivePadding2 = _interopRequireDefault(_PremiumResponsivePadding);

var _premiumMediaUpload = __webpack_require__(12);

var _premiumMediaUpload2 = _interopRequireDefault(_premiumMediaUpload);

var _premiumResponsiveTabs = __webpack_require__(8);

var _premiumResponsiveTabs2 = _interopRequireDefault(_premiumResponsiveTabs);

var _singleRangeControl = __webpack_require__(3);

var _singleRangeControl2 = _interopRequireDefault(_singleRangeControl);

var _ColorComponent = __webpack_require__(2);

var _ColorComponent2 = _interopRequireDefault(_ColorComponent);

var _radioControl = __webpack_require__(10);

var _radioControl2 = _interopRequireDefault(_radioControl);

var _PremiumShadow = __webpack_require__(5);

var _PremiumShadow2 = _interopRequireDefault(_PremiumShadow);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var withSelect = wp.data.withSelect;
var __ = wp.i18n.__;
var Component = wp.element.Component;
var _wp$components = wp.components,
    IconButton = _wp$components.IconButton,
    Toolbar = _wp$components.Toolbar,
    PanelBody = _wp$components.PanelBody,
    SelectControl = _wp$components.SelectControl,
    TextControl = _wp$components.TextControl,
    ToggleControl = _wp$components.ToggleControl;
var _wp$blockEditor = wp.blockEditor,
    BlockControls = _wp$blockEditor.BlockControls,
    InspectorControls = _wp$blockEditor.InspectorControls,
    AlignmentToolbar = _wp$blockEditor.AlignmentToolbar,
    RichText = _wp$blockEditor.RichText,
    MediaPlaceholder = _wp$blockEditor.MediaPlaceholder;

var edit = exports.edit = function (_Component) {
    _inherits(edit, _Component);

    function edit() {
        _classCallCheck(this, edit);

        var _this = _possibleConstructorReturn(this, (edit.__proto__ || Object.getPrototypeOf(edit)).apply(this, arguments));

        _this.getPreviewSize = _this.getPreviewSize.bind(_this);
        return _this;
    }

    _createClass(edit, [{
        key: "getPreviewSize",
        value: function getPreviewSize(device, desktopSize, tabletSize, mobileSize) {
            if (device === 'Mobile') {
                if (undefined !== mobileSize && '' !== mobileSize) {
                    return mobileSize;
                } else if (undefined !== tabletSize && '' !== tabletSize) {
                    return tabletSize;
                }
            } else if (device === 'Tablet') {
                if (undefined !== tabletSize && '' !== tabletSize) {
                    return tabletSize;
                }
            }
            return desktopSize;
        }
    }, {
        key: "componentDidMount",
        value: function componentDidMount() {
            this.props.setAttributes({ block_id: this.props.clientId });
            this.props.setAttributes({ classMigrate: true });
        }
    }, {
        key: "render",
        value: function render() {
            var _props = this.props,
                isSelected = _props.isSelected,
                setAttributes = _props.setAttributes,
                className = _props.className,
                blockID = _props.clientId;
            var _props$attributes = this.props.attributes,
                block_id = _props$attributes.block_id,
                borderBanner = _props$attributes.borderBanner,
                imageID = _props$attributes.imageID,
                imageURL = _props$attributes.imageURL,
                titleStyles = _props$attributes.titleStyles,
                descStyles = _props$attributes.descStyles,
                containerStyles = _props$attributes.containerStyles,
                title = _props$attributes.title,
                titleTag = _props$attributes.titleTag,
                desc = _props$attributes.desc,
                contentAlign = _props$attributes.contentAlign,
                effect = _props$attributes.effect,
                hoverEffect = _props$attributes.hoverEffect,
                height = _props$attributes.height,
                minHeight = _props$attributes.minHeight,
                verAlign = _props$attributes.verAlign,
                hovered = _props$attributes.hovered,
                responsive = _props$attributes.responsive,
                background = _props$attributes.background,
                opacity = _props$attributes.opacity,
                urlCheck = _props$attributes.urlCheck,
                target = _props$attributes.target,
                url = _props$attributes.url,
                sepColor = _props$attributes.sepColor,
                blur = _props$attributes.blur,
                bright = _props$attributes.bright,
                contrast = _props$attributes.contrast,
                saturation = _props$attributes.saturation,
                hue = _props$attributes.hue,
                hideDesktop = _props$attributes.hideDesktop,
                hideTablet = _props$attributes.hideTablet,
                hideMobile = _props$attributes.hideMobile,
                borderWidth = _props$attributes.borderWidth,
                borderTop = _props$attributes.borderTop,
                borderRight = _props$attributes.borderRight,
                borderBottom = _props$attributes.borderBottom,
                borderLeft = _props$attributes.borderLeft,
                paddingT = _props$attributes.paddingT,
                paddingR = _props$attributes.paddingR,
                paddingB = _props$attributes.paddingB,
                paddingL = _props$attributes.paddingL,
                paddingTTablet = _props$attributes.paddingTTablet,
                paddingRTablet = _props$attributes.paddingRTablet,
                paddingBTablet = _props$attributes.paddingBTablet,
                paddingLTablet = _props$attributes.paddingLTablet,
                paddingTMobile = _props$attributes.paddingTMobile,
                paddingRMobile = _props$attributes.paddingRMobile,
                paddingBMobile = _props$attributes.paddingBMobile,
                paddingLMobile = _props$attributes.paddingLMobile,
                titleSize = _props$attributes.titleSize;


            var ALIGNS = [{
                value: "flex-start",
                label: __("Top", 'premium-blocks-for-gutenberg')
            }, {
                value: "center",
                label: __("Middle", 'premium-blocks-for-gutenberg')
            }, {
                value: "flex-end",
                label: __("Bottom", 'premium-blocks-for-gutenberg')
            }, {
                value: "inherit",
                label: __("Full", 'premium-blocks-for-gutenberg')
            }];

            var EFFECTS = [{
                value: "effect1",
                label: __("Style 1", 'premium-blocks-for-gutenberg')
            }, {
                value: "effect2",
                label: __("Style 2", 'premium-blocks-for-gutenberg')
            }, {
                value: "effect3",
                label: __("Style 3", 'premium-blocks-for-gutenberg')
            }, {
                value: "effect4",
                label: __("Style 4", 'premium-blocks-for-gutenberg')
            }, {
                value: "effect5",
                label: __("Style 5", 'premium-blocks-for-gutenberg')
            }, {
                value: "effect6",
                label: __("Style 6", 'premium-blocks-for-gutenberg')
            }];

            var HOVER = [{
                value: "none",
                label: __("None", 'premium-blocks-for-gutenberg')
            }, {
                value: "zoomin",
                label: __("Zoom In", 'premium-blocks-for-gutenberg')
            }, {
                value: "zoomout",
                label: __("Zoom Out", 'premium-blocks-for-gutenberg')
            }, {
                value: "scale",
                label: __("Scale", 'premium-blocks-for-gutenberg')
            }, {
                value: "gray",
                label: __("Gray Scale", 'premium-blocks-for-gutenberg')
            }, {
                value: "blur",
                label: __("Blur", 'premium-blocks-for-gutenberg')
            }, {
                value: "bright",
                label: __("Bright", 'premium-blocks-for-gutenberg')
            }, {
                value: "sepia",
                label: __("Sepia", 'premium-blocks-for-gutenberg')
            }];

            var HEIGHT = [{
                value: "default",
                label: __("Default", 'premium-blocks-for-gutenberg')
            }, {
                value: "custom",
                label: __("Custom", 'premium-blocks-for-gutenberg')
            }];

            var mainClasses = (0, _classnames2.default)(className, "premium-banner");
            var titleFontSize = this.getPreviewSize(this.props.deviceType, titleStyles[0].titleSize, titleStyles[0].titleSizeTablet, titleStyles[0].titleSizeMobile);
            var descFontSize = this.getPreviewSize(this.props.deviceType, descStyles[0].descSize, descStyles[0].descSizeTablet, descStyles[0].descSizeMobile);

            var saveStyles = function saveStyles(value) {
                var newUpdate = titleStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });

                setAttributes({ titleStyles: newUpdate });
            };

            var descriptionStyles = function descriptionStyles(value) {
                var newUpdate = descStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({ descStyles: newUpdate });
            };

            var containerStyle = function containerStyle(value) {
                var newUpdate = containerStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({ containerStyles: newUpdate });
            };

            var containerPaddingTop = this.getPreviewSize(this.props.deviceType, paddingT, paddingTTablet, paddingTMobile);
            var containerPaddingRight = this.getPreviewSize(this.props.deviceType, paddingR, paddingRTablet, paddingRMobile);
            var containerPaddingBottom = this.getPreviewSize(this.props.deviceType, paddingB, paddingBTablet, paddingBMobile);
            var containerPaddingLeft = this.getPreviewSize(this.props.deviceType, paddingL, paddingLTablet, paddingLMobile);
            return [isSelected && React.createElement(
                BlockControls,
                { key: "controls" },
                React.createElement(
                    Toolbar,
                    null,
                    React.createElement(IconButton, {
                        label: __("Refresh this button when it conflict with other buttons styles", 'premium-blocks-for-gutenberg'),
                        icon: "update",
                        className: "components-toolbar__control",
                        onClick: function onClick() {
                            return setAttributes({ block_id: blockID });
                        }
                    })
                ),
                React.createElement(AlignmentToolbar, {
                    value: contentAlign,
                    onChange: function onChange(newAlign) {
                        return setAttributes({ contentAlign: newAlign });
                    }
                })
            ), isSelected && imageURL && React.createElement(
                InspectorControls,
                { key: "inspector" },
                React.createElement(
                    PanelBody,
                    {
                        title: __("General Settings", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: true
                    },
                    React.createElement(
                        "button",
                        { className: "lottie-remove", onClick: function onClick(e) {
                                e.preventDefault();
                                setAttributes(_defineProperty({
                                    imageURL: ""
                                }, "imageURL", ""));
                            } },
                        __('Remove Image', 'premium-blocks-for-gutenberg')
                    ),
                    React.createElement(_premiumFilters2.default, {
                        blur: blur,
                        bright: bright,
                        contrast: contrast,
                        saturation: saturation,
                        hue: hue,
                        onChangeBlur: function onChangeBlur(value) {
                            return setAttributes({ blur: value });
                        },
                        onChangeBright: function onChangeBright(value) {
                            return setAttributes({ bright: value });
                        },
                        onChangeContrast: function onChangeContrast(value) {
                            return setAttributes({ contrast: value });
                        },
                        onChangeSat: function onChangeSat(value) {
                            return setAttributes({ saturation: value });
                        },
                        onChangeHue: function onChangeHue(value) {
                            return setAttributes({ hue: value });
                        }
                    }),
                    React.createElement(SelectControl, {
                        label: __("Banner Style", 'premium-blocks-for-gutenberg'),
                        value: effect,
                        onChange: function onChange(newEffect) {
                            return setAttributes({ effect: newEffect });
                        },
                        options: EFFECTS
                    }),
                    React.createElement(SelectControl, {
                        label: __("Image Hover Effect", 'premium-blocks-for-gutenberg'),
                        options: HOVER,
                        value: hoverEffect,
                        onChange: function onChange(newEffect) {
                            return setAttributes({ hoverEffect: newEffect });
                        }
                    }),
                    React.createElement(ToggleControl, {
                        label: __("Always Hovered", 'premium-blocks-for-gutenberg'),
                        checked: hovered,
                        onChange: function onChange(check) {
                            return setAttributes({ hovered: check });
                        }
                    }),
                    React.createElement(SelectControl, {
                        label: __("Height", 'premium-blocks-for-gutenberg'),
                        options: HEIGHT,
                        value: height,
                        onChange: function onChange(newHeight) {
                            return setAttributes({ height: newHeight });
                        }
                    }),
                    "custom" === height && React.createElement(_singleRangeControl2.default, {
                        label: __("Min Height (PX)", 'premium-blocks-for-gutenberg'),
                        value: minHeight,
                        min: "10",
                        max: "800",
                        onChange: function onChange(newSize) {
                            return setAttributes({ minHeight: newSize });
                        },
                        showUnit: false,
                        defaultValue: 100
                    }),
                    "custom" === height && React.createElement(SelectControl, {
                        label: __("Vertical Align", 'premium-blocks-for-gutenberg'),
                        options: ALIGNS,
                        value: verAlign,
                        onChange: function onChange(newValue) {
                            return setAttributes({ verAlign: newValue });
                        }
                    }),
                    React.createElement(_ColorComponent2.default, {
                        label: __("Overlay", 'premium-blocks-for-gutenberg'),
                        colorValue: background,
                        colorDefault: '',
                        onColorChange: function onColorChange(newValue) {
                            return setAttributes({ background: newValue === undefined ? "transparent" : newValue });
                        }
                    }),
                    React.createElement(_singleRangeControl2.default, {
                        label: __("Overlay Opacity", 'premium-blocks-for-gutenberg'),
                        value: opacity,
                        min: "1",
                        max: "100",
                        onChange: function onChange(newOpacity) {
                            return setAttributes({ opacity: newOpacity === undefined ? 50 : newOpacity });
                        },
                        showUnit: false,
                        defaultValue: ''
                    }),
                    React.createElement(ToggleControl, {
                        label: __("Link", 'premium-blocks-for-gutenberg'),
                        checked: urlCheck,
                        onChange: function onChange(newCheck) {
                            return setAttributes({ urlCheck: newCheck });
                        }
                    }),
                    urlCheck && React.createElement(TextControl, {
                        value: url,
                        onChange: function onChange(newURL) {
                            return setAttributes({ url: newURL });
                        }
                    }),
                    urlCheck && React.createElement(ToggleControl, {
                        label: __("Open link in new tab", 'premium-blocks-for-gutenberg'),
                        checked: target,
                        onChange: function onChange(newValue) {
                            return setAttributes({ target: newValue });
                        }
                    }),
                    React.createElement(ToggleControl, {
                        label: __("Hide Description on Mobiles", 'premium-blocks-for-gutenberg'),
                        checked: responsive,
                        onChange: function onChange(newValue) {
                            return setAttributes({ responsive: newValue });
                        }
                    })
                ),
                React.createElement(
                    PanelBody,
                    {
                        title: __("Title Settings", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(_radioControl2.default, {
                        choices: ['H1', 'H2', 'H3', 'H4', 'H5', 'H6'],
                        value: titleTag,
                        onChange: function onChange(newValue) {
                            return setAttributes({ titleTag: newValue });
                        },
                        label: __("HTML Tag", 'premium-blocks-for-gutenberg')
                    }),
                    React.createElement(_premiumTypo2.default, {
                        components: ["responsiveSize", "weight", "line"],
                        setAttributes: saveStyles,
                        fontSizeType: {
                            value: titleStyles[0].titleSizeUnit,
                            label: __("titleSizeUnit", 'premium-blocks-for-gutenberg')
                        },
                        fontSize: titleSize,
                        onChange: function onChange(value) {
                            return setAttributes({ titleSize: value });
                        },
                        weight: titleStyles[0].titleWeight,
                        line: titleStyles[0].titleLine,
                        onChangeWeight: function onChangeWeight(newWeight) {
                            return saveStyles({ titleWeight: newWeight === undefined ? 500 : newWeight });
                        },
                        onChangeLine: function onChangeLine(newValue) {
                            return saveStyles({ titleLine: newValue === undefined ? 10 : newValue });
                        }
                    }),
                    React.createElement(_ColorComponent2.default, {
                        label: __("Text Color", 'premium-blocks-for-gutenberg'),
                        colorValue: titleStyles[0].titleColor,
                        colorDefault: '',
                        onColorChange: function onColorChange(newValue) {
                            return saveStyles({ titleColor: newValue === undefined ? "transparent" : newValue });
                        }
                    }),
                    "effect3" === effect && React.createElement(_ColorComponent2.default, {
                        label: __("Separator Color", 'premium-blocks-for-gutenberg'),
                        colorValue: sepColor,
                        colorDefault: '',
                        onColorChange: function onColorChange(newValue) {
                            return setAttributes({ sepColor: newValue === undefined ? "transparent" : newValue });
                        }
                    }),
                    "effect2" === effect && React.createElement(_ColorComponent2.default, {
                        label: __("Background Color", 'premium-blocks-for-gutenberg'),
                        colorValue: titleStyles[0].titleBack,
                        colorDefault: '',
                        onColorChange: function onColorChange(newValue) {
                            return saveStyles({ titleBack: newValue === undefined ? "transparent" : newValue });
                        }
                    }),
                    React.createElement(_PremiumShadow2.default, {
                        label: __("Text Shadow", 'premium-blocks-for-gutenberg'),
                        color: titleStyles[0].shadowColor,
                        blur: titleStyles[0].shadowBlur,
                        horizontal: titleStyles[0].shadowHorizontal,
                        vertical: titleStyles[0].shadowVertical,
                        onChangeColor: function onChangeColor(newColor) {
                            return saveStyles({ shadowColor: newColor === undefined ? "transparent" : newColor });
                        },
                        onChangeBlur: function onChangeBlur(newBlur) {
                            return saveStyles({ shadowBlur: newBlur === undefined ? 0 : newBlur });
                        },
                        onChangehHorizontal: function onChangehHorizontal(newValue) {
                            return saveStyles({ shadowHorizontal: newValue === undefined ? 0 : newValue });
                        },
                        onChangeVertical: function onChangeVertical(newValue) {
                            return saveStyles({ shadowVertical: newValue === undefined ? 0 : newValue });
                        }
                    })
                ),
                React.createElement(
                    PanelBody,
                    {
                        title: __("Description Settings", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(_premiumTypo2.default, {
                        components: ["responsiveSize", "weight", "line"],
                        setAttributes: descriptionStyles,
                        fontSizeType: {
                            value: descStyles[0].descSizeUnit,
                            label: __("descSizeUnit", 'premium-blocks-for-gutenberg')
                        },
                        fontSize: descStyles[0].descSize,
                        fontSizeMobile: descStyles[0].descSizeMobile,
                        fontSizeTablet: descStyles[0].descSizeTablet,
                        onChangeSize: function onChangeSize(value) {
                            descriptionStyles({ descSize: value });
                        },
                        onChangeTabletSize: function onChangeTabletSize(value) {
                            return descriptionStyles({ descSizeTablet: value });
                        },
                        onChangeMobileSize: function onChangeMobileSize(value) {
                            return descriptionStyles({ descSizeMobile: value });
                        },
                        weight: descStyles[0].descWeight,
                        line: descStyles[0].descLine,
                        onChangeWeight: function onChangeWeight(newWeight) {
                            return descriptionStyles({ descWeight: newWeight === undefined ? 500 : newWeight });
                        },
                        onChangeLine: function onChangeLine(newValue) {
                            return descriptionStyles({ descLine: newValue === undefined ? 10 : newValue });
                        }
                    }),
                    React.createElement(_ColorComponent2.default, {
                        label: __("Text Color", 'premium-blocks-for-gutenberg'),
                        colorValue: descStyles[0].descColor,
                        colorDefault: '',
                        onColorChange: function onColorChange(newValue) {
                            return descriptionStyles({ descColor: newValue === undefined ? "transparent" : newValue });
                        }
                    }),
                    React.createElement(_PremiumShadow2.default, {
                        label: __("Text Shadow", 'premium-blocks-for-gutenberg'),
                        color: descStyles[0].descShadowColor,
                        blur: descStyles[0].descShadowBlur,
                        horizontal: descStyles[0].descShadowHorizontal,
                        vertical: descStyles[0].descShadowVertical,
                        onChangeColor: function onChangeColor(newColor) {
                            return descriptionStyles({ descShadowColor: newColor === undefined ? "transparent" : newColor });
                        },
                        onChangeBlur: function onChangeBlur(newBlur) {
                            return descriptionStyles({ descShadowBlur: newBlur === undefined ? 0 : newBlur });
                        },
                        onChangehHorizontal: function onChangehHorizontal(newValue) {
                            return descriptionStyles({ descShadowHorizontal: newValue === undefined ? 0 : newValue });
                        },
                        onChangeVertical: function onChangeVertical(newValue) {
                            return descriptionStyles({ descShadowVertical: newValue === undefined ? 0 : newValue });
                        }
                    })
                ),
                React.createElement(
                    PanelBody,
                    {
                        title: __("Container Style", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(_premiumBorder2.default, {
                        borderType: containerStyles[0].borderType,
                        borderWidth: borderWidth,
                        top: borderTop,
                        right: borderRight,
                        bottom: borderBottom,
                        left: borderLeft,
                        borderColor: containerStyles[0].borderColor,
                        borderRadius: containerStyles[0].borderRadius,
                        onChangeType: function onChangeType(newType) {
                            return containerStyle({ borderType: newType });
                        },
                        onChangeWidth: function onChangeWidth(_ref) {
                            var top = _ref.top,
                                right = _ref.right,
                                bottom = _ref.bottom,
                                left = _ref.left;
                            return setAttributes({
                                borderBanner: true,
                                borderTop: top,
                                borderRight: right,
                                borderBottom: bottom,
                                borderLeft: left
                            });
                        },
                        onChangeColor: function onChangeColor(colorValue) {
                            return containerStyle({ borderColor: colorValue === undefined ? "transparent" : colorValue });
                        },
                        onChangeRadius: function onChangeRadius(newRadius) {
                            return containerStyle({ borderRadius: newRadius === undefined ? 0 : newRadius });
                        }
                    }),
                    React.createElement(_PremiumShadow2.default, {
                        label: __("Box Shadow", "Premium-blocks-for-gutenberg"),
                        boxShadow: true,
                        color: containerStyles[0].containerShadowColor,
                        blur: containerStyles[0].containerShadowBlur,
                        horizontal: containerStyles[0].containerShadowHorizontal,
                        vertical: containerStyles[0].containerShadowVertical,
                        position: containerStyles[0].containerShadowPosition,
                        onChangeColor: function onChangeColor(newColor) {
                            return containerStyle({ containerShadowColor: newColor });
                        },
                        onChangeBlur: function onChangeBlur(newBlur) {
                            return containerStyle({ containerShadowBlur: newBlur });
                        },
                        onChangehHorizontal: function onChangehHorizontal(newValue) {
                            return containerStyle({ containerShadowHorizontal: newValue });
                        },
                        onChangeVertical: function onChangeVertical(newValue) {
                            return containerStyle({ containerShadowVertical: newValue });
                        },
                        onChangePosition: function onChangePosition(newValue) {
                            return containerStyle({ containerShadowPosition: newValue });
                        }
                    }),
                    React.createElement(_PremiumResponsivePadding2.default, {
                        paddingTop: paddingT,
                        paddingRight: paddingR,
                        paddingBottom: paddingB,
                        paddingLeft: paddingL,
                        paddingTopTablet: paddingTTablet,
                        paddingRightTablet: paddingRTablet,
                        paddingBottomTablet: paddingBTablet,
                        paddingLeftTablet: paddingLTablet,
                        paddingTopMobile: paddingTMobile,
                        paddingRightMobile: paddingRMobile,
                        paddingBottomMobile: paddingBMobile,
                        paddingLeftMobile: paddingLMobile,
                        selectedUnit: containerStyles[0].paddingU,
                        showUnits: true,
                        onChangePadSizeUnit: function onChangePadSizeUnit(newvalue) {
                            return containerStyle({ paddingU: newvalue });
                        },
                        onChangePaddingTop: function onChangePaddingTop(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ paddingT: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ paddingTTablet: newValue });
                            } else {
                                setAttributes({ paddingTMobile: newValue });
                            }
                        },
                        onChangePaddingRight: function onChangePaddingRight(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ paddingR: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ paddingRTablet: newValue });
                            } else {
                                setAttributes({ paddingRMobile: newValue });
                            }
                        },
                        onChangePaddingBottom: function onChangePaddingBottom(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ paddingB: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ paddingBTablet: newValue });
                            } else {
                                setAttributes({ paddingBMobile: newValue });
                            }
                        },
                        onChangePaddingLeft: function onChangePaddingLeft(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ paddingL: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ paddingLTablet: newValue });
                            } else {
                                setAttributes({ paddingLMobile: newValue });
                            }
                        }
                    })
                ),
                React.createElement(_premiumResponsiveTabs2.default, {
                    Desktop: hideDesktop,
                    Tablet: hideTablet,
                    Mobile: hideMobile,
                    onChangeDesktop: function onChangeDesktop(value) {
                        return setAttributes({ hideDesktop: value ? " premium-desktop-hidden" : "" });
                    },
                    onChangeTablet: function onChangeTablet(value) {
                        return setAttributes({ hideTablet: value ? " premium-tablet-hidden" : "" });
                    },
                    onChangeMobile: function onChangeMobile(value) {
                        return setAttributes({ hideMobile: value ? " premium-mobile-hidden" : "" });
                    }
                })
            ), !imageURL && React.createElement(MediaPlaceholder, {
                labels: {
                    title: __('Premium Banner ', 'premium-blocks-for-gutenberg'),
                    instructions: __('Upload an image file, pick one from your media library, or add one with a URL.', 'premium-blocks-for-gutenberg')
                },
                accept: ['image'],
                allowedTypes: ['image'],
                value: imageURL,
                onSelectURL: function onSelectURL(value) {
                    return setAttributes({ imageURL: value });
                },
                onSelect: function onSelect(media) {
                    setAttributes({
                        imageID: media.id,
                        imageURL: media.url
                    });
                }
            }), imageURL && React.createElement(
                "div",
                {
                    id: "premium-banner-" + block_id,
                    className: mainClasses + " premium-banner__responsive_" + responsive + " premium-banner-" + block_id + " " + hideDesktop + " " + hideTablet + " " + hideMobile,
                    style: {
                        paddingTop: containerPaddingTop + containerStyles[0].paddingU,
                        paddingRight: containerPaddingRight + containerStyles[0].paddingU,
                        paddingBottom: containerPaddingBottom + containerStyles[0].paddingU,
                        paddingLeft: containerPaddingLeft + containerStyles[0].paddingU
                    }
                },
                React.createElement("style", {
                    dangerouslySetInnerHTML: {
                        __html: ["#premium-banner-" + block_id + " .premium-banner__effect3 .premium-banner__title_wrap::after{", "background: " + sepColor, "}", "#premium-banner-" + block_id + " .premium-banner__inner {", "background: " + background, "}", "#premium-banner-" + block_id + " .premium-banner__img.premium-banner__active {", "opacity: " + (background ? 1 - opacity / 100 : 1) + " ", "}"].join("\n")
                    }
                }),
                React.createElement(
                    "div",
                    {
                        className: "premium-banner__inner premium-banner__min premium-banner__" + effect + " premium-banner__" + hoverEffect + " hover_" + hovered,
                        style: {
                            boxShadow: containerStyles[0].containerShadowHorizontal + "px " + containerStyles[0].containerShadowVertical + "px " + containerStyles[0].containerShadowBlur + "px " + containerStyles[0].containerShadowColor + " " + containerStyles[0].containerShadowPosition,
                            borderStyle: containerStyles[0].borderType,
                            borderWidth: borderBanner ? borderTop + "px " + borderRight + "px " + borderBottom + "px " + borderLeft + "px" : borderWidth + "px",
                            borderRadius: containerStyles[0].borderRadius + "px",
                            borderColor: containerStyles[0].borderColor
                        }
                    },
                    React.createElement(
                        "div",
                        {
                            className: "premium-banner__img_wrap premium-banner__" + height,
                            style: {
                                minHeight: minHeight,
                                alignItems: verAlign
                            }
                        },
                        React.createElement("img", {
                            className: "premium-banner__img",
                            alt: "Banner Image",
                            src: imageURL,
                            style: {
                                filter: "brightness( " + bright + "% ) contrast( " + contrast + "% ) saturate( " + saturation + "% ) blur( " + blur + "px ) hue-rotate( " + hue + "deg )"
                            }
                        })
                    ),
                    React.createElement(
                        "div",
                        {
                            className: "premium-banner__content",
                            style: {
                                background: "effect2" === effect ? titleStyles[0].titleBack : "transparent"
                            }
                        },
                        React.createElement(
                            "div",
                            {
                                className: "premium-banner__title_wrap",
                                style: {
                                    textAlign: contentAlign
                                }
                            },
                            React.createElement(RichText, {
                                tagName: titleTag.toLowerCase(),
                                className: "premium-banner__title",
                                value: title,
                                isSelected: false,
                                onChange: function onChange(newText) {
                                    return setAttributes({ title: newText });
                                },
                                style: {
                                    fontSize: "" + titleFontSize + titleStyles[0].titleSizeUnit,
                                    color: titleStyles[0].titleColor,
                                    fontWeight: titleStyles[0].titleWeight,
                                    lineHeight: titleStyles[0].titleLine + "px",
                                    textShadow: titleStyles[0].shadowHorizontal + "px " + titleStyles[0].shadowVertical + "px " + titleStyles[0].shadowBlur + "px " + titleStyles[0].shadowColor
                                }
                            })
                        ),
                        React.createElement(
                            "div",
                            {
                                className: "premium-banner__desc_wrap",
                                style: {
                                    textAlign: contentAlign
                                }
                            },
                            React.createElement(RichText, {
                                tagName: "p",
                                className: "premium-banner__desc",
                                value: desc,
                                isSelected: false,
                                onChange: function onChange(newText) {
                                    return setAttributes({ desc: newText });
                                },
                                style: {
                                    fontSize: "" + descFontSize + descStyles[0].descSizeUnit,
                                    color: descStyles[0].descColor,
                                    fontWeight: descStyles[0].descWeight,
                                    lineHeight: descStyles[0].descLine + "px",
                                    textShadow: descStyles[0].descShadowHorizontal + "px " + descStyles[0].descShadowVertical + "px " + descStyles[0].descShadowBlur + "px " + descStyles[0].descShadowColor
                                }
                            })
                        )
                    )
                )
            )];
        }
    }]);

    return edit;
}(Component);

;
exports.default = withSelect(function (select, props) {
    var _select = select('core/edit-post'),
        _select$__experimenta = _select.__experimentalGetPreviewDeviceType,
        __experimentalGetPreviewDeviceType = _select$__experimenta === undefined ? null : _select$__experimenta;

    var deviceType = __experimentalGetPreviewDeviceType ? __experimentalGetPreviewDeviceType() : null;

    return { deviceType: deviceType };
})(edit);

/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classnames = __webpack_require__(0);

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var RichText = wp.blockEditor.RichText;


var save = function save(props) {
    var className = props.className;
    var _props$attributes = props.attributes,
        block_id = _props$attributes.block_id,
        borderBanner = _props$attributes.borderBanner,
        imageURL = _props$attributes.imageURL,
        titleStyles = _props$attributes.titleStyles,
        descStyles = _props$attributes.descStyles,
        containerStyles = _props$attributes.containerStyles,
        title = _props$attributes.title,
        titleTag = _props$attributes.titleTag,
        desc = _props$attributes.desc,
        contentAlign = _props$attributes.contentAlign,
        effect = _props$attributes.effect,
        hoverEffect = _props$attributes.hoverEffect,
        height = _props$attributes.height,
        minHeight = _props$attributes.minHeight,
        verAlign = _props$attributes.verAlign,
        hovered = _props$attributes.hovered,
        responsive = _props$attributes.responsive,
        background = _props$attributes.background,
        opacity = _props$attributes.opacity,
        urlCheck = _props$attributes.urlCheck,
        target = _props$attributes.target,
        url = _props$attributes.url,
        sepColor = _props$attributes.sepColor,
        blur = _props$attributes.blur,
        bright = _props$attributes.bright,
        contrast = _props$attributes.contrast,
        saturation = _props$attributes.saturation,
        hue = _props$attributes.hue,
        hideDesktop = _props$attributes.hideDesktop,
        hideTablet = _props$attributes.hideTablet,
        hideMobile = _props$attributes.hideMobile,
        borderWidth = _props$attributes.borderWidth,
        borderTop = _props$attributes.borderTop,
        borderRight = _props$attributes.borderRight,
        borderBottom = _props$attributes.borderBottom,
        borderLeft = _props$attributes.borderLeft;


    var mainClasses = (0, _classnames2.default)(className, 'premium-banner');

    return imageURL && React.createElement(
        'div',
        {
            id: 'premium-banner-' + block_id,
            className: mainClasses + ' premium-banner__responsive_' + responsive + ' ' + hideDesktop + ' ' + hideTablet + ' ' + hideMobile + ' premium-banner-' + block_id
        },
        React.createElement('style', {
            dangerouslySetInnerHTML: {
                __html: ['#premium-banner-' + block_id + ' .premium-banner__effect3 .premium-banner__title_wrap::after{', 'background: ' + sepColor, "}", '#premium-banner-' + block_id + ' .premium-banner__inner {', 'background: ' + background, "}", '#premium-banner-' + block_id + ' .premium-banner__img.premium-banner__active {', 'opacity: ' + (background ? 1 - opacity / 100 : 1) + ' ', "}"].join("\n")
            }
        }),
        React.createElement(
            'div',
            {
                className: 'premium-banner__inner premium-banner__min premium-banner__' + effect + ' premium-banner__' + hoverEffect + ' hover_' + hovered,
                style: {
                    boxShadow: containerStyles[0].containerShadowHorizontal + 'px ' + containerStyles[0].containerShadowVertical + 'px ' + containerStyles[0].containerShadowBlur + 'px ' + containerStyles[0].containerShadowColor + ' ' + containerStyles[0].containerShadowPosition,
                    borderStyle: containerStyles[0].borderType,
                    borderWidth: borderBanner ? borderTop + 'px ' + borderRight + 'px ' + borderBottom + 'px ' + borderLeft + 'px' : borderWidth + "px",
                    borderRadius: containerStyles[0].borderRadius + "px",
                    borderColor: containerStyles[0].borderColor
                }
            },
            React.createElement(
                'div',
                {
                    className: 'premium-banner__img_wrap premium-banner__' + height,
                    style: {
                        minHeight: minHeight,
                        alignItems: verAlign
                    }
                },
                React.createElement('img', {
                    className: 'premium-banner__img',
                    alt: 'Banner Image',
                    src: imageURL,
                    style: {
                        filter: 'brightness( ' + bright + '% ) contrast( ' + contrast + '% ) saturate( ' + saturation + '% ) blur( ' + blur + 'px ) hue-rotate( ' + hue + 'deg )'
                    }
                })
            ),
            React.createElement(
                'div',
                {
                    className: 'premium-banner__content',
                    style: {
                        background: "effect2" === effect ? titleStyles[0].titleBack : "transparent"
                    }
                },
                React.createElement(
                    'div',
                    {
                        className: 'premium-banner__title_wrap',
                        style: {
                            textAlign: contentAlign
                        }
                    },
                    React.createElement(RichText.Content, {
                        tagName: titleTag.toLowerCase(),
                        className: 'premium-banner__title',
                        value: title,
                        style: {
                            color: titleStyles[0].titleColor,
                            fontWeight: titleStyles[0].titleWeight,
                            lineHeight: titleStyles[0].titleLine + "px",
                            textShadow: titleStyles[0].shadowHorizontal + 'px ' + titleStyles[0].shadowVertical + 'px ' + titleStyles[0].shadowBlur + 'px ' + titleStyles[0].shadowColor
                        }
                    })
                ),
                React.createElement(
                    'div',
                    {
                        className: 'premium-banner__desc_wrap',
                        style: {
                            textAlign: contentAlign
                        }
                    },
                    React.createElement(RichText.Content, {
                        tagName: 'p',
                        className: 'premium-banner__desc',
                        value: desc,
                        style: {
                            color: descStyles[0].descColor,
                            fontWeight: descStyles[0].descWeight,
                            lineHeight: descStyles[0].descLine + "px",
                            textShadow: descStyles[0].descShadowHorizontal + 'px ' + descStyles[0].descShadowVertical + 'px ' + descStyles[0].descShadowBlur + 'px ' + descStyles[0].descShadowColor
                        }
                    })
                )
            ),
            urlCheck && "" !== url && React.createElement('a', {
                className: 'premium-banner__link',
                href: url,
                target: target && "_blank",
                rel: 'noopener'
            })
        )
    );
};

exports.default = save;

/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classnames = __webpack_require__(0);

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __ = wp.i18n.__;


var className = "premium-banner";

var RichText = wp.editor.RichText;

var attributes = {
    block_id: {
        type: "string"
    },
    borderBanner: {
        type: "boolean",
        default: false
    },
    imageID: {
        type: "number"
    },
    imageURL: {
        type: "string",
        source: "attribute",
        attribute: "src",
        selector: ".premium-banner__img"
    },
    title: {
        type: "array",
        source: "children",
        selector: ".premium-banner__title",
        default: __("Awesome Title")
    },
    titleTag: {
        type: "string",
        default: "H3"
    },
    desc: {
        type: "array",
        source: "children",
        selector: ".premium-banner__desc",
        default: __("Cool Description!!")
    },
    contentAlign: {
        type: "string",
        default: "left"
    },
    effect: {
        type: "string",
        default: "effect1"
    },
    hoverEffect: {
        type: "string",
        default: "none"
    },
    height: {
        type: "string",
        default: "default"
    },
    minHeight: {
        type: "number"
    },
    verAlign: {
        type: "string",
        default: "top"
    },
    hovered: {
        type: "boolean",
        default: false
    },
    responsive: {
        type: "boolean",
        default: false
    },
    background: {
        type: "string"
    },
    opacity: {
        type: "number",
        default: 50
    },
    borderType: {
        type: "string",
        default: "none"
    },
    borderWidth: {
        type: "number",
        default: "1"
    },
    borderTop: {
        type: "number"
    },
    borderRight: {
        type: "number"
    },
    borderBottom: {
        type: "number"
    },
    borderLeft: {
        type: "number"
    },
    borderRadius: {
        type: "number",
        default: "0"
    },
    borderColor: {
        type: "string"
    },
    titleColor: {
        type: "string"
    },
    titleSize: {
        type: "number",
        default: "20"
    },
    titleSizeUnit: {
        type: "string",
        default: 'px'
    },
    titleLine: {
        type: "number"
    },
    titleWeight: {
        type: "number"
    },
    titleBack: {
        type: "string"
    },
    shadowColor: {
        type: "string"
    },
    shadowBlur: {
        type: "number",
        default: "0"
    },
    shadowHorizontal: {
        type: "number",
        default: "0"
    },
    shadowVertical: {
        type: "number",
        default: "0"
    },
    descColor: {
        type: "string",
        default: "#000"
    },
    descSize: {
        type: "number",
        default: "20"
    },
    descSizeUnit: {
        type: "string",
        default: 'px'
    },
    descSizeTablet: {
        type: "number"
    },
    descSizeMobile: {
        type: "number"
    },
    descLine: {
        type: "number"
    },
    descWeight: {
        type: "number"
    },
    descShadowColor: {
        type: "string"
    },
    descShadowBlur: {
        type: "number",
        default: "0"
    },
    descShadowHorizontal: {
        type: "number",
        default: "0"
    },
    descShadowVertical: {
        type: "number",
        default: "0"
    },
    urlCheck: {
        type: "boolean",
        default: false
    },
    target: {
        type: "boolean",
        default: false
    },
    url: {
        type: "string",
        source: "attribute",
        attribute: "href",
        selector: ".premium-banner__link"
    },
    sepColor: {
        type: "string"
    },
    blur: {
        type: "number",
        default: "0"
    },
    bright: {
        type: "number",
        default: "100"
    },
    contrast: {
        type: "number",
        default: "100"
    },
    saturation: {
        type: "number",
        default: "100"
    },
    hue: {
        type: "number",
        default: "0"
    },
    containerShadowColor: {
        type: "string"
    },
    containerShadowBlur: {
        type: "number",
        default: "0"
    },
    containerShadowHorizontal: {
        type: "number",
        default: "0"
    },
    containerShadowVertical: {
        type: "number",
        default: "0"
    },
    containerShadowPosition: {
        type: "string",
        default: ""
    },
    paddingT: {
        type: "number"
    },
    paddingR: {
        type: "number"
    },
    paddingB: {
        type: "number"
    },
    paddingL: {
        type: "number"
    },
    paddingU: {
        type: "string"
    },
    hideDesktop: {
        type: 'boolean',
        default: false
    },
    hideTablet: {
        type: 'boolean',
        default: false
    },
    hideMobile: {
        type: 'boolean',
        default: false
    },
    titleSizeMobile: {
        type: "number"
    },
    titleSizeTablet: {
        type: "number"
    },
    classMigrate: {
        type: "boolean",
        default: false
    }
};

var deprecatedContent = [{
    attributes: attributes,
    migrate: function migrate(attributes) {
        var newAttributes = {
            titleStyles: [{
                titleSizeUnit: attributes.titleSizeUnit,
                titleSize: attributes.titleSize,
                titleSizeMobile: attributes.titleSizeMobile,
                titleSizeTablet: attributes.titleSizeTablet,
                titleWeight: attributes.titleWeight,
                titleLine: attributes.titleLine,
                titleColor: attributes.titleColor,
                titleBack: attributes.titleBack,
                shadowColor: attributes.shadowColor,
                shadowBlur: attributes.shadowBlur,
                shadowHorizontal: attributes.shadowHorizontal,
                shadowVertical: attributes.shadowVertical
            }],
            descStyles: [{
                descSizeUnit: attributes.descSizeUnit,
                descSize: attributes.descSize,
                descSizeTablet: attributes.descSizeTablet,
                descSizeMobile: attributes.descSizeMobile,
                descWeight: attributes.descWeight,
                descLine: attributes.descLine,
                descColor: attributes.descColor,
                descShadowColor: attributes.descShadowColor,
                descShadowBlur: attributes.descShadowBlur,
                descShadowHorizontal: attributes.descShadowHorizontal,
                descShadowVertical: attributes.descShadowVertical
            }],
            containerStyles: [{
                borderType: attributes.borderType,
                borderRadius: attributes.borderRadius,
                borderColor: attributes.borderColor,
                containerShadowColor: attributes.containerShadowColor,
                containerShadowBlur: attributes.containerShadowBlur,
                containerShadowHorizontal: attributes.containerShadowHorizontal,
                containerShadowVertical: attributes.containerShadowVertical,
                containerShadowPosition: attributes.containerShadowPosition,
                paddingU: attributes.paddingU
            }],
            paddingTTablet: "",
            paddingRTablet: "",
            paddingBTablet: " ",
            paddingLTablet: "",
            paddingTMobile: "",
            paddingRMobile: "",
            paddingBMobile: "",
            paddingLMobile: ""
        };
        return Object.assign(attributes, newAttributes);
    },
    save: function save(props) {
        var _props$attributes = props.attributes,
            block_id = _props$attributes.block_id,
            borderBanner = _props$attributes.borderBanner,
            imageURL = _props$attributes.imageURL,
            title = _props$attributes.title,
            titleTag = _props$attributes.titleTag,
            desc = _props$attributes.desc,
            contentAlign = _props$attributes.contentAlign,
            effect = _props$attributes.effect,
            hoverEffect = _props$attributes.hoverEffect,
            height = _props$attributes.height,
            minHeight = _props$attributes.minHeight,
            verAlign = _props$attributes.verAlign,
            hovered = _props$attributes.hovered,
            responsive = _props$attributes.responsive,
            background = _props$attributes.background,
            opacity = _props$attributes.opacity,
            borderType = _props$attributes.borderType,
            borderWidth = _props$attributes.borderWidth,
            borderTop = _props$attributes.borderTop,
            borderRight = _props$attributes.borderRight,
            borderBottom = _props$attributes.borderBottom,
            borderLeft = _props$attributes.borderLeft,
            borderRadius = _props$attributes.borderRadius,
            borderColor = _props$attributes.borderColor,
            titleColor = _props$attributes.titleColor,
            titleBack = _props$attributes.titleBack,
            titleWeight = _props$attributes.titleWeight,
            titleLine = _props$attributes.titleLine,
            shadowBlur = _props$attributes.shadowBlur,
            shadowColor = _props$attributes.shadowColor,
            shadowHorizontal = _props$attributes.shadowHorizontal,
            shadowVertical = _props$attributes.shadowVertical,
            descColor = _props$attributes.descColor,
            descLine = _props$attributes.descLine,
            descWeight = _props$attributes.descWeight,
            descShadowBlur = _props$attributes.descShadowBlur,
            descShadowColor = _props$attributes.descShadowColor,
            descShadowHorizontal = _props$attributes.descShadowHorizontal,
            descShadowVertical = _props$attributes.descShadowVertical,
            urlCheck = _props$attributes.urlCheck,
            url = _props$attributes.url,
            target = _props$attributes.target,
            sepColor = _props$attributes.sepColor,
            blur = _props$attributes.blur,
            bright = _props$attributes.bright,
            contrast = _props$attributes.contrast,
            saturation = _props$attributes.saturation,
            hue = _props$attributes.hue,
            containerShadowBlur = _props$attributes.containerShadowBlur,
            containerShadowColor = _props$attributes.containerShadowColor,
            containerShadowHorizontal = _props$attributes.containerShadowHorizontal,
            containerShadowVertical = _props$attributes.containerShadowVertical,
            containerShadowPosition = _props$attributes.containerShadowPosition,
            paddingB = _props$attributes.paddingB,
            paddingT = _props$attributes.paddingT,
            paddingR = _props$attributes.paddingR,
            paddingL = _props$attributes.paddingL,
            paddingU = _props$attributes.paddingU,
            hideDesktop = _props$attributes.hideDesktop,
            hideTablet = _props$attributes.hideTablet,
            hideMobile = _props$attributes.hideMobile;


        return React.createElement(
            "div",
            {
                id: "premium-banner-" + block_id,
                className: className + " premium-banner__responsive_" + responsive + " " + hideDesktop + " " + hideTablet + " " + hideMobile + " premium-banner-" + block_id,
                style: {
                    paddingTop: paddingT + paddingU,
                    paddingRight: paddingR + paddingU,
                    paddingBottom: paddingB + paddingU,
                    paddingLeft: paddingL + paddingU
                }
            },
            React.createElement("style", {
                dangerouslySetInnerHTML: {
                    __html: ["#premium-banner-" + block_id + " .premium-banner__effect3 .premium-banner__title_wrap::after{", "background: " + sepColor, "}", "#premium-banner-" + block_id + " .premium-banner__inner {", "background: " + background, "}", "#premium-banner-" + block_id + " .premium-banner__img.premium-banner__active {", "opacity: " + (background ? 1 - opacity / 100 : 1) + " ", "}"].join("\n")
                }
            }),
            React.createElement(
                "div",
                {
                    className: "premium-banner__inner premium-banner__min premium-banner__" + effect + " premium-banner__" + hoverEffect + " hover_" + hovered,
                    style: {
                        boxShadow: containerShadowHorizontal + "px " + containerShadowVertical + "px " + containerShadowBlur + "px " + containerShadowColor + " " + containerShadowPosition,
                        borderStyle: borderType,
                        borderWidth: borderBanner ? borderTop + "px " + borderRight + "px " + borderBottom + "px " + borderLeft + "px" : borderWidth + "px",
                        borderRadius: borderRadius + "px",
                        borderColor: borderColor
                    }
                },
                React.createElement(
                    "div",
                    {
                        className: "premium-banner__img_wrap premium-banner__" + height,
                        style: {
                            minHeight: minHeight,
                            alignItems: verAlign
                        }
                    },
                    React.createElement("img", {
                        className: "premium-banner__img",
                        alt: "Banner Image",
                        src: imageURL,
                        style: {
                            filter: "brightness( " + bright + "% ) contrast( " + contrast + "% ) saturate( " + saturation + "% ) blur( " + blur + "px ) hue-rotate( " + hue + "deg )"
                        }
                    })
                ),
                React.createElement(
                    "div",
                    {
                        className: "premium-banner__content",
                        style: {
                            background: "effect2" === effect ? titleBack : "transparent"
                        }
                    },
                    React.createElement(
                        "div",
                        {
                            className: "premium-banner__title_wrap",
                            style: {
                                textAlign: contentAlign
                            }
                        },
                        React.createElement(RichText.Content, {
                            tagName: titleTag.toLowerCase(),
                            className: "premium-banner__title",
                            value: title,
                            style: {
                                color: titleColor,
                                fontWeight: titleWeight,
                                lineHeight: titleLine + "px",
                                textShadow: shadowHorizontal + "px " + shadowVertical + "px " + shadowBlur + "px " + shadowColor
                            }
                        })
                    ),
                    React.createElement(
                        "div",
                        {
                            className: "premium-banner__desc_wrap",
                            style: {
                                textAlign: contentAlign
                            }
                        },
                        React.createElement(RichText.Content, {
                            tagName: "p",
                            className: "premium-banner__desc",
                            value: desc,
                            style: {
                                color: descColor,
                                fontWeight: descWeight,
                                lineHeight: descLine + "px",
                                textShadow: descShadowHorizontal + "px " + descShadowVertical + "px " + descShadowBlur + "px " + descShadowColor
                            }
                        })
                    )
                ),
                urlCheck && "" !== url && React.createElement("a", {
                    className: "premium-banner__link",
                    href: url,
                    target: target && "_blank"
                })
            )
        );
    }
}, {
    attributes: attributes,
    migrate: function migrate(attributes) {
        var newAttributes = {
            borderBottom: "",
            borderTop: "",
            borderRight: "",
            borderLeft: "",
            borderBanner: "",
            classMigrate: false,
            titleSizeUnit: 'px',
            titleSizeMobile: '',
            titleSizeTablet: '',
            descSizeUnit: 'px',
            descSizeMobile: '',
            descSizeTablet: '',
            block_id: '',
            hideDesktop: false,
            hideTablet: false,
            hideMobile: false
        };
        return Object.assign(attributes, newAttributes);
    },
    save: function save(props) {
        var _props$attributes2 = props.attributes,
            id = _props$attributes2.id,
            imageURL = _props$attributes2.imageURL,
            title = _props$attributes2.title,
            titleTag = _props$attributes2.titleTag,
            desc = _props$attributes2.desc,
            contentAlign = _props$attributes2.contentAlign,
            effect = _props$attributes2.effect,
            hoverEffect = _props$attributes2.hoverEffect,
            height = _props$attributes2.height,
            minHeight = _props$attributes2.minHeight,
            verAlign = _props$attributes2.verAlign,
            hovered = _props$attributes2.hovered,
            responsive = _props$attributes2.responsive,
            background = _props$attributes2.background,
            opacity = _props$attributes2.opacity,
            borderType = _props$attributes2.borderType,
            borderWidth = _props$attributes2.borderWidth,
            borderRadius = _props$attributes2.borderRadius,
            borderColor = _props$attributes2.borderColor,
            titleColor = _props$attributes2.titleColor,
            titleBack = _props$attributes2.titleBack,
            titleSize = _props$attributes2.titleSize,
            titleWeight = _props$attributes2.titleWeight,
            titleLine = _props$attributes2.titleLine,
            shadowBlur = _props$attributes2.shadowBlur,
            shadowColor = _props$attributes2.shadowColor,
            shadowHorizontal = _props$attributes2.shadowHorizontal,
            shadowVertical = _props$attributes2.shadowVertical,
            descColor = _props$attributes2.descColor,
            descSize = _props$attributes2.descSize,
            descLine = _props$attributes2.descLine,
            descWeight = _props$attributes2.descWeight,
            descShadowBlur = _props$attributes2.descShadowBlur,
            descShadowColor = _props$attributes2.descShadowColor,
            descShadowHorizontal = _props$attributes2.descShadowHorizontal,
            descShadowVertical = _props$attributes2.descShadowVertical,
            urlCheck = _props$attributes2.urlCheck,
            url = _props$attributes2.url,
            target = _props$attributes2.target,
            sepColor = _props$attributes2.sepColor,
            blur = _props$attributes2.blur,
            bright = _props$attributes2.bright,
            contrast = _props$attributes2.contrast,
            saturation = _props$attributes2.saturation,
            hue = _props$attributes2.hue,
            containerShadowBlur = _props$attributes2.containerShadowBlur,
            containerShadowColor = _props$attributes2.containerShadowColor,
            containerShadowHorizontal = _props$attributes2.containerShadowHorizontal,
            containerShadowVertical = _props$attributes2.containerShadowVertical,
            containerShadowPosition = _props$attributes2.containerShadowPosition,
            paddingB = _props$attributes2.paddingB,
            paddingT = _props$attributes2.paddingT,
            paddingR = _props$attributes2.paddingR,
            paddingL = _props$attributes2.paddingL,
            paddingU = _props$attributes2.paddingU;


        return React.createElement(
            "div",
            {
                id: "premium-banner-" + id,
                className: className + " premium-banner__responsive_" + responsive,
                style: {
                    paddingTop: paddingT + paddingU,
                    paddingRight: paddingR + paddingU,
                    paddingBottom: paddingB + paddingU,
                    paddingLeft: paddingL + paddingU
                }
            },
            React.createElement("style", {
                dangerouslySetInnerHTML: {
                    __html: ["#premium-banner-" + id + " .premium-banner__effect3 .premium-banner__title_wrap::after{", "background: " + sepColor, "}", "#premium-banner-" + id + " .premium-banner__inner {", "background: " + background, "}", "#premium-banner-" + id + " .premium-banner__img.premium-banner__active {", "opacity: " + (background ? 1 - opacity / 100 : 1) + " ", "}"].join("\n")
                }
            }),
            React.createElement(
                "div",
                {
                    className: "premium-banner__inner premium-banner__min premium-banner__" + effect + " premium-banner__" + hoverEffect + " hover_" + hovered,
                    style: {
                        boxShadow: containerShadowHorizontal + "px " + containerShadowVertical + "px " + containerShadowBlur + "px " + containerShadowColor + " " + containerShadowPosition,
                        border: borderType,
                        borderWidth: borderWidth + "px",
                        borderRadius: borderRadius + "px",
                        borderColor: borderColor
                    }
                },
                React.createElement(
                    "div",
                    {
                        className: "premium-banner__img_wrap premium-banner__" + height,
                        style: {
                            minHeight: minHeight,
                            alignItems: verAlign
                        }
                    },
                    React.createElement("img", {
                        className: "premium-banner__img",
                        alt: "Banner Image",
                        src: imageURL,
                        style: {
                            filter: "brightness( " + bright + "% ) contrast( " + contrast + "% ) saturate( " + saturation + "% ) blur( " + blur + "px ) hue-rotate( " + hue + "deg )"
                        }
                    })
                ),
                React.createElement(
                    "div",
                    {
                        className: "premium-banner__content",
                        style: {
                            background: "effect2" === effect ? titleBack : "transparent"
                        }
                    },
                    React.createElement(
                        "div",
                        {
                            className: "premium-banner__title_wrap",
                            style: {
                                textAlign: contentAlign
                            }
                        },
                        React.createElement(RichText.Content, {
                            tagName: titleTag.toLowerCase(),
                            className: "premium-banner__title",
                            value: title,
                            style: {
                                color: titleColor,
                                fontSize: titleSize + "px",
                                fontWeight: titleWeight,
                                lineHeight: titleLine + "px",
                                textShadow: shadowHorizontal + "px " + shadowVertical + "px " + shadowBlur + "px " + shadowColor
                            }
                        })
                    ),
                    React.createElement(
                        "div",
                        {
                            className: "premium-banner__desc_wrap",
                            style: {
                                textAlign: contentAlign
                            }
                        },
                        React.createElement(RichText.Content, {
                            tagName: "p",
                            className: "premium-banner__desc",
                            value: desc,
                            style: {
                                color: descColor,
                                fontSize: descSize + "px",
                                fontWeight: descWeight,
                                lineHeight: descLine + "px",
                                textShadow: descShadowHorizontal + "px " + descShadowVertical + "px " + descShadowBlur + "px " + descShadowColor
                            }
                        })
                    )
                ),
                urlCheck && "" !== url && React.createElement("a", {
                    className: "premium-banner__link",
                    href: url,
                    target: target && "_blank"
                })
            )
        );
    }
}, {
    attributes: attributes,
    migrate: function migrate(attributes) {
        var newAttributes = {
            paddingT: "",
            paddingR: "",
            paddingB: "",
            paddingL: "",
            paddingU: ""
        };
        return Object.assign(attributes, newAttributes);
    },
    save: function save(props) {
        var _props$attributes3 = props.attributes,
            id = _props$attributes3.id,
            imageURL = _props$attributes3.imageURL,
            title = _props$attributes3.title,
            titleTag = _props$attributes3.titleTag,
            desc = _props$attributes3.desc,
            contentAlign = _props$attributes3.contentAlign,
            effect = _props$attributes3.effect,
            hoverEffect = _props$attributes3.hoverEffect,
            height = _props$attributes3.height,
            minHeight = _props$attributes3.minHeight,
            verAlign = _props$attributes3.verAlign,
            hovered = _props$attributes3.hovered,
            responsive = _props$attributes3.responsive,
            background = _props$attributes3.background,
            opacity = _props$attributes3.opacity,
            borderType = _props$attributes3.borderType,
            borderWidth = _props$attributes3.borderWidth,
            borderRadius = _props$attributes3.borderRadius,
            borderColor = _props$attributes3.borderColor,
            titleColor = _props$attributes3.titleColor,
            titleBack = _props$attributes3.titleBack,
            titleSize = _props$attributes3.titleSize,
            titleWeight = _props$attributes3.titleWeight,
            titleLine = _props$attributes3.titleLine,
            shadowBlur = _props$attributes3.shadowBlur,
            shadowColor = _props$attributes3.shadowColor,
            shadowHorizontal = _props$attributes3.shadowHorizontal,
            shadowVertical = _props$attributes3.shadowVertical,
            descColor = _props$attributes3.descColor,
            descSize = _props$attributes3.descSize,
            descLine = _props$attributes3.descLine,
            descWeight = _props$attributes3.descWeight,
            descShadowBlur = _props$attributes3.descShadowBlur,
            descShadowColor = _props$attributes3.descShadowColor,
            descShadowHorizontal = _props$attributes3.descShadowHorizontal,
            descShadowVertical = _props$attributes3.descShadowVertical,
            urlCheck = _props$attributes3.urlCheck,
            url = _props$attributes3.url,
            target = _props$attributes3.target,
            sepColor = _props$attributes3.sepColor,
            blur = _props$attributes3.blur,
            bright = _props$attributes3.bright,
            contrast = _props$attributes3.contrast,
            saturation = _props$attributes3.saturation,
            hue = _props$attributes3.hue,
            containerShadowBlur = _props$attributes3.containerShadowBlur,
            containerShadowColor = _props$attributes3.containerShadowColor,
            containerShadowHorizontal = _props$attributes3.containerShadowHorizontal,
            containerShadowVertical = _props$attributes3.containerShadowVertical,
            containerShadowPosition = _props$attributes3.containerShadowPosition;

        return React.createElement(
            "div",
            {
                id: "premium-banner-" + id,
                className: className + " " + className + "__responsive_" + responsive,
                style: {
                    boxShadow: containerShadowHorizontal + "px " + containerShadowVertical + "px " + containerShadowBlur + "px " + containerShadowColor + " " + containerShadowPosition
                }
            },
            React.createElement("style", {
                dangerouslySetInnerHTML: {
                    __html: ["#premium-banner-" + id + " .premium-banner__effect3 .premium-banner__title_wrap::after{", "background: " + sepColor, "}", "#premium-banner-" + id + " .premium-banner__inner {", "background: " + background, "}", "#premium-banner-" + id + " .premium-banner__img.premium-banner__active {", "opacity: " + (background ? 1 - opacity / 100 : 1) + " ", "}"].join("\n")
                }
            }),
            React.createElement(
                "div",
                {
                    className: className + "__inner " + className + "__min " + className + "__" + effect + " " + className + "__" + hoverEffect + " hover_" + hovered,
                    style: {
                        border: borderType,
                        borderWidth: borderWidth + "px",
                        borderRadius: borderRadius + "px",
                        borderColor: borderColor
                    }
                },
                React.createElement(
                    "div",
                    {
                        className: className + "__img_wrap " + className + "__" + height,
                        style: {
                            minHeight: minHeight,
                            alignItems: verAlign
                        }
                    },
                    React.createElement("img", {
                        className: className + "__img",
                        alt: "Banner Image",
                        src: imageURL,
                        style: {
                            filter: "brightness( " + bright + "% ) contrast( " + contrast + "% ) saturate( " + saturation + "% ) blur( " + blur + "px ) hue-rotate( " + hue + "deg )"
                        }
                    })
                ),
                React.createElement(
                    "div",
                    {
                        className: className + "__content",
                        style: {
                            background: "effect2" === effect ? titleBack : "transparent"
                        }
                    },
                    React.createElement(
                        "div",
                        {
                            className: className + "__title_wrap",
                            style: {
                                textAlign: contentAlign
                            }
                        },
                        React.createElement(RichText.Content, {
                            tagName: titleTag.toLowerCase(),
                            className: className + "__title",
                            value: title,
                            style: {
                                color: titleColor,
                                fontSize: titleSize + "px",
                                fontWeight: titleWeight,
                                lineHeight: titleLine + "px",
                                textShadow: shadowHorizontal + "px " + shadowVertical + "px " + shadowBlur + "px " + shadowColor
                            }
                        })
                    ),
                    React.createElement(
                        "div",
                        {
                            className: className + "__desc_wrap",
                            style: {
                                textAlign: contentAlign
                            }
                        },
                        React.createElement(RichText.Content, {
                            tagName: "p",
                            className: className + "__desc",
                            value: desc,
                            style: {
                                color: descColor,
                                fontSize: descSize + "px",
                                fontWeight: descWeight,
                                lineHeight: descLine + "px",
                                textShadow: descShadowHorizontal + "px " + descShadowVertical + "px " + descShadowBlur + "px " + descShadowColor
                            }
                        })
                    )
                ),
                urlCheck && "" !== url && React.createElement("a", {
                    className: className + "__link",
                    href: url,
                    target: target && "_blank"
                })
            )
        );
    }
}, {
    attributes: attributes,
    migrate: function migrate(attributes) {
        var newAttributes = {
            containerShadowColor: "",
            containerShadowBlur: "0",
            containerShadowHorizontal: "0",
            containerShadowVertical: "0",
            containerShadowPosition: ""
        };
        return Object.assign(attributes, newAttributes);
    },
    save: function save(props) {
        var _props$attributes4 = props.attributes,
            id = _props$attributes4.id,
            imageURL = _props$attributes4.imageURL,
            title = _props$attributes4.title,
            titleTag = _props$attributes4.titleTag,
            desc = _props$attributes4.desc,
            contentAlign = _props$attributes4.contentAlign,
            effect = _props$attributes4.effect,
            hoverEffect = _props$attributes4.hoverEffect,
            height = _props$attributes4.height,
            minHeight = _props$attributes4.minHeight,
            verAlign = _props$attributes4.verAlign,
            hovered = _props$attributes4.hovered,
            responsive = _props$attributes4.responsive,
            background = _props$attributes4.background,
            opacity = _props$attributes4.opacity,
            borderType = _props$attributes4.borderType,
            borderWidth = _props$attributes4.borderWidth,
            borderRadius = _props$attributes4.borderRadius,
            borderColor = _props$attributes4.borderColor,
            titleColor = _props$attributes4.titleColor,
            titleBack = _props$attributes4.titleBack,
            titleSize = _props$attributes4.titleSize,
            titleWeight = _props$attributes4.titleWeight,
            titleLine = _props$attributes4.titleLine,
            shadowBlur = _props$attributes4.shadowBlur,
            shadowColor = _props$attributes4.shadowColor,
            shadowHorizontal = _props$attributes4.shadowHorizontal,
            shadowVertical = _props$attributes4.shadowVertical,
            descColor = _props$attributes4.descColor,
            descSize = _props$attributes4.descSize,
            descLine = _props$attributes4.descLine,
            descWeight = _props$attributes4.descWeight,
            descShadowBlur = _props$attributes4.descShadowBlur,
            descShadowColor = _props$attributes4.descShadowColor,
            descShadowHorizontal = _props$attributes4.descShadowHorizontal,
            descShadowVertical = _props$attributes4.descShadowVertical,
            urlCheck = _props$attributes4.urlCheck,
            url = _props$attributes4.url,
            target = _props$attributes4.target,
            sepColor = _props$attributes4.sepColor,
            blur = _props$attributes4.blur,
            bright = _props$attributes4.bright,
            contrast = _props$attributes4.contrast,
            saturation = _props$attributes4.saturation,
            hue = _props$attributes4.hue;

        return React.createElement(
            "div",
            {
                id: "premium-banner-" + id,
                className: className + " " + className + "__responsive_" + responsive
            },
            React.createElement("style", {
                dangerouslySetInnerHTML: {
                    __html: ["#premium-banner-" + id + " .premium-banner__effect3 .premium-banner__title_wrap::after{", "background: " + sepColor, "}", "#premium-banner-" + id + " .premium-banner__inner {", "background: " + background, "}", "#premium-banner-" + id + " .premium-banner__img.premium-banner__active {", "opacity: " + (background ? 1 - opacity / 100 : 1) + " ", "}"].join("\n")
                }
            }),
            React.createElement(
                "div",
                {
                    className: className + "__inner " + className + "__min " + className + "__" + effect + " " + className + "__" + hoverEffect + " hover_" + hovered,
                    style: {
                        border: borderType,
                        borderWidth: borderWidth + "px",
                        borderRadius: borderRadius + "px",
                        borderColor: borderColor
                    }
                },
                React.createElement(
                    "div",
                    {
                        className: className + "__img_wrap " + className + "__" + height,
                        style: {
                            minHeight: minHeight,
                            alignItems: verAlign
                        }
                    },
                    React.createElement("img", {
                        className: className + "__img",
                        alt: "Banner Image",
                        src: imageURL,
                        style: {
                            filter: "brightness( " + bright + "% ) contrast( " + contrast + "% ) saturate( " + saturation + "% ) blur( " + blur + "px ) hue-rotate( " + hue + "deg )"
                        }
                    })
                ),
                React.createElement(
                    "div",
                    {
                        className: className + "__content",
                        style: {
                            background: "effect2" === effect ? titleBack : "transparent"
                        }
                    },
                    React.createElement(
                        "div",
                        {
                            className: className + "__title_wrap",
                            style: {
                                textAlign: contentAlign
                            }
                        },
                        React.createElement(RichText.Content, {
                            tagName: titleTag.toLowerCase(),
                            className: className + "__title",
                            value: title,
                            style: {
                                color: titleColor,
                                fontSize: titleSize + "px",
                                fontWeight: titleWeight,
                                lineHeight: titleLine + "px",
                                textShadow: shadowHorizontal + "px " + shadowVertical + "px " + shadowBlur + "px " + shadowColor
                            }
                        })
                    ),
                    React.createElement(
                        "div",
                        {
                            className: className + "__desc_wrap",
                            style: {
                                textAlign: contentAlign
                            }
                        },
                        React.createElement(RichText.Content, {
                            tagName: "p",
                            className: className + "__desc",
                            value: desc,
                            style: {
                                color: descColor,
                                fontSize: descSize + "px",
                                fontWeight: descWeight,
                                lineHeight: descLine + "px",
                                textShadow: descShadowHorizontal + "px " + descShadowVertical + "px " + descShadowBlur + "px " + descShadowColor
                            }
                        })
                    )
                ),
                urlCheck && "" !== url && React.createElement("a", {
                    className: className + "__link",
                    href: url,
                    target: target && "_blank"
                })
            )
        );
    }
}, {
    attributes: attributes,
    migrate: function migrate(attributes) {
        var newAttributes = {
            descShadowBlur: "0",
            descShadowColor: "",
            descShadowHorizontal: "0",
            descShadowVertical: "0"
        };
        return Object.assign(attributes, newAttributes);
    },
    save: function save(props) {
        var _props$attributes5 = props.attributes,
            id = _props$attributes5.id,
            imageURL = _props$attributes5.imageURL,
            title = _props$attributes5.title,
            titleTag = _props$attributes5.titleTag,
            desc = _props$attributes5.desc,
            contentAlign = _props$attributes5.contentAlign,
            effect = _props$attributes5.effect,
            hoverEffect = _props$attributes5.hoverEffect,
            height = _props$attributes5.height,
            minHeight = _props$attributes5.minHeight,
            verAlign = _props$attributes5.verAlign,
            hovered = _props$attributes5.hovered,
            responsive = _props$attributes5.responsive,
            background = _props$attributes5.background,
            opacity = _props$attributes5.opacity,
            borderType = _props$attributes5.borderType,
            borderWidth = _props$attributes5.borderWidth,
            borderRadius = _props$attributes5.borderRadius,
            borderColor = _props$attributes5.borderColor,
            titleColor = _props$attributes5.titleColor,
            titleBack = _props$attributes5.titleBack,
            titleSize = _props$attributes5.titleSize,
            titleWeight = _props$attributes5.titleWeight,
            titleLine = _props$attributes5.titleLine,
            shadowBlur = _props$attributes5.shadowBlur,
            shadowColor = _props$attributes5.shadowColor,
            shadowHorizontal = _props$attributes5.shadowHorizontal,
            shadowVertical = _props$attributes5.shadowVertical,
            descColor = _props$attributes5.descColor,
            descSize = _props$attributes5.descSize,
            descWeight = _props$attributes5.descWeight,
            descLine = _props$attributes5.descLine,
            urlCheck = _props$attributes5.urlCheck,
            url = _props$attributes5.url,
            target = _props$attributes5.target,
            sepColor = _props$attributes5.sepColor,
            blur = _props$attributes5.blur,
            bright = _props$attributes5.bright,
            contrast = _props$attributes5.contrast,
            saturation = _props$attributes5.saturation,
            hue = _props$attributes5.hue;

        return React.createElement(
            "div",
            {
                id: "premium-banner-" + id,
                className: className + " " + className + "__responsive_" + responsive
            },
            React.createElement("style", {
                dangerouslySetInnerHTML: {
                    __html: ["#premium-banner-" + id + " .premium-banner__effect3 .premium-banner__title_wrap::after{", "background: " + sepColor, "}", "#premium-banner-" + id + " .premium-banner__inner {", "background: " + background, "}", "#premium-banner-" + id + " .premium-banner__img.premium-banner__active {", "opacity: " + (background ? 1 - opacity / 100 : 1) + " ", "}"].join("\n")
                }
            }),
            React.createElement(
                "div",
                {
                    className: className + "__inner " + className + "__min " + className + "__" + effect + " " + className + "__" + hoverEffect + " hover_" + hovered,
                    style: {
                        border: borderType,
                        borderWidth: borderWidth + "px",
                        borderRadius: borderRadius + "px",
                        borderColor: borderColor
                    }
                },
                React.createElement(
                    "div",
                    {
                        className: className + "__img_wrap " + className + "__" + height,
                        style: {
                            minHeight: minHeight,
                            alignItems: verAlign
                        }
                    },
                    React.createElement("img", {
                        className: className + "__img",
                        alt: "Banner Image",
                        src: imageURL,
                        style: {
                            filter: "brightness( " + bright + "% ) contrast( " + contrast + "% ) saturate( " + saturation + "% ) blur( " + blur + "px ) hue-rotate( " + hue + "deg )"
                        }
                    })
                ),
                React.createElement(
                    "div",
                    {
                        className: className + "__content",
                        style: {
                            background: "effect2" === effect ? titleBack : "transparent"
                        }
                    },
                    React.createElement(
                        "div",
                        {
                            className: className + "__title_wrap",
                            style: {
                                textAlign: contentAlign
                            }
                        },
                        React.createElement(RichText.Content, {
                            tagName: titleTag.toLowerCase(),
                            className: className + "__title",
                            value: title,
                            style: {
                                color: titleColor,
                                fontSize: titleSize + "px",
                                fontWeight: titleWeight,
                                lineHeight: titleLine + "px",
                                textShadow: shadowHorizontal + "px " + shadowVertical + "px " + shadowBlur + "px " + shadowColor
                            }
                        })
                    ),
                    React.createElement(
                        "div",
                        {
                            className: className + "__desc_wrap",
                            style: {
                                textAlign: contentAlign
                            }
                        },
                        React.createElement(RichText.Content, {
                            tagName: "p",
                            className: className + "__desc",
                            value: desc,
                            style: {
                                color: descColor,
                                fontSize: descSize + "px",
                                fontWeight: descWeight,
                                lineHeight: descLine + "px"
                            }
                        })
                    )
                ),
                urlCheck && "" !== url && React.createElement("a", {
                    className: className + "__link",
                    href: url,
                    target: target && "_blank"
                })
            )
        );
    }
}, {
    attributes: attributes,
    migrate: function migrate(attributes) {
        var newAttributes = {
            blur: "0",
            bright: "100",
            contrast: "100",
            saturation: "100",
            hue: "0"
        };
        return Object.assign(attributes, newAttributes);
    },
    save: function save(props) {
        var _props$attributes6 = props.attributes,
            id = _props$attributes6.id,
            imageURL = _props$attributes6.imageURL,
            title = _props$attributes6.title,
            titleTag = _props$attributes6.titleTag,
            desc = _props$attributes6.desc,
            contentAlign = _props$attributes6.contentAlign,
            effect = _props$attributes6.effect,
            hoverEffect = _props$attributes6.hoverEffect,
            height = _props$attributes6.height,
            minHeight = _props$attributes6.minHeight,
            verAlign = _props$attributes6.verAlign,
            hovered = _props$attributes6.hovered,
            responsive = _props$attributes6.responsive,
            background = _props$attributes6.background,
            opacity = _props$attributes6.opacity,
            borderType = _props$attributes6.borderType,
            borderWidth = _props$attributes6.borderWidth,
            borderRadius = _props$attributes6.borderRadius,
            borderColor = _props$attributes6.borderColor,
            titleColor = _props$attributes6.titleColor,
            titleBack = _props$attributes6.titleBack,
            titleSize = _props$attributes6.titleSize,
            titleWeight = _props$attributes6.titleWeight,
            titleLine = _props$attributes6.titleLine,
            shadowBlur = _props$attributes6.shadowBlur,
            shadowColor = _props$attributes6.shadowColor,
            shadowHorizontal = _props$attributes6.shadowHorizontal,
            shadowVertical = _props$attributes6.shadowVertical,
            descColor = _props$attributes6.descColor,
            descSize = _props$attributes6.descSize,
            descWeight = _props$attributes6.descWeight,
            descLine = _props$attributes6.descLine,
            urlCheck = _props$attributes6.urlCheck,
            url = _props$attributes6.url,
            target = _props$attributes6.target,
            sepColor = _props$attributes6.sepColor;

        return React.createElement(
            "div",
            {
                id: "premium-banner-" + id,
                className: className + " " + className + "__responsive_" + responsive
            },
            React.createElement("style", {
                dangerouslySetInnerHTML: {
                    __html: ["#premium-banner-" + id + " .premium-banner__effect3 .premium-banner__title_wrap::after{", "background: " + sepColor, "}", "#premium-banner-" + id + " .premium-banner__inner {", "background: " + background, "}", "#premium-banner-" + id + " .premium-banner__img.premium-banner__active {", "opacity: " + (background ? 1 - opacity / 100 : 1) + " ", "}"].join("\n")
                }
            }),
            React.createElement(
                "div",
                {
                    className: className + "__inner " + className + "__min " + className + "__" + effect + " " + className + "__" + hoverEffect + " hover_" + hovered,
                    style: {
                        border: borderType,
                        borderWidth: borderWidth + "px",
                        borderRadius: borderRadius + "px",
                        borderColor: borderColor
                    }
                },
                React.createElement(
                    "div",
                    {
                        className: className + "__img_wrap " + className + "__" + height,
                        style: {
                            minHeight: minHeight,
                            alignItems: verAlign
                        }
                    },
                    React.createElement("img", {
                        className: className + "__img",
                        alt: "Banner Image",
                        src: imageURL
                    })
                ),
                React.createElement(
                    "div",
                    {
                        className: className + "__content",
                        style: {
                            background: "effect2" === effect ? titleBack : "transparent"
                        }
                    },
                    React.createElement(
                        "div",
                        {
                            className: className + "__title_wrap",
                            style: {
                                textAlign: contentAlign
                            }
                        },
                        React.createElement(RichText.Content, {
                            tagName: titleTag.toLowerCase(),
                            className: className + "__title",
                            value: title,
                            style: {
                                color: titleColor,
                                fontSize: titleSize + "px",
                                fontWeight: titleWeight,
                                lineHeight: titleLine + "px",
                                textShadow: shadowHorizontal + "px " + shadowVertical + "px " + shadowBlur + "px " + shadowColor
                            }
                        })
                    ),
                    React.createElement(
                        "div",
                        {
                            className: className + "__desc_wrap",
                            style: {
                                textAlign: contentAlign
                            }
                        },
                        React.createElement(RichText.Content, {
                            tagName: "p",
                            className: className + "__desc",
                            value: desc,
                            style: {
                                color: descColor,
                                fontSize: descSize + "px",
                                fontWeight: descWeight,
                                lineHeight: descLine + "px"
                            }
                        })
                    )
                ),
                urlCheck && "" !== url && React.createElement("a", {
                    className: className + "__link",
                    href: url,
                    target: target && "_blank"
                })
            )
        );
    }
}, {
    attributes: attributes,
    migrate: function migrate(attributes) {
        var newAttributes = {
            shadowBlur: "0",
            shadowColor: "",
            shadowHorizontal: "0",
            shadowVertical: "0"
        };
        return Object.assign(attributes, newAttributes);
    },
    save: function save(props) {
        var _props$attributes7 = props.attributes,
            id = _props$attributes7.id,
            imageURL = _props$attributes7.imageURL,
            title = _props$attributes7.title,
            titleTag = _props$attributes7.titleTag,
            desc = _props$attributes7.desc,
            contentAlign = _props$attributes7.contentAlign,
            effect = _props$attributes7.effect,
            hoverEffect = _props$attributes7.hoverEffect,
            height = _props$attributes7.height,
            minHeight = _props$attributes7.minHeight,
            verAlign = _props$attributes7.verAlign,
            hovered = _props$attributes7.hovered,
            responsive = _props$attributes7.responsive,
            background = _props$attributes7.background,
            opacity = _props$attributes7.opacity,
            borderType = _props$attributes7.borderType,
            borderWidth = _props$attributes7.borderWidth,
            borderRadius = _props$attributes7.borderRadius,
            borderColor = _props$attributes7.borderColor,
            titleColor = _props$attributes7.titleColor,
            titleBack = _props$attributes7.titleBack,
            titleSize = _props$attributes7.titleSize,
            titleWeight = _props$attributes7.titleWeight,
            titleLine = _props$attributes7.titleLine,
            descColor = _props$attributes7.descColor,
            descSize = _props$attributes7.descSize,
            descWeight = _props$attributes7.descWeight,
            descLine = _props$attributes7.descLine,
            urlCheck = _props$attributes7.urlCheck,
            url = _props$attributes7.url,
            target = _props$attributes7.target,
            sepColor = _props$attributes7.sepColor;

        return React.createElement(
            "div",
            {
                id: "premium-banner-" + id,
                className: className + " " + className + "__responsive_" + responsive
            },
            React.createElement("style", {
                dangerouslySetInnerHTML: {
                    __html: ["#premium-banner-" + id + " .premium-banner__effect3 .premium-banner__title_wrap::after{", "background: " + sepColor, "}", "#premium-banner-" + id + " .premium-banner__inner {", "background: " + background, "}", "#premium-banner-" + id + " .premium-banner__img.premium-banner__active {", "opacity: " + (background ? 1 - opacity / 100 : 1) + " ", "}"].join("\n")
                }
            }),
            React.createElement(
                "div",
                {
                    className: className + "__inner " + className + "__min " + className + "__" + effect + " " + className + "__" + hoverEffect + " hover_" + hovered,
                    style: {
                        border: borderType,
                        borderWidth: borderWidth + "px",
                        borderRadius: borderRadius + "px",
                        borderColor: borderColor
                    }
                },
                React.createElement(
                    "div",
                    {
                        className: className + "__img_wrap " + className + "__" + height,
                        style: {
                            minHeight: minHeight,
                            alignItems: verAlign
                        }
                    },
                    React.createElement("img", {
                        className: className + "__img",
                        alt: "Banner Image",
                        src: imageURL
                    })
                ),
                React.createElement(
                    "div",
                    {
                        className: className + "__content",
                        style: {
                            background: "effect2" === effect ? titleBack : "transparent"
                        }
                    },
                    React.createElement(
                        "div",
                        {
                            className: className + "__title_wrap",
                            style: {
                                textAlign: contentAlign
                            }
                        },
                        React.createElement(RichText.Content, {
                            tagName: titleTag.toLowerCase(),
                            className: className + "__title",
                            value: title,
                            style: {
                                color: titleColor,
                                fontSize: titleSize + "px",
                                fontWeight: titleWeight,
                                lineHeight: titleLine + "px"
                            }
                        })
                    ),
                    React.createElement(
                        "div",
                        {
                            className: className + "__desc_wrap",
                            style: {
                                textAlign: contentAlign
                            }
                        },
                        React.createElement(RichText.Content, {
                            tagName: "p",
                            className: className + "__desc",
                            value: desc,
                            style: {
                                color: descColor,
                                fontSize: descSize + "px",
                                fontWeight: descWeight,
                                lineHeight: descLine + "px"
                            }
                        })
                    )
                ),
                urlCheck && "" !== url && React.createElement("a", {
                    className: className + "__link",
                    href: url,
                    target: target && "_blank"
                })
            )
        );
    }
}];

exports.default = deprecatedContent;

/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
var __ = wp.i18n.__;

var attributes = {
    block_id: {
        type: "string"
    },
    borderBanner: {
        type: "boolean",
        default: false
    },
    imageID: {
        type: "number"
    },
    imageURL: {
        type: "string",
        source: "attribute",
        attribute: "src",
        selector: ".premium-banner__img"
    },
    titleStyles: {
        type: "array",
        default: [{
            titleSizeUnit: 'px',
            titleSize: '20',
            titleSizeMobile: '',
            titleSizeTablet: '',
            titleWeight: '',
            titleLine: '',
            titleColor: '',
            titleBack: '',
            shadowColor: '',
            shadowBlur: '',
            shadowHorizontal: '',
            shadowVertical: ''
        }]
    },
    descStyles: {
        type: "array",
        default: [{
            descSizeUnit: 'px',
            descSize: '20',
            descSizeTablet: '',
            descSizeMobile: '',
            descWeight: '',
            descLine: '',
            descColor: '#000',
            descShadowColor: '',
            descShadowBlur: '',
            descShadowHorizontal: '',
            descShadowVertical: ''
        }]
    },
    containerStyles: {
        type: "array",
        default: [{
            borderType: "none",
            borderWidth: '',
            borderRadius: '',
            borderColor: '',
            containerShadowColor: '',
            containerShadowBlur: '',
            containerShadowHorizontal: '',
            containerShadowVertical: '',
            containerShadowPosition: '',
            paddingU: 'px'
        }]
    },
    title: {
        type: "array",
        source: "children",
        selector: ".premium-banner__title",
        default: __("Awesome Title")
    },
    titleTag: {
        type: "string",
        default: "H3"
    },
    desc: {
        type: "array",
        source: "children",
        selector: ".premium-banner__desc",
        default: __("Cool Description!!", 'premium-blocks-for-gutenberg')
    },
    contentAlign: {
        type: "string",
        default: "left"
    },
    effect: {
        type: "string",
        default: "effect1"
    },
    hoverEffect: {
        type: "string",
        default: "none"
    },
    height: {
        type: "string",
        default: "default"
    },
    minHeight: {
        type: "number"
    },
    verAlign: {
        type: "string",
        default: "top"
    },
    hovered: {
        type: "boolean",
        default: false
    },
    responsive: {
        type: "boolean",
        default: false
    },
    background: {
        type: "string"
    },
    opacity: {
        type: "number",
        default: 50
    },
    urlCheck: {
        type: "boolean",
        default: false
    },
    target: {
        type: "boolean",
        default: false
    },
    url: {
        type: "string",
        source: "attribute",
        attribute: "href",
        selector: ".premium-banner__link"
    },
    sepColor: {
        type: "string"
    },
    blur: {
        type: "number",
        default: "0"
    },
    bright: {
        type: "number",
        default: "100"
    },
    contrast: {
        type: "number",
        default: "100"
    },
    saturation: {
        type: "number",
        default: "100"
    },
    hue: {
        type: "number",
        default: "0"
    },

    hideDesktop: {
        type: 'boolean',
        default: false
    },
    hideTablet: {
        type: 'boolean',
        default: false
    },
    hideMobile: {
        type: 'boolean',
        default: false
    },
    classMigrate: {
        type: "boolean",
        default: false
    },
    borderWidth: {
        type: "number",
        default: "1"
    },
    borderTop: {
        type: "number"
    },
    borderRight: {
        type: "number"
    },
    borderBottom: {
        type: "number"
    },
    borderLeft: {
        type: "number"
    },
    paddingT: {
        type: "number"
    },
    paddingR: {
        type: "number"
    },
    paddingB: {
        type: "number"
    },
    paddingL: {
        type: "number"
    },
    paddingTTablet: {
        type: "number"
    },
    paddingRTablet: {
        type: "number"
    },
    paddingBTablet: {
        type: "number"
    },
    paddingLTablet: {
        type: "number"
    },
    paddingTMobile: {
        type: "number"
    },
    paddingRMobile: {
        type: "number"
    },
    paddingBMobile: {
        type: "number"
    },
    paddingLMobile: {
        type: "number"
    },
    titleSize: {
        type: "object",
        default: {
            Desktop: '200',
            unit: 'px'
        }
    }
};

exports.default = attributes;

/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _settings = __webpack_require__(1);

var _edit = __webpack_require__(231);

var _edit2 = _interopRequireDefault(_edit);

var _save = __webpack_require__(232);

var _save2 = _interopRequireDefault(_save);

var _deprecated = __webpack_require__(233);

var _deprecated2 = _interopRequireDefault(_deprecated);

var _icons = __webpack_require__(4);

var _icons2 = _interopRequireDefault(_icons);

var _attributes = __webpack_require__(234);

var _attributes2 = _interopRequireDefault(_attributes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __ = wp.i18n.__;
var registerBlockType = wp.blocks.registerBlockType;


registerBlockType("premium/button", {
    title: __("Button"),
    icon: React.createElement(_icons2.default, { icon: "button" }),
    category: "premium-blocks",
    attributes: _attributes2.default,
    supports: {
        inserter: _settings.button
    },
    example: {},
    edit: _edit2.default,
    save: _save2.default,
    deprecated: _deprecated2.default
});

/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.edit = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _classnames = __webpack_require__(0);

var _classnames2 = _interopRequireDefault(_classnames);

var _premiumTypo = __webpack_require__(7);

var _premiumTypo2 = _interopRequireDefault(_premiumTypo);

var _premiumBorder = __webpack_require__(6);

var _premiumBorder2 = _interopRequireDefault(_premiumBorder);

var _premiumResponsiveTabs = __webpack_require__(8);

var _premiumResponsiveTabs2 = _interopRequireDefault(_premiumResponsiveTabs);

var _singleRangeControl = __webpack_require__(3);

var _singleRangeControl2 = _interopRequireDefault(_singleRangeControl);

var _ColorComponent = __webpack_require__(2);

var _ColorComponent2 = _interopRequireDefault(_ColorComponent);

var _fontLoader = __webpack_require__(22);

var _fontLoader2 = _interopRequireDefault(_fontLoader);

var _PremiumShadow = __webpack_require__(5);

var _PremiumShadow2 = _interopRequireDefault(_PremiumShadow);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var __ = wp.i18n.__;
var _wp$components = wp.components,
    PanelBody = _wp$components.PanelBody,
    SelectControl = _wp$components.SelectControl,
    ToggleControl = _wp$components.ToggleControl,
    TabPanel = _wp$components.TabPanel;
var _wp$element = wp.element,
    Fragment = _wp$element.Fragment,
    Component = _wp$element.Component;
var _wp$blockEditor = wp.blockEditor,
    InspectorControls = _wp$blockEditor.InspectorControls,
    AlignmentToolbar = _wp$blockEditor.AlignmentToolbar,
    BlockControls = _wp$blockEditor.BlockControls,
    RichText = _wp$blockEditor.RichText,
    URLInput = _wp$blockEditor.URLInput;
var withSelect = wp.data.withSelect;

var edit = exports.edit = function (_Component) {
    _inherits(edit, _Component);

    function edit() {
        _classCallCheck(this, edit);

        var _this = _possibleConstructorReturn(this, (edit.__proto__ || Object.getPrototypeOf(edit)).apply(this, arguments));

        _this.getPreviewSize = _this.getPreviewSize.bind(_this);
        return _this;
    }

    _createClass(edit, [{
        key: "getPreviewSize",
        value: function getPreviewSize(device, desktopSize, tabletSize, mobileSize) {
            if (device === 'Mobile') {
                if (undefined !== mobileSize && '' !== mobileSize) {
                    return mobileSize;
                } else if (undefined !== tabletSize && '' !== tabletSize) {
                    return tabletSize;
                }
            } else if (device === 'Tablet') {
                if (undefined !== tabletSize && '' !== tabletSize) {
                    return tabletSize;
                }
            }
            return desktopSize;
        }
    }, {
        key: "render",
        value: function render() {
            var _this2 = this,
                _React$createElement;

            var _props = this.props,
                isSelected = _props.isSelected,
                setAttributes = _props.setAttributes,
                className = _props.className,
                blockId = _props.clientId;
            var _props$attributes = this.props.attributes,
                borderButton = _props$attributes.borderButton,
                btnText = _props$attributes.btnText,
                btnSize = _props$attributes.btnSize,
                btnAlign = _props$attributes.btnAlign,
                btnLink = _props$attributes.btnLink,
                btnTarget = _props$attributes.btnTarget,
                effect = _props$attributes.effect,
                effectDir = _props$attributes.effectDir,
                slideColor = _props$attributes.slideColor,
                block_id = _props$attributes.block_id,
                hideDesktop = _props$attributes.hideDesktop,
                hideTablet = _props$attributes.hideTablet,
                hideMobile = _props$attributes.hideMobile,
                borderWidth = _props$attributes.borderWidth,
                borderTop = _props$attributes.borderTop,
                borderRight = _props$attributes.borderRight,
                borderBottom = _props$attributes.borderBottom,
                borderLeft = _props$attributes.borderLeft,
                textStyles = _props$attributes.textStyles,
                btnStyles = _props$attributes.btnStyles;


            var SIZE = [{
                value: "sm",
                label: __("Small", 'premium-blocks-for-gutenberg')
            }, {
                value: "md",
                label: __("Medium", 'premium-blocks-for-gutenberg')
            }, {
                value: "lg",
                label: __("Large", 'premium-blocks-for-gutenberg')
            }, {
                value: "block",
                label: __("Block", 'premium-blocks-for-gutenberg')
            }];

            var DIRECTION = [{
                value: "top",
                label: __("Top to Bottom", 'premium-blocks-for-gutenberg')
            }, {
                value: "bottom",
                label: __("Bottom to Top", 'premium-blocks-for-gutenberg')
            }, {
                value: "left",
                label: __("Left to Right", 'premium-blocks-for-gutenberg')
            }, {
                value: "right",
                label: __("Right to Left", 'premium-blocks-for-gutenberg')
            }];

            var SHUTTER = [{
                value: "shutouthor",
                label: __("Shutter out Horizontal", 'premium-blocks-for-gutenberg')
            }, {
                value: "shutoutver",
                label: __("Shutter out Vertical", 'premium-blocks-for-gutenberg')
            }, {
                value: "scshutoutver",
                label: __("Scaled Shutter Vertical", 'premium-blocks-for-gutenberg')
            }, {
                value: "scshutouthor",
                label: __("Scaled Shutter Horizontal", 'premium-blocks-for-gutenberg')
            }, {
                value: "dshutinver",
                label: __("Tilted Left", 'premium-blocks-for-gutenberg')
            }, {
                value: "dshutinhor",
                label: __("Tilted Right", 'premium-blocks-for-gutenberg')
            }];

            var RADIAL = [{
                value: "radialin",
                label: __("Radial In", 'premium-blocks-for-gutenberg')
            }, {
                value: "radialout",
                label: __("Radial Out", 'premium-blocks-for-gutenberg')
            }, {
                value: "rectin",
                label: __("Rectangle In", 'premium-blocks-for-gutenberg')
            }, {
                value: "rectout",
                label: __("Rectangle Out", 'premium-blocks-for-gutenberg')
            }];

            var EFFECTS = [{
                value: "none",
                label: __("None", 'premium-blocks-for-gutenberg')
            }, {
                value: "slide",
                label: __("Slide", 'premium-blocks-for-gutenberg')
            }, {
                value: "shutter",
                label: __("Shutter", 'premium-blocks-for-gutenberg')
            }, {
                value: "radial",
                label: __("Radial", 'premium-blocks-for-gutenberg')
            }];

            var onChangeHover = function onChangeHover(newValue) {
                _this2.props.setAttributes({ effect: newValue });
                switch (newValue) {
                    case "slide":
                        _this2.props.setAttributes({ effectDir: "top" });
                        break;
                    case "shutter":
                        _this2.props.setAttributes({ effectDir: "shutouthor" });
                        break;
                    case "radial":
                        _this2.props.setAttributes({ effectDir: "radialin" });
                        break;
                }
            };

            setAttributes({ block_id: blockId });

            var saveTextStyles = function saveTextStyles(value) {
                var newUpdate = textStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({ textStyles: newUpdate });
            };

            var loadBtnGoogleFonts = void 0;
            if (textStyles[0].textFontFamily !== 'Default') {
                var btnconfig = {
                    google: {
                        families: [textStyles[0].textFontFamily]
                    }
                };
                loadBtnGoogleFonts = React.createElement(_fontLoader2.default, { config: btnconfig });
            }

            var saveBtnStyles = function saveBtnStyles(value) {
                var newUpdate = btnStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({
                    btnStyles: newUpdate
                });
            };

            var mainClasses = (0, _classnames2.default)(className, "premium-button");
            var btnFontSize = this.getPreviewSize(this.props.deviceType, textStyles[0].textSize, textStyles[0].textSizeTablet, textStyles[0].textSizeMobile);
            return [isSelected && "block" != btnSize && React.createElement(
                BlockControls,
                { key: "controls" },
                React.createElement(AlignmentToolbar, {
                    value: btnAlign,
                    onChange: function onChange(newAlign) {
                        return setAttributes({ btnAlign: newAlign });
                    }
                })
            ), isSelected && React.createElement(
                InspectorControls,
                { key: "inspector" },
                React.createElement(
                    PanelBody,
                    {
                        title: __("General Settings", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(SelectControl, {
                        options: EFFECTS,
                        label: __("Hover Effect", 'premium-blocks-for-gutenberg'),
                        value: effect,
                        onChange: onChangeHover
                    }),
                    "slide" === effect && React.createElement(SelectControl, {
                        options: DIRECTION,
                        label: __("Direction", 'premium-blocks-for-gutenberg'),
                        value: effectDir,
                        onChange: function onChange(newValue) {
                            return setAttributes({ effectDir: newValue });
                        }
                    }),
                    "shutter" === effect && React.createElement(SelectControl, {
                        options: SHUTTER,
                        label: __("Shutter Direction", 'premium-blocks-for-gutenberg'),
                        value: effectDir,
                        onChange: function onChange(newValue) {
                            return setAttributes({ effectDir: newValue });
                        }
                    }),
                    "radial" === effect && React.createElement(SelectControl, {
                        options: RADIAL,
                        label: __("Style", 'premium-blocks-for-gutenberg'),
                        value: effectDir,
                        onChange: function onChange(newValue) {
                            return setAttributes({ effectDir: newValue });
                        }
                    }),
                    React.createElement(SelectControl, {
                        options: SIZE,
                        label: __("Button Size", 'premium-blocks-for-gutenberg'),
                        value: btnSize,
                        onChange: function onChange(newSize) {
                            return setAttributes({ btnSize: newSize });
                        }
                    }),
                    React.createElement(ToggleControl, {
                        label: __("Open link in new tab", 'premium-blocks-for-gutenberg'),
                        checked: btnTarget,
                        onChange: function onChange(newValue) {
                            return setAttributes({ btnTarget: newValue });
                        }
                    })
                ),
                React.createElement(
                    PanelBody,
                    {
                        title: __("Text Style", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(_premiumTypo2.default, (_React$createElement = {
                        components: ["responsiveSize", "weight", "line", "style", "upper", "spacing", "family"],
                        setAttributes: saveTextStyles,
                        fontSizeType: {
                            value: textStyles[0].textSizeUnit,
                            label: __("textSizeUnit", 'premium-blocks-for-gutenberg')
                        },
                        fontSize: textStyles[0].textSize,
                        fontSizeMobile: textStyles[0].textSizeMobile,
                        fontSizeTablet: textStyles[0].textSizeTablet,
                        fontFamily: textStyles[0].textFontFamily,
                        weight: textStyles[0].textWeight,
                        style: textStyles[0].textStyle,
                        spacing: textStyles[0].textLetter,
                        upper: textStyles[0].textUpper,
                        line: textStyles[0].textLine,
                        onChangeSize: function onChangeSize(newSize) {
                            return saveTextStyles({ textSize: newSize });
                        },
                        onChangeTabletSize: function onChangeTabletSize(newSize) {
                            return saveTextStyles({ textSizeTablet: newSize });
                        },
                        onChangeMobileSize: function onChangeMobileSize(newSize) {
                            return saveTextStyles({ textSizeMobile: newSize });
                        },
                        onChangeWeight: function onChangeWeight(newWeight) {
                            return saveTextStyles({ textWeight: newWeight });
                        },
                        onChangeLine: function onChangeLine(newValue) {
                            return saveTextStyles({ textLine: newValue });
                        }
                    }, _defineProperty(_React$createElement, "onChangeSize", function onChangeSize(newSize) {
                        return saveTextStyles({ textSize: newSize });
                    }), _defineProperty(_React$createElement, "onChangeStyle", function onChangeStyle(newStyle) {
                        return saveTextStyles({ textStyle: newStyle });
                    }), _defineProperty(_React$createElement, "onChangeSpacing", function onChangeSpacing(newValue) {
                        return saveTextStyles({ textLetter: newValue });
                    }), _defineProperty(_React$createElement, "onChangeFamily", function onChangeFamily(fontFamily) {
                        return saveTextStyles({ textFontFamily: fontFamily });
                    }), _defineProperty(_React$createElement, "onChangeUpper", function onChangeUpper(check) {
                        return saveTextStyles({ textUpper: check });
                    }), _React$createElement)),
                    React.createElement(_PremiumShadow2.default, {
                        label: __("Text Shadow", 'premium-blocks-for-gutenberg'),
                        color: textStyles[0].shadowColor,
                        blur: textStyles[0].shadowBlur,
                        horizontal: textStyles[0].shadowHorizontal,
                        vertical: textStyles[0].shadowVertical,
                        onChangeColor: function onChangeColor(newColor) {
                            return saveTextStyles({ shadowColor: newColor });
                        },
                        onChangeBlur: function onChangeBlur(newBlur) {
                            return saveTextStyles({ shadowBlur: newBlur });
                        },
                        onChangehHorizontal: function onChangehHorizontal(newValue) {
                            return saveTextStyles({ shadowHorizontal: newValue });
                        },
                        onChangeVertical: function onChangeVertical(newValue) {
                            return saveTextStyles({ shadowVertical: newValue });
                        }
                    })
                ),
                React.createElement(
                    PanelBody,
                    {
                        title: __("Button Style", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(
                        "strong",
                        null,
                        __("Colors", 'premium-blocks-for-gutenberg')
                    ),
                    React.createElement(
                        TabPanel,
                        {
                            className: "premium-color-tabpanel",
                            activeClass: "active-tab",
                            tabs: [{
                                name: "normal",
                                title: "Normal",
                                className: "premium-tab"
                            }, {
                                name: "hover",
                                title: "Hover",
                                className: "premium-tab"
                            }]
                        },
                        function (tab) {
                            var tabout = void 0;
                            if ("normal" === tab.name) {
                                tabout = React.createElement(
                                    Fragment,
                                    null,
                                    React.createElement(_ColorComponent2.default, {
                                        label: __("Text Color", 'premium-blocks-for-gutenberg'),
                                        colorValue: btnStyles[0].textColor,
                                        colorDefault: '',
                                        onColorChange: function onColorChange(newValue) {
                                            return saveBtnStyles({ textColor: newValue });
                                        }
                                    }),
                                    React.createElement(_ColorComponent2.default, {
                                        label: __('Background Color', 'premium-blocks-for-gutenberg'),
                                        colorValue: btnStyles[0].backColor,
                                        colorDefault: '',
                                        onColorChange: function onColorChange(newvalue) {
                                            return saveBtnStyles({ backColor: newvalue });
                                        }
                                    })
                                );
                            }
                            if ("hover" === tab.name) {
                                tabout = React.createElement(
                                    Fragment,
                                    null,
                                    React.createElement(_ColorComponent2.default, {
                                        label: __("Text Hover Color", 'premium-blocks-for-gutenberg'),
                                        colorValue: btnStyles[0].textHoverColor,
                                        colorDefault: '',
                                        onColorChange: function onColorChange(newValue) {
                                            return saveBtnStyles({ textHoverColor: newValue });
                                        }
                                    }),
                                    React.createElement(_ColorComponent2.default, {
                                        label: "radial" !== effect ? __("Background Hover Color", 'premium-blocks-for-gutenberg') : __("Background Color", 'premium-blocks-for-gutenberg'),
                                        colorValue: btnStyles[0].backHoverColor,
                                        colorDefault: '',
                                        onColorChange: function onColorChange(newValue) {
                                            return saveBtnStyles({
                                                backHoverColor: newValue,
                                                slideColor: newValue
                                            });
                                        }
                                    }),
                                    React.createElement(_ColorComponent2.default, {
                                        label: __("Border Hover Color", 'premium-blocks-for-gutenberg'),
                                        colorValue: btnStyles[0].borderHoverColor,
                                        colorDefault: '',
                                        onColorChange: function onColorChange(newValue) {
                                            return saveBtnStyles({ borderHoverColor: newValue });
                                        }
                                    })
                                );
                            }
                            return React.createElement(
                                "div",
                                null,
                                tabout,
                                React.createElement("hr", null)
                            );
                        }
                    ),
                    React.createElement(_premiumBorder2.default, {
                        borderType: btnStyles[0].borderType,
                        borderWidth: borderWidth,
                        top: borderTop,
                        right: borderRight,
                        bottom: borderBottom,
                        left: borderLeft,
                        borderColor: btnStyles[0].borderColor,
                        borderRadius: btnStyles[0].borderRadius,
                        onChangeType: function onChangeType(newType) {
                            return saveBtnStyles({ borderType: newType });
                        },
                        onChangeWidth: function onChangeWidth(_ref) {
                            var top = _ref.top,
                                right = _ref.right,
                                bottom = _ref.bottom,
                                left = _ref.left;
                            return setAttributes({
                                borderButton: true,
                                borderTop: top,
                                borderRight: right,
                                borderBottom: bottom,
                                borderLeft: left
                            });
                        },
                        onChangeColor: function onChangeColor(colorValue) {
                            return saveBtnStyles({ borderColor: colorValue });
                        },
                        onChangeRadius: function onChangeRadius(newrRadius) {
                            return saveBtnStyles({ borderRadius: newrRadius });
                        }
                    }),
                    React.createElement(_PremiumShadow2.default, {
                        label: __("Box Shadow", 'premium-blocks-for-gutenberg'),
                        boxShadow: true,
                        color: btnStyles[0].btnShadowColor,
                        blur: btnStyles[0].btnShadowBlur,
                        horizontal: btnStyles[0].btnShadowHorizontal,
                        vertical: btnStyles[0].btnShadowVertical,
                        position: btnStyles[0].btnShadowPosition,
                        onChangeColor: function onChangeColor(newColor) {
                            return saveBtnStyles({ btnShadowColor: newColor === undefined ? "transparent" : newColor });
                        },
                        onChangeBlur: function onChangeBlur(newBlur) {
                            return saveBtnStyles({ btnShadowBlur: newBlur === undefined ? 0 : newBlur });
                        },
                        onChangehHorizontal: function onChangehHorizontal(newValue) {
                            return saveBtnStyles({ btnShadowHorizontal: newValue === undefined ? 0 : newValue });
                        },
                        onChangeVertical: function onChangeVertical(newValue) {
                            return saveBtnStyles({ btnShadowVertical: newValue === undefined ? 0 : newValue });
                        },
                        onChangePosition: function onChangePosition(newValue) {
                            return saveBtnStyles({ btnShadowPosition: newValue === undefined ? 0 : newValue });
                        }
                    }),
                    React.createElement(_singleRangeControl2.default, {
                        label: __("Padding", 'premium-blocks-for-gutenberg'),
                        value: btnStyles[0].padding,
                        onChange: function onChange(newValue) {
                            return saveBtnStyles({ padding: newValue });
                        },
                        defaultValue: 0,
                        onChangeUnit: function onChangeUnit(newValue) {
                            return saveBtnStyles({ paddingU: newValue });
                        },
                        showUnit: true,
                        unit: btnStyles[0].paddingU
                    })
                ),
                React.createElement(_premiumResponsiveTabs2.default, {
                    Desktop: hideDesktop,
                    Tablet: hideTablet,
                    Mobile: hideMobile,
                    onChangeDesktop: function onChangeDesktop(value) {
                        return setAttributes({ hideDesktop: value ? " premium-desktop-hidden" : "" });
                    },
                    onChangeTablet: function onChangeTablet(value) {
                        return setAttributes({ hideTablet: value ? " premium-tablet-hidden" : "" });
                    },
                    onChangeMobile: function onChangeMobile(value) {
                        return setAttributes({ hideMobile: value ? " premium-mobile-hidden" : "" });
                    }
                })
            ), React.createElement(
                "div",
                {
                    id: "premium-button-wrap-" + block_id,
                    className: mainClasses + "__wrap premium-button__" + effect + " premium-button__" + effectDir + " premium-button-" + block_id + " " + hideDesktop + " " + hideTablet + " " + hideMobile,
                    style: { textAlign: btnAlign }
                },
                React.createElement("style", {
                    dangerouslySetInnerHTML: {
                        __html: ["#premium-button-wrap-" + block_id + " .premium-button:hover {", "color: " + btnStyles[0].textHoverColor + " !important;", "border-color: " + btnStyles[0].borderHoverColor + " !important;", "}", "#premium-button-wrap-" + block_id + ".premium-button__none .premium-button:hover {", "background-color: " + btnStyles[0].backHoverColor + " !important;", "}", "#premium-button-wrap-" + block_id + ".premium-button__slide .premium-button::before,", "#premium-button-wrap-" + block_id + ".premium-button__shutter .premium-button::before,", "#premium-button-wrap-" + block_id + ".premium-button__radial .premium-button::before {", "background-color: " + slideColor, "}"].join("\n")
                    }
                }),
                React.createElement(RichText, {
                    className: "premium-button premium-button__" + btnSize,
                    value: btnText,
                    onChange: function onChange(value) {
                        return setAttributes({ btnText: value });
                    },
                    style: {
                        color: btnStyles[0].textColor,
                        backgroundColor: btnStyles[0].backColor,
                        fontFamily: textStyles[0].textFontFamily,
                        letterSpacing: textStyles[0].textLetter + "px",
                        fontSize: btnFontSize + textStyles[0].textSizeUnit,
                        textTransform: textStyles[0].textUpper ? "uppercase" : "none",
                        fontStyle: textStyles[0].textStyle,
                        lineHeight: textStyles[0].textLine + "px",
                        fontWeight: textStyles[0].textWeight,
                        textShadow: textStyles[0].shadowHorizontal + "px " + textStyles[0].shadowVertical + "px " + textStyles[0].shadowBlur + "px " + textStyles[0].shadowColor,
                        boxShadow: btnStyles[0].btnShadowHorizontal + "px " + btnStyles[0].btnShadowVertical + "px " + btnStyles[0].btnShadowBlur + "px " + btnStyles[0].btnShadowColor + " " + btnStyles[0].btnShadowPosition,
                        padding: btnStyles[0].padding + btnStyles[0].paddingU,
                        borderStyle: btnStyles[0].borderType,
                        borderWidth: borderButton ? borderTop + "px " + borderRight + "px " + borderBottom + "px " + borderLeft + "px" : borderWidth + "px",
                        borderRadius: btnStyles[0].borderRadius + "px",
                        borderColor: btnStyles[0].borderColor
                    },
                    keepPlaceholderOnFocus: true
                }),
                React.createElement(URLInput, {
                    value: btnLink,
                    onChange: function onChange(newLink) {
                        return setAttributes({ btnLink: newLink });
                    }
                }),
                loadBtnGoogleFonts
            )];
        }
    }]);

    return edit;
}(Component);

;

exports.default = withSelect(function (select, props) {
    var _select = select('core/edit-post'),
        _select$__experimenta = _select.__experimentalGetPreviewDeviceType,
        __experimentalGetPreviewDeviceType = _select$__experimenta === undefined ? null : _select$__experimenta;

    var deviceType = __experimentalGetPreviewDeviceType ? __experimentalGetPreviewDeviceType() : null;

    return {
        deviceType: deviceType
    };
})(edit);

/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classnames = __webpack_require__(0);

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var RichText = wp.blockEditor.RichText;

var save = function save(props) {
    var className = props.className;
    var _props$attributes = props.attributes,
        borderButton = _props$attributes.borderButton,
        btnText = _props$attributes.btnText,
        btnSize = _props$attributes.btnSize,
        btnAlign = _props$attributes.btnAlign,
        btnLink = _props$attributes.btnLink,
        btnTarget = _props$attributes.btnTarget,
        effect = _props$attributes.effect,
        effectDir = _props$attributes.effectDir,
        slideColor = _props$attributes.slideColor,
        block_id = _props$attributes.block_id,
        hideDesktop = _props$attributes.hideDesktop,
        hideTablet = _props$attributes.hideTablet,
        hideMobile = _props$attributes.hideMobile,
        textStyles = _props$attributes.textStyles,
        btnStyles = _props$attributes.btnStyles,
        borderTop = _props$attributes.borderTop,
        borderRight = _props$attributes.borderRight,
        borderBottom = _props$attributes.borderBottom,
        borderLeft = _props$attributes.borderLeft,
        borderWidth = _props$attributes.borderWidth;

    var mainClasses = (0, _classnames2.default)(className, 'premium-button');

    return React.createElement(
        'div',
        {
            id: mainClasses + '-wrap-' + block_id,
            className: mainClasses + '__wrap premium-button__' + effect + ' premium-button__' + effectDir + ' premium-button-' + block_id + ' ' + hideDesktop + ' ' + hideTablet + ' ' + hideMobile,
            style: { textAlign: btnAlign }
        },
        React.createElement('style', {
            dangerouslySetInnerHTML: {
                __html: ['#premium-button-wrap-' + block_id + ' .premium-button:hover {', 'color: ' + btnStyles[0].textHoverColor + ' !important;', 'border-color: ' + btnStyles[0].borderHoverColor + ' !important;', "}", '#premium-button-wrap-' + block_id + '.premium-button__none .premium-button:hover {', 'background-color: ' + btnStyles[0].backHoverColor + ' !important;', "}", '#premium-button-wrap-' + block_id + '.premium-button__slide .premium-button::before,', '#premium-button-wrap-' + block_id + '.premium-button__shutter .premium-button::before,', '#premium-button-wrap-' + block_id + '.premium-button__radial .premium-button::before {', 'background-color: ' + slideColor, "}"].join("\n")
            }
        }),
        React.createElement(RichText.Content, {
            tagName: 'a',
            value: btnText,
            className: 'premium-button premium-button__' + btnSize,
            href: btnLink,
            rel: 'noopener noreferrer',
            target: btnTarget ? "_blank" : "_self",
            style: {
                color: btnStyles[0].textColor,
                backgroundColor: btnStyles[0].backColor,
                fontFamily: textStyles[0].textFontFamily,
                letterSpacing: textStyles[0].textLetter + "px",
                textTransform: textStyles[0].textUpper ? "uppercase" : "none",
                fontStyle: textStyles[0].textStyle,
                lineHeight: textStyles[0].textLine + "px",
                fontWeight: textStyles[0].textWeight,
                textShadow: textStyles[0].shadowHorizontal + 'px ' + textStyles[0].shadowVertical + 'px ' + textStyles[0].shadowBlur + 'px ' + textStyles[0].shadowColor,
                boxShadow: btnStyles[0].btnShadowHorizontal + 'px ' + btnStyles[0].btnShadowVertical + 'px ' + btnStyles[0].btnShadowBlur + 'px ' + btnStyles[0].btnShadowColor + ' ' + btnStyles[0].btnShadowPosition,
                padding: btnStyles[0].padding + btnStyles[0].paddingU,
                borderStyle: btnStyles[0].borderType,
                borderWidth: borderButton ? borderTop + 'px ' + borderRight + 'px ' + borderBottom + 'px ' + borderLeft + 'px' : borderWidth + "px",
                borderRadius: btnStyles[0].borderRadius + "px",
                borderColor: btnStyles[0].borderColor
            }
        })
    );
};
exports.default = save;

/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classnames = __webpack_require__(0);

var _classnames2 = _interopRequireDefault(_classnames);

var _hexToRgba = __webpack_require__(17);

var _hexToRgba2 = _interopRequireDefault(_hexToRgba);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var className = "premium-button";
var __ = wp.i18n.__;
var RichText = wp.editor.RichText;


var attributes = {
    borderButton: {
        type: "boolean",
        default: false
    },
    btnText: {
        type: "string",
        default: __("Premium Button")
    },
    btnSize: {
        type: "string",
        default: "md"
    },
    btnAlign: {
        type: "string",
        default: "center"
    },
    btnLink: {
        type: "string",
        source: "attribute",
        attribute: "href",
        selector: ".premium-button"
    },
    btnTarget: {
        type: "boolean",
        default: false
    },
    effect: {
        type: "string",
        default: "none"
    },
    effectDir: {
        type: "string",
        default: "top"
    },
    textColor: {
        type: "string"
    },
    textHoverColor: {
        type: "string"
    },
    backColor: {
        type: "string"
    },
    backOpacity: {
        type: "number",
        default: "1"
    },
    backHoverColor: {
        type: "string"
    },
    slideColor: {
        type: "string"
    },
    textSizeUnit: {
        type: "string",
        default: 'px'
    },
    textSize: {
        type: "number",
        default: '20'
    },
    textSizeTablet: {
        type: "number"
    },
    textSizeMobile: {
        type: "number"
    },
    textFontFamily: {
        type: "string"
    },
    textLetter: {
        type: "number"
    },
    textStyle: {
        type: "string"
    },
    textUpper: {
        type: "boolean"
    },
    textWeight: {
        type: "number",
        default: 500
    },
    textLine: {
        type: "number"
    },
    borderType: {
        type: "string",
        default: "none"
    },
    borderWidth: {
        type: "number",
        default: "1"
    },
    borderTop: {
        type: "number"
    },
    borderRight: {
        type: "number"
    },
    borderBottom: {
        type: "number"
    },
    borderLeft: {
        type: "number"
    },
    borderRadius: {
        type: "number"
    },
    borderColor: {
        type: "string"
    },
    borderHoverColor: {
        type: "string"
    },
    padding: {
        type: "number"
    },
    paddingU: {
        type: "string"
    },
    shadowColor: {
        type: "string"
    },
    shadowBlur: {
        type: "number",
        default: "0"
    },
    shadowHorizontal: {
        type: "number",
        default: "0"
    },
    shadowVertical: {
        type: "number",
        default: "0"
    },
    btnShadowColor: {
        type: "string"
    },
    btnShadowBlur: {
        type: "number",
        default: "0"
    },
    btnShadowHorizontal: {
        type: "number",
        default: "0"
    },
    btnShadowVertical: {
        type: "number",
        default: "0"
    },
    btnShadowPosition: {
        type: "string",
        default: ""
    },
    block_id: {
        type: "string"
    },
    hideDesktop: {
        type: 'boolean',
        default: false
    },
    classMigrate: {
        type: 'boolean',
        default: false
    },
    hideTablet: {
        type: 'boolean',
        default: false
    },
    hideMobile: {
        type: 'boolean',
        default: false
    }
};

var deprecatedContent = [{
    attributes: attributes,
    migrate: function migrate(attributes) {
        var newAttributes = {
            textStyles: [{
                textSizeUnit: attributes.textSizeUnit,
                textSize: attributes.textSize,
                textSizeTablet: attributes.textSizeTablet,
                textSizeMobile: attributes.textSizeMobile,
                textFontFamily: attributes.textFontFamily,
                textLetter: attributes.textLetter,
                textStyle: attributes.textStyle,
                textUpper: attributes.textUpper,
                textWeight: attributes.textWeight,
                textLine: attributes.textLine,
                shadowColor: attributes.shadowColor,
                shadowBlur: attributes.shadowBlur,
                shadowHorizontal: attributes.shadowHorizontal,
                shadowVertical: attributes.shadowVertical
            }],

            btnStyles: [{
                textColor: attributes.textColor,
                textHoverColor: attributes.textHoverColor,
                backColor: attributes.backColor,
                backOpacity: attributes.backOpacity,
                backHoverColor: attributes.backHoverColor,
                borderType: attributes.borderType,
                borderRadius: attributes.borderRadius,
                borderColor: attributes.borderColor,
                borderHoverColor: attributes.borderHoverColor,
                btnShadowColor: attributes.btnShadowColor,
                btnShadowBlur: attributes.btnShadowBlur,
                btnShadowHorizontal: attributes.btnShadowHorizontal,
                btnShadowVertical: attributes.btnShadowVertical,
                btnShadowPosition: attributes.btnShadowPosition,
                padding: attributes.padding,
                paddingU: attributes.paddingU
            }]

        };
        return Object.assign(attributes, newAttributes);
    },
    save: function save(props) {
        var _props$attributes = props.attributes,
            block_id = _props$attributes.block_id,
            borderButton = _props$attributes.borderButton,
            btnText = _props$attributes.btnText,
            btnSize = _props$attributes.btnSize,
            btnAlign = _props$attributes.btnAlign,
            btnLink = _props$attributes.btnLink,
            btnTarget = _props$attributes.btnTarget,
            effect = _props$attributes.effect,
            effectDir = _props$attributes.effectDir,
            textColor = _props$attributes.textColor,
            textHoverColor = _props$attributes.textHoverColor,
            backColor = _props$attributes.backColor,
            backHoverColor = _props$attributes.backHoverColor,
            slideColor = _props$attributes.slideColor,
            textFontFamily = _props$attributes.textFontFamily,
            textWeight = _props$attributes.textWeight,
            textLine = _props$attributes.textLine,
            textLetter = _props$attributes.textLetter,
            textStyle = _props$attributes.textStyle,
            backOpacity = _props$attributes.backOpacity,
            textUpper = _props$attributes.textUpper,
            borderType = _props$attributes.borderType,
            borderWidth = _props$attributes.borderWidth,
            borderTop = _props$attributes.borderTop,
            borderRight = _props$attributes.borderRight,
            borderBottom = _props$attributes.borderBottom,
            borderLeft = _props$attributes.borderLeft,
            borderRadius = _props$attributes.borderRadius,
            borderColor = _props$attributes.borderColor,
            borderHoverColor = _props$attributes.borderHoverColor,
            padding = _props$attributes.padding,
            paddingU = _props$attributes.paddingU,
            shadowBlur = _props$attributes.shadowBlur,
            shadowColor = _props$attributes.shadowColor,
            shadowHorizontal = _props$attributes.shadowHorizontal,
            shadowVertical = _props$attributes.shadowVertical,
            btnShadowBlur = _props$attributes.btnShadowBlur,
            btnShadowColor = _props$attributes.btnShadowColor,
            btnShadowHorizontal = _props$attributes.btnShadowHorizontal,
            btnShadowVertical = _props$attributes.btnShadowVertical,
            btnShadowPosition = _props$attributes.btnShadowPosition,
            hideDesktop = _props$attributes.hideDesktop,
            hideTablet = _props$attributes.hideTablet,
            hideMobile = _props$attributes.hideMobile;

        return React.createElement(
            'div',
            {
                id: className + '-wrap-' + block_id,
                className: className + '__wrap premium-button__' + effect + ' premium-button__' + effectDir + ' premium-button-' + block_id + ' ' + hideDesktop + ' ' + hideTablet + ' ' + hideMobile,
                style: { textAlign: btnAlign }
            },
            React.createElement('style', {
                dangerouslySetInnerHTML: {
                    __html: ['#premium-button-wrap-' + block_id + ' .premium-button:hover {', 'color: ' + textHoverColor + ' !important;', 'border-color: ' + borderHoverColor + ' !important;', "}", '#premium-button-wrap-' + block_id + '.premium-button__none .premium-button:hover {', 'background-color: ' + backHoverColor + ' !important;', "}", '#premium-button-wrap-' + block_id + '.premium-button__slide .premium-button::before,', '#premium-button-wrap-' + block_id + '.premium-button__shutter .premium-button::before,', '#premium-button-wrap-' + block_id + '.premium-button__radial .premium-button::before {', 'background-color: ' + slideColor, "}"].join("\n")
                }
            }),
            React.createElement(RichText.Content, {
                tagName: 'a',
                value: btnText,
                className: 'premium-button premium-button__' + btnSize,
                href: btnLink,
                rel: 'noopener noreferrer',
                target: btnTarget ? "_blank" : "_self",
                style: {
                    color: textColor,
                    backgroundColor: backColor ? (0, _hexToRgba2.default)(backColor, backOpacity) : "transparent",
                    fontFamily: textFontFamily,
                    letterSpacing: textLetter + "px",
                    textTransform: textUpper ? "uppercase" : "none",
                    fontStyle: textStyle,
                    lineHeight: textLine + "px",
                    fontWeight: textWeight,
                    textShadow: shadowHorizontal + 'px ' + shadowVertical + 'px ' + shadowBlur + 'px ' + shadowColor,
                    boxShadow: btnShadowHorizontal + 'px ' + btnShadowVertical + 'px ' + btnShadowBlur + 'px ' + btnShadowColor + ' ' + btnShadowPosition,
                    padding: padding + paddingU,
                    borderStyle: borderType,
                    borderWidth: borderButton ? borderTop + 'px ' + borderRight + 'px ' + borderBottom + 'px ' + borderLeft + 'px' : borderWidth + "px",
                    borderRadius: borderRadius + "px",
                    borderColor: borderColor
                }
            })
        );
    }
}, {
    attributes: attributes,

    save: function save(props) {
        var _props$attributes2 = props.attributes,
            id = _props$attributes2.id,
            btnText = _props$attributes2.btnText,
            btnSize = _props$attributes2.btnSize,
            btnAlign = _props$attributes2.btnAlign,
            btnLink = _props$attributes2.btnLink,
            btnTarget = _props$attributes2.btnTarget,
            effect = _props$attributes2.effect,
            effectDir = _props$attributes2.effectDir,
            textColor = _props$attributes2.textColor,
            textHoverColor = _props$attributes2.textHoverColor,
            backColor = _props$attributes2.backColor,
            backHoverColor = _props$attributes2.backHoverColor,
            slideColor = _props$attributes2.slideColor,
            textSize = _props$attributes2.textSize,
            textFontFamily = _props$attributes2.textFontFamily,
            textWeight = _props$attributes2.textWeight,
            textLine = _props$attributes2.textLine,
            textLetter = _props$attributes2.textLetter,
            textStyle = _props$attributes2.textStyle,
            textUpper = _props$attributes2.textUpper,
            borderType = _props$attributes2.borderType,
            borderWidth = _props$attributes2.borderWidth,
            borderRadius = _props$attributes2.borderRadius,
            borderColor = _props$attributes2.borderColor,
            borderHoverColor = _props$attributes2.borderHoverColor,
            padding = _props$attributes2.padding,
            paddingU = _props$attributes2.paddingU,
            shadowBlur = _props$attributes2.shadowBlur,
            shadowColor = _props$attributes2.shadowColor,
            shadowHorizontal = _props$attributes2.shadowHorizontal,
            shadowVertical = _props$attributes2.shadowVertical,
            btnShadowBlur = _props$attributes2.btnShadowBlur,
            btnShadowColor = _props$attributes2.btnShadowColor,
            btnShadowHorizontal = _props$attributes2.btnShadowHorizontal,
            btnShadowVertical = _props$attributes2.btnShadowVertical,
            btnShadowPosition = _props$attributes2.btnShadowPosition;

        return React.createElement(
            'div',
            {
                id: className + '-wrap-' + id,
                className: className + '__wrap premium-button__' + effect + ' premium-button__' + effectDir,
                style: { textAlign: btnAlign }
            },
            React.createElement('style', {
                dangerouslySetInnerHTML: {
                    __html: ['#premium-button-wrap-' + id + ' .premium-button:hover {', 'color: ' + textHoverColor + ' !important;', 'border-color: ' + borderHoverColor + ' !important;', "}", '#premium-button-wrap-' + id + '.premium-button__none .premium-button:hover {', 'background-color: ' + backHoverColor + ' !important;', "}", '#premium-button-wrap-' + id + '.premium-button__slide .premium-button::before,', '#premium-button-wrap-' + id + '.premium-button__shutter .premium-button::before,', '#premium-button-wrap-' + id + '.premium-button__radial .premium-button::before {', 'background-color: ' + slideColor, "}"].join("\n")
                }
            }),
            React.createElement(RichText.Content, {
                tagName: 'a',
                value: btnText,
                className: 'premium-button premium-button__' + btnSize,
                href: btnLink,
                rel: 'noopener noreferrer',
                target: btnTarget ? "_blank" : "_self",
                style: {
                    color: textColor,
                    backgroundColor: backColor,
                    fontSize: textSize + "px",
                    fontFamily: textFontFamily,
                    letterSpacing: textLetter + "px",
                    textTransform: textUpper ? "uppercase" : "none",
                    fontStyle: textStyle,
                    lineHeight: textLine + "px",
                    fontWeight: textWeight,
                    textShadow: shadowHorizontal + 'px ' + shadowVertical + 'px ' + shadowBlur + 'px ' + shadowColor,
                    boxShadow: btnShadowHorizontal + 'px ' + btnShadowVertical + 'px ' + btnShadowBlur + 'px ' + btnShadowColor + ' ' + btnShadowPosition,
                    padding: padding + paddingU,
                    border: borderType,
                    borderWidth: borderWidth + "px",
                    borderRadius: borderRadius + "px",
                    borderColor: borderColor
                }
            })
        );
    }
}, {
    attributes: attributes,
    migrate: function migrate(attributes) {
        return Object.assign(attributes, { paddingU: "" });
    },
    save: function save(props) {
        var _props$attributes3 = props.attributes,
            id = _props$attributes3.id,
            btnText = _props$attributes3.btnText,
            btnSize = _props$attributes3.btnSize,
            btnAlign = _props$attributes3.btnAlign,
            btnLink = _props$attributes3.btnLink,
            btnTarget = _props$attributes3.btnTarget,
            effect = _props$attributes3.effect,
            effectDir = _props$attributes3.effectDir,
            textColor = _props$attributes3.textColor,
            textHoverColor = _props$attributes3.textHoverColor,
            backColor = _props$attributes3.backColor,
            backHoverColor = _props$attributes3.backHoverColor,
            slideColor = _props$attributes3.slideColor,
            textSize = _props$attributes3.textSize,
            textFontFamily = _props$attributes3.textFontFamily,
            textWeight = _props$attributes3.textWeight,
            textLine = _props$attributes3.textLine,
            textLetter = _props$attributes3.textLetter,
            textStyle = _props$attributes3.textStyle,
            textUpper = _props$attributes3.textUpper,
            borderType = _props$attributes3.borderType,
            borderWidth = _props$attributes3.borderWidth,
            borderRadius = _props$attributes3.borderRadius,
            borderColor = _props$attributes3.borderColor,
            borderHoverColor = _props$attributes3.borderHoverColor,
            padding = _props$attributes3.padding,
            shadowBlur = _props$attributes3.shadowBlur,
            shadowColor = _props$attributes3.shadowColor,
            shadowHorizontal = _props$attributes3.shadowHorizontal,
            shadowVertical = _props$attributes3.shadowVertical,
            btnShadowBlur = _props$attributes3.btnShadowBlur,
            btnShadowColor = _props$attributes3.btnShadowColor,
            btnShadowHorizontal = _props$attributes3.btnShadowHorizontal,
            btnShadowVertical = _props$attributes3.btnShadowVertical,
            btnShadowPosition = _props$attributes3.btnShadowPosition;

        return React.createElement(
            'div',
            {
                id: className + '-wrap-' + id,
                className: className + '__wrap ' + className + '__' + effect + ' ' + className + '__' + effectDir,
                style: { textAlign: btnAlign }
            },
            React.createElement('style', {
                dangerouslySetInnerHTML: {
                    __html: ['#premium-button-wrap-' + id + ' .premium-button:hover {', 'color: ' + textHoverColor + ' !important;', 'border-color: ' + borderHoverColor + ' !important;', "}", '#premium-button-wrap-' + id + '.premium-button__none .premium-button:hover {', 'background-color: ' + backHoverColor + ' !important;', "}", '#premium-button-wrap-' + id + '.premium-button__slide .premium-button::before,', '#premium-button-wrap-' + id + '.premium-button__shutter .premium-button::before,', '#premium-button-wrap-' + id + '.premium-button__radial .premium-button::before {', 'background-color: ' + slideColor, "}"].join("\n")
                }
            }),
            React.createElement(RichText.Content, {
                tagName: 'a',
                value: btnText,
                className: className + ' ' + className + '__' + btnSize,
                href: btnLink,
                rel: 'noopener noreferrer',
                target: btnTarget ? "_blank" : "_self",
                style: {
                    color: textColor,
                    backgroundColor: backColor,
                    fontSize: textSize + "px",
                    fontFamily: textFontFamily,
                    letterSpacing: textLetter + "px",
                    textTransform: textUpper ? "uppercase" : "none",
                    fontStyle: textStyle,
                    lineHeight: textLine + "px",
                    fontWeight: textWeight,
                    textShadow: shadowHorizontal + 'px ' + shadowVertical + 'px ' + shadowBlur + 'px ' + shadowColor,
                    boxShadow: btnShadowHorizontal + 'px ' + btnShadowVertical + 'px ' + btnShadowBlur + 'px ' + btnShadowColor + ' ' + btnShadowPosition,
                    padding: padding + "px",
                    border: borderType,
                    borderWidth: borderWidth + "px",
                    borderRadius: borderRadius + "px",
                    borderColor: borderColor
                }
            })
        );
    }
}, {
    attributes: attributes,
    save: function save(props) {
        var _props$attributes4 = props.attributes,
            id = _props$attributes4.id,
            btnText = _props$attributes4.btnText,
            btnSize = _props$attributes4.btnSize,
            btnAlign = _props$attributes4.btnAlign,
            btnLink = _props$attributes4.btnLink,
            btnTarget = _props$attributes4.btnTarget,
            effect = _props$attributes4.effect,
            effectDir = _props$attributes4.effectDir,
            textColor = _props$attributes4.textColor,
            textHoverColor = _props$attributes4.textHoverColor,
            backColor = _props$attributes4.backColor,
            backHoverColor = _props$attributes4.backHoverColor,
            slideColor = _props$attributes4.slideColor,
            textSize = _props$attributes4.textSize,
            textFontFamily = _props$attributes4.textFontFamily,
            textWeight = _props$attributes4.textWeight,
            textLine = _props$attributes4.textLine,
            textLetter = _props$attributes4.textLetter,
            textStyle = _props$attributes4.textStyle,
            textUpper = _props$attributes4.textUpper,
            borderType = _props$attributes4.borderType,
            borderWidth = _props$attributes4.borderWidth,
            borderRadius = _props$attributes4.borderRadius,
            borderColor = _props$attributes4.borderColor,
            borderHoverColor = _props$attributes4.borderHoverColor,
            padding = _props$attributes4.padding,
            shadowBlur = _props$attributes4.shadowBlur,
            shadowColor = _props$attributes4.shadowColor,
            shadowHorizontal = _props$attributes4.shadowHorizontal,
            shadowVertical = _props$attributes4.shadowVertical,
            btnShadowBlur = _props$attributes4.btnShadowBlur,
            btnShadowColor = _props$attributes4.btnShadowColor,
            btnShadowHorizontal = _props$attributes4.btnShadowHorizontal,
            btnShadowVertical = _props$attributes4.btnShadowVertical,
            btnShadowPosition = _props$attributes4.btnShadowPosition;

        return React.createElement(
            'div',
            {
                id: className + '-wrap-' + id,
                className: className + '__wrap ' + className + '__' + effect + ' ' + className + '__' + effectDir,
                style: { textAlign: btnAlign }
            },
            React.createElement('style', {
                dangerouslySetInnerHTML: {
                    __html: ['#premium-button-wrap-' + id + ' .premium-button:hover {', 'color: ' + textHoverColor + ' !important;', 'border-color: ' + borderHoverColor + ' !important;', "}", '#premium-button-wrap-' + id + '.premium-button__none .premium-button:hover {', 'background-color: ' + backHoverColor + ' !important;', "}", '#premium-button-wrap-' + id + '.premium-button__slide .premium-button::before,', '#premium-button-wrap-' + id + '.premium-button__shutter .premium-button::before,', '#premium-button-wrap-' + id + '.premium-button__radial .premium-button::before {', 'background-color: ' + slideColor, "}"].join("\n")
                }
            }),
            React.createElement(RichText.Content, {
                tagName: 'a',
                value: btnText,
                className: className + ' ' + className + '__' + btnSize,
                href: btnLink,
                target: btnTarget ? "_blank" : "_self",
                style: {
                    color: textColor,
                    backgroundColor: backColor,
                    fontSize: textSize + "px",
                    fontFamily: textFontFamily,
                    letterSpacing: textLetter + "px",
                    textTransform: textUpper ? "uppercase" : "none",
                    fontStyle: textStyle,
                    lineHeight: textLine + "px",
                    fontWeight: textWeight,
                    textShadow: shadowHorizontal + 'px ' + shadowVertical + 'px ' + shadowBlur + 'px ' + shadowColor,
                    boxShadow: btnShadowHorizontal + 'px ' + btnShadowVertical + 'px ' + btnShadowBlur + 'px ' + btnShadowColor + ' ' + btnShadowPosition,
                    padding: padding + "px",
                    border: borderType,
                    borderWidth: borderWidth + "px",
                    borderRadius: borderRadius + "px",
                    borderColor: borderColor
                }
            })
        );
    }
}, {
    attributes: attributes,
    migrate: function migrate(attributes) {
        return Object.assign(attributes, { textFontFamily: "" });
    },
    save: function save(props) {
        var _props$attributes5 = props.attributes,
            id = _props$attributes5.id,
            btnText = _props$attributes5.btnText,
            btnSize = _props$attributes5.btnSize,
            btnAlign = _props$attributes5.btnAlign,
            btnLink = _props$attributes5.btnLink,
            btnTarget = _props$attributes5.btnTarget,
            effect = _props$attributes5.effect,
            effectDir = _props$attributes5.effectDir,
            textColor = _props$attributes5.textColor,
            textHoverColor = _props$attributes5.textHoverColor,
            backColor = _props$attributes5.backColor,
            backHoverColor = _props$attributes5.backHoverColor,
            slideColor = _props$attributes5.slideColor,
            textSize = _props$attributes5.textSize,
            textWeight = _props$attributes5.textWeight,
            textLine = _props$attributes5.textLine,
            textLetter = _props$attributes5.textLetter,
            textStyle = _props$attributes5.textStyle,
            textUpper = _props$attributes5.textUpper,
            borderType = _props$attributes5.borderType,
            borderWidth = _props$attributes5.borderWidth,
            borderRadius = _props$attributes5.borderRadius,
            borderColor = _props$attributes5.borderColor,
            borderHoverColor = _props$attributes5.borderHoverColor,
            padding = _props$attributes5.padding,
            shadowBlur = _props$attributes5.shadowBlur,
            shadowColor = _props$attributes5.shadowColor,
            shadowHorizontal = _props$attributes5.shadowHorizontal,
            shadowVertical = _props$attributes5.shadowVertical,
            btnShadowBlur = _props$attributes5.btnShadowBlur,
            btnShadowColor = _props$attributes5.btnShadowColor,
            btnShadowHorizontal = _props$attributes5.btnShadowHorizontal,
            btnShadowVertical = _props$attributes5.btnShadowVertical,
            btnShadowPosition = _props$attributes5.btnShadowPosition;

        return React.createElement(
            'div',
            {
                id: className + '-wrap-' + id,
                className: className + '__wrap ' + className + '__' + effect + ' ' + className + '__' + effectDir,
                style: { textAlign: btnAlign }
            },
            React.createElement('style', {
                dangerouslySetInnerHTML: {
                    __html: ['#premium-button-wrap-' + id + ' .premium-button:hover {', 'color: ' + textHoverColor + ' !important;', 'border-color: ' + borderHoverColor + ' !important;', "}", '#premium-button-wrap-' + id + '.premium-button__none .premium-button:hover {', 'background-color: ' + backHoverColor + ' !important;', "}", '#premium-button-wrap-' + id + '.premium-button__slide .premium-button::before,', '#premium-button-wrap-' + id + '.premium-button__shutter .premium-button::before,', '#premium-button-wrap-' + id + '.premium-button__radial .premium-button::before {', 'background-color: ' + slideColor, "}"].join("\n")
                }
            }),
            React.createElement(RichText.Content, {
                tagName: 'a',
                value: btnText,
                className: className + ' ' + className + '__' + btnSize,
                href: btnLink,
                target: btnTarget ? "_blank" : "_self",
                style: {
                    color: textColor,
                    backgroundColor: backColor,
                    fontSize: textSize + "px",
                    letterSpacing: textLetter + "px",
                    textTransform: textUpper ? "uppercase" : "none",
                    fontStyle: textStyle,
                    lineHeight: textLine + "px",
                    fontWeight: textWeight,
                    textShadow: shadowHorizontal + 'px ' + shadowVertical + 'px ' + shadowBlur + 'px ' + shadowColor,
                    boxShadow: btnShadowHorizontal + 'px ' + btnShadowVertical + 'px ' + btnShadowBlur + 'px ' + btnShadowColor + ' ' + btnShadowPosition,
                    padding: padding + "px",
                    border: borderType,
                    borderWidth: borderWidth + "px",
                    borderRadius: borderRadius + "px",
                    borderColor: borderColor
                }
            })
        );
    }
}, {
    attributes: attributes,
    migrate: function migrate(attributes) {
        return Object.assign(attributes, { borderHoverColor: "" });
    },
    save: function save(props) {
        var _props$attributes6 = props.attributes,
            id = _props$attributes6.id,
            btnText = _props$attributes6.btnText,
            btnSize = _props$attributes6.btnSize,
            btnAlign = _props$attributes6.btnAlign,
            btnLink = _props$attributes6.btnLink,
            btnTarget = _props$attributes6.btnTarget,
            effect = _props$attributes6.effect,
            effectDir = _props$attributes6.effectDir,
            textColor = _props$attributes6.textColor,
            textHoverColor = _props$attributes6.textHoverColor,
            backColor = _props$attributes6.backColor,
            backHoverColor = _props$attributes6.backHoverColor,
            slideColor = _props$attributes6.slideColor,
            textSize = _props$attributes6.textSize,
            textWeight = _props$attributes6.textWeight,
            textLine = _props$attributes6.textLine,
            textLetter = _props$attributes6.textLetter,
            textStyle = _props$attributes6.textStyle,
            textUpper = _props$attributes6.textUpper,
            borderType = _props$attributes6.borderType,
            borderWidth = _props$attributes6.borderWidth,
            borderRadius = _props$attributes6.borderRadius,
            borderColor = _props$attributes6.borderColor,
            padding = _props$attributes6.padding,
            shadowBlur = _props$attributes6.shadowBlur,
            shadowColor = _props$attributes6.shadowColor,
            shadowHorizontal = _props$attributes6.shadowHorizontal,
            shadowVertical = _props$attributes6.shadowVertical,
            btnShadowBlur = _props$attributes6.btnShadowBlur,
            btnShadowColor = _props$attributes6.btnShadowColor,
            btnShadowHorizontal = _props$attributes6.btnShadowHorizontal,
            btnShadowVertical = _props$attributes6.btnShadowVertical,
            btnShadowPosition = _props$attributes6.btnShadowPosition;

        return React.createElement(
            'div',
            {
                id: className + '-wrap-' + id,
                className: className + '__wrap ' + className + '__' + effect + ' ' + className + '__' + effectDir,
                style: { textAlign: btnAlign }
            },
            React.createElement('style', {
                dangerouslySetInnerHTML: {
                    __html: ['#premium-button-wrap-' + id + ' .premium-button:hover {', 'color: ' + textHoverColor + ' !important;', "}", '#premium-button-wrap-' + id + '.premium-button__none .premium-button:hover {', 'background-color: ' + backHoverColor + ' !important;', "}", '#premium-button-wrap-' + id + '.premium-button__slide .premium-button::before,', '#premium-button-wrap-' + id + '.premium-button__shutter .premium-button::before,', '#premium-button-wrap-' + id + '.premium-button__radial .premium-button::before {', 'background-color: ' + slideColor, "}"].join("\n")
                }
            }),
            React.createElement(RichText.Content, {
                tagName: 'a',
                value: btnText,
                className: className + ' ' + className + '__' + btnSize,
                href: btnLink,
                target: btnTarget ? "_blank" : "_self",
                style: {
                    color: textColor,
                    backgroundColor: backColor,
                    fontSize: textSize + "px",
                    letterSpacing: textLetter + "px",
                    textTransform: textUpper ? "uppercase" : "none",
                    fontStyle: textStyle,
                    lineHeight: textLine + "px",
                    fontWeight: textWeight,
                    textShadow: shadowHorizontal + 'px ' + shadowVertical + 'px ' + shadowBlur + 'px ' + shadowColor,
                    boxShadow: btnShadowHorizontal + 'px ' + btnShadowVertical + 'px ' + btnShadowBlur + 'px ' + btnShadowColor + ' ' + btnShadowPosition,
                    padding: padding + "px",
                    border: borderType,
                    borderWidth: borderWidth + "px",
                    borderRadius: borderRadius + "px",
                    borderColor: borderColor
                }
            })
        );
    }
}, {
    attributes: attributes,
    migrate: function migrate(attributes) {
        var newAttributes = {
            btnShadowColor: "",
            btnShadowBlur: "0",
            btnShadowHorizontal: "0",
            btnShadowVertical: "0",
            btnShadowPosition: ""
        };
        return Object.assign(attributes, newAttributes);
    },
    save: function save(props) {
        var _props$attributes7 = props.attributes,
            id = _props$attributes7.id,
            btnText = _props$attributes7.btnText,
            btnSize = _props$attributes7.btnSize,
            btnAlign = _props$attributes7.btnAlign,
            btnLink = _props$attributes7.btnLink,
            btnTarget = _props$attributes7.btnTarget,
            effect = _props$attributes7.effect,
            effectDir = _props$attributes7.effectDir,
            textColor = _props$attributes7.textColor,
            textHoverColor = _props$attributes7.textHoverColor,
            backColor = _props$attributes7.backColor,
            backHoverColor = _props$attributes7.backHoverColor,
            slideColor = _props$attributes7.slideColor,
            textSize = _props$attributes7.textSize,
            textWeight = _props$attributes7.textWeight,
            textLine = _props$attributes7.textLine,
            textLetter = _props$attributes7.textLetter,
            textStyle = _props$attributes7.textStyle,
            textUpper = _props$attributes7.textUpper,
            borderType = _props$attributes7.borderType,
            borderWidth = _props$attributes7.borderWidth,
            borderRadius = _props$attributes7.borderRadius,
            borderColor = _props$attributes7.borderColor,
            padding = _props$attributes7.padding,
            shadowBlur = _props$attributes7.shadowBlur,
            shadowColor = _props$attributes7.shadowColor,
            shadowHorizontal = _props$attributes7.shadowHorizontal,
            shadowVertical = _props$attributes7.shadowVertical;

        return React.createElement(
            'div',
            {
                id: className + '-wrap-' + id,
                className: className + '__wrap ' + className + '__' + effect + ' ' + className + '__' + effectDir,
                style: { textAlign: btnAlign }
            },
            React.createElement('style', {
                dangerouslySetInnerHTML: {
                    __html: ['#premium-button-wrap-' + id + ' .premium-button:hover {', 'color: ' + textHoverColor + ' !important;', "}", '#premium-button-wrap-' + id + '.premium-button__none .premium-button:hover {', 'background-color: ' + backHoverColor + ' !important;', "}", '#premium-button-wrap-' + id + '.premium-button__slide .premium-button::before,', '#premium-button-wrap-' + id + '.premium-button__shutter .premium-button::before,', '#premium-button-wrap-' + id + '.premium-button__radial .premium-button::before {', 'background-color: ' + slideColor, "}"].join("\n")
                }
            }),
            React.createElement(RichText.Content, {
                tagName: 'a',
                value: btnText,
                className: className + ' ' + className + '__' + btnSize,
                href: btnLink,
                target: btnTarget ? "_blank" : "_self",
                style: {
                    color: textColor,
                    backgroundColor: backColor,
                    fontSize: textSize + "px",
                    letterSpacing: textLetter + "px",
                    textTransform: textUpper ? "uppercase" : "none",
                    fontStyle: textStyle,
                    lineHeight: textLine + "px",
                    fontWeight: textWeight,
                    textShadow: shadowHorizontal + 'px ' + shadowVertical + 'px ' + shadowBlur + 'px ' + shadowColor,
                    padding: padding + "px",
                    border: borderType,
                    borderWidth: borderWidth + "px",
                    borderRadius: borderRadius + "px",
                    borderColor: borderColor
                }
            })
        );
    }
}];

exports.default = deprecatedContent;

/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
var __ = wp.i18n.__;

var attributes = {
    borderButton: {
        type: "boolean",
        default: false
    },
    btnText: {
        type: "string",
        default: __("Premium Button", 'premium-blocks-for-gutenberg')
    },
    btnSize: {
        type: "string",
        default: "md"
    },
    btnAlign: {
        type: "string",
        default: "center"
    },
    btnLink: {
        type: "string",
        source: "attribute",
        attribute: "href",
        selector: ".premium-button"
    },
    btnTarget: {
        type: "boolean",
        default: false
    },
    effect: {
        type: "string",
        default: "none"
    },
    effectDir: {
        type: "string",
        default: "top"
    },
    slideColor: {
        type: "string"
    },
    block_id: {
        type: "string"
    },
    hideDesktop: {
        type: 'boolean',
        default: false
    },
    classMigrate: {
        type: 'boolean',
        default: false
    },
    hideTablet: {
        type: 'boolean',
        default: false
    },
    hideMobile: {
        type: 'boolean',
        default: false
    },
    borderWidth: {
        type: "number",
        default: "1"
    },
    borderTop: {
        type: "number"
    },
    borderRight: {
        type: "number"
    },
    borderBottom: {
        type: "number"
    },
    borderLeft: {
        type: "number"
    },
    textStyles: {
        type: "array",
        default: [{
            textSizeUnit: 'px',
            textSize: 20,
            textSizeTablet: '',
            textSizeMobile: '',
            textFontFamily: __('Default', 'premium-blocks-for-gutenberg'),
            textLetter: '',
            textStyle: '',
            textUpper: false,
            textWeight: '',
            textLine: '',
            shadowColor: '',
            shadowBlur: '0',
            shadowHorizontal: '0',
            shadowVertical: '0'
        }]
    },
    btnStyles: {
        type: 'array',
        default: [{
            textColor: '',
            textHoverColor: '',
            backColor: '',
            backOpacity: 1,
            backHoverColor: '',
            borderType: "none",
            borderRadius: '',
            borderColor: '',
            borderHoverColor: '',
            btnShadowColor: '',
            btnShadowBlur: 0,
            btnShadowHorizontal: 0,
            btnShadowVertical: 0,
            btnShadowPosition: '',
            padding: '',
            paddingU: 'px'
        }]
    }
};
exports.default = attributes;

/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _settings = __webpack_require__(1);

var _attributes = __webpack_require__(236);

var _attributes2 = _interopRequireDefault(_attributes);

var _edit = __webpack_require__(237);

var _edit2 = _interopRequireDefault(_edit);

var _save = __webpack_require__(238);

var _save2 = _interopRequireDefault(_save);

var _icons = __webpack_require__(4);

var _icons2 = _interopRequireDefault(_icons);

var _deprecated = __webpack_require__(239);

var _deprecated2 = _interopRequireDefault(_deprecated);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __ = wp.i18n.__;
var registerBlockType = wp.blocks.registerBlockType;


var counterAttrs = _attributes2.default;

registerBlockType("premium/countup", {
    title: __("CountUp"),
    icon: React.createElement(_icons2.default, { icon: "counter" }),
    category: "premium-blocks",
    attributes: counterAttrs,
    supports: {
        inserter: _settings.countUp
    },
    example: {},
    edit: _edit2.default,
    save: _save2.default,
    deprecated: _deprecated2.default
});

/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _ref;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var __ = wp.i18n.__;

var attributes = {
    block_id: {
        type: "string"
    },
    borderCount: {
        type: "boolean",
        default: false
    },
    increment: {
        type: "string",
        default: 500
    },
    time: {
        type: "string",
        default: 1000
    },
    delay: {
        type: "string",
        default: 10
    },
    align: {
        type: "string",
        default: "center"
    },
    flexDir: {
        type: "string",
        default: "column"
    },
    prefix: {
        type: "boolean",
        default: true
    },
    suffix: {
        type: "boolean",
        default: true
    },
    icon: {
        type: "string",
        default: "icon"
    },
    iconSpacing: {
        type: "number",
        default: 10
    },
    imageID: {
        type: "string"
    },
    imageURL: {
        type: "string"
    },
    iconType: {
        type: "string",
        default: "dash"
    },
    iconCheck: {
        type: "boolean",
        default: true
    },
    iconSize: {
        type: "number",
        default: 40
    },
    iconColor: {
        type: "string",
        default: "#6ec1e4"
    },
    selfAlign: {
        type: "string",
        default: "center"
    },
    titleCheck: {
        type: "boolean",
        default: true
    },
    titleTxt: {
        type: "string",
        default: __("Premium Count Up", 'premium-blocks-for-gutenberg')
    },
    faIcon: {
        type: "string",
        default: "dashicons-clock"
    },
    counterFamily: {
        type: "string",
        default: __('Default', 'premium-blocks-for-gutenberg')
    },
    hideDesktop: {
        type: 'boolean',
        default: false
    },
    hideTablet: {
        type: 'boolean',
        default: false
    },
    hideMobile: {
        type: 'boolean',
        default: false
    },
    backgroundType: {
        type: "string",
        default: ""
    },
    numberStyles: {
        type: "array",
        default: [{
            numberSizeUnit: "px",
            numberSize: 30,
            numberSizeTablet: '',
            numberSizeMobile: '',
            numberColor: "#6ec1e4",
            numberWeight: ''
        }]
    },
    titleStyles: {
        type: "array",
        default: [(_ref = {
            titleFamily: __('Default', 'premium-blocks-for-gutenberg'),
            titleSize: 20,
            titleSizeUnit: 'px',
            titleSizeTablet: '',
            titleSizeMobile: '',
            titleSpacing: '',
            titleStyle: '',
            titleUpper: false,
            titleColor: '',
            titleT: 1,
            titleB: 1
        }, _defineProperty(_ref, "titleColor", ''), _defineProperty(_ref, "titleWeight", ''), _ref)]
    },
    containerStyles: {
        type: "array",
        default: [{
            containerBack: '',
            containerOpacity: 1,
            backgroundImageID: '',
            backgroundImageURL: '',
            backgroundRepeat: 'no-reapet',
            backgroundPosition: 'top center',
            backgroundSize: 'auto',
            fixed: false,
            borderType: 'none',
            borderWidth: 1,
            borderRadius: 0,
            borderColor: '',
            shadowColor: '',
            shadowBlur: '0',
            shadowHorizontal: '0',
            shadowVertical: '0',
            shadowPosition: '',
            paddingU: '',
            gradientLocationOne: '0',
            gradientColorTwo: '',
            gradientLocationTwo: '100',
            gradientType: 'linear',
            gradientAngle: '180',
            gradientPosition: 'center center'
        }]
    },
    borderTop: {
        type: 'number',
        default: '0'
    },
    borderRight: {
        type: 'number',
        default: '0'
    },
    borderBottom: {
        type: 'number',
        default: '0'
    },
    borderLeft: {
        type: 'number',
        default: '0'
    },
    paddingT: {
        type: 'number',
        default: '0'
    },
    paddingR: {
        type: 'number',
        default: '0'
    },
    paddingB: {
        type: 'number',
        default: '0'
    },
    paddingL: {
        type: 'number',
        default: '0'
    },
    suffixStyles: {
        type: 'array',
        default: [{
            suffixTxt: "Suffix",
            suffixSizeUnit: 'px',
            suffixSize: 20,
            suffixSizeTablet: '',
            suffixSizeMobile: '',
            suffixColor: '',
            suffixWeight: '',
            suffixGap: 2,
            suffixFamily: __('Default', 'premium-blocks-for-gutenberg')
        }]
    },
    prefixStyles: {
        type: "array",
        default: [{
            prefixTxt: "Prefix",
            prefixSize: 20,
            prefixSizeUnit: 'px',
            prefixSizeTablet: '',
            prefixSizeMobile: '',
            prefixColor: '',
            prefixWeight: '',
            prefixGap: 2,
            prefixFamily: __('Default', 'premium-blocks-for-gutenberg')
        }]
    },
    paddingTTablet: {
        type: 'number'
    },
    paddingRTablet: {
        type: 'number'
    },
    paddingBTablet: {
        type: 'number'
    },
    paddingLTablet: {
        type: 'number'
    },
    paddingTMobile: {
        type: 'number'
    },
    paddingRMobile: {
        type: 'number'
    },
    paddingBMobile: {
        type: 'number'
    },
    paddingLMobile: {
        type: 'number'
    }
};

exports.default = attributes;

/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _classnames = __webpack_require__(0);

var _classnames2 = _interopRequireDefault(_classnames);

var _settings = __webpack_require__(1);

var _premiumTypo = __webpack_require__(7);

var _premiumTypo2 = _interopRequireDefault(_premiumTypo);

var _PremiumShadow = __webpack_require__(5);

var _PremiumShadow2 = _interopRequireDefault(_PremiumShadow);

var _premiumBorder = __webpack_require__(6);

var _premiumBorder2 = _interopRequireDefault(_premiumBorder);

var _premiumMediaUpload = __webpack_require__(12);

var _premiumMediaUpload2 = _interopRequireDefault(_premiumMediaUpload);

var _premiumResponsiveTabs = __webpack_require__(8);

var _premiumResponsiveTabs2 = _interopRequireDefault(_premiumResponsiveTabs);

var _singleRangeControl = __webpack_require__(3);

var _singleRangeControl2 = _interopRequireDefault(_singleRangeControl);

var _ColorComponent = __webpack_require__(2);

var _ColorComponent2 = _interopRequireDefault(_ColorComponent);

var _PremiumBackgroundControl = __webpack_require__(23);

var _PremiumBackgroundControl2 = _interopRequireDefault(_PremiumBackgroundControl);

var _radioControl = __webpack_require__(10);

var _radioControl2 = _interopRequireDefault(_radioControl);

var _PremiumResponsivePadding = __webpack_require__(16);

var _PremiumResponsivePadding2 = _interopRequireDefault(_PremiumResponsivePadding);

var _fontLoader = __webpack_require__(22);

var _fontLoader2 = _interopRequireDefault(_fontLoader);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var __ = wp.i18n.__;
var withSelect = wp.data.withSelect;
var _wp$components = wp.components,
    PanelBody = _wp$components.PanelBody,
    SelectControl = _wp$components.SelectControl,
    TextControl = _wp$components.TextControl,
    ToggleControl = _wp$components.ToggleControl;
var InspectorControls = wp.blockEditor.InspectorControls;
var _wp$element = wp.element,
    Fragment = _wp$element.Fragment,
    Component = _wp$element.Component;

var edit = function (_Component) {
    _inherits(edit, _Component);

    function edit() {
        _classCallCheck(this, edit);

        return _possibleConstructorReturn(this, (edit.__proto__ || Object.getPrototypeOf(edit)).apply(this, arguments));
    }

    _createClass(edit, [{
        key: "componentDidMount",
        value: function componentDidMount() {
            var _props = this.props,
                setAttributes = _props.setAttributes,
                clientId = _props.clientId;

            setAttributes({ block_id: clientId.substr(0, 6) });
            setAttributes({ classMigrate: true });
            this.getPreviewSize = this.getPreviewSize.bind(this);
        }
    }, {
        key: "getPreviewSize",
        value: function getPreviewSize(device, desktopSize, tabletSize, mobileSize) {
            if (device === 'Mobile') {
                if (undefined !== mobileSize && '' !== mobileSize) {
                    return mobileSize;
                } else if (undefined !== tabletSize && '' !== tabletSize) {
                    return tabletSize;
                }
            } else if (device === 'Tablet') {
                if (undefined !== tabletSize && '' !== tabletSize) {
                    return tabletSize;
                }
            }
            return desktopSize;
        }
    }, {
        key: "render",
        value: function render() {
            var _props2 = this.props,
                isSelected = _props2.isSelected,
                setAttributes = _props2.setAttributes,
                className = _props2.className,
                blockId = _props2.clientId;
            var _props$attributes = this.props.attributes,
                block_id = _props$attributes.block_id,
                borderCount = _props$attributes.borderCount,
                increment = _props$attributes.increment,
                time = _props$attributes.time,
                delay = _props$attributes.delay,
                align = _props$attributes.align,
                flexDir = _props$attributes.flexDir,
                prefix = _props$attributes.prefix,
                suffix = _props$attributes.suffix,
                icon = _props$attributes.icon,
                iconSpacing = _props$attributes.iconSpacing,
                imageID = _props$attributes.imageID,
                imageURL = _props$attributes.imageURL,
                iconType = _props$attributes.iconType,
                iconCheck = _props$attributes.iconCheck,
                iconSize = _props$attributes.iconSize,
                iconColor = _props$attributes.iconColor,
                selfAlign = _props$attributes.selfAlign,
                titleCheck = _props$attributes.titleCheck,
                titleTxt = _props$attributes.titleTxt,
                faIcon = _props$attributes.faIcon,
                counterFamily = _props$attributes.counterFamily,
                hideDesktop = _props$attributes.hideDesktop,
                hideTablet = _props$attributes.hideTablet,
                hideMobile = _props$attributes.hideMobile,
                numberStyles = _props$attributes.numberStyles,
                titleStyles = _props$attributes.titleStyles,
                containerStyles = _props$attributes.containerStyles,
                suffixStyles = _props$attributes.suffixStyles,
                prefixStyles = _props$attributes.prefixStyles,
                borderTop = _props$attributes.borderTop,
                borderRight = _props$attributes.borderRight,
                borderBottom = _props$attributes.borderBottom,
                borderLeft = _props$attributes.borderLeft,
                paddingT = _props$attributes.paddingT,
                paddingR = _props$attributes.paddingR,
                paddingB = _props$attributes.paddingB,
                paddingL = _props$attributes.paddingL,
                backgroundType = _props$attributes.backgroundType,
                paddingTTablet = _props$attributes.paddingTTablet,
                paddingRTablet = _props$attributes.paddingRTablet,
                paddingBTablet = _props$attributes.paddingBTablet,
                paddingLTablet = _props$attributes.paddingLTablet,
                paddingTMobile = _props$attributes.paddingTMobile,
                paddingRMobile = _props$attributes.paddingRMobile,
                paddingBMobile = _props$attributes.paddingBMobile,
                paddingLMobile = _props$attributes.paddingLMobile;


            var iconClass = "fa" === iconType ? "fa fa-" + faIcon : "dashicons " + faIcon;

            var ICONS = [{
                value: "icon",
                label: __("Icon", 'premium-blocks-for-gutenberg')
            }, {
                value: "img",
                label: __("Image", 'premium-blocks-for-gutenberg')
            }];
            var DIRECTION = [{
                value: "row",
                label: __("Row", 'premium-blocks-for-gutenberg')
            }, {
                value: "row-reverse",
                label: __("Reversed Row", 'premium-blocks-for-gutenberg')
            }, {
                value: "column",
                label: __("Column", 'premium-blocks-for-gutenberg')
            }, {
                value: "column-reverse",
                label: __("Reversed Column", 'premium-blocks-for-gutenberg')
            }];
            var TYPE = [{
                value: "fa",
                label: __("Font Awesome Icon", 'premium-blocks-for-gutenberg')
            }, {
                value: "dash",
                label: __("Dashicon", 'premium-blocks-for-gutenberg')
            }];
            switch (align) {
                case "left":
                    setAttributes({ selfAlign: "flex-start" });
                    break;
                case "center":
                    setAttributes({ selfAlign: "center" });
                    break;
                case "right":
                    setAttributes({ selfAlign: "flex-end" });
                    break;
            }
            var loadCounterGoogleFonts = void 0;
            var loadTitleGoogleFonts = void 0;
            var loadSuffixGoogleFonts = void 0;
            var loadPrefixGoogleFonts = void 0;

            if (counterFamily !== 'Default') {
                var counterconfig = {
                    google: {
                        families: [counterFamily]
                    }
                };
                loadCounterGoogleFonts = React.createElement(_fontLoader2.default, { config: counterconfig });
            }

            if (titleStyles[0].titleFamily !== "Default") {
                var titleConfig = {
                    google: {
                        families: [titleStyles[0].titleFamily]
                    }
                };
                loadTitleGoogleFonts = React.createElement(_fontLoader2.default, { config: titleConfig });
            }

            if (suffixStyles[0].suffixFamily !== "Default") {
                var suffixConfig = {
                    google: {
                        families: [suffixStyles[0].suffixFamily]
                    }
                };
                loadSuffixGoogleFonts = React.createElement(_fontLoader2.default, { config: suffixConfig });
            }

            if (prefixStyles[0].prefixFamily !== "Default") {
                var prefixConfig = {
                    google: {
                        families: [prefixStyles[0].prefixFamily]
                    }
                };
                loadPrefixGoogleFonts = React.createElement(_fontLoader2.default, { config: prefixConfig });
            }

            var saveNumberStyles = function saveNumberStyles(value) {
                var newUpdate = numberStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({ numberStyles: newUpdate });
            };
            var saveTitleStyles = function saveTitleStyles(value) {
                var newUpdate = titleStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({ titleStyles: newUpdate });
            };
            var savePrefixStyle = function savePrefixStyle(value) {
                var newUpdate = prefixStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({ prefixStyles: newUpdate });
            };
            var saveSuffixStyle = function saveSuffixStyle(value) {
                var newUpdate = suffixStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({ suffixStyles: newUpdate });
            };
            var saveContainerStyle = function saveContainerStyle(value) {
                var newUpdate = containerStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({ containerStyles: newUpdate });
            };
            var btnGrad = void 0,
                btnGrad2 = void 0,
                btnbg = void 0;

            if (undefined !== backgroundType && 'gradient' === backgroundType) {
                btnGrad = 'transparent' === containerStyles[0].containerBack || undefined === containerStyles[0].containerBack ? 'rgba(255,255,255,0)' : containerStyles[0].containerBack;
                btnGrad2 = undefined !== containerStyles[0].gradientColorTwo && undefined !== containerStyles[0].gradientColorTwo && '' !== containerStyles[0].gradientColorTwo ? containerStyles[0].gradientColorTwo : '#777';
                if ('radial' === containerStyles[0].gradientType) {
                    btnbg = "radial-gradient(at " + containerStyles[0].gradientPosition + ", " + btnGrad + " " + containerStyles[0].gradientLocationOne + "%, " + btnGrad2 + " " + containerStyles[0].gradientLocationTwo + "%)";
                } else if ('radial' !== containerStyles[0].gradientType) {
                    btnbg = "linear-gradient(" + containerStyles[0].gradientAngle + "deg, " + btnGrad + " " + containerStyles[0].gradientLocationOne + "%, " + btnGrad2 + " " + containerStyles[0].gradientLocationTwo + "%)";
                }
            } else {
                btnbg = containerStyles[0].backgroundImageURL ? "url('" + containerStyles[0].backgroundImageURL + "')" : '';
            }

            var mainClasses = (0, _classnames2.default)(className, "premium-countup");
            var numberFontSize = this.getPreviewSize(this.props.deviceType, numberStyles[0].numberSize, numberStyles[0].numberSizeTablet, numberStyles[0].numberSizeMobile);
            var prefixFontSize = this.getPreviewSize(this.props.deviceType, prefixStyles[0].prefixSize, prefixStyles[0].prefixSizeTablet, prefixStyles[0].prefixSizeMobile);
            var suffixFontSize = this.getPreviewSize(this.props.deviceType, suffixStyles[0].suffixSize, suffixStyles[0].suffixSizeTablet, suffixStyles[0].suffixSizeMobile);
            var titleFontSize = this.getPreviewSize(this.props.deviceType, titleStyles[0].titleSize, titleStyles[0].titleSizeTablet, titleStyles[0].titleSizeMobile);
            var containerPaddingTop = this.getPreviewSize(this.props.deviceType, paddingT, paddingTTablet, paddingTMobile);
            var containerPaddingRight = this.getPreviewSize(this.props.deviceType, paddingR, paddingRTablet, paddingRMobile);
            var containerPaddingBottom = this.getPreviewSize(this.props.deviceType, paddingB, paddingBTablet, paddingBMobile);
            var containerPaddingLeft = this.getPreviewSize(this.props.deviceType, paddingL, paddingLTablet, paddingLMobile);

            return [isSelected && React.createElement(
                InspectorControls,
                { key: "inspector" },
                React.createElement(
                    PanelBody,
                    {
                        title: __("Counter", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(TextControl, {
                        label: __("Final Number", 'premium-blocks-for-gutenberg'),
                        value: increment,
                        onChange: function onChange(value) {
                            return setAttributes({ increment: value });
                        }
                    }),
                    React.createElement(TextControl, {
                        label: __("Counting Time", 'premium-blocks-for-gutenberg'),
                        value: time,
                        onChange: function onChange(value) {
                            return setAttributes({ time: value });
                        },
                        help: __("Set counting time in milliseconds, for example: 1000", 'premium-blocks-for-gutenberg')
                    }),
                    React.createElement(TextControl, {
                        label: __("Delay", 'premium-blocks-for-gutenberg'),
                        value: delay,
                        onChange: function onChange(value) {
                            return setAttributes({ delay: value });
                        },
                        help: __("Set delay in milliseconds, for example: 10", 'premium-blocks-for-gutenberg')
                    }),
                    "row-reverse" !== flexDir && React.createElement(_radioControl2.default, {
                        choices: ["left", "center", "right"],
                        value: align,
                        onChange: function onChange(newValue) {
                            return setAttributes({ align: newValue });
                        },
                        label: __("Align")
                    }),
                    "row-reverse" === flexDir && React.createElement(_radioControl2.default, {
                        choices: ["right", "center", "left"],
                        value: align,
                        onChange: function onChange(newValue) {
                            return setAttributes({ align: newValue });
                        },
                        label: __("Align ")
                    }),
                    React.createElement(SelectControl, {
                        label: __("Direction", 'premium-blocks-for-gutenberg'),
                        options: DIRECTION,
                        value: flexDir,
                        onChange: function onChange(newDir) {
                            return setAttributes({ flexDir: newDir });
                        }
                    }),
                    ("row" === flexDir || "row-reverse" === flexDir) && React.createElement(_singleRangeControl2.default, {
                        label: __("Spacing", 'premium-blocks-for-gutenberg'),
                        value: iconSpacing,
                        onChange: function onChange(newValue) {
                            return setAttributes({ iconSpacing: newValue });
                        },
                        showUnit: false,
                        defaultValue: 0
                    }),
                    React.createElement(ToggleControl, {
                        label: __("Icon", 'premium-blocks-for-gutenberg'),
                        checked: iconCheck,
                        onChange: function onChange(check) {
                            return setAttributes({ iconCheck: check });
                        }
                    }),
                    React.createElement(ToggleControl, {
                        label: __("Prefix", 'premium-blocks-for-gutenberg'),
                        checked: prefix,
                        onChange: function onChange(check) {
                            return setAttributes({ prefix: check });
                        }
                    }),
                    React.createElement(ToggleControl, {
                        label: __("Suffix", 'premium-blocks-for-gutenberg'),
                        checked: suffix,
                        onChange: function onChange(check) {
                            return setAttributes({ suffix: check });
                        }
                    }),
                    React.createElement(ToggleControl, {
                        label: __("Title", 'premium-blocks-for-gutenberg'),
                        checked: titleCheck,
                        onChange: function onChange(check) {
                            return setAttributes({ titleCheck: check });
                        }
                    })
                ),
                iconCheck && React.createElement(
                    PanelBody,
                    {
                        title: __("Icon", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(SelectControl, {
                        label: __("Icon Type", 'premium-blocks-for-gutenberg'),
                        options: ICONS,
                        value: icon,
                        onChange: function onChange(newType) {
                            return setAttributes({ icon: newType });
                        }
                    }),
                    ("" !== faIcon || "undefined" !== typeof faIcon) && "icon" === icon && React.createElement(
                        "div",
                        { className: "premium-icon__sidebar_icon" },
                        React.createElement("i", { className: iconClass })
                    ),
                    "icon" === icon && React.createElement(
                        Fragment,
                        null,
                        React.createElement(SelectControl, {
                            label: __("Icon Type", 'premium-blocks-for-gutenberg'),
                            value: iconType,
                            options: TYPE,
                            onChange: function onChange(newType) {
                                return setAttributes({ iconType: newType });
                            }
                        }),
                        React.createElement(TextControl, {
                            label: __("Icon Class", 'premium-blocks-for-gutenberg'),
                            value: faIcon,
                            help: [__("Get icon class from", 'premium-blocks-for-gutenberg'), React.createElement(
                                "a",
                                {
                                    href: "fa" === iconType ? "https://fontawesome.com/v4.7.0/icons/" : "https://developer.wordpress.org/resource/dashicons/",
                                    target: "_blank"
                                },
                                "\xA0",
                                __("here", 'premium-blocks-for-gutenberg')
                            ), __(" , for example: ", 'premium-blocks-for-gutenberg'), "fa" === iconType ? "address-book" : "dashicons-admin-site"],
                            onChange: function onChange(newIcon) {
                                return setAttributes({ faIcon: newIcon });
                            }
                        })
                    ),
                    "img" === icon && React.createElement(_premiumMediaUpload2.default, {
                        type: "image",
                        imageID: imageID,
                        imageURL: imageURL,
                        onSelectMedia: function onSelectMedia(media) {
                            setAttributes({
                                imageID: media.id,
                                imageURL: media.url
                            });
                        },
                        onRemoveImage: function onRemoveImage() {
                            return setAttributes(_defineProperty({
                                imageURL: ""
                            }, "imageURL", ""));
                        }
                    }),
                    React.createElement(_singleRangeControl2.default, {
                        label: __("Size", 'premium-blocks-for-gutenberg'),
                        value: iconSize,
                        onChange: function onChange(newValue) {
                            return setAttributes({ iconSize: newValue });
                        },
                        showUnit: false,
                        defaultValue: 40,
                        max: 200
                    }),
                    "icon" === icon && React.createElement(_ColorComponent2.default, {
                        label: __("Icon Color", 'premium-blocks-for-gutenberg'),
                        colorValue: iconColor,
                        colorDefault: '',
                        onColorChange: function onColorChange(newValue) {
                            return setAttributes({ iconColor: newValue === undefined ? "transparent" : newValue });
                        }
                    })
                ),
                React.createElement(
                    PanelBody,
                    {
                        title: __("Number", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(_premiumTypo2.default, {
                        components: ["responsiveSize", "weight", "family"],
                        setAttributes: saveNumberStyles,
                        fontSizeType: {
                            value: numberStyles[0].numberSizeUnit,
                            label: __("numberSizeUnit", 'premium-blocks-for-gutenberg')
                        },
                        fontSize: numberStyles[0].numberSize,
                        fontSizeMobile: numberStyles[0].numberSizeMobile,
                        fontSizeTablet: numberStyles[0].numberSizeTablet,
                        onChangeSize: function onChangeSize(newSize) {
                            return saveNumberStyles({ numberSize: newSize });
                        },
                        onChangeTabletSize: function onChangeTabletSize(newSize) {
                            return saveNumberStyles({ numberSizeTablet: newSize });
                        },
                        onChangeMobileSize: function onChangeMobileSize(newSize) {
                            return saveNumberStyles({ numberSizeMobile: newSize });
                        },
                        fontFamily: counterFamily,
                        weight: numberStyles[0].numberWeight,
                        onChangeWeight: function onChangeWeight(newWeight) {
                            return saveNumberStyles({ numberWeight: newWeight });
                        },
                        onChangeFamily: function onChangeFamily(fontFamily) {
                            return setAttributes({ counterFamily: fontFamily });
                        }
                    }),
                    React.createElement(_ColorComponent2.default, {
                        label: __("Number Color", 'premium-blocks-for-gutenberg'),
                        colorValue: numberStyles[0].numberColor,
                        colorDefault: '',
                        onColorChange: function onColorChange(newValue) {
                            return saveNumberStyles({ numberColor: newValue === undefined ? "transparent" : newValue });
                        }
                    })
                ),
                prefix && React.createElement(
                    PanelBody,
                    {
                        title: __("Prefix", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(TextControl, {
                        label: __("Prefix", 'premium-blocks-for-gutenberg'),
                        value: prefixStyles[0].prefixTxt,
                        onChange: function onChange(value) {
                            return savePrefixStyle({ prefixTxt: value });
                        }
                    }),
                    React.createElement(_premiumTypo2.default, {
                        components: ["responsiveSize", "weight", "family"],
                        setAttributes: savePrefixStyle,
                        fontSizeType: {
                            value: prefixStyles[0].prefixSizeUnit,
                            label: __("prefixSizeUnit", 'premium-blocks-for-gutenberg')
                        },
                        fontSize: prefixStyles[0].prefixSize,
                        fontSizeMobile: prefixStyles[0].prefixSizeMobile,
                        fontSizeTablet: prefixStyles[0].prefixSizeTablet,
                        onChangeSize: function onChangeSize(newSize) {
                            return savePrefixStyle({ prefixSize: newSize });
                        },
                        onChangeTabletSize: function onChangeTabletSize(newSize) {
                            return savePrefixStyle({ prefixSizeTablet: newSize });
                        },
                        onChangeMobileSize: function onChangeMobileSize(newSize) {
                            return savePrefixStyle({ prefixSizeMobile: newSize });
                        },
                        weight: prefixStyles[0].prefixWeight,
                        onChangeWeight: function onChangeWeight(newWeight) {
                            return savePrefixStyle({ prefixWeight: newWeight });
                        },
                        fontFamily: prefixStyles[0].prefixFamily,
                        onChangeFamily: function onChangeFamily(fontFamily) {
                            return savePrefixStyle({ prefixFamily: fontFamily });
                        }
                    }),
                    React.createElement(_ColorComponent2.default, {
                        label: __("Text Color", 'premium-blocks-for-gutenberg'),
                        colorValue: prefixStyles[0].prefixColor,
                        colorDefault: '',
                        onColorChange: function onColorChange(newValue) {
                            return savePrefixStyle({ prefixColor: newValue === undefined ? "transparent" : newValue });
                        }
                    }),
                    React.createElement(_singleRangeControl2.default, {
                        label: __("Gap After", 'premium-blocks-for-gutenberg'),
                        value: prefixStyles[0].prefixGap,
                        onChange: function onChange(newValue) {
                            return savePrefixStyle({ prefixGap: newValue });
                        },
                        showUnit: false,
                        defaultValue: 2
                    })
                ),
                suffix && React.createElement(
                    PanelBody,
                    {
                        title: __("Suffix", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(TextControl, {
                        label: __("Suffix", 'premium-blocks-for-gutenberg'),
                        value: suffixStyles[0].suffixTxt,
                        onChange: function onChange(value) {
                            return saveSuffixStyle({ suffixTxt: value });
                        }
                    }),
                    React.createElement(_premiumTypo2.default, {
                        components: ["responsiveSize", "weight", "family"],
                        setAttributes: saveSuffixStyle,
                        fontSizeType: {
                            value: suffixStyles[0].suffixSizeUnit,
                            label: __("suffixSizeUnit", 'premium-blocks-for-gutenberg')
                        },
                        fontSize: suffixStyles[0].suffixSize,
                        fontSizeMobile: suffixStyles[0].suffixSizeMobile,
                        fontSizeTablet: suffixStyles[0].suffixSizeTablet,
                        onChangeSize: function onChangeSize(newSize) {
                            return saveSuffixStyle({ suffixSize: newSize });
                        },
                        onChangeTabletSize: function onChangeTabletSize(newSize) {
                            return saveSuffixStyle({ suffixSizeTablet: newSize });
                        },
                        onChangeMobileSize: function onChangeMobileSize(newSize) {
                            return saveSuffixStyle({ suffixSizeMobile: newSize });
                        },
                        weight: suffixStyles[0].suffixWeight,
                        onChangeWeight: function onChangeWeight(newWeight) {
                            return saveSuffixStyle({ suffixWeight: newWeight });
                        },
                        fontFamily: suffixStyles[0].suffixFamily,
                        onChangeFamily: function onChangeFamily(fontFamily) {
                            return saveSuffixStyle({ suffixFamily: fontFamily });
                        }
                    }),
                    React.createElement(_ColorComponent2.default, {
                        label: __("Text Color", 'premium-blocks-for-gutenberg'),
                        colorValue: suffixStyles[0].suffixColor,
                        colorDefault: '',
                        onColorChange: function onColorChange(newValue) {
                            return saveSuffixStyle({ suffixColor: newValue === undefined ? "transparent" : newValue });
                        }
                    }),
                    React.createElement(_singleRangeControl2.default, {
                        label: __("Gap Before", 'premium-blocks-for-gutenberg'),
                        value: suffixStyles[0].suffixGap,
                        onChange: function onChange(newValue) {
                            return saveSuffixStyle({ suffixGap: newValue });
                        },
                        showUnit: false,
                        defaultValue: 2
                    })
                ),
                titleCheck && React.createElement(
                    PanelBody,
                    {
                        title: __("Title", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(TextControl, {
                        label: __("Title Text", 'premium-blocks-for-gutenberg'),
                        value: titleTxt,
                        onChange: function onChange(value) {
                            return setAttributes({ titleTxt: value });
                        }
                    }),
                    React.createElement(_premiumTypo2.default, {
                        components: ["responsiveSize", "weight", "spacing", "style", "upper", "family"],
                        setAttributes: saveTitleStyles,
                        fontSizeType: {
                            value: titleStyles[0].titleSizeUnit,
                            label: __("titleSizeUnit", 'premium-blocks-for-gutenberg')
                        },
                        fontSize: titleStyles[0].titleSize,
                        fontSizeMobile: titleStyles[0].titleSizeMobile,
                        fontSizeTablet: titleStyles[0].titleSizeTablet,
                        onChangeSize: function onChangeSize(newSize) {
                            return saveTitleStyles({ titleSize: newSize });
                        },
                        onChangeTabletSize: function onChangeTabletSize(newSize) {
                            return saveTitleStyles({ titleSizeTablet: newSize });
                        },
                        onChangeMobileSize: function onChangeMobileSize(newSize) {
                            return saveTitleStyles({ titleSizeMobile: newSize });
                        },
                        fontFamily: titleStyles[0].titleFamily,
                        weight: titleStyles[0].titleWeight,
                        style: titleStyles[0].titleStyle,
                        spacing: titleStyles[0].titleSpacing,
                        upper: titleStyles[0].titleUpper,
                        onChangeWeight: function onChangeWeight(newWeight) {
                            return saveTitleStyles({ titleWeight: newWeight });
                        },
                        onChangeStyle: function onChangeStyle(newStyle) {
                            return saveTitleStyles({ titleStyle: newStyle });
                        },
                        onChangeSpacing: function onChangeSpacing(newValue) {
                            return saveTitleStyles({ titleSpacing: newValue });
                        },
                        onChangeFamily: function onChangeFamily(fontFamily) {
                            return saveTitleStyles({ titleFamily: fontFamily });
                        },
                        onChangeUpper: function onChangeUpper(check) {
                            return saveTitleStyles({ titleUpper: check });
                        }
                    }),
                    React.createElement(_ColorComponent2.default, {
                        label: __("Text Color", 'premium-blocks-for-gutenberg'),
                        colorValue: titleStyles[0].titleColor,
                        colorDefault: '',
                        onColorChange: function onColorChange(newValue) {
                            return saveTitleStyles({ titleColor: newValue === undefined ? "transparent" : newValue });
                        }
                    }),
                    React.createElement(
                        PanelBody,
                        {
                            title: __("Spacings", 'premium-blocks-for-gutenberg'),
                            className: "premium-panel-body-inner",
                            initialOpen: false
                        },
                        React.createElement(_singleRangeControl2.default, {
                            label: __("Margin Top", 'premium-blocks-for-gutenberg'),
                            value: titleStyles[0].titleT,
                            onChange: function onChange(newValue) {
                                return saveTitleStyles({ titleT: newValue });
                            },
                            showUnit: false,
                            defaultValue: 0
                        }),
                        React.createElement(_singleRangeControl2.default, {
                            label: __("Margin Bottom", 'premium-blocks-for-gutenberg'),
                            value: titleStyles[0].titleB,
                            onChange: function onChange(newValue) {
                                return saveTitleStyles({ titleB: newValue });
                            },
                            showUnit: false,
                            defaultValue: 0
                        })
                    )
                ),
                React.createElement(
                    PanelBody,
                    {
                        title: __("Container", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(_PremiumBackgroundControl2.default, {
                        setAttributes: setAttributes,
                        saveContainerStyle: saveContainerStyle,
                        backgroundType: backgroundType,
                        backgroundColor: containerStyles[0].containerBack,
                        backgroundImageID: containerStyles[0].backgroundImageID,
                        backgroundImageURL: containerStyles[0].backgroundImageURL,
                        backgroundPosition: containerStyles[0].backgroundPosition,
                        backgroundRepeat: containerStyles[0].backgroundRepeat,
                        backgroundSize: containerStyles[0].backgroundSize,
                        fixed: containerStyles[0].fixed,
                        gradientLocationOne: containerStyles[0].gradientLocationOne,
                        gradientColorTwo: containerStyles[0].gradientColorTwo,
                        gradientLocationTwo: containerStyles[0].gradientLocationTwo,
                        gradientAngle: containerStyles[0].gradientAngle,
                        gradientPosition: containerStyles[0].gradientPosition,
                        gradientType: containerStyles[0].gradientType
                    }),
                    React.createElement(_premiumBorder2.default, {
                        borderType: containerStyles[0].borderType,
                        borderWidth: containerStyles[0].borderWidth,
                        top: borderTop,
                        right: borderRight,
                        bottom: borderBottom,
                        left: borderLeft,
                        borderColor: containerStyles[0].borderColor,
                        borderRadius: containerStyles[0].borderRadius,
                        onChangeType: function onChangeType(newType) {
                            return saveContainerStyle({ borderType: newType });
                        },
                        onChangeWidth: function onChangeWidth(_ref) {
                            var top = _ref.top,
                                right = _ref.right,
                                bottom = _ref.bottom,
                                left = _ref.left;
                            return setAttributes({
                                borderCount: true,
                                borderTop: top,
                                borderRight: right,
                                borderBottom: bottom,
                                borderLeft: left
                            });
                        },
                        onChangeColor: function onChangeColor(colorValue) {
                            return saveContainerStyle({ borderColor: colorValue });
                        },
                        onChangeRadius: function onChangeRadius(newRadius) {
                            return saveContainerStyle({ borderRadius: newRadius });
                        }
                    }),
                    React.createElement(_PremiumShadow2.default, {
                        boxShadow: true,
                        color: containerStyles[0].shadowColor,
                        blur: containerStyles[0].shadowBlur,
                        horizontal: containerStyles[0].shadowHorizontal,
                        vertical: containerStyles[0].shadowVertical,
                        position: containerStyles[0].shadowPosition,
                        onChangeColor: function onChangeColor(newColor) {
                            saveContainerStyle({ shadowColor: newColor });
                        },
                        onChangeBlur: function onChangeBlur(newBlur) {
                            return saveContainerStyle({ shadowBlur: newBlur });
                        },
                        onChangehHorizontal: function onChangehHorizontal(newValue) {
                            return saveContainerStyle({ shadowHorizontal: newValue });
                        },
                        onChangeVertical: function onChangeVertical(newValue) {
                            return saveContainerStyle({ shadowVertical: newValue });
                        },
                        onChangePosition: function onChangePosition(newValue) {
                            return saveContainerStyle({ shadowPosition: newValue });
                        }
                    }),
                    React.createElement(_PremiumResponsivePadding2.default, {
                        paddingTop: paddingT,
                        paddingRight: paddingR,
                        paddingBottom: paddingB,
                        paddingLeft: paddingL,
                        paddingTopTablet: paddingTTablet,
                        paddingRightTablet: paddingRTablet,
                        paddingBottomTablet: paddingBTablet,
                        paddingLeftTablet: paddingLTablet,
                        paddingTopMobile: paddingTMobile,
                        paddingRightMobile: paddingRMobile,
                        paddingBottomMobile: paddingBMobile,
                        paddingLeftMobile: paddingLMobile,
                        onChangePaddingTop: function onChangePaddingTop(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ paddingT: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ paddingTTablet: newValue });
                            } else {
                                setAttributes({ paddingTMobile: newValue });
                            }
                        },
                        onChangePaddingRight: function onChangePaddingRight(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ paddingR: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ paddingRTablet: newValue });
                            } else {
                                setAttributes({ paddingRMobile: newValue });
                            }
                        },
                        onChangePaddingBottom: function onChangePaddingBottom(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ paddingB: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ paddingBTablet: newValue });
                            } else {
                                setAttributes({ paddingBMobile: newValue });
                            }
                        },
                        onChangePaddingLeft: function onChangePaddingLeft(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ paddingL: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ paddingLTablet: newValue });
                            } else {
                                setAttributes({ paddingLMobile: newValue });
                            }
                        }
                    })
                ),
                React.createElement(_premiumResponsiveTabs2.default, {
                    Desktop: hideDesktop,
                    Tablet: hideTablet,
                    Mobile: hideMobile,
                    onChangeDesktop: function onChangeDesktop(value) {
                        return setAttributes({ hideDesktop: value ? " premium-desktop-hidden" : "" });
                    },
                    onChangeTablet: function onChangeTablet(value) {
                        return setAttributes({ hideTablet: value ? " premium-tablet-hidden" : "" });
                    },
                    onChangeMobile: function onChangeMobile(value) {
                        return setAttributes({ hideMobile: value ? " premium-mobile-hidden" : "" });
                    }
                })
            ), React.createElement(
                "div",
                null,
                iconType === "fa" && 1 != _settings.FontAwesomeEnabled && iconCheck && React.createElement(
                    "p",
                    { className: "premium-countup__alert" },
                    __("Please Enable Font Awesome Icons from Plugin settings", 'premium-blocks-for-gutenberg')
                )
            ), React.createElement(
                "div",
                {
                    id: "premium-countup-" + block_id,
                    className: mainClasses + "__wrap premium-countup-" + block_id + " " + hideDesktop + " " + hideTablet + " " + hideMobile,
                    style: {
                        justifyContent: align,
                        flexDirection: flexDir,
                        backgroundColor: backgroundType === "solid" ? containerStyles[0].containerBack : "transparent",
                        boxShadow: containerStyles[0].shadowHorizontal + "px " + containerStyles[0].shadowVertical + "px " + containerStyles[0].shadowBlur + "px " + containerStyles[0].shadowColor + " " + containerStyles[0].shadowPosition,
                        backgroundImage: btnbg,
                        backgroundRepeat: containerStyles[0].backgroundRepeat,
                        backgroundPosition: containerStyles[0].backgroundPosition,
                        backgroundSize: containerStyles[0].backgroundSize,
                        backgroundAttachment: containerStyles[0].fixed ? "fixed" : "unset",
                        borderStyle: containerStyles[0].borderType,
                        borderWidth: borderCount ? borderTop + "px " + borderRight + "px " + borderBottom + "px " + borderLeft + "px" : containerStyles[0].borderWidth + "px",
                        borderRadius: containerStyles[0].borderRadius + "px",
                        borderColor: containerStyles[0].borderColor,
                        paddingTop: containerPaddingTop + containerStyles[0].paddingU,
                        paddingRight: containerPaddingRight + containerStyles[0].paddingU,
                        paddingBottom: containerPaddingBottom + containerStyles[0].paddingU,
                        paddingLeft: containerPaddingLeft + containerStyles[0].paddingU
                    }
                },
                iconCheck && React.createElement(
                    "div",
                    {
                        className: "premium-countup__icon_wrap",
                        style: {
                            marginRight: "row" === flexDir || "row-reverse" === flexDir ? iconSpacing + "px" : "0",
                            marginLeft: "row" === flexDir || "row-reverse" === flexDir ? iconSpacing + "px" : "0",
                            alignSelf: "row-reverse" === flexDir || "row" === flexDir ? "center" : selfAlign
                        }
                    },
                    "icon" === icon && React.createElement("i", {
                        className: "premium-countup__icon " + iconClass,
                        style: {
                            fontSize: iconSize + "px",
                            color: iconColor
                        }
                    }),
                    "img" === icon && imageURL && React.createElement("img", {
                        src: imageURL,
                        style: {
                            width: iconSize + "px",
                            height: iconSize + "px"
                        }
                    })
                ),
                React.createElement(
                    "div",
                    {
                        className: "premium-countup__info",
                        style: {
                            alignSelf: "row-reverse" === flexDir || "row" === flexDir ? "center" : selfAlign
                        }
                    },
                    React.createElement(
                        "div",
                        { className: "premium-countup__desc" },
                        prefix && React.createElement(
                            "p",
                            {
                                className: "premium-countup__prefix",
                                style: {
                                    fontSize: "" + prefixFontSize + prefixStyles[0].prefixSizeUnit,
                                    fontFamily: prefixStyles[0].prefixFamily,
                                    color: prefixStyles[0].prefixColor,
                                    fontWeight: prefixStyles[0].prefixWeight,
                                    marginRight: prefixStyles[0].prefixGap + "px"
                                }
                            },
                            prefixStyles[0].prefixTxt
                        ),
                        React.createElement(
                            "p",
                            {
                                className: "premium-countup__increment",
                                "data-interval": time,
                                "data-delay": delay,
                                style: {
                                    fontSize: "" + numberFontSize + numberStyles[0].numberSizeUnit,
                                    fontFamily: counterFamily,
                                    color: numberStyles[0].numberColor,
                                    fontWeight: numberStyles[0].numberWeight
                                }
                            },
                            increment
                        ),
                        suffix && React.createElement(
                            "p",
                            {
                                className: "premium-countup__suffix",
                                style: {
                                    fontSize: "" + suffixFontSize + suffixStyles[0].suffixSizeUnit,
                                    fontFamily: suffixStyles[0].suffixFamily,
                                    color: suffixStyles[0].suffixColor,
                                    fontWeight: suffixStyles[0].suffixWeight,
                                    marginLeft: suffixStyles[0].suffixGap + "px"
                                }
                            },
                            suffixStyles[0].suffixTxt
                        )
                    ),
                    titleCheck && ("row" === flexDir || "row-reverse" === flexDir) && React.createElement(
                        "h3",
                        {
                            className: "premium-countup__title",
                            style: {
                                fontSize: "" + titleFontSize + titleStyles[0].titleSizeUnit,
                                fontFamily: titleStyles[0].titleFamily,
                                marginTop: titleStyles[0].titleT + "px",
                                marginBottom: titleStyles[0].titleB + "px",
                                color: titleStyles[0].titleColor,
                                letterSpacing: titleStyles[0].titleSpacing + "px",
                                fontWeight: titleStyles[0].titleWeight,
                                textTransform: titleStyles[0].titleUpper ? "uppercase" : "none",
                                fontStyle: titleStyles[0].titleStyle
                            }
                        },
                        titleTxt
                    )
                ),
                titleCheck && ("column" === flexDir || "column-reverse" === flexDir) && React.createElement(
                    "h3",
                    {
                        className: "premium-countup__title",
                        style: {
                            fontSize: "" + titleFontSize + titleStyles[0].titleSizeUnit,
                            fontFamily: titleStyles[0].titleFamily,
                            marginTop: titleStyles[0].titleT + "px",
                            marginBottom: titleStyles[0].titleB + "px",
                            color: titleStyles[0].titleColor,
                            letterSpacing: titleStyles[0].titleSpacing + "px",
                            fontWeight: titleStyles[0].titleWeight,
                            textTransform: titleStyles[0].titleUpper ? "uppercase" : "none",
                            fontStyle: titleStyles[0].titleStyle,
                            alignSelf: selfAlign
                        }
                    },
                    titleTxt
                ),
                loadCounterGoogleFonts,
                loadTitleGoogleFonts,
                loadSuffixGoogleFonts,
                loadPrefixGoogleFonts
            )];
        }
    }]);

    return edit;
}(Component);

;

exports.default = withSelect(function (select, props) {
    var _select = select('core/edit-post'),
        _select$__experimenta = _select.__experimentalGetPreviewDeviceType,
        __experimentalGetPreviewDeviceType = _select$__experimenta === undefined ? null : _select$__experimenta;

    var deviceType = __experimentalGetPreviewDeviceType ? __experimentalGetPreviewDeviceType() : null;

    return {
        deviceType: deviceType
    };
})(edit);

/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classnames = __webpack_require__(0);

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var save = function save(props) {
    var className = props.className;
    var _props$attributes = props.attributes,
        block_id = _props$attributes.block_id,
        borderCount = _props$attributes.borderCount,
        increment = _props$attributes.increment,
        time = _props$attributes.time,
        delay = _props$attributes.delay,
        align = _props$attributes.align,
        flexDir = _props$attributes.flexDir,
        prefix = _props$attributes.prefix,
        suffix = _props$attributes.suffix,
        icon = _props$attributes.icon,
        iconSpacing = _props$attributes.iconSpacing,
        imageID = _props$attributes.imageID,
        imageURL = _props$attributes.imageURL,
        iconType = _props$attributes.iconType,
        iconCheck = _props$attributes.iconCheck,
        iconSize = _props$attributes.iconSize,
        iconColor = _props$attributes.iconColor,
        selfAlign = _props$attributes.selfAlign,
        titleCheck = _props$attributes.titleCheck,
        titleTxt = _props$attributes.titleTxt,
        faIcon = _props$attributes.faIcon,
        counterFamily = _props$attributes.counterFamily,
        hideDesktop = _props$attributes.hideDesktop,
        hideTablet = _props$attributes.hideTablet,
        hideMobile = _props$attributes.hideMobile,
        numberStyles = _props$attributes.numberStyles,
        titleStyles = _props$attributes.titleStyles,
        containerStyles = _props$attributes.containerStyles,
        suffixStyles = _props$attributes.suffixStyles,
        prefixStyles = _props$attributes.prefixStyles,
        borderTop = _props$attributes.borderTop,
        borderRight = _props$attributes.borderRight,
        borderBottom = _props$attributes.borderBottom,
        borderLeft = _props$attributes.borderLeft,
        paddingT = _props$attributes.paddingT,
        paddingR = _props$attributes.paddingR,
        paddingB = _props$attributes.paddingB,
        paddingL = _props$attributes.paddingL,
        backgroundType = _props$attributes.backgroundType;


    var iconClass = "fa" === iconType ? 'fa fa-' + faIcon : 'dashicons ' + faIcon;

    var mainClasses = (0, _classnames2.default)(className, 'premium-countup');

    var btnGrad = void 0,
        btnGrad2 = void 0,
        btnbg = void 0;
    if (undefined !== backgroundType && 'gradient' === backgroundType) {
        btnGrad = 'transparent' === containerStyles[0].containerBack || undefined === containerStyles[0].containerBack ? 'rgba(255,255,255,0)' : containerStyles[0].containerBack;
        btnGrad2 = undefined !== containerStyles[0].gradientColorTwo && '' !== containerStyles[0].gradientColorTwo ? containerStyles[0].gradientColorTwo : '#777';
        if ('radial' === containerStyles[0].gradientType) {
            btnbg = 'radial-gradient(at ' + containerStyles[0].gradientPosition + ', ' + btnGrad + ' ' + containerStyles[0].gradientLocationOne + '%, ' + btnGrad2 + ' ' + containerStyles[0].gradientLocationTwo + '%)';
        } else if ('radial' !== containerStyles[0].gradientType) {
            btnbg = 'linear-gradient(' + containerStyles[0].gradientAngle + 'deg, ' + btnGrad + ' ' + containerStyles[0].gradientLocationOne + '%, ' + btnGrad2 + ' ' + containerStyles[0].gradientLocationTwo + '%)';
        }
    } else {
        btnbg = containerStyles[0].backgroundImageURL ? 'url(\'' + containerStyles[0].backgroundImageURL + '\')' : '';
    }

    return React.createElement(
        'div',
        {
            id: 'premium-countup-' + block_id,
            className: mainClasses + '__wrap premium-countup-' + block_id + ' ' + hideDesktop + ' ' + hideTablet + ' ' + hideMobile,
            style: {
                justifyContent: align,
                flexDirection: flexDir,
                backgroundColor: backgroundType === "solid" ? containerStyles[0].containerBack : "transparent",
                boxShadow: containerStyles[0].shadowHorizontal + 'px ' + containerStyles[0].shadowVertical + 'px ' + containerStyles[0].shadowBlur + 'px rgba(' + containerStyles[0].shadowColor.r + ',' + containerStyles[0].shadowColor.g + ',' + containerStyles[0].shadowColor.b + ', ' + containerStyles[0].shadowColor.a + ') ' + containerStyles[0].shadowPosition,
                backgroundImage: btnbg,
                backgroundRepeat: containerStyles[0].backgroundRepeat,
                backgroundPosition: containerStyles[0].backgroundPosition,
                backgroundSize: containerStyles[0].backgroundSize,
                backgroundAttachment: containerStyles[0].fixed ? "fixed" : "unset",
                borderStyle: containerStyles[0].borderType,
                borderWidth: borderCount ? borderTop + 'px ' + borderRight + 'px ' + borderBottom + 'px ' + borderLeft + 'px' : containerStyles[0].borderWidth + "px",
                borderRadius: containerStyles[0].borderRadius + "px",
                borderColor: containerStyles[0].borderColor
            }
        },
        iconCheck && React.createElement(
            'div',
            {
                className: 'premium-countup__icon_wrap',
                style: {
                    marginRight: "row" === flexDir || "row-reverse" === flexDir ? iconSpacing + "px" : "0",
                    marginLeft: "row" === flexDir || "row-reverse" === flexDir ? iconSpacing + "px" : "0",
                    alignSelf: "row-reverse" === flexDir || "row" === flexDir ? "center" : selfAlign
                }
            },
            "icon" === icon && React.createElement('i', {
                className: 'premium-countup__icon ' + iconClass,
                style: {
                    fontSize: iconSize + "px",
                    color: iconColor
                }
            }),
            "img" === icon && imageURL && React.createElement('img', {
                src: imageURL,
                style: {
                    width: iconSize + "px",
                    height: iconSize + "px"
                }
            })
        ),
        React.createElement(
            'div',
            {
                className: 'premium-countup__info',
                style: {
                    alignSelf: "row-reverse" === flexDir || "row" === flexDir ? "center" : selfAlign
                }
            },
            React.createElement(
                'div',
                { className: 'premium-countup__desc' },
                prefix && React.createElement(
                    'p',
                    {
                        className: 'premium-countup__prefix',
                        style: {
                            fontFamily: prefixStyles[0].prefixFamily,
                            color: prefixStyles[0].prefixColor,
                            fontWeight: prefixStyles[0].prefixWeight,
                            marginRight: prefixStyles[0].prefixGap + "px"
                        }
                    },
                    prefixStyles[0].prefixTxt
                ),
                React.createElement(
                    'p',
                    {
                        className: 'premium-countup__increment',
                        'data-interval': time,
                        'data-delay': delay,
                        style: {
                            fontFamily: counterFamily,
                            color: numberStyles[0].numberColor,
                            fontWeight: numberStyles[0].numberWeight
                        }
                    },
                    increment
                ),
                suffix && React.createElement(
                    'p',
                    {
                        className: 'premium-countup__suffix',
                        style: {
                            fontFamily: suffixStyles[0].suffixFamily,
                            color: suffixStyles[0].suffixColor,
                            fontWeight: suffixStyles[0].suffixWeight,
                            marginLeft: suffixStyles[0].suffixGap + "px"
                        }
                    },
                    suffixStyles[0].suffixTxt
                )
            ),
            titleCheck && ("row" === flexDir || "row-reverse" === flexDir) && React.createElement(
                'h3',
                {
                    className: 'premium-countup__title',
                    style: {
                        fontFamily: titleStyles[0].titleFamily,
                        marginTop: titleStyles[0].titleT + "px",
                        marginBottom: titleStyles[0].titleB + "px",
                        color: titleStyles[0].titleColor,
                        letterSpacing: titleStyles[0].titleSpacing + "px",
                        fontWeight: titleStyles[0].titleWeight,
                        textTransform: titleStyles[0].titleUpper ? "uppercase" : "none",
                        fontStyle: titleStyles[0].titleStyle
                    }
                },
                titleTxt
            )
        ),
        titleCheck && ("column" === flexDir || "column-reverse" === flexDir) && React.createElement(
            'h3',
            {
                className: 'premium-countup__title',
                style: {
                    fontFamily: titleStyles[0].titleFamily,
                    marginTop: titleStyles[0].titleT + "px",
                    marginBottom: titleStyles[0].titleB + "px",
                    color: titleStyles[0].titleColor,
                    letterSpacing: titleStyles[0].titleSpacing + "px",
                    fontWeight: titleStyles[0].titleWeight,
                    textTransform: titleStyles[0].titleUpper ? "uppercase" : "none",
                    fontStyle: titleStyles[0].titleStyle,
                    alignSelf: selfAlign
                }
            },
            titleTxt
        )
    );
};

exports.default = save;

/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _hexToRgba = __webpack_require__(17);

var _hexToRgba2 = _interopRequireDefault(_hexToRgba);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var className = "premium-countup";
var __ = wp.i18n.__;


var attributes = {
    block_id: {
        type: "string"
    },
    borderCount: {
        type: "boolean",
        default: false
    },
    increment: {
        type: "string",
        default: 500
    },
    time: {
        type: "string",
        default: 1000
    },
    delay: {
        type: "string",
        default: 10
    },
    align: {
        type: "string",
        default: "center"
    },
    flexDir: {
        type: "string",
        default: "column"
    },
    numberSizeUnit: {
        type: "string",
        default: "px"
    },
    numberSize: {
        type: "number",
        default: 30
    },
    numberSizeTablet: {
        type: "number"
    },
    numberSizeMobile: {
        type: "number"
    },
    numberColor: {
        type: "string",
        default: "#6ec1e4"
    },
    numberWeight: {
        type: "number",
        default: 900
    },
    prefix: {
        type: "boolean",
        default: true
    },
    prefixTxt: {
        type: "string",
        default: "Prefix"
    },
    prefixSize: {
        type: "number",
        default: 20
    },
    prefixSizeUnit: {
        type: 'string',
        default: 'px'
    },
    prefixSizeTablet: {
        type: "number"
    },
    prefixSizeMobile: {
        type: "number"
    },
    prefixColor: {
        type: "string"
    },
    prefixWeight: {
        type: "number"
    },
    prefixGap: {
        type: "number",
        default: 2
    },
    suffix: {
        type: "boolean",
        default: true
    },
    suffixTxt: {
        type: "string",
        default: "Suffix"
    },
    suffixSizeUnit: {
        type: "string",
        default: 'px'
    },
    suffixSize: {
        type: "number",
        default: 20
    },
    suffixSizeTablet: {
        type: "number"
    },
    suffixSizeMobile: {
        type: 'number'
    },
    suffixColor: {
        type: "string"
    },
    suffixWeight: {
        type: "number"
    },
    suffixGap: {
        type: "number",
        default: 2
    },
    icon: {
        type: "string",
        default: "icon"
    },
    iconSpacing: {
        type: "number",
        default: 10
    },
    imageID: {
        type: "string"
    },
    imageURL: {
        type: "string"
    },
    iconType: {
        type: "string",
        default: "dash"
    },
    iconCheck: {
        type: "boolean",
        default: true
    },
    iconSize: {
        type: "number",
        default: 40
    },
    iconColor: {
        type: "string",
        default: "#6ec1e4"
    },
    selfAlign: {
        type: "string",
        default: "center"
    },
    titleCheck: {
        type: "boolean",
        default: true
    },
    titleTxt: {
        type: "string",
        default: "Premium Count Up"
    },
    titleSize: {
        type: "number",
        default: 20
    },
    titleSizeUnit: {
        type: "string",
        default: "px"
    },
    titleSizeTablet: {
        type: "number"
    },
    titleSizeMobile: {
        type: "number"
    },
    titleSpacing: {
        type: "number"
    },
    titleStyle: {
        type: "string"
    },
    titleUpper: {
        type: "boolean"
    },
    titleT: {
        type: "number",
        default: 1
    },
    titleB: {
        type: "number",
        default: 1
    },
    titleColor: {
        type: "string"
    },
    titleWeight: {
        type: "number",
        default: 500
    },
    faIcon: {
        type: "string",
        default: "dashicons-clock"
    },
    containerBack: {
        type: "string"
    },
    containerOpacity: {
        type: "number",
        default: "1"
    },
    shadowColor: {
        type: "object",
        default: {}
    },
    shadowBlur: {
        type: "number",
        default: "0"
    },
    shadowHorizontal: {
        type: "number",
        default: "0"
    },
    shadowVertical: {
        type: "number",
        default: "0"
    },
    shadowPosition: {
        type: "string",
        default: ""
    },
    backgroundImageID: {
        type: "string"
    },
    backgroundImageURL: {
        type: "string"
    },
    backgroundRepeat: {
        type: "string",
        default: "no-repeat"
    },
    backgroundPosition: {
        type: "string",
        default: "top center"
    },
    backgroundSize: {
        type: "string",
        default: "auto"
    },
    fixed: {
        type: "boolean",
        default: false
    },
    borderType: {
        type: "string",
        default: "none"
    },
    borderWidth: {
        type: "number",
        default: "1"
    },
    borderTop: {
        type: "number"
    },
    borderRight: {
        type: "number"
    },
    borderBottom: {
        type: "number"
    },
    borderLeft: {
        type: "number"
    },
    borderRadius: {
        type: "number",
        default: "0"
    },
    borderColor: {
        type: "string"
    },
    titleFamily: {
        type: "string"
    },
    counterFamily: {
        type: "string"
    },
    prefixFamily: {
        type: "string"
    },
    suffixFamily: {
        type: "string"
    },
    paddingT: {
        type: "number"
    },
    paddingR: {
        type: "number"
    },
    paddingB: {
        type: "number"
    },
    paddingL: {
        type: "number"
    },
    paddingU: {
        type: "string"
    },
    hideDesktop: {
        type: 'boolean',
        default: false
    },
    hideTablet: {
        type: 'boolean',
        default: false
    },
    hideMobile: {
        type: 'boolean',
        default: false
    }
};

var new_Attributes = {};

var deprecatedContent = [{
    attributes: attributes,
    migrate: function migrate(attributes) {
        var _ref;

        var newAttributes = {
            numberStyles: [{
                numberSizeUnit: attributes.numberSizeUnit,
                numberSize: attributes.numberSize,
                numberSizeTablet: attributes.numberSizeTablet,
                numberSizeMobile: attributes.numberSizeMobile,
                numberColor: attributes.numberColor,
                numberWeight: attributes.numberWeight
            }],
            titleStyles: [(_ref = {
                titleFamily: attributes.titleFamily,
                titleSize: attributes.titleSize,
                titleSizeUnit: attributes.titleSizeUnit,
                titleSizeTablet: attributes.titleSizeTablet,
                titleSizeMobile: attributes.titleSizeMobile,
                titleSpacing: attributes.titleSpacing,
                titleStyle: attributes.titleStyle,
                titleUpper: attributes.titleUpper,
                titleColor: attributes.titleColor,
                titleT: attributes.titleT,
                titleB: attributes.titleB
            }, _defineProperty(_ref, "titleColor", attributes.titleColor), _defineProperty(_ref, "titleWeight", attributes.titleWeight), _ref)],
            containerStyles: [{
                containerBack: attributes.containerBack,
                containerOpacity: attributes.containerOpacity,
                backgroundImageID: attributes.imageID,
                backgroundImageURL: attributes.imageURL,
                backgroundRepeat: attributes.backgroundRepeat,
                backgroundPosition: attributes.backgroundPosition,
                backgroundSize: attributes.backgroundSize,
                fixed: attributes.fixed,
                borderType: attributes.borderType,
                borderWidth: attributes.borderWidth,
                borderRadius: attributes.borderRadius,
                borderColor: attributes.borderColor,
                shadowColor: attributes.shadowColor,
                shadowBlur: attributes.shadowBlur,
                shadowHorizontal: attributes.shadowHorizontal,
                shadowVertical: attributes.shadowVertical,
                shadowPosition: attributes.shadowPosition,
                paddingU: attributes.paddingU,
                gradientLocationOne: '',
                gradientColorTwo: '',
                gradientLocationTwo: '100',
                gradientType: 'linear',
                gradientAngle: '180',
                gradientPosition: 'center center'
            }],
            suffixStyles: [{
                suffixTxt: attributes.suffixTxt,
                suffixSizeUnit: attributes.suffixSizeUnit,
                suffixSize: attributes.suffixSize,
                suffixSizeTablet: attributes.suffixSizeTablet,
                suffixSizeMobile: attributes.suffixSizeMobile,
                suffixColor: attributes.suffixColor,
                suffixWeight: attributes.suffixWeight,
                suffixGap: attributes.suffixGap,
                suffixFamily: attributes.suffixFamily
            }],
            prefixStyles: [{
                prefixTxt: attributes.prefixTxt,
                prefixSize: attributes.prefixSize,
                prefixSizeUnit: attributes.prefixSizeUnit,
                prefixSizeTablet: attributes.prefixSizeTablet,
                prefixSizeMobile: attributes.prefixSizeMobile,
                prefixColor: attributes.prefixColor,
                prefixWeight: attributes.prefixWeight,
                prefixGap: attributes.prefixGap,
                prefixFamily: attributes.prefixFamily
            }],
            backgroundType: 'solid',
            paddingTTablet: '',
            paddingRTablet: '',
            paddingBTablet: '',
            paddingLTablet: '',
            paddingTMobile: '',
            paddingRMobile: '',
            paddingBMobile: '',
            paddingLMobile: ''
        };
        return Object.assign(attributes, newAttributes);
    },
    save: function save(props) {
        var _props$attributes = props.attributes,
            block_id = _props$attributes.block_id,
            borderCount = _props$attributes.borderCount,
            increment = _props$attributes.increment,
            time = _props$attributes.time,
            delay = _props$attributes.delay,
            align = _props$attributes.align,
            flexDir = _props$attributes.flexDir,
            numberColor = _props$attributes.numberColor,
            numberWeight = _props$attributes.numberWeight,
            prefix = _props$attributes.prefix,
            prefixTxt = _props$attributes.prefixTxt,
            prefixColor = _props$attributes.prefixColor,
            prefixWeight = _props$attributes.prefixWeight,
            prefixGap = _props$attributes.prefixGap,
            suffix = _props$attributes.suffix,
            suffixTxt = _props$attributes.suffixTxt,
            suffixColor = _props$attributes.suffixColor,
            suffixWeight = _props$attributes.suffixWeight,
            suffixGap = _props$attributes.suffixGap,
            iconCheck = _props$attributes.iconCheck,
            icon = _props$attributes.icon,
            iconSpacing = _props$attributes.iconSpacing,
            iconType = _props$attributes.iconType,
            imageURL = _props$attributes.imageURL,
            iconSize = _props$attributes.iconSize,
            iconColor = _props$attributes.iconColor,
            selfAlign = _props$attributes.selfAlign,
            titleCheck = _props$attributes.titleCheck,
            titleTxt = _props$attributes.titleTxt,
            titleColor = _props$attributes.titleColor,
            titleSpacing = _props$attributes.titleSpacing,
            titleStyle = _props$attributes.titleStyle,
            titleUpper = _props$attributes.titleUpper,
            titleT = _props$attributes.titleT,
            titleB = _props$attributes.titleB,
            titleWeight = _props$attributes.titleWeight,
            faIcon = _props$attributes.faIcon,
            containerBack = _props$attributes.containerBack,
            containerOpacity = _props$attributes.containerOpacity,
            shadowBlur = _props$attributes.shadowBlur,
            shadowColor = _props$attributes.shadowColor,
            shadowHorizontal = _props$attributes.shadowHorizontal,
            shadowVertical = _props$attributes.shadowVertical,
            shadowPosition = _props$attributes.shadowPosition,
            backgroundImageURL = _props$attributes.backgroundImageURL,
            fixed = _props$attributes.fixed,
            backgroundRepeat = _props$attributes.backgroundRepeat,
            backgroundPosition = _props$attributes.backgroundPosition,
            backgroundSize = _props$attributes.backgroundSize,
            borderType = _props$attributes.borderType,
            borderColor = _props$attributes.borderColor,
            borderRadius = _props$attributes.borderRadius,
            borderWidth = _props$attributes.borderWidth,
            borderTop = _props$attributes.borderTop,
            borderRight = _props$attributes.borderRight,
            borderBottom = _props$attributes.borderBottom,
            borderLeft = _props$attributes.borderLeft,
            titleFamily = _props$attributes.titleFamily,
            counterFamily = _props$attributes.counterFamily,
            prefixFamily = _props$attributes.prefixFamily,
            suffixFamily = _props$attributes.suffixFamily,
            paddingT = _props$attributes.paddingT,
            paddingR = _props$attributes.paddingR,
            paddingB = _props$attributes.paddingB,
            paddingL = _props$attributes.paddingL,
            paddingU = _props$attributes.paddingU,
            hideDesktop = _props$attributes.hideDesktop,
            hideTablet = _props$attributes.hideTablet,
            hideMobile = _props$attributes.hideMobile;

        var iconClass = "fa" === iconType ? "fa fa-" + faIcon : "dashicons " + faIcon;
        return React.createElement(
            "div",
            {
                id: "premium-countup-" + block_id,
                className: className + "__wrap premium-countup-" + block_id + " " + hideDesktop + " " + hideTablet + " " + hideMobile,
                style: {
                    justifyContent: align,
                    flexDirection: flexDir,
                    backgroundColor: containerBack ? (0, _hexToRgba2.default)(containerBack, containerOpacity) : "transparent",
                    boxShadow: shadowHorizontal + "px " + shadowVertical + "px " + shadowBlur + "px rgba(" + shadowColor.r + "," + shadowColor.g + "," + shadowColor.b + ", " + shadowColor.a + ") " + shadowPosition,
                    backgroundImage: "url('" + backgroundImageURL + "')",
                    backgroundRepeat: backgroundRepeat,
                    backgroundPosition: backgroundPosition,
                    backgroundSize: backgroundSize,
                    backgroundAttachment: fixed ? "fixed" : "unset",
                    borderStyle: borderType,
                    borderWidth: borderCount ? borderTop + "px " + borderRight + "px " + borderBottom + "px " + borderLeft + "px" : borderWidth + "px",
                    borderRadius: borderRadius + "px",
                    borderColor: borderColor,
                    paddingTop: paddingT + paddingU,
                    paddingRight: paddingR + paddingU,
                    paddingBottom: paddingB + paddingU,
                    paddingLeft: paddingL + paddingU
                }
            },
            iconCheck && React.createElement(
                "div",
                {
                    className: "premium-countup__icon_wrap",
                    style: {
                        marginRight: "row" === flexDir || "row-reverse" === flexDir ? iconSpacing + "px" : "0",
                        marginLeft: "row" === flexDir || "row-reverse" === flexDir ? iconSpacing + "px" : "0",
                        alignSelf: "row-reverse" === flexDir || "row" === flexDir ? "center" : selfAlign
                    }
                },
                "icon" === icon && React.createElement("i", {
                    className: "premium-countup__icon " + iconClass,
                    style: {
                        fontSize: iconSize + "px",
                        color: iconColor
                    }
                }),
                "img" === icon && imageURL && React.createElement("img", {
                    src: imageURL,
                    style: {
                        width: iconSize + "px",
                        height: iconSize + "px"
                    }
                })
            ),
            React.createElement(
                "div",
                {
                    className: "premium-countup__info",
                    style: {
                        alignSelf: "row-reverse" === flexDir || "row" === flexDir ? "center" : selfAlign
                    }
                },
                React.createElement(
                    "div",
                    { className: "premium-countup__desc" },
                    prefix && React.createElement(
                        "p",
                        {
                            className: "premium-countup__prefix",
                            style: {
                                fontFamily: prefixFamily,
                                color: prefixColor,
                                fontWeight: prefixWeight,
                                marginRight: prefixGap + "px"
                            }
                        },
                        prefixTxt
                    ),
                    React.createElement(
                        "p",
                        {
                            className: "premium-countup__increment",
                            "data-interval": time,
                            "data-delay": delay,
                            style: {
                                fontFamily: counterFamily,
                                color: numberColor,
                                fontWeight: numberWeight
                            }
                        },
                        increment
                    ),
                    suffix && React.createElement(
                        "p",
                        {
                            className: "premium-countup__suffix",
                            style: {
                                fontFamily: suffixFamily,
                                color: suffixColor,
                                fontWeight: suffixWeight,
                                marginLeft: suffixGap + "px"
                            }
                        },
                        suffixTxt
                    )
                ),
                titleCheck && ("row" === flexDir || "row-reverse" === flexDir) && React.createElement(
                    "h3",
                    {
                        className: "premium-countup__title",
                        style: {
                            fontFamily: titleFamily,
                            marginTop: titleT + "px",
                            marginBottom: titleB + "px",
                            color: titleColor,
                            letterSpacing: titleSpacing + "px",
                            textTransform: titleUpper ? "uppercase" : "none",
                            fontStyle: titleStyle,
                            fontWeight: titleWeight
                        }
                    },
                    titleTxt
                )
            ),
            titleCheck && ("column" === flexDir || "column-reverse" === flexDir) && React.createElement(
                "h3",
                {
                    className: "premium-countup__title",
                    style: {
                        fontFamily: titleFamily,
                        marginTop: titleT + "px",
                        marginBottom: titleB + "px",
                        color: titleColor,
                        letterSpacing: titleSpacing + "px",
                        fontWeight: titleWeight,
                        textTransform: titleUpper ? "uppercase" : "none",
                        fontStyle: titleStyle,
                        alignSelf: selfAlign
                    }
                },
                titleTxt
            )
        );
    }
}, {
    attributes: attributes,
    migrate: function migrate(attributes) {
        var newAttributes = {
            borderTop: "",
            borderRight: "",
            borderBottom: "",
            borderLeft: "",
            borderCount: "",
            block_id: '',
            numberSizeUnit: 'px',
            numberSizeTablet: '',
            numberSizeMobile: '',
            prefixSizeUnit: 'px',
            prefixSizeTablet: '',
            prefixSizeMobile: '',
            suffixSizeUnit: 'px',
            suffixSizeTablet: '',
            suffixSizeMobile: '',
            titleSizeUnit: 'px',
            titleSizeTablet: '',
            titleSizeMobile: '',
            containerOpacity: "",
            hideDesktop: false,
            hideTablet: false,
            hideMobile: false
        };
        return Object.assign(attributes, newAttributes);
    },
    save: function save(props) {
        var _props$attributes2 = props.attributes,
            increment = _props$attributes2.increment,
            time = _props$attributes2.time,
            delay = _props$attributes2.delay,
            align = _props$attributes2.align,
            flexDir = _props$attributes2.flexDir,
            numberSize = _props$attributes2.numberSize,
            numberColor = _props$attributes2.numberColor,
            numberWeight = _props$attributes2.numberWeight,
            prefix = _props$attributes2.prefix,
            prefixTxt = _props$attributes2.prefixTxt,
            prefixSize = _props$attributes2.prefixSize,
            prefixColor = _props$attributes2.prefixColor,
            prefixWeight = _props$attributes2.prefixWeight,
            prefixGap = _props$attributes2.prefixGap,
            suffix = _props$attributes2.suffix,
            suffixTxt = _props$attributes2.suffixTxt,
            suffixSize = _props$attributes2.suffixSize,
            suffixColor = _props$attributes2.suffixColor,
            suffixWeight = _props$attributes2.suffixWeight,
            suffixGap = _props$attributes2.suffixGap,
            iconCheck = _props$attributes2.iconCheck,
            icon = _props$attributes2.icon,
            iconSpacing = _props$attributes2.iconSpacing,
            iconType = _props$attributes2.iconType,
            imageURL = _props$attributes2.imageURL,
            iconSize = _props$attributes2.iconSize,
            iconColor = _props$attributes2.iconColor,
            selfAlign = _props$attributes2.selfAlign,
            titleCheck = _props$attributes2.titleCheck,
            titleTxt = _props$attributes2.titleTxt,
            titleColor = _props$attributes2.titleColor,
            titleSize = _props$attributes2.titleSize,
            titleSpacing = _props$attributes2.titleSpacing,
            titleStyle = _props$attributes2.titleStyle,
            titleUpper = _props$attributes2.titleUpper,
            titleT = _props$attributes2.titleT,
            titleB = _props$attributes2.titleB,
            titleWeight = _props$attributes2.titleWeight,
            faIcon = _props$attributes2.faIcon,
            containerBack = _props$attributes2.containerBack,
            shadowBlur = _props$attributes2.shadowBlur,
            shadowColor = _props$attributes2.shadowColor,
            shadowHorizontal = _props$attributes2.shadowHorizontal,
            shadowVertical = _props$attributes2.shadowVertical,
            shadowPosition = _props$attributes2.shadowPosition,
            backgroundImageURL = _props$attributes2.backgroundImageURL,
            fixed = _props$attributes2.fixed,
            backgroundRepeat = _props$attributes2.backgroundRepeat,
            backgroundPosition = _props$attributes2.backgroundPosition,
            backgroundSize = _props$attributes2.backgroundSize,
            borderType = _props$attributes2.borderType,
            borderColor = _props$attributes2.borderColor,
            borderRadius = _props$attributes2.borderRadius,
            borderWidth = _props$attributes2.borderWidth,
            titleFamily = _props$attributes2.titleFamily,
            counterFamily = _props$attributes2.counterFamily,
            prefixFamily = _props$attributes2.prefixFamily,
            suffixFamily = _props$attributes2.suffixFamily;

        var iconClass = "fa" === iconType ? "fa fa-" + faIcon : "dashicons " + faIcon;
        return React.createElement(
            "div",
            {
                className: className + "__wrap",
                style: {
                    justifyContent: align,
                    flexDirection: flexDir,
                    backgroundColor: containerBack,
                    boxShadow: shadowHorizontal + "px " + shadowVertical + "px " + shadowBlur + "px " + shadowColor + " " + shadowPosition,
                    backgroundImage: "url('" + backgroundImageURL + "')",
                    backgroundRepeat: backgroundRepeat,
                    backgroundPosition: backgroundPosition,
                    backgroundSize: backgroundSize,
                    backgroundAttachment: fixed ? "fixed" : "unset",
                    border: borderType,
                    borderWidth: borderWidth + "px",
                    borderRadius: borderRadius + "px",
                    borderColor: borderColor
                }
            },
            iconCheck && React.createElement(
                "div",
                {
                    className: "premium-countup__icon_wrap",
                    style: {
                        marginRight: "row" === flexDir || "row-reverse" === flexDir ? iconSpacing + "px" : "0",
                        marginLeft: "row" === flexDir || "row-reverse" === flexDir ? iconSpacing + "px" : "0",
                        alignSelf: "row-reverse" === flexDir || "row" === flexDir ? "center" : selfAlign
                    }
                },
                "icon" === icon && React.createElement("i", {
                    className: "premium-countup__icon " + iconClass,
                    style: {
                        fontSize: iconSize + "px",
                        color: iconColor
                    }
                }),
                "img" === icon && imageURL && React.createElement("img", {
                    src: imageURL,
                    style: {
                        width: iconSize + "px",
                        height: iconSize + "px"
                    }
                })
            ),
            React.createElement(
                "div",
                {
                    className: "premium-countup__info",
                    style: {
                        alignSelf: "row-reverse" === flexDir || "row" === flexDir ? "center" : selfAlign
                    }
                },
                React.createElement(
                    "div",
                    { className: "premium-countup__desc" },
                    prefix && React.createElement(
                        "p",
                        {
                            className: "premium-countup__prefix",
                            style: {
                                fontSize: prefixSize + "px",
                                fontFamily: prefixFamily,
                                color: prefixColor,
                                fontWeight: prefixWeight,
                                marginRight: prefixGap + "px"
                            }
                        },
                        prefixTxt
                    ),
                    React.createElement(
                        "p",
                        {
                            className: "premium-countup__increment",
                            "data-interval": time,
                            "data-delay": delay,
                            style: {
                                fontSize: numberSize + "px",
                                fontFamily: counterFamily,
                                color: numberColor,
                                fontWeight: numberWeight
                            }
                        },
                        increment
                    ),
                    suffix && React.createElement(
                        "p",
                        {
                            className: "premium-countup__suffix",
                            style: {
                                fontSize: suffixSize + "px",
                                fontFamily: suffixFamily,
                                color: suffixColor,
                                fontWeight: suffixWeight,
                                marginLeft: suffixGap + "px"
                            }
                        },
                        suffixTxt
                    )
                ),
                titleCheck && ("row" === flexDir || "row-reverse" === flexDir) && React.createElement(
                    "h3",
                    {
                        className: "premium-countup__title",
                        style: {
                            fontSize: titleSize + "px",
                            fontFamily: titleFamily,
                            marginTop: titleT + "px",
                            marginBottom: titleB + "px",
                            color: titleColor,
                            letterSpacing: titleSpacing + "px",
                            textTransform: titleUpper ? "uppercase" : "none",
                            fontStyle: titleStyle,
                            fontWeight: titleWeight
                        }
                    },
                    titleTxt
                )
            ),
            titleCheck && ("column" === flexDir || "column-reverse" === flexDir) && React.createElement(
                "h3",
                {
                    className: "premium-countup__title",
                    style: {
                        fontSize: titleSize + "px",
                        fontFamily: titleFamily,
                        marginTop: titleT + "px",
                        marginBottom: titleB + "px",
                        color: titleColor,
                        letterSpacing: titleSpacing + "px",
                        fontWeight: titleWeight,
                        textTransform: titleUpper ? "uppercase" : "none",
                        fontStyle: titleStyle,
                        alignSelf: selfAlign
                    }
                },
                titleTxt
            )
        );
    }
}, {
    attributes: attributes,
    migrate: function migrate(attributes) {
        var newAttributes = {
            borderType: "",
            borderColor: "",
            borderRadius: "",
            borderWidth: ""
        };
        return Object.assign(attributes, newAttributes);
    },
    save: function save(props) {
        var _props$attributes3 = props.attributes,
            increment = _props$attributes3.increment,
            time = _props$attributes3.time,
            delay = _props$attributes3.delay,
            align = _props$attributes3.align,
            flexDir = _props$attributes3.flexDir,
            numberSize = _props$attributes3.numberSize,
            numberColor = _props$attributes3.numberColor,
            numberWeight = _props$attributes3.numberWeight,
            prefix = _props$attributes3.prefix,
            prefixTxt = _props$attributes3.prefixTxt,
            prefixSize = _props$attributes3.prefixSize,
            prefixColor = _props$attributes3.prefixColor,
            prefixWeight = _props$attributes3.prefixWeight,
            prefixGap = _props$attributes3.prefixGap,
            suffix = _props$attributes3.suffix,
            suffixTxt = _props$attributes3.suffixTxt,
            suffixSize = _props$attributes3.suffixSize,
            suffixColor = _props$attributes3.suffixColor,
            suffixWeight = _props$attributes3.suffixWeight,
            suffixGap = _props$attributes3.suffixGap,
            iconCheck = _props$attributes3.iconCheck,
            icon = _props$attributes3.icon,
            iconSpacing = _props$attributes3.iconSpacing,
            iconType = _props$attributes3.iconType,
            imageURL = _props$attributes3.imageURL,
            iconSize = _props$attributes3.iconSize,
            iconColor = _props$attributes3.iconColor,
            selfAlign = _props$attributes3.selfAlign,
            titleCheck = _props$attributes3.titleCheck,
            titleTxt = _props$attributes3.titleTxt,
            titleColor = _props$attributes3.titleColor,
            titleSize = _props$attributes3.titleSize,
            titleSpacing = _props$attributes3.titleSpacing,
            titleStyle = _props$attributes3.titleStyle,
            titleUpper = _props$attributes3.titleUpper,
            titleT = _props$attributes3.titleT,
            titleB = _props$attributes3.titleB,
            titleWeight = _props$attributes3.titleWeight,
            faIcon = _props$attributes3.faIcon,
            containerBack = _props$attributes3.containerBack,
            shadowBlur = _props$attributes3.shadowBlur,
            shadowColor = _props$attributes3.shadowColor,
            shadowHorizontal = _props$attributes3.shadowHorizontal,
            shadowVertical = _props$attributes3.shadowVertical,
            shadowPosition = _props$attributes3.shadowPosition,
            backgroundImageURL = _props$attributes3.backgroundImageURL,
            fixed = _props$attributes3.fixed,
            backgroundRepeat = _props$attributes3.backgroundRepeat,
            backgroundPosition = _props$attributes3.backgroundPosition,
            backgroundSize = _props$attributes3.backgroundSize,
            titleFamily = _props$attributes3.titleFamily,
            counterFamily = _props$attributes3.counterFamily,
            prefixFamily = _props$attributes3.prefixFamily,
            suffixFamily = _props$attributes3.suffixFamily;

        var iconClass = "fa" === iconType ? "fa fa-" + faIcon : "dashicons " + faIcon;
        return React.createElement(
            "div",
            {
                className: className + "__wrap",
                style: {
                    justifyContent: align,
                    flexDirection: flexDir,
                    backgroundColor: containerBack,
                    boxShadow: shadowHorizontal + "px " + shadowVertical + "px " + shadowBlur + "px " + shadowColor + " " + shadowPosition,
                    backgroundImage: "url('" + backgroundImageURL + "')",
                    backgroundRepeat: backgroundRepeat,
                    backgroundPosition: backgroundPosition,
                    backgroundSize: backgroundSize,
                    backgroundAttachment: fixed ? "fixed" : "unset"
                }
            },
            iconCheck && React.createElement(
                "div",
                {
                    className: className + "__icon_wrap",
                    style: {
                        marginRight: "row" === flexDir || "row-reverse" === flexDir ? iconSpacing + "px" : "0",
                        marginLeft: "row" === flexDir || "row-reverse" === flexDir ? iconSpacing + "px" : "0",
                        alignSelf: "row-reverse" === flexDir || "row" === flexDir ? "center" : selfAlign
                    }
                },
                "icon" === icon && React.createElement("i", {
                    className: className + "__icon " + iconClass,
                    style: {
                        fontSize: iconSize + "px",
                        color: iconColor
                    }
                }),
                "img" === icon && imageURL && React.createElement("img", {
                    src: imageURL,
                    style: {
                        width: iconSize + "px",
                        height: iconSize + "px"
                    }
                })
            ),
            React.createElement(
                "div",
                {
                    className: className + "__info",
                    style: {
                        alignSelf: "row-reverse" === flexDir || "row" === flexDir ? "center" : selfAlign
                    }
                },
                React.createElement(
                    "div",
                    { className: className + "__desc" },
                    prefix && React.createElement(
                        "p",
                        {
                            className: className + "__prefix",
                            style: {
                                fontSize: prefixSize + "px",
                                fontFamily: prefixFamily,
                                color: prefixColor,
                                fontWeight: prefixWeight,
                                marginRight: prefixGap + "px"
                            }
                        },
                        prefixTxt
                    ),
                    React.createElement(
                        "p",
                        {
                            className: className + "__increment",
                            "data-interval": time,
                            "data-delay": delay,
                            style: {
                                fontSize: numberSize + "px",
                                fontFamily: counterFamily,
                                color: numberColor,
                                fontWeight: numberWeight
                            }
                        },
                        increment
                    ),
                    suffix && React.createElement(
                        "p",
                        {
                            className: className + "__suffix",
                            style: {
                                fontSize: suffixSize + "px",
                                fontFamily: suffixFamily,
                                color: suffixColor,
                                fontWeight: suffixWeight,
                                marginLeft: suffixGap + "px"
                            }
                        },
                        suffixTxt
                    )
                ),
                titleCheck && ("row" === flexDir || "row-reverse" === flexDir) && React.createElement(
                    "h3",
                    {
                        className: className + "__title",
                        style: {
                            fontSize: titleSize + "px",
                            fontFamily: titleFamily,
                            marginTop: titleT + "px",
                            marginBottom: titleB + "px",
                            color: titleColor,
                            letterSpacing: titleSpacing + "px",
                            textTransform: titleUpper ? "uppercase" : "none",
                            fontStyle: titleStyle,
                            fontWeight: titleWeight
                        }
                    },
                    titleTxt
                )
            ),
            titleCheck && ("column" === flexDir || "column-reverse" === flexDir) && React.createElement(
                "h3",
                {
                    className: className + "__title",
                    style: {
                        fontSize: titleSize + "px",
                        fontFamily: titleFamily,
                        marginTop: titleT + "px",
                        marginBottom: titleB + "px",
                        color: titleColor,
                        letterSpacing: titleSpacing + "px",
                        fontWeight: titleWeight,
                        textTransform: titleUpper ? "uppercase" : "none",
                        fontStyle: titleStyle,
                        alignSelf: selfAlign
                    }
                },
                titleTxt
            )
        );
    }
}, {
    attributes: attributes,
    migrate: function migrate(attributes) {
        var newAttributes = {
            titleFamily: "",
            counterFamily: "",
            prefixFamily: "",
            suffixFamily: ""
        };
        return Object.assign(attributes, newAttributes);
    },
    save: function save(props) {
        var _props$attributes4 = props.attributes,
            increment = _props$attributes4.increment,
            time = _props$attributes4.time,
            delay = _props$attributes4.delay,
            align = _props$attributes4.align,
            flexDir = _props$attributes4.flexDir,
            numberSize = _props$attributes4.numberSize,
            numberColor = _props$attributes4.numberColor,
            numberWeight = _props$attributes4.numberWeight,
            prefix = _props$attributes4.prefix,
            prefixTxt = _props$attributes4.prefixTxt,
            prefixSize = _props$attributes4.prefixSize,
            prefixColor = _props$attributes4.prefixColor,
            prefixWeight = _props$attributes4.prefixWeight,
            prefixGap = _props$attributes4.prefixGap,
            suffix = _props$attributes4.suffix,
            suffixTxt = _props$attributes4.suffixTxt,
            suffixSize = _props$attributes4.suffixSize,
            suffixColor = _props$attributes4.suffixColor,
            suffixWeight = _props$attributes4.suffixWeight,
            suffixGap = _props$attributes4.suffixGap,
            iconCheck = _props$attributes4.iconCheck,
            icon = _props$attributes4.icon,
            iconSpacing = _props$attributes4.iconSpacing,
            iconType = _props$attributes4.iconType,
            imageURL = _props$attributes4.imageURL,
            iconSize = _props$attributes4.iconSize,
            iconColor = _props$attributes4.iconColor,
            selfAlign = _props$attributes4.selfAlign,
            titleCheck = _props$attributes4.titleCheck,
            titleTxt = _props$attributes4.titleTxt,
            titleColor = _props$attributes4.titleColor,
            titleSize = _props$attributes4.titleSize,
            titleSpacing = _props$attributes4.titleSpacing,
            titleStyle = _props$attributes4.titleStyle,
            titleUpper = _props$attributes4.titleUpper,
            titleT = _props$attributes4.titleT,
            titleB = _props$attributes4.titleB,
            titleWeight = _props$attributes4.titleWeight,
            faIcon = _props$attributes4.faIcon,
            containerBack = _props$attributes4.containerBack,
            shadowBlur = _props$attributes4.shadowBlur,
            shadowColor = _props$attributes4.shadowColor,
            shadowHorizontal = _props$attributes4.shadowHorizontal,
            shadowVertical = _props$attributes4.shadowVertical,
            shadowPosition = _props$attributes4.shadowPosition,
            backgroundImageURL = _props$attributes4.backgroundImageURL,
            fixed = _props$attributes4.fixed,
            backgroundRepeat = _props$attributes4.backgroundRepeat,
            backgroundPosition = _props$attributes4.backgroundPosition,
            backgroundSize = _props$attributes4.backgroundSize;

        var iconClass = "fa" === iconType ? "fa fa-" + faIcon : "dashicons " + faIcon;
        return React.createElement(
            "div",
            {
                className: className + "__wrap",
                style: {
                    justifyContent: align,
                    flexDirection: flexDir,
                    backgroundColor: containerBack,
                    boxShadow: shadowHorizontal + "px " + shadowVertical + "px " + shadowBlur + "px " + shadowColor + " " + shadowPosition,
                    backgroundImage: "url('" + backgroundImageURL + "')",
                    backgroundRepeat: backgroundRepeat,
                    backgroundPosition: backgroundPosition,
                    backgroundSize: backgroundSize,
                    backgroundAttachment: fixed ? "fixed" : "unset"
                }
            },
            iconCheck && React.createElement(
                "div",
                {
                    className: className + "__icon_wrap",
                    style: {
                        marginRight: "row" === flexDir || "row-reverse" === flexDir ? iconSpacing + "px" : "0",
                        marginLeft: "row" === flexDir || "row-reverse" === flexDir ? iconSpacing + "px" : "0",
                        alignSelf: "row-reverse" === flexDir || "row" === flexDir ? "center" : selfAlign
                    }
                },
                "icon" === icon && React.createElement("i", {
                    className: className + "__icon " + iconClass,
                    style: {
                        fontSize: iconSize + "px",
                        color: iconColor
                    }
                }),
                "img" === icon && imageURL && React.createElement("img", {
                    src: imageURL,
                    style: {
                        width: iconSize + "px",
                        height: iconSize + "px"
                    }
                })
            ),
            React.createElement(
                "div",
                {
                    className: className + "__info",
                    style: {
                        alignSelf: "row-reverse" === flexDir || "row" === flexDir ? "center" : selfAlign
                    }
                },
                React.createElement(
                    "div",
                    { className: className + "__desc" },
                    prefix && React.createElement(
                        "p",
                        {
                            style: {
                                fontSize: prefixSize + "px",
                                color: prefixColor,
                                fontWeight: prefixWeight,
                                marginRight: prefixGap + "px"
                            }
                        },
                        prefixTxt
                    ),
                    React.createElement(
                        "p",
                        {
                            className: className + "__increment",
                            "data-interval": time,
                            "data-delay": delay,
                            style: {
                                fontSize: numberSize + "px",
                                color: numberColor,
                                fontWeight: numberWeight
                            }
                        },
                        increment
                    ),
                    suffix && React.createElement(
                        "p",
                        {
                            style: {
                                fontSize: suffixSize + "px",
                                color: suffixColor,
                                fontWeight: suffixWeight,
                                marginLeft: suffixGap + "px"
                            }
                        },
                        suffixTxt
                    )
                ),
                titleCheck && ("row" === flexDir || "row-reverse" === flexDir) && React.createElement(
                    "h3",
                    {
                        className: className + "__title",
                        style: {
                            fontSize: titleSize + "px",
                            marginTop: titleT + "px",
                            marginBottom: titleB + "px",
                            color: titleColor,
                            letterSpacing: titleSpacing + "px",
                            textTransform: titleUpper ? "uppercase" : "none",
                            fontStyle: titleStyle,
                            fontWeight: titleWeight
                        }
                    },
                    titleTxt
                )
            ),
            titleCheck && ("column" === flexDir || "column-reverse" === flexDir) && React.createElement(
                "h3",
                {
                    className: className + "__title",
                    style: {
                        fontSize: titleSize + "px",
                        marginTop: titleT + "px",
                        marginBottom: titleB + "px",
                        color: titleColor,
                        letterSpacing: titleSpacing + "px",
                        fontWeight: titleWeight,
                        textTransform: titleUpper ? "uppercase" : "none",
                        fontStyle: titleStyle,
                        alignSelf: selfAlign
                    }
                },
                titleTxt
            )
        );
    }
}, {
    attributes: attributes,
    migrate: function migrate(attributes) {
        var newAttributes = {
            shadowColor: "",
            shadowBlur: "0",
            shadowHorizontal: "0",
            shadowVertical: "0",
            shadowPosition: "",
            backgroundImageID: "",
            backgroundImageURL: "",
            fixed: false,
            backgroundRepeat: "no-repeat",
            backgroundPosition: "top center",
            backgroundSize: "auto"
        };
        return Object.assign(attributes, newAttributes);
    },
    save: function save(props) {
        var _props$attributes5 = props.attributes,
            increment = _props$attributes5.increment,
            time = _props$attributes5.time,
            delay = _props$attributes5.delay,
            align = _props$attributes5.align,
            flexDir = _props$attributes5.flexDir,
            numberSize = _props$attributes5.numberSize,
            numberColor = _props$attributes5.numberColor,
            numberWeight = _props$attributes5.numberWeight,
            prefix = _props$attributes5.prefix,
            prefixTxt = _props$attributes5.prefixTxt,
            prefixSize = _props$attributes5.prefixSize,
            prefixColor = _props$attributes5.prefixColor,
            prefixWeight = _props$attributes5.prefixWeight,
            prefixGap = _props$attributes5.prefixGap,
            suffix = _props$attributes5.suffix,
            suffixTxt = _props$attributes5.suffixTxt,
            suffixSize = _props$attributes5.suffixSize,
            suffixColor = _props$attributes5.suffixColor,
            suffixWeight = _props$attributes5.suffixWeight,
            suffixGap = _props$attributes5.suffixGap,
            iconCheck = _props$attributes5.iconCheck,
            icon = _props$attributes5.icon,
            iconSpacing = _props$attributes5.iconSpacing,
            iconType = _props$attributes5.iconType,
            imageURL = _props$attributes5.imageURL,
            iconSize = _props$attributes5.iconSize,
            iconColor = _props$attributes5.iconColor,
            selfAlign = _props$attributes5.selfAlign,
            titleCheck = _props$attributes5.titleCheck,
            titleTxt = _props$attributes5.titleTxt,
            titleColor = _props$attributes5.titleColor,
            titleSize = _props$attributes5.titleSize,
            titleSpacing = _props$attributes5.titleSpacing,
            titleStyle = _props$attributes5.titleStyle,
            titleUpper = _props$attributes5.titleUpper,
            titleT = _props$attributes5.titleT,
            titleB = _props$attributes5.titleB,
            titleWeight = _props$attributes5.titleWeight,
            faIcon = _props$attributes5.faIcon,
            containerBack = _props$attributes5.containerBack,
            shadowBlur = _props$attributes5.shadowBlur,
            shadowColor = _props$attributes5.shadowColor,
            shadowHorizontal = _props$attributes5.shadowHorizontal,
            shadowVertical = _props$attributes5.shadowVertical,
            shadowPosition = _props$attributes5.shadowPosition;

        var iconClass = "fa" === iconType ? "fa fa-" + faIcon : "dashicons " + faIcon;
        return React.createElement(
            "div",
            {
                className: className + "__wrap",
                style: {
                    justifyContent: align,
                    flexDirection: flexDir,
                    backgroundColor: containerBack,
                    boxShadow: shadowHorizontal + "px " + shadowVertical + "px " + shadowBlur + "px " + shadowColor + " " + shadowPosition
                }
            },
            iconCheck && React.createElement(
                "div",
                {
                    className: className + "__icon_wrap",
                    style: {
                        marginRight: "row" === flexDir || "row-reverse" === flexDir ? iconSpacing + "px" : "0",
                        marginLeft: "row" === flexDir || "row-reverse" === flexDir ? iconSpacing + "px" : "0",
                        alignSelf: "row-reverse" === flexDir || "row" === flexDir ? "center" : selfAlign
                    }
                },
                "icon" === icon && React.createElement("i", {
                    className: className + "__icon " + iconClass,
                    style: {
                        fontSize: iconSize + "px",
                        color: iconColor
                    }
                }),
                "img" === icon && imageURL && React.createElement("img", {
                    src: imageURL,
                    style: {
                        width: iconSize + "px",
                        height: iconSize + "px"
                    }
                })
            ),
            React.createElement(
                "div",
                {
                    className: className + "__info",
                    style: {
                        alignSelf: "row-reverse" === flexDir || "row" === flexDir ? "center" : selfAlign
                    }
                },
                React.createElement(
                    "div",
                    { className: className + "__desc" },
                    prefix && React.createElement(
                        "p",
                        {
                            style: {
                                fontSize: prefixSize + "px",
                                color: prefixColor,
                                fontWeight: prefixWeight,
                                marginRight: prefixGap + "px"
                            }
                        },
                        prefixTxt
                    ),
                    React.createElement(
                        "p",
                        {
                            className: className + "__increment",
                            "data-interval": time,
                            "data-delay": delay,
                            style: {
                                fontSize: numberSize + "px",
                                color: numberColor,
                                fontWeight: numberWeight
                            }
                        },
                        increment
                    ),
                    suffix && React.createElement(
                        "p",
                        {
                            style: {
                                fontSize: suffixSize + "px",
                                color: suffixColor,
                                fontWeight: suffixWeight,
                                marginLeft: suffixGap + "px"
                            }
                        },
                        suffixTxt
                    )
                ),
                titleCheck && ("row" === flexDir || "row-reverse" === flexDir) && React.createElement(
                    "h3",
                    {
                        className: className + "__title",
                        style: {
                            fontSize: titleSize + "px",
                            marginTop: titleT + "px",
                            marginBottom: titleB + "px",
                            color: titleColor,
                            letterSpacing: titleSpacing + "px",
                            textTransform: titleUpper ? "uppercase" : "none",
                            fontStyle: titleStyle,
                            fontWeight: titleWeight
                        }
                    },
                    titleTxt
                )
            ),
            titleCheck && ("column" === flexDir || "column-reverse" === flexDir) && React.createElement(
                "h3",
                {
                    className: className + "__title",
                    style: {
                        fontSize: titleSize + "px",
                        marginTop: titleT + "px",
                        marginBottom: titleB + "px",
                        color: titleColor,
                        letterSpacing: titleSpacing + "px",
                        fontWeight: titleWeight,
                        textTransform: titleUpper ? "uppercase" : "none",
                        fontStyle: titleStyle,
                        alignSelf: selfAlign
                    }
                },
                titleTxt
            )
        );
    }
}, {
    attributes: attributes,
    migrate: function migrate(attributes) {
        var newAttributes = {
            shadowColor: "",
            shadowBlur: "0",
            shadowHorizontal: "0",
            shadowVertical: "0",
            shadowPosition: ""
        };
        return Object.assign(attributes, newAttributes);
    },
    save: function save(props) {
        var _props$attributes6 = props.attributes,
            increment = _props$attributes6.increment,
            time = _props$attributes6.time,
            delay = _props$attributes6.delay,
            align = _props$attributes6.align,
            flexDir = _props$attributes6.flexDir,
            numberSize = _props$attributes6.numberSize,
            numberColor = _props$attributes6.numberColor,
            numberWeight = _props$attributes6.numberWeight,
            prefix = _props$attributes6.prefix,
            prefixTxt = _props$attributes6.prefixTxt,
            prefixSize = _props$attributes6.prefixSize,
            prefixColor = _props$attributes6.prefixColor,
            prefixWeight = _props$attributes6.prefixWeight,
            prefixGap = _props$attributes6.prefixGap,
            suffix = _props$attributes6.suffix,
            suffixTxt = _props$attributes6.suffixTxt,
            suffixSize = _props$attributes6.suffixSize,
            suffixColor = _props$attributes6.suffixColor,
            suffixWeight = _props$attributes6.suffixWeight,
            suffixGap = _props$attributes6.suffixGap,
            iconCheck = _props$attributes6.iconCheck,
            icon = _props$attributes6.icon,
            iconSpacing = _props$attributes6.iconSpacing,
            iconType = _props$attributes6.iconType,
            imageURL = _props$attributes6.imageURL,
            iconSize = _props$attributes6.iconSize,
            iconColor = _props$attributes6.iconColor,
            selfAlign = _props$attributes6.selfAlign,
            titleCheck = _props$attributes6.titleCheck,
            titleTxt = _props$attributes6.titleTxt,
            titleColor = _props$attributes6.titleColor,
            titleSize = _props$attributes6.titleSize,
            titleSpacing = _props$attributes6.titleSpacing,
            titleStyle = _props$attributes6.titleStyle,
            titleUpper = _props$attributes6.titleUpper,
            titleT = _props$attributes6.titleT,
            titleB = _props$attributes6.titleB,
            titleWeight = _props$attributes6.titleWeight,
            faIcon = _props$attributes6.faIcon,
            containerBack = _props$attributes6.containerBack;

        var iconClass = "fa" === iconType ? "fa fa-" + faIcon : "dashicons " + faIcon;
        return React.createElement(
            "div",
            {
                className: className + "__wrap",
                style: {
                    justifyContent: align,
                    flexDirection: flexDir,
                    backgroundColor: containerBack
                }
            },
            iconCheck && React.createElement(
                "div",
                {
                    className: className + "__icon_wrap",
                    style: {
                        marginRight: "row" === flexDir || "row-reverse" === flexDir ? iconSpacing + "px" : "0",
                        marginLeft: "row" === flexDir || "row-reverse" === flexDir ? iconSpacing + "px" : "0",
                        alignSelf: "row-reverse" === flexDir || "row" === flexDir ? "center" : selfAlign
                    }
                },
                "icon" === icon && React.createElement("i", {
                    className: className + "__icon " + iconClass,
                    style: {
                        fontSize: iconSize + "px",
                        color: iconColor
                    }
                }),
                "img" === icon && imageURL && React.createElement("img", {
                    src: imageURL,
                    style: {
                        width: iconSize + "px",
                        height: iconSize + "px"
                    }
                })
            ),
            React.createElement(
                "div",
                {
                    className: className + "__info",
                    style: {
                        alignSelf: "row-reverse" === flexDir || "row" === flexDir ? "center" : selfAlign
                    }
                },
                React.createElement(
                    "div",
                    { className: className + "__desc" },
                    prefix && React.createElement(
                        "p",
                        {
                            style: {
                                fontSize: prefixSize + "px",
                                color: prefixColor,
                                fontWeight: prefixWeight,
                                marginRight: prefixGap + "px"
                            }
                        },
                        prefixTxt
                    ),
                    React.createElement(
                        "p",
                        {
                            className: className + "__increment",
                            "data-interval": time,
                            "data-delay": delay,
                            style: {
                                fontSize: numberSize + "px",
                                color: numberColor,
                                fontWeight: numberWeight
                            }
                        },
                        increment
                    ),
                    suffix && React.createElement(
                        "p",
                        {
                            style: {
                                fontSize: suffixSize + "px",
                                color: suffixColor,
                                fontWeight: suffixWeight,
                                marginLeft: suffixGap + "px"
                            }
                        },
                        suffixTxt
                    )
                ),
                titleCheck && ("row" === flexDir || "row-reverse" === flexDir) && React.createElement(
                    "h3",
                    {
                        className: className + "__title",
                        style: {
                            fontSize: titleSize + "px",
                            marginTop: titleT + "px",
                            marginBottom: titleB + "px",
                            color: titleColor,
                            letterSpacing: titleSpacing + "px",
                            textTransform: titleUpper ? "uppercase" : "none",
                            fontStyle: titleStyle,
                            fontWeight: titleWeight
                        }
                    },
                    titleTxt
                )
            ),
            titleCheck && ("column" === flexDir || "column-reverse" === flexDir) && React.createElement(
                "h3",
                {
                    className: className + "__title",
                    style: {
                        fontSize: titleSize + "px",
                        marginTop: titleT + "px",
                        marginBottom: titleB + "px",
                        color: titleColor,
                        letterSpacing: titleSpacing + "px",
                        fontWeight: titleWeight,
                        textTransform: titleUpper ? "uppercase" : "none",
                        fontStyle: titleStyle,
                        alignSelf: selfAlign
                    }
                },
                titleTxt
            )
        );
    }
}, {
    attributes: attributes,
    save: function save(props) {
        var _props$attributes7 = props.attributes,
            increment = _props$attributes7.increment,
            time = _props$attributes7.time,
            delay = _props$attributes7.delay,
            align = _props$attributes7.align,
            flexDir = _props$attributes7.flexDir,
            numberSize = _props$attributes7.numberSize,
            numberColor = _props$attributes7.numberColor,
            numberWeight = _props$attributes7.numberWeight,
            prefix = _props$attributes7.prefix,
            prefixTxt = _props$attributes7.prefixTxt,
            prefixSize = _props$attributes7.prefixSize,
            prefixColor = _props$attributes7.prefixColor,
            prefixWeight = _props$attributes7.prefixWeight,
            prefixGap = _props$attributes7.prefixGap,
            suffix = _props$attributes7.suffix,
            suffixTxt = _props$attributes7.suffixTxt,
            suffixSize = _props$attributes7.suffixSize,
            suffixColor = _props$attributes7.suffixColor,
            suffixWeight = _props$attributes7.suffixWeight,
            suffixGap = _props$attributes7.suffixGap,
            iconCheck = _props$attributes7.iconCheck,
            icon = _props$attributes7.icon,
            iconSpacing = _props$attributes7.iconSpacing,
            iconType = _props$attributes7.iconType,
            imageURL = _props$attributes7.imageURL,
            iconSize = _props$attributes7.iconSize,
            iconColor = _props$attributes7.iconColor,
            selfAlign = _props$attributes7.selfAlign,
            titleCheck = _props$attributes7.titleCheck,
            titleTxt = _props$attributes7.titleTxt,
            titleColor = _props$attributes7.titleColor,
            titleSize = _props$attributes7.titleSize,
            titleSpacing = _props$attributes7.titleSpacing,
            titleStyle = _props$attributes7.titleStyle,
            titleUpper = _props$attributes7.titleUpper,
            titleT = _props$attributes7.titleT,
            titleB = _props$attributes7.titleB,
            titleWeight = _props$attributes7.titleWeight,
            faIcon = _props$attributes7.faIcon;

        var iconClass = "fa" === iconType ? "fa fa-" + faIcon : "dashicons " + faIcon;
        return React.createElement(
            "div",
            {
                className: className + "__wrap",
                style: {
                    justifyContent: align,
                    flexDirection: flexDir
                }
            },
            iconCheck && React.createElement(
                "div",
                {
                    className: className + "__icon_wrap",
                    style: {
                        marginRight: "row" === flexDir || "row-reverse" === flexDir ? iconSpacing + "px" : "0",
                        marginLeft: "row" === flexDir || "row-reverse" === flexDir ? iconSpacing + "px" : "0",
                        alignSelf: "row-reverse" === flexDir || "row" === flexDir ? "center" : selfAlign
                    }
                },
                "icon" === icon && React.createElement("i", {
                    className: className + "__icon " + iconClass,
                    style: {
                        fontSize: iconSize + "px",
                        color: iconColor
                    }
                }),
                "img" === icon && imageURL && React.createElement("img", {
                    src: imageURL,
                    style: {
                        width: iconSize + "px",
                        height: iconSize + "px"
                    }
                })
            ),
            React.createElement(
                "div",
                {
                    className: className + "__info",
                    style: {
                        alignSelf: "row-reverse" === flexDir || "row" === flexDir ? "center" : selfAlign
                    }
                },
                React.createElement(
                    "div",
                    { className: className + "__desc" },
                    prefix && React.createElement(
                        "p",
                        {
                            style: {
                                fontSize: prefixSize + "px",
                                color: prefixColor,
                                fontWeight: prefixWeight,
                                marginRight: prefixGap + "px"
                            }
                        },
                        prefixTxt
                    ),
                    React.createElement(
                        "p",
                        {
                            className: className + "__increment",
                            "data-interval": time,
                            "data-delay": delay,
                            style: {
                                fontSize: numberSize + "px",
                                color: numberColor,
                                fontWeight: numberWeight
                            }
                        },
                        increment
                    ),
                    suffix && React.createElement(
                        "p",
                        {
                            style: {
                                fontSize: suffixSize + "px",
                                color: suffixColor,
                                fontWeight: suffixWeight,
                                marginLeft: suffixGap + "px"
                            }
                        },
                        suffixTxt
                    )
                ),
                titleCheck && ("row" === flexDir || "row-reverse" === flexDir) && React.createElement(
                    "h3",
                    {
                        className: className + "__title",
                        style: {
                            fontSize: titleSize + "px",
                            marginTop: titleT + "px",
                            marginBottom: titleB + "px",
                            color: titleColor,
                            letterSpacing: titleSpacing + "px",
                            textTransform: titleUpper ? "uppercase" : "none",
                            fontStyle: titleStyle,
                            fontWeight: titleWeight
                        }
                    },
                    titleTxt
                )
            ),
            titleCheck && ("column" === flexDir || "column-reverse" === flexDir) && React.createElement(
                "h3",
                {
                    className: className + "__title",
                    style: {
                        fontSize: titleSize + "px",
                        marginTop: titleT + "px",
                        marginBottom: titleB + "px",
                        color: titleColor,
                        letterSpacing: titleSpacing + "px",
                        fontWeight: titleWeight,
                        textTransform: titleUpper ? "uppercase" : "none",
                        fontStyle: titleStyle,
                        alignSelf: selfAlign
                    }
                },
                titleTxt
            )
        );
    }
}];

exports.default = deprecatedContent;

/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _settings = __webpack_require__(1);

var _icons = __webpack_require__(4);

var _icons2 = _interopRequireDefault(_icons);

var _edit = __webpack_require__(241);

var _edit2 = _interopRequireDefault(_edit);

var _save = __webpack_require__(242);

var _save2 = _interopRequireDefault(_save);

var _deprecated = __webpack_require__(243);

var _deprecated2 = _interopRequireDefault(_deprecated);

var _attributes = __webpack_require__(244);

var _attributes2 = _interopRequireDefault(_attributes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __ = wp.i18n.__;
var registerBlockType = wp.blocks.registerBlockType;


registerBlockType("premium/dheading-block", {
    title: __("Dual Heading"),
    icon: React.createElement(_icons2.default, { icon: "dual-heading" }),
    category: "premium-blocks",
    attributes: _attributes2.default,
    supports: {
        inserter: _settings.dualHeading
    },
    example: {},
    edit: _edit2.default,
    save: _save2.default,
    deprecated: _deprecated2.default
});

/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _classnames = __webpack_require__(0);

var _classnames2 = _interopRequireDefault(_classnames);

var _premiumBorder = __webpack_require__(6);

var _premiumBorder2 = _interopRequireDefault(_premiumBorder);

var _premiumTypo = __webpack_require__(7);

var _premiumTypo2 = _interopRequireDefault(_premiumTypo);

var _premiumResponsiveTabs = __webpack_require__(8);

var _premiumResponsiveTabs2 = _interopRequireDefault(_premiumResponsiveTabs);

var _singleRangeControl = __webpack_require__(3);

var _singleRangeControl2 = _interopRequireDefault(_singleRangeControl);

var _ColorComponent = __webpack_require__(2);

var _ColorComponent2 = _interopRequireDefault(_ColorComponent);

var _PremiumBackgroundControl = __webpack_require__(23);

var _PremiumBackgroundControl2 = _interopRequireDefault(_PremiumBackgroundControl);

var _fontLoader = __webpack_require__(22);

var _fontLoader2 = _interopRequireDefault(_fontLoader);

var _PremiumShadow = __webpack_require__(5);

var _PremiumShadow2 = _interopRequireDefault(_PremiumShadow);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var __ = wp.i18n.__;
var withSelect = wp.data.withSelect;
var _wp$element = wp.element,
    Fragment = _wp$element.Fragment,
    Component = _wp$element.Component;
var _wp$components = wp.components,
    PanelBody = _wp$components.PanelBody,
    SelectControl = _wp$components.SelectControl,
    TextControl = _wp$components.TextControl,
    ToggleControl = _wp$components.ToggleControl;
var _wp$blockEditor = wp.blockEditor,
    BlockControls = _wp$blockEditor.BlockControls,
    InspectorControls = _wp$blockEditor.InspectorControls,
    AlignmentToolbar = _wp$blockEditor.AlignmentToolbar,
    URLInput = _wp$blockEditor.URLInput;

var edit = function (_Component) {
    _inherits(edit, _Component);

    function edit() {
        _classCallCheck(this, edit);

        return _possibleConstructorReturn(this, (edit.__proto__ || Object.getPrototypeOf(edit)).apply(this, arguments));
    }

    _createClass(edit, [{
        key: "componentDidMount",
        value: function componentDidMount() {
            this.props.setAttributes({ block_id: this.props.clientId.substr(0, 6) });
            this.props.setAttributes({ classMigrate: true });
            this.getPreviewSize = this.getPreviewSize.bind(this);
        }
    }, {
        key: "getPreviewSize",
        value: function getPreviewSize(device, desktopSize, tabletSize, mobileSize) {
            if (device === 'Mobile') {
                if (undefined !== mobileSize && '' !== mobileSize) {
                    return mobileSize;
                } else if (undefined !== tabletSize && '' !== tabletSize) {
                    return tabletSize;
                }
            } else if (device === 'Tablet') {
                if (undefined !== tabletSize && '' !== tabletSize) {
                    return tabletSize;
                }
            }
            return desktopSize;
        }
    }, {
        key: "render",
        value: function render() {
            var _props = this.props,
                setAttributes = _props.setAttributes,
                isSelected = _props.isSelected,
                className = _props.className,
                blockId = _props.clientId;
            var _props$attributes = this.props.attributes,
                block_id = _props$attributes.block_id,
                contentAlign = _props$attributes.contentAlign,
                firstHeading = _props$attributes.firstHeading,
                secondHeading = _props$attributes.secondHeading,
                display = _props$attributes.display,
                firstStyles = _props$attributes.firstStyles,
                secondStyles = _props$attributes.secondStyles,
                containerStyles = _props$attributes.containerStyles,
                link = _props$attributes.link,
                target = _props$attributes.target,
                headingURL = _props$attributes.headingURL,
                hideDesktop = _props$attributes.hideDesktop,
                hideTablet = _props$attributes.hideTablet,
                hideMobile = _props$attributes.hideMobile,
                containerBorderTop = _props$attributes.containerBorderTop,
                containerBorderRight = _props$attributes.containerBorderRight,
                containerBorderBottom = _props$attributes.containerBorderBottom,
                containerBorderLeft = _props$attributes.containerBorderLeft,
                firstBorderTop = _props$attributes.firstBorderTop,
                firstBorderRight = _props$attributes.firstBorderRight,
                firstBorderBottom = _props$attributes.firstBorderBottom,
                firstBorderLeft = _props$attributes.firstBorderLeft,
                secondBorderTop = _props$attributes.secondBorderTop,
                secondBorderRight = _props$attributes.secondBorderRight,
                secondBorderBottom = _props$attributes.secondBorderBottom,
                secondBorderLeft = _props$attributes.secondBorderLeft,
                firstBorder = _props$attributes.firstBorder,
                secondBorder = _props$attributes.secondBorder,
                containerBorder = _props$attributes.containerBorder,
                backgroundType = _props$attributes.backgroundType;


            var DISPLAY = [{
                value: "inline",
                label: __("Inline", 'premium-blocks-for-gutenberg')
            }, {
                value: "block",
                label: __("Block", 'premium-blocks-for-gutenberg')
            }];

            var loadFirstGoogleFonts = void 0;
            var loadSecondGoogleFonts = void 0;
            if (firstStyles[0].firstFamily !== 'Default') {
                var firstConfig = {
                    google: {
                        families: [firstStyles[0].firstFamily]
                    }
                };
                loadFirstGoogleFonts = React.createElement(_fontLoader2.default, { config: firstConfig });
            }
            if (secondStyles[0].secondFamily !== 'Default') {
                var secondConfig = {
                    google: {
                        families: [secondStyles[0].secondFamily]
                    }
                };
                loadSecondGoogleFonts = React.createElement(_fontLoader2.default, { config: secondConfig });
            }

            var saveSecondStyle = function saveSecondStyle(value) {
                var newUpdate = secondStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({
                    secondStyles: newUpdate
                });
            };

            var saveFirstStyle = function saveFirstStyle(value) {
                var newUpdate = firstStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({
                    firstStyles: newUpdate
                });
            };
            var saveContainerStyle = function saveContainerStyle(value) {
                var newUpdate = containerStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({
                    containerStyles: newUpdate
                });
            };

            var firstFontSize = this.getPreviewSize(this.props.deviceType, firstStyles[0].firstSize, firstStyles[0].firstSizeTablet, firstStyles[0].firstSizeMobile);
            var secondFontSize = this.getPreviewSize(this.props.deviceType, secondStyles[0].secondSize, secondStyles[0].secondSizeTablet, secondStyles[0].secondSizeMobile);
            var btnGrad = void 0,
                btnGrad2 = void 0,
                btnbg = void 0;
            if (undefined !== backgroundType && 'gradient' === backgroundType) {
                btnGrad = 'transparent' === containerStyles[0].containerBack || undefined === containerStyles[0].containerBack ? 'rgba(255,255,255,0)' : containerStyles[0].containerBack;
                btnGrad2 = undefined !== containerStyles[0].gradientColorTwo && undefined !== containerStyles[0].gradientColorTwo && '' !== containerStyles[0].gradientColorTwo ? containerStyles[0].gradientColorTwo : '#777';
                if ('radial' === containerStyles[0].gradientType) {
                    btnbg = "radial-gradient(at " + containerStyles[0].gradientPosition + ", " + btnGrad + " " + containerStyles[0].gradientLocationOne + "%, " + btnGrad2 + " " + containerStyles[0].gradientLocationTwo + "%)";
                } else if ('radial' !== containerStyles[0].gradientType) {
                    btnbg = "linear-gradient(" + containerStyles[0].gradientAngle + "deg, " + btnGrad + " " + containerStyles[0].gradientLocationOne + "%, " + btnGrad2 + " " + containerStyles[0].gradientLocationTwo + "%)";
                }
            } else {
                btnbg = containerStyles[0].backgroundImageURL ? "url('" + containerStyles[0].backgroundImageURL + "')" : '';
            }
            return [isSelected && React.createElement(
                BlockControls,
                { key: "controls" },
                React.createElement(AlignmentToolbar, {
                    value: contentAlign,
                    onChange: function onChange(newAlign) {
                        return setAttributes({ contentAlign: newAlign });
                    }
                })
            ), isSelected && React.createElement(
                InspectorControls,
                { key: "inspector" },
                React.createElement(
                    PanelBody,
                    {
                        title: __("General Settings", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(TextControl, {
                        label: __("First Heading", 'premium-blocks-for-gutenberg'),
                        type: "url",
                        value: firstHeading,
                        onChange: function onChange(value) {
                            return setAttributes({ firstHeading: value });
                        }
                    }),
                    React.createElement(TextControl, {
                        label: __("Second Heading", 'premium-blocks-for-gutenberg'),
                        type: "url",
                        value: secondHeading,
                        onChange: function onChange(value) {
                            return setAttributes({ secondHeading: value });
                        }
                    }),
                    React.createElement(SelectControl, {
                        label: __("Display", 'premium-blocks-for-gutenberg'),
                        value: display,
                        options: DISPLAY,
                        onChange: function onChange(value) {
                            return setAttributes({ display: value });
                        }
                    }),
                    React.createElement(ToggleControl, {
                        label: __("Link", 'premium-blocks-for-gutenberg'),
                        checked: link,
                        onChange: function onChange(newValue) {
                            return setAttributes({ link: newValue });
                        }
                    }),
                    link && React.createElement(ToggleControl, {
                        label: __("Open link in new tab", 'premium-blocks-for-gutenberg'),
                        checked: target,
                        onChange: function onChange(newValue) {
                            return setAttributes({ target: newValue });
                        }
                    })
                ),
                React.createElement(
                    PanelBody,
                    {
                        title: __("First Heading Style", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(ToggleControl, {
                        label: __("Clipped", 'premium-blocks-for-gutenberg'),
                        checked: firstStyles[0].firstClip,
                        onChange: function onChange(newValue) {
                            return saveFirstStyle({ firstClip: newValue });
                        }
                    }),
                    firstStyles[0].firstClip && React.createElement(
                        Fragment,
                        null,
                        React.createElement(ToggleControl, {
                            label: __("Animated", 'premium-blocks-for-gutenberg'),
                            checked: firstStyles[0].firstAnim,
                            onChange: function onChange(newValue) {
                                return saveFirstStyle({ firstAnim: newValue });
                            }
                        }),
                        React.createElement(ToggleControl, {
                            label: __("Stroke", 'premium-blocks-for-gutenberg'),
                            checked: firstStyles[0].firstStroke,
                            onChange: function onChange(newValue) {
                                return saveFirstStyle({ firstStroke: newValue });
                            }
                        })
                    ),
                    React.createElement(_premiumTypo2.default, {
                        components: ["responsiveSize", "weight", "style", "upper", "spacing", "family"],
                        setAttributes: saveFirstStyle,
                        fontSizeType: {
                            value: firstStyles[0].firstSizeUnit,
                            label: __("firstSizeUnit", 'premium-blocks-for-gutenberg')
                        },
                        fontSize: firstStyles[0].firstSize,
                        fontSizeMobile: firstStyles[0].firstSizeMobile,
                        fontSizeTablet: firstStyles[0].firstSizeTablet,
                        onChangeSize: function onChangeSize(newSize) {
                            return saveFirstStyle({ firstSize: newSize });
                        },
                        onChangeTabletSize: function onChangeTabletSize(newSize) {
                            return saveFirstStyle({ firstSizeTablet: newSize });
                        },
                        onChangeMobileSize: function onChangeMobileSize(newSize) {
                            return saveFirstStyle({ firstSizeMobile: newSize });
                        },
                        fontFamily: firstStyles[0].firstFamily,
                        weight: firstStyles[0].firstWeight,
                        style: firstStyles[0].firstStyle,
                        spacing: firstStyles[0].firstLetter,
                        upper: firstStyles[0].firstUpper,
                        onChangeWeight: function onChangeWeight(newWeight) {
                            return saveFirstStyle({ firstWeight: newWeight || 500 });
                        },
                        onChangeStyle: function onChangeStyle(newStyle) {
                            return saveFirstStyle({ firstStyle: newStyle });
                        },
                        onChangeSpacing: function onChangeSpacing(newValue) {
                            return saveFirstStyle({ firstLetter: newValue });
                        },
                        onChangeUpper: function onChangeUpper(check) {
                            return saveFirstStyle({ firstUpper: check });
                        },
                        onChangeFamily: function onChangeFamily(fontFamily) {
                            return saveFirstStyle({ firstFamily: fontFamily });
                        }
                    }),
                    !firstStyles[0].firstClip && React.createElement(
                        Fragment,
                        null,
                        React.createElement(_ColorComponent2.default, {
                            label: __("Text Color", 'premium-blocks-for-gutenberg'),
                            colorValue: firstStyles[0].firstColor,
                            colorDefault: '',
                            onColorChange: function onColorChange(newValue) {
                                return saveFirstStyle({ firstColor: newValue });
                            }
                        }),
                        React.createElement(_ColorComponent2.default, {
                            label: __("Background Color", 'premium-blocks-for-gutenberg'),
                            colorValue: firstStyles[0].firstBackground,
                            onColorChange: function onColorChange(value) {
                                return saveFirstStyle({ firstBackground: value });
                            },
                            colorDefault: ''
                        })
                    ),
                    firstStyles[0].firstClip && React.createElement(
                        Fragment,
                        null,
                        React.createElement(_ColorComponent2.default, {
                            label: __("First Color", 'premium-blocks-for-gutenberg'),
                            colorValue: firstStyles[0].firstColor,
                            colorDefault: '',
                            onColorChange: function onColorChange(newValue) {
                                return saveFirstStyle({ firstColor: newValue });
                            }
                        }),
                        React.createElement(_ColorComponent2.default, {
                            label: __("Second Color", 'premium-blocks-for-gutenberg'),
                            colorValue: firstStyles[0].firstClipColor,
                            colorDefault: '',
                            onColorChange: function onColorChange(newValue) {
                                return saveFirstStyle({ firstClipColor: newValue });
                            }
                        })
                    ),
                    React.createElement(_premiumBorder2.default, {
                        borderType: firstStyles[0].firstBorderType,
                        borderWidth: firstStyles[0].firstBorderWidth,
                        top: firstStyles[0].firstBorderTop,
                        right: firstStyles[0].firstBorderRight,
                        bottom: firstStyles[0].firstBorderBottom,
                        left: firstStyles[0].firstBorderLeft,
                        borderColor: firstStyles[0].firstBorderColor,
                        borderRadius: firstStyles[0].firstBorderRadius,
                        onChangeType: function onChangeType(newType) {
                            return saveFirstStyle({ firstBorderType: newType });
                        },
                        onChangeWidth: function onChangeWidth(_ref) {
                            var top = _ref.top,
                                right = _ref.right,
                                bottom = _ref.bottom,
                                left = _ref.left;
                            return setAttributes({
                                firstBorder: true,
                                firstBorderTop: top,
                                firstBorderRight: right,
                                firstBorderBottom: bottom,
                                firstBorderLeft: left
                            });
                        },
                        onChangeColor: function onChangeColor(colorValue) {
                            return saveFirstStyle({ firstBorderColor: colorValue || "transparent" });
                        },
                        onChangeRadius: function onChangeRadius(newrRadius) {
                            return saveFirstStyle({ firstBorderRadius: newrRadius || "0" });
                        }
                    }),
                    React.createElement(_PremiumShadow2.default, {
                        label: __("Text Shadow", "premium-blocks-for-gutenberg"),
                        color: firstStyles[0].firstShadowColor,
                        blur: firstStyles[0].firstShadowBlur,
                        horizontal: firstStyles[0].firstShadowHorizontal,
                        vertical: firstStyles[0].firstShadowVertical,
                        onChangeColor: function onChangeColor(newColor) {
                            return saveFirstStyle({ firstShadowColor: newColor || "transparent" });
                        },
                        onChangeBlur: function onChangeBlur(newBlur) {
                            return saveFirstStyle({ firstShadowBlur: newBlur || "0" });
                        },
                        onChangehHorizontal: function onChangehHorizontal(newValue) {
                            return saveFirstStyle({ firstShadowHorizontal: newValue || "0" });
                        },
                        onChangeVertical: function onChangeVertical(newValue) {
                            return saveFirstStyle({ firstShadowVertical: newValue || "0" });
                        }
                    }),
                    React.createElement(_singleRangeControl2.default, {
                        label: __("Margin Left", 'premium-blocks-for-gutenberg'),
                        value: firstStyles[0].firstMarginL,
                        onChange: function onChange(newMargin) {
                            return saveFirstStyle({ firstMarginL: newMargin });
                        },
                        showUnit: false,
                        defaultValue: 0
                    }),
                    React.createElement(_singleRangeControl2.default, {
                        label: __("Margin Right", 'premium-blocks-for-gutenberg'),
                        value: firstStyles[0].firstMarginR,
                        onChange: function onChange(newMargin) {
                            return saveFirstStyle({ firstMarginR: newMargin });
                        },
                        showUnit: false,
                        defaultValue: 0
                    }),
                    React.createElement(_singleRangeControl2.default, {
                        label: __("Padding", 'premium-blocks-for-gutenberg'),
                        value: firstStyles[0].firstPadding,
                        onChange: function onChange(newPadding) {
                            return saveFirstStyle({ firstPadding: newPadding });
                        },
                        showUnit: false,
                        defaultValue: 0
                    })
                ),
                React.createElement(
                    PanelBody,
                    {
                        title: __("Second Heading Style", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(ToggleControl, {
                        label: __("Clipped", 'premium-blocks-for-gutenberg'),
                        checked: secondStyles[0].secondClip,
                        onChange: function onChange(newValue) {
                            return saveSecondStyle({ secondClip: newValue });
                        }
                    }),
                    secondStyles[0].secondClip && React.createElement(
                        Fragment,
                        null,
                        React.createElement(ToggleControl, {
                            label: __("Animated", 'premium-blocks-for-gutenberg'),
                            checked: secondStyles[0].secondAnim,
                            onChange: function onChange(newValue) {
                                return saveSecondStyle({ secondAnim: newValue });
                            }
                        }),
                        React.createElement(ToggleControl, {
                            label: __('Stroke', 'premium-blocks-for-gutenberg'),
                            checked: secondStyles[0].secondStroke,
                            onChange: function onChange(newValue) {
                                return saveSecondStyle({ secondStroke: newValue });
                            }
                        })
                    ),
                    React.createElement(_premiumTypo2.default, {
                        components: ["responsiveSize", "weight", "style", "upper", "spacing", "family"],
                        setAttributes: saveSecondStyle,
                        fontSizeType: {
                            value: secondStyles[0].secondSizeUnit,
                            label: __("secondSizeUnit", 'premium-blocks-for-gutenberg')
                        },
                        fontSize: secondStyles[0].secondSize,
                        fontSizeMobile: secondStyles[0].secondSizeMobile,
                        fontSizeTablet: secondStyles[0].secondSizeTablet,
                        onChangeSize: function onChangeSize(newSize) {
                            return saveSecondStyle({ secondSize: newSize });
                        },
                        onChangeTabletSize: function onChangeTabletSize(newSize) {
                            return saveSecondStyle({ secondSizeTablet: newSize });
                        },
                        onChangeMobileSize: function onChangeMobileSize(newSize) {
                            return saveSecondStyle({ secondSizeMobile: newSize });
                        },
                        fontFamily: secondStyles[0].secondFamily,
                        weight: secondStyles[0].secondWeight,
                        style: secondStyles[0].secondStyle,
                        spacing: secondStyles[0].secondLetter,
                        upper: secondStyles[0].secondUpper,
                        onChangeWeight: function onChangeWeight(newWeight) {
                            return saveSecondStyle({ secondWeight: newWeight || 500 });
                        },
                        onChangeStyle: function onChangeStyle(newStyle) {
                            return saveSecondStyle({ secondStyle: newStyle });
                        },
                        onChangeSpacing: function onChangeSpacing(newValue) {
                            return saveSecondStyle({ secondLetter: newValue });
                        },
                        onChangeUpper: function onChangeUpper(check) {
                            return saveSecondStyle({ secondUpper: check });
                        },
                        onChangeFamily: function onChangeFamily(fontFamily) {
                            return saveSecondStyle({ secondFamily: fontFamily });
                        }
                    }),
                    !secondStyles[0].secondClip && React.createElement(
                        Fragment,
                        null,
                        React.createElement(_ColorComponent2.default, {
                            label: __("Text Color", 'premium-blocks-for-gutenberg'),
                            colorValue: secondStyles[0].secondColor,
                            colorDefault: '',
                            onColorChange: function onColorChange(newValue) {
                                return saveSecondStyle({ secondColor: newValue || "transparent" });
                            }
                        }),
                        React.createElement(_ColorComponent2.default, {
                            label: __("Background Color", 'premium-blocks-for-gutenberg'),
                            colorValue: secondStyles[0].secondBackground,
                            colorDefault: '',
                            onColorChange: function onColorChange(value) {
                                return saveSecondStyle({ secondBackground: value });
                            }
                        })
                    ),
                    secondStyles[0].secondClip && React.createElement(
                        Fragment,
                        null,
                        React.createElement(_ColorComponent2.default, {
                            label: __("First Color", 'premium-blocks-for-gutenberg'),
                            colorValue: secondStyles[0].secondColor,
                            colorDefault: '',
                            onColorChange: function onColorChange(newValue) {
                                return saveSecondStyle({ secondColor: newValue || "transparent" });
                            }
                        }),
                        React.createElement(_ColorComponent2.default, {
                            label: __("Second Color", 'premium-blocks-for-gutenberg'),
                            colorValue: secondStyles[0].secondClipColor,
                            colorDefault: '',
                            onColorChange: function onColorChange(newValue) {
                                return saveSecondStyle({ secondClipColor: newValue || "transparent" });
                            }
                        })
                    ),
                    React.createElement(_premiumBorder2.default, {
                        borderType: secondStyles[0].secondBorderType,
                        borderWidth: secondStyles[0].secondBorderWidth,
                        top: secondBorderTop,
                        right: secondBorderRight,
                        bottom: secondBorderBottom,
                        left: secondBorderLeft,
                        borderColor: secondStyles[0].secondBorderColor,
                        borderRadius: secondStyles[0].secondBorderRadius,
                        onChangeType: function onChangeType(newType) {
                            return saveSecondStyle({ secondBorderType: newType });
                        },
                        onChangeWidth: function onChangeWidth(_ref2) {
                            var top = _ref2.top,
                                right = _ref2.right,
                                bottom = _ref2.bottom,
                                left = _ref2.left;
                            return setAttributes({
                                secondBorder: true,
                                secondBorderTop: top,
                                secondBorderRight: right,
                                secondBorderBottom: bottom,
                                secondBorderLeft: left
                            });
                        },
                        onChangeColor: function onChangeColor(colorValue) {
                            return saveSecondStyle({ secondBorderColor: colorValue || "transparent" });
                        },
                        onChangeRadius: function onChangeRadius(newrRadius) {
                            return saveSecondStyle({ secondBorderRadius: newrRadius || "0" });
                        }
                    }),
                    React.createElement(_PremiumShadow2.default, {
                        label: __("Text Shadow", 'premium-blocks-for-gutenberg'),
                        color: secondStyles[0].secondShadowColor,
                        blur: secondStyles[0].secondShadowBlur,
                        horizontal: secondStyles[0].secondShadowHorizontal,
                        vertical: secondStyles[0].secondShadowVertical,
                        onChangeColor: function onChangeColor(newColor) {
                            return saveSecondStyle({ secondShadowColor: newColor || "transparent" });
                        },
                        onChangeBlur: function onChangeBlur(newBlur) {
                            return saveSecondStyle({ secondShadowBlur: newBlur || "0" });
                        },
                        onChangehHorizontal: function onChangehHorizontal(newValue) {
                            return saveSecondStyle({ secondShadowHorizontal: newValue || "0" });
                        },
                        onChangeVertical: function onChangeVertical(newValue) {
                            return saveSecondStyle({ secondShadowVertical: newValue || "0" });
                        }
                    }),
                    React.createElement(_singleRangeControl2.default, {
                        label: __("Margin Left", 'premium-blocks-for-gutenberg'),
                        value: secondStyles[0].secondMarginL,
                        onChange: function onChange(newMargin) {
                            return saveSecondStyle({ secondMarginL: newMargin });
                        },
                        showUnit: false,
                        defaultValue: 0
                    }),
                    React.createElement(_singleRangeControl2.default, {
                        label: __("Margin Right", 'premium-blocks-for-gutenberg'),
                        value: secondStyles[0].secondMarginR,
                        onChange: function onChange(newMargin) {
                            return saveSecondStyle({ secondMarginR: newMargin || "0" });
                        },
                        showUnit: false,
                        defaultValue: 0
                    }),
                    React.createElement(_singleRangeControl2.default, {
                        label: __("Padding", 'premium-blocks-for-gutenberg'),
                        value: secondStyles[0].secondPadding,
                        onChange: function onChange(newPadding) {
                            return saveSecondStyle({ secondPadding: newPadding || "0" });
                        },
                        showUnit: false,
                        defaultValue: 0
                    })
                ),
                React.createElement(
                    PanelBody,
                    {
                        title: __("Container Style", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(_PremiumBackgroundControl2.default, {
                        setAttributes: setAttributes,
                        saveContainerStyle: saveContainerStyle,
                        backgroundType: backgroundType,
                        backgroundColor: containerStyles[0].containerBack,
                        backgroundImageID: containerStyles[0].backgroundImageID,
                        backgroundImageURL: containerStyles[0].backgroundImageURL,
                        backgroundPosition: containerStyles[0].backgroundPosition,
                        backgroundRepeat: containerStyles[0].backgroundRepeat,
                        backgroundSize: containerStyles[0].backgroundSize,
                        fixed: containerStyles[0].fixed,
                        gradientLocationOne: containerStyles[0].gradientLocationOne,
                        gradientColorTwo: containerStyles[0].gradientColorTwo,
                        gradientLocationTwo: containerStyles[0].gradientLocationTwo,
                        gradientAngle: containerStyles[0].gradientAngle,
                        gradientPosition: containerStyles[0].gradientPosition,
                        gradientType: containerStyles[0].gradientType
                    }),
                    React.createElement(_premiumBorder2.default, {
                        borderType: containerStyles[0].containerBorderType,
                        borderWidth: containerStyles[0].containerBorderWidth,
                        top: containerBorderTop,
                        right: containerBorderRight,
                        bottom: containerBorderBottom,
                        left: containerBorderLeft,
                        borderColor: containerStyles[0].containerBorderColor,
                        borderRadius: containerStyles[0].containerBorderRadius,
                        onChangeType: function onChangeType(newType) {
                            return saveContainerStyle({ containerBorderType: newType });
                        },
                        onChangeWidth: function onChangeWidth(_ref3) {
                            var top = _ref3.top,
                                right = _ref3.right,
                                bottom = _ref3.bottom,
                                left = _ref3.left;
                            return setAttributes({
                                containerBorder: true,
                                containerBorderTop: top,
                                containerBorderRight: right,
                                containerBorderBottom: bottom,
                                containerBorderLeft: left
                            });
                        },
                        onChangeColor: function onChangeColor(colorValue) {
                            return saveContainerStyle({ containerBorderColor: colorValue });
                        },
                        onChangeRadius: function onChangeRadius(newrRadius) {
                            return saveContainerStyle({ containerBorderRadius: newrRadius });
                        }
                    })
                ),
                React.createElement(_premiumResponsiveTabs2.default, {
                    Desktop: hideDesktop,
                    Tablet: hideTablet,
                    Mobile: hideMobile,
                    onChangeDesktop: function onChangeDesktop(value) {
                        return setAttributes({ hideDesktop: value ? " premium-desktop-hidden" : "" });
                    },
                    onChangeTablet: function onChangeTablet(value) {
                        return setAttributes({ hideTablet: value ? " premium-tablet-hidden" : "" });
                    },
                    onChangeMobile: function onChangeMobile(value) {
                        return setAttributes({ hideMobile: value ? " premium-mobile-hidden" : "" });
                    }
                })
            ), React.createElement(
                "div",
                {
                    id: "premium-dheading-block-" + block_id,
                    className: (0, _classnames2.default)(className, "premium-dheading-block__container", "premium-dheading-" + block_id + " " + hideDesktop + " " + hideTablet + " " + hideMobile),
                    style: {
                        textAlign: contentAlign,
                        background: backgroundType === 'solid' ? containerStyles[0].containerBack : "transparent",
                        backgroundImage: btnbg,
                        backgroundRepeat: containerStyles[0].backgroundRepeat,
                        backgroundPosition: containerStyles[0].backgroundPosition,
                        backgroundSize: containerStyles[0].backgroundSize,
                        backgroundAttachment: containerStyles[0].fixed ? "fixed" : "unset",
                        borderStyle: containerStyles[0].containerBorderType,
                        borderWidth: containerBorder ? containerBorderTop + "px " + containerBorderRight + "px " + containerBorderBottom + "px " + containerBorderLeft + "px" : containerStyles[0].containerBorderWidth + "px",
                        borderRadius: containerStyles[0].containerBorderRadius + "px",
                        borderColor: containerStyles[0].containerBorderColor
                    }
                },
                React.createElement(
                    "div",
                    { className: "premium-dheading-block__wrap" },
                    React.createElement(
                        "h2",
                        { className: "premium-dheading-block__title" },
                        React.createElement(
                            "span",
                            {
                                className: "premium-dheading-block__first premium-headingc-" + firstStyles[0].firstClip + " premium-headinga-" + firstStyles[0].firstAnim + " premium-headings-" + firstStyles[0].firstStroke,
                                style: {
                                    fontSize: "" + firstFontSize + firstStyles[0].firstSizeUnit,
                                    display: display,
                                    color: firstStyles[0].firstColor,
                                    backgroundColor: firstStyles[0].firstClip ? "none" : firstStyles[0].firstBackground,
                                    backgroundImage: firstStyles[0].firstClip ? "linear-gradient(to left, " + firstStyles[0].firstColor + ", " + firstStyles[0].firstClipColor + ")" : "none",
                                    fontFamily: firstStyles[0].firstFamily,
                                    letterSpacing: firstStyles[0].firstLetter + "px",
                                    textTransform: firstStyles[0].firstUpper ? "uppercase" : "none",
                                    fontStyle: firstStyles[0].firstStyle,
                                    fontWeight: firstStyles[0].firstWeight,
                                    borderStyle: firstStyles[0].firstBorderType,
                                    borderWidth: firstBorder ? firstBorderTop + "px " + firstBorderRight + "px " + firstBorderBottom + "px " + firstBorderLeft + "px" : firstStyles[0].firstBorderWidth + "px",
                                    borderRadius: firstStyles[0].firstBorderRadius + "px",
                                    borderColor: firstStyles[0].firstBorderColor,
                                    padding: firstStyles[0].firstPadding + "px",
                                    marginLeft: firstStyles[0].firstMarginL + "px",
                                    marginRight: firstStyles[0].firstMarginR + "px",
                                    textShadow: firstStyles[0].firstShadowHorizontal + "px " + firstStyles[0].firstShadowVertical + "px " + firstStyles[0].firstShadowBlur + "px " + firstStyles[0].firstShadowColor
                                }
                            },
                            firstHeading
                        ),
                        React.createElement(
                            "span",
                            {
                                className: "premium-dheading-block__second premium-headingc-" + secondStyles[0].secondClip + " premium-headinga-" + secondStyles[0].secondAnim + " premium-headings-" + secondStyles[0].secondStroke,
                                style: {
                                    fontSize: "" + secondFontSize + secondStyles[0].secondSizeUnit,
                                    display: display,
                                    color: secondStyles[0].secondColor,
                                    backgroundColor: secondStyles[0].secondClip ? "none" : secondStyles[0].secondBackground,
                                    backgroundImage: secondStyles[0].secondClip ? "linear-gradient(to left, " + secondStyles[0].secondColor + ", " + secondStyles[0].secondClipColor + ")" : "none",
                                    fontFamily: secondStyles[0].secondFamily,
                                    letterSpacing: secondStyles[0].secondLetter + "px",
                                    textTransform: secondStyles[0].secondUpper ? "uppercase" : "none",
                                    fontStyle: secondStyles[0].secondStyle,
                                    fontWeight: secondStyles[0].secondWeight,
                                    borderStyle: secondStyles[0].secondBorderType,
                                    borderWidth: secondBorder ? secondBorderTop + "px " + secondBorderRight + "px " + secondBorderBottom + "px " + secondBorderLeft + "px" : secondStyles[0].secondBorderWidth + "px",
                                    borderRadius: secondStyles[0].secondBorderRadius + "px",
                                    borderColor: secondStyles[0].secondBorderColor,
                                    padding: secondStyles[0].secondPadding + "px",
                                    marginLeft: secondStyles[0].secondMarginL + "px",
                                    marginRight: secondStyles[0].secondMarginR + "px",
                                    textShadow: secondStyles[0].secondShadowHorizontal + "px " + secondStyles[0].secondShadowVertical + "px " + secondStyles[0].secondShadowBlur + "px " + secondStyles[0].secondShadowColor
                                }
                            },
                            secondHeading
                        )
                    )
                ),
                link && isSelected && React.createElement(URLInput, {
                    value: headingURL,
                    onChange: function onChange(newUrl) {
                        return setAttributes({ headingURL: newUrl });
                    }
                }),
                loadFirstGoogleFonts,
                loadSecondGoogleFonts
            )];
        }
    }]);

    return edit;
}(Component);

;
exports.default = withSelect(function (select, props) {
    var _select = select('core/edit-post'),
        _select$__experimenta = _select.__experimentalGetPreviewDeviceType,
        __experimentalGetPreviewDeviceType = _select$__experimenta === undefined ? null : _select$__experimenta;

    var deviceType = __experimentalGetPreviewDeviceType ? __experimentalGetPreviewDeviceType() : null;

    return {
        deviceType: deviceType
    };
})(edit);

/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classnames = __webpack_require__(0);

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var save = function save(props) {
    var className = props.className;
    var _props$attributes = props.attributes,
        block_id = _props$attributes.block_id,
        contentAlign = _props$attributes.contentAlign,
        firstHeading = _props$attributes.firstHeading,
        secondHeading = _props$attributes.secondHeading,
        display = _props$attributes.display,
        firstStyles = _props$attributes.firstStyles,
        secondStyles = _props$attributes.secondStyles,
        containerStyles = _props$attributes.containerStyles,
        link = _props$attributes.link,
        target = _props$attributes.target,
        headingURL = _props$attributes.headingURL,
        hideDesktop = _props$attributes.hideDesktop,
        hideTablet = _props$attributes.hideTablet,
        hideMobile = _props$attributes.hideMobile,
        containerBorderTop = _props$attributes.containerBorderTop,
        containerBorderRight = _props$attributes.containerBorderRight,
        containerBorderBottom = _props$attributes.containerBorderBottom,
        containerBorderLeft = _props$attributes.containerBorderLeft,
        firstBorderTop = _props$attributes.firstBorderTop,
        firstBorderRight = _props$attributes.firstBorderRight,
        firstBorderBottom = _props$attributes.firstBorderBottom,
        firstBorderLeft = _props$attributes.firstBorderLeft,
        secondBorderTop = _props$attributes.secondBorderTop,
        secondBorderRight = _props$attributes.secondBorderRight,
        secondBorderBottom = _props$attributes.secondBorderBottom,
        secondBorderLeft = _props$attributes.secondBorderLeft,
        firstBorder = _props$attributes.firstBorder,
        secondBorder = _props$attributes.secondBorder,
        containerBorder = _props$attributes.containerBorder,
        backgroundType = _props$attributes.backgroundType;


    var mainClasses = (0, _classnames2.default)(className, "premium-dheading-block__container");
    var btnGrad = void 0,
        btnGrad2 = void 0,
        btnbg = void 0;
    if (undefined !== backgroundType && 'gradient' === backgroundType) {
        btnGrad = 'transparent' === containerStyles[0].containerBack || undefined === containerStyles[0].containerBack ? 'rgba(255,255,255,0)' : containerStyles[0].containerBack;
        btnGrad2 = undefined !== containerStyles[0].gradientColorTwo && undefined !== containerStyles[0].gradientColorTwo && '' !== containerStyles[0].gradientColorTwo ? containerStyles[0].gradientColorTwo : '#777';
        if ('radial' === containerStyles[0].gradientType) {
            btnbg = "radial-gradient(at " + containerStyles[0].gradientPosition + ", " + btnGrad + " " + containerStyles[0].gradientLocationOne + "%, " + btnGrad2 + " " + containerStyles[0].gradientLocationTwo + "%)";
        } else if ('radial' !== containerStyles[0].gradientType) {
            btnbg = "linear-gradient(" + containerStyles[0].gradientAngle + "deg, " + btnGrad + " " + containerStyles[0].gradientLocationOne + "%, " + btnGrad2 + " " + containerStyles[0].gradientLocationTwo + "%)";
        }
    } else {
        btnbg = containerStyles[0].backgroundImageURL ? "url('" + containerStyles[0].backgroundImageURL + "')" : '';
    }

    return React.createElement(
        "div",
        {
            id: "premium-dheading-block-" + block_id,
            className: (0, _classnames2.default)(className, "premium-dheading-block__container", "premium-dheading-" + block_id + " " + hideDesktop + " " + hideTablet + " " + hideMobile),
            style: {
                textAlign: contentAlign,
                backgroundColor: backgroundType === "solid" ? containerStyles[0].containerBack : "transparent",
                backgroundImage: btnbg,
                backgroundRepeat: containerStyles[0].backgroundRepeat,
                backgroundPosition: containerStyles[0].backgroundPosition,
                backgroundSize: containerStyles[0].backgroundSize,
                backgroundAttachment: containerStyles[0].fixed ? "fixed" : "unset",
                borderStyle: containerStyles[0].containerBorderType,
                borderWidth: containerBorder ? containerBorderTop + "px " + containerBorderRight + "px " + containerBorderBottom + "px " + containerBorderLeft + "px" : containerStyles[0].containerBorderWidth + "px",
                borderRadius: containerStyles[0].containerBorderRadius + "px",
                borderColor: containerStyles[0].containerBorderColor
            }
        },
        React.createElement(
            "div",
            { className: "premium-dheading-block__wrap" },
            React.createElement(
                "h2",
                { className: "premium-dheading-block__title" },
                React.createElement(
                    "span",
                    {
                        className: "premium-dheading-block__first premium-headingc-" + firstStyles[0].firstClip + " premium-headinga-" + firstStyles[0].firstAnim + " premium-headings-" + firstStyles[0].firstStroke,
                        style: {
                            display: display,
                            color: firstStyles[0].firstColor,
                            backgroundColor: firstStyles[0].firstClip ? "none" : firstStyles[0].firstBackground,
                            backgroundImage: firstStyles[0].firstClip ? "linear-gradient(to left, " + firstStyles[0].firstColor + ", " + firstStyles[0].firstClipColor + ")" : "none",
                            fontFamily: firstStyles[0].firstFamily,
                            letterSpacing: firstStyles[0].firstLetter + "px",
                            textTransform: firstStyles[0].firstUpper ? "uppercase" : "none",
                            fontStyle: firstStyles[0].firstStyle,
                            fontWeight: firstStyles[0].firstWeight,
                            borderStyle: firstStyles[0].firstBorderType,
                            borderWidth: firstBorder ? firstBorderTop + "px " + firstBorderRight + "px " + firstBorderBottom + "px " + firstBorderLeft + "px" : firstStyles[0].firstBorderWidth + "px",
                            borderRadius: firstStyles[0].firstBorderRadius + "px",
                            borderColor: firstStyles[0].firstBorderColor,
                            padding: firstStyles[0].firstPadding + "px",
                            marginLeft: firstStyles[0].firstMarginL + "px",
                            marginRight: firstStyles[0].firstMarginR + "px",
                            textShadow: firstStyles[0].firstShadowHorizontal + "px " + firstStyles[0].firstShadowVertical + "px " + firstStyles[0].firstShadowBlur + "px " + firstStyles[0].firstShadowColor
                        }
                    },
                    firstHeading
                ),
                React.createElement(
                    "span",
                    {
                        className: "premium-dheading-block__second premium-headingc-" + secondStyles[0].secondClip + " premium-headinga-" + secondStyles[0].secondAnim + " premium-headings-" + secondStyles[0].secondStroke,
                        style: {
                            display: display,
                            color: secondStyles[0].secondColor,
                            backgroundColor: secondStyles[0].secondClip ? "none" : secondStyles[0].secondBackground,
                            backgroundImage: secondStyles[0].secondClip ? "linear-gradient(to left, " + secondStyles[0].secondColor + ", " + secondStyles[0].secondClipColor + ")" : "none",
                            fontFamily: secondStyles[0].secondFamily,
                            letterSpacing: secondStyles[0].secondLetter + "px",
                            textTransform: secondStyles[0].secondUpper ? "uppercase" : "none",
                            fontStyle: secondStyles[0].secondStyle,
                            fontWeight: secondStyles[0].secondWeight,
                            borderStyle: secondStyles[0].secondBorderType,
                            borderWidth: secondBorder ? secondBorderTop + "px " + secondBorderRight + "px " + secondBorderBottom + "px " + secondBorderLeft + "px" : secondStyles[0].secondBorderWidth + "px",
                            borderRadius: secondStyles[0].secondBorderRadius + "px",
                            borderColor: secondStyles[0].secondBorderColor,
                            padding: secondStyles[0].secondPadding + "px",
                            marginLeft: secondStyles[0].secondMarginL + "px",
                            marginRight: secondStyles[0].secondMarginR + "px",
                            textShadow: secondStyles[0].secondShadowHorizontal + "px " + secondStyles[0].secondShadowVertical + "px " + secondStyles[0].secondShadowBlur + "px " + secondStyles[0].secondShadowColor
                        }
                    },
                    secondHeading
                )
            ),
            link && headingURL && React.createElement("a", {
                className: "premium-dheading-block__link",
                href: link && headingURL,
                target: target && "_blank",
                rel: "noopener noreferrer"
            })
        )
    );
};

exports.default = save;

/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classnames = __webpack_require__(0);

var _classnames2 = _interopRequireDefault(_classnames);

var _hexToRgba = __webpack_require__(17);

var _hexToRgba2 = _interopRequireDefault(_hexToRgba);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __ = wp.i18n.__;

var className = "premium-dheading-block";


var attributes = {
    block_id: {
        type: "string"
    },
    contentAlign: {
        type: "string",
        default: "center"
    },
    firstHeading: {
        type: "array",
        source: "children",
        default: "Premium ",
        selector: ".premium-dheading-block__first"
    },
    secondHeading: {
        type: "array",
        source: "children",
        default: "Blocks",
        selector: ".premium-dheading-block__second"
    },
    titleTag: {
        type: "string",
        default: "h1"
    },
    display: {
        type: "string",
        default: "inline"
    },
    firstColor: {
        type: "string",
        default: "#6ec1e4"
    },
    firstSize: {
        type: "number",
        default: "20"
    },
    firstSizeUnit: {
        type: "string",
        default: 'px'
    },
    firstSizeTablet: {
        type: "number"
    },
    firstSizeMobile: {
        type: "number"
    },
    firstFamily: {
        type: "string"
    },
    firstLetter: {
        type: "number"
    },
    firstStyle: {
        type: "string"
    },
    firstUpper: {
        type: "boolean"
    },
    firstWeight: {
        type: "number",
        default: 500
    },
    firstBackground: {
        type: "string"
    },
    firstOpacity: {
        type: "number",
        default: "1"
    },
    firstBorderType: {
        type: "string",
        default: "none"
    },
    firstBorderWidth: {
        type: "number",
        default: "1"
    },
    firstBorder: {
        type: "boolean",
        default: false
    },
    firstBorderTop: {
        type: "number"
    },
    firstBorderRight: {
        type: "number"
    },
    firstBorderBottom: {
        type: "number"
    },
    firstBorderLeft: {
        type: "number"
    },
    firstBorderRadius: {
        type: "number",
        default: "0"
    },
    firstBorderColor: {
        type: "string"
    },
    firstMarginR: {
        type: "number",
        default: "0"
    },
    firstMarginL: {
        type: "number",
        default: "0"
    },
    firstPadding: {
        type: "number",
        default: "0"
    },
    firstClip: {
        type: "boolean",
        default: false
    },
    firstAnim: {
        type: "boolean",
        default: false
    },
    firstStroke: {
        type: "boolean",
        default: false
    },
    firstClipColor: {
        type: "string",
        default: "#54595f"
    },
    firstShadowColor: {
        type: "string"
    },
    firstShadowBlur: {
        type: "number",
        default: "0"
    },
    firstShadowHorizontal: {
        type: "number",
        default: "0"
    },
    firstShadowVertical: {
        type: "number",
        default: "0"
    },
    secondColor: {
        type: "string",
        default: "#54595f"
    },
    secondSize: {
        type: "number",
        default: "20"
    },
    secondSizeUnit: {
        type: "string",
        default: 'px'
    },
    secondSizeTablet: {
        type: "number"
    },
    secondSizeMobile: {
        type: "number"
    },
    secondFamily: {
        type: "string"
    },
    secondLetter: {
        type: "number"
    },
    secondStyle: {
        type: "string"
    },
    secondUpper: {
        type: "boolean"
    },
    secondWeight: {
        type: "number",
        default: 500
    },
    secondBackground: {
        type: "string"
    },
    secondOpacity: {
        type: "number",
        default: "1"
    },
    secondBorderType: {
        type: "string",
        default: "none"
    },
    secondBorderWidth: {
        type: "number",
        default: "1"
    },
    secondBorder: {
        type: "boolean",
        default: false
    },
    secondBorderTop: {
        type: "number"
    },
    secondBorderRight: {
        type: "number"
    },
    secondBorderBottom: {
        type: "number"
    },
    secondBorderLeft: {
        type: "number"
    },
    secondBorderRadius: {
        type: "number",
        default: "0"
    },
    secondBorderColor: {
        type: "string"
    },
    secondMarginR: {
        type: "number",
        default: "0"
    },
    secondMarginL: {
        type: "number",
        default: "0"
    },
    secondPadding: {
        type: "number",
        default: "0"
    },
    secondClip: {
        type: "boolean",
        default: false
    },
    secondStroke: {
        type: "boolean",
        default: false
    },
    secondShadowColor: {
        type: "string"
    },
    secondShadowBlur: {
        type: "number",
        default: "0"
    },
    secondShadowHorizontal: {
        type: "number",
        default: "0"
    },
    secondShadowVertical: {
        type: "number",
        default: "0"
    },
    secondAnim: {
        type: "boolean",
        default: false
    },
    secondClipColor: {
        type: "string",
        default: "#6ec1e4"
    },
    link: {
        type: "boolean",
        default: false
    },
    target: {
        type: "boolean",
        default: false
    },
    headingURL: {
        type: "string"
    },
    containerBack: {
        type: "string"
    },
    containerOpacity: {
        type: "number",
        default: "1"
    },
    imageID: {
        type: "string"
    },
    imageURL: {
        type: "string"
    },
    backgroundRepeat: {
        type: "string",
        default: "no-repeat"
    },
    backgroundPosition: {
        type: "string",
        default: "top center"
    },
    backgroundSize: {
        type: "string",
        default: "auto"
    },
    fixed: {
        type: "boolean",
        default: false
    },
    containerBorderType: {
        type: "string",
        default: "none"
    },
    containerBorderWidth: {
        type: "number",
        default: "1"
    },
    containerBorder: {
        type: "boolean",
        default: false
    },
    containerBorderTop: {
        type: "number"
    },
    containerBorderRight: {
        type: "number"
    },
    containerBorderBottom: {
        type: "number"
    },
    containerBorderLeft: {
        type: "number"
    },
    containerBorderRadius: {
        type: "number",
        default: "0"
    },
    containerBorderColor: {
        type: "string"
    },
    hideDesktop: {
        type: 'boolean',
        default: false
    },
    hideTablet: {
        type: 'boolean',
        default: false
    },
    hideMobile: {
        type: 'boolean',
        default: false
    }
};
var new_attributes = {
    firstStyles: {
        type: "array",
        default: [{
            firstClip: false,
            firstAnim: false,
            firstStroke: false,
            firstFamily: __('Default', 'premium-blocks-for-gutenebrg'),
            firstSizeUnit: 'px',
            firstSize: '',
            firstSizeMobile: '',
            firstWeight: '',
            firstStyle: '',
            firstLetter: '',
            firstUpper: false,
            firstColor: '',
            firstBackground: '',
            firstOpacity: '1',
            firstClipColor: "#54595f",
            firstBorderType: 'none',
            firstBorderWidth: '',
            firstBorderColor: '',
            firstBorderRadius: 0,
            firstShadowColor: '',
            firstShadowBlur: 0,
            firstShadowHorizontal: 0,
            firstShadowVertical: 0,
            firstMarginL: 0,
            firstMarginR: 0,
            firstPadding: 0
        }]
    },
    secondStyles: {
        type: "array",
        default: [{
            secondClip: false,
            secondAnim: false,
            secondStroke: false,
            secondFamily: __('Default', 'premium-blocks-for-gutenberg'),
            secondSizeUnit: 'px',
            secondSize: '20',
            secondSizeTablet: '',
            secondSizeMobile: '',
            secondWeight: '',
            secondStyle: '',
            secondLetter: '',
            secondUpper: false,
            secondColor: "#54595f",
            secondBackground: '',
            secondOpacity: '',
            secondClipColor: "#6ec1e4",
            secondBorderType: "none",
            secondBorderWidth: '1',
            secondBorderColor: '',
            secondBorderRadius: '0',
            secondShadowColor: '',
            secondShadowBlur: '0',
            secondShadowHorizontal: '0',
            secondShadowVertical: '0',
            secondMarginL: '0',
            secondMarginR: '0',
            secondPadding: '0'

        }]
    },
    containerStyles: {
        type: 'array',
        default: [{
            backgroundImageID: '',
            backgroundImageURL: '',
            backgroundRepeat: 'no-reapet',
            backgroundPosition: 'top center',
            backgroundSize: 'auto',
            fixed: false,
            containerBorderType: "none",
            containerBorderWidth: "1",
            containerBorderColor: '',
            containerBorderRadius: '0',
            containerBack: '',
            containerOpacity: 1,
            gradientLocationOne: '0',
            gradientColorTwo: '',
            gradientLocationTwo: '100',
            gradientType: 'linear',
            gradientAngle: '180',
            gradientPosition: 'center center'
        }]
    },
    backgroundType: {
        type: "string",
        default: ""
    }
};
var deprecated_attributes = Object.assign(attributes, new_attributes);
var deprecatedContent = [{
    attributes: deprecated_attributes,
    migrate: function migrate(attributes) {
        var newAttributes = {
            firstStyles: [{
                firstClip: attributes.firstClip,
                firstAnim: attributes.firstAnim,
                firstStroke: attributes.firstStroke,
                firstFamily: attributes.firstFamily,
                firstSizeUnit: attributes.firstSizeUnit,
                firstSize: attributes.firstSize,
                firstSizeMobile: attributes.firstSizeMobile,
                firstWeight: attributes.firstWeight,
                firstStyle: attributes.firstStyle,
                firstLetter: attributes.firstLetter,
                firstUpper: attributes.firstUpper,
                firstColor: attributes.firstColor,
                firstBackground: attributes.firstBackground,
                firstOpacity: attributes.firstOpacity,
                firstClipColor: attributes.firstClipColor,
                firstBorderType: attributes.firstBorderType,
                firstBorderWidth: attributes.firstBorderWidth,
                firstBorderColor: attributes.firstBorderColor,
                firstBorderRadius: attributes.firstBorderRadius,
                firstShadowColor: attributes.firstShadowColor,
                firstShadowBlur: attributes.firstShadowBlur,
                firstShadowHorizontal: attributes.firstShadowHorizontal,
                firstShadowVertical: attributes.firstShadowVertical,
                firstMarginL: attributes.firstMarginL,
                firstMarginR: attributes.firstMarginR,
                firstPadding: attributes.firstPadding
            }],
            secondStyles: [{
                secondClip: attributes.secondClip,
                secondAnim: attributes.secondAnim,
                secondStroke: attributes.secondStroke,
                secondFamily: attributes.secondFamily,
                secondSizeUnit: attributes.secondSizeUnit,
                secondSize: attributes.secondSize,
                secondSizeTablet: attributes.secondSizeTablet,
                secondSizeMobile: attributes.secondSizeMobile,
                secondWeight: attributes.secondWeight,
                secondStyle: attributes.secondStyle,
                secondLetter: attributes.secondLetter,
                secondUpper: attributes.secondUpper,
                secondColor: attributes.secondColor,
                secondBackground: attributes.secondBackground,
                secondOpacity: attributes.secondOpacity,
                secondClipColor: attributes.secondClipColor,
                secondBorderType: attributes.secondBorderType,
                secondBorderWidth: attributes.secondBorderWidth,
                secondBorderColor: attributes.secondBorderColor,
                secondBorderRadius: attributes.secondBorderRadius,
                secondShadowColor: attributes.secondShadowColor,
                secondShadowBlur: attributes.secondShadowBlur,
                secondShadowHorizontal: attributes.secondShadowHorizontal,
                secondShadowVertical: attributes.secondShadowVertical,
                secondMarginL: attributes.secondMarginL,
                secondMarginR: attributes.secondMarginR,
                secondPadding: attributes.secondPadding

            }],
            containerStyles: [{
                backgroundImageID: attributes.imageID,
                backgroundImageURL: attributes.imageURL,
                backgroundRepeat: attributes.backgroundRepeat,
                backgroundPosition: attributes.backgroundPosition,
                backgroundSize: attributes.backgroundSize,
                fixed: attributes.fixed,
                containerBorderType: attributes.containerBorderType,
                containerBorderWidth: attributes.containerBorderWidth,
                containerBorderColor: attributes.containerBorderColor,
                containerBorderRadius: attributes.containerBorderRadius,
                containerBack: attributes.containerBack,
                containerOpacity: attributes.containerOpacity,
                gradientLocationOne: '0',
                gradientColorTwo: '',
                gradientLocationTwo: '100',
                gradientType: 'linear',
                gradientAngle: '180',
                gradientPosition: 'center center'
            }],
            backgroundType: ''
        };
        return Object.assign(attributes, newAttributes);
    },
    save: function save(props) {
        var className = props.className;
        var _props$attributes = props.attributes,
            block_id = _props$attributes.block_id,
            contentAlign = _props$attributes.contentAlign,
            firstHeading = _props$attributes.firstHeading,
            secondHeading = _props$attributes.secondHeading,
            display = _props$attributes.display,
            firstColor = _props$attributes.firstColor,
            firstBackground = _props$attributes.firstBackground,
            firstFamily = _props$attributes.firstFamily,
            firstStyle = _props$attributes.firstStyle,
            firstUpper = _props$attributes.firstUpper,
            firstLetter = _props$attributes.firstLetter,
            firstWeight = _props$attributes.firstWeight,
            firstBorderType = _props$attributes.firstBorderType,
            firstBorderWidth = _props$attributes.firstBorderWidth,
            firstBorderTop = _props$attributes.firstBorderTop,
            firstBorderRight = _props$attributes.firstBorderRight,
            firstBorderBottom = _props$attributes.firstBorderBottom,
            firstBorderLeft = _props$attributes.firstBorderLeft,
            firstBorderRadius = _props$attributes.firstBorderRadius,
            firstBorderColor = _props$attributes.firstBorderColor,
            firstPadding = _props$attributes.firstPadding,
            firstMargin = _props$attributes.firstMargin,
            firstClip = _props$attributes.firstClip,
            firstAnim = _props$attributes.firstAnim,
            firstStroke = _props$attributes.firstStroke,
            firstClipColor = _props$attributes.firstClipColor,
            firstShadowBlur = _props$attributes.firstShadowBlur,
            firstShadowColor = _props$attributes.firstShadowColor,
            firstShadowHorizontal = _props$attributes.firstShadowHorizontal,
            firstShadowVertical = _props$attributes.firstShadowVertical,
            secondColor = _props$attributes.secondColor,
            secondBackground = _props$attributes.secondBackground,
            secondFamily = _props$attributes.secondFamily,
            secondLetter = _props$attributes.secondLetter,
            secondUpper = _props$attributes.secondUpper,
            secondWeight = _props$attributes.secondWeight,
            secondStyle = _props$attributes.secondStyle,
            secondBorderType = _props$attributes.secondBorderType,
            secondBorderWidth = _props$attributes.secondBorderWidth,
            secondBorderTop = _props$attributes.secondBorderTop,
            secondBorderRight = _props$attributes.secondBorderRight,
            secondBorderBottom = _props$attributes.secondBorderBottom,
            secondBorderLeft = _props$attributes.secondBorderLeft,
            secondBorderRadius = _props$attributes.secondBorderRadius,
            secondBorderColor = _props$attributes.secondBorderColor,
            secondPadding = _props$attributes.secondPadding,
            secondMargin = _props$attributes.secondMargin,
            secondClip = _props$attributes.secondClip,
            secondStroke = _props$attributes.secondStroke,
            secondAnim = _props$attributes.secondAnim,
            secondClipColor = _props$attributes.secondClipColor,
            secondShadowBlur = _props$attributes.secondShadowBlur,
            secondShadowColor = _props$attributes.secondShadowColor,
            secondShadowHorizontal = _props$attributes.secondShadowHorizontal,
            secondShadowVertical = _props$attributes.secondShadowVertical,
            link = _props$attributes.link,
            target = _props$attributes.target,
            headingURL = _props$attributes.headingURL,
            containerBack = _props$attributes.containerBack,
            imageURL = _props$attributes.imageURL,
            fixed = _props$attributes.fixed,
            backgroundRepeat = _props$attributes.backgroundRepeat,
            backgroundPosition = _props$attributes.backgroundPosition,
            backgroundSize = _props$attributes.backgroundSize,
            containerBorderType = _props$attributes.containerBorderType,
            containerBorderWidth = _props$attributes.containerBorderWidth,
            containerBorderTop = _props$attributes.containerBorderTop,
            containerBorderRight = _props$attributes.containerBorderRight,
            containerBorderBottom = _props$attributes.containerBorderBottom,
            containerBorderLeft = _props$attributes.containerBorderLeft,
            containerBorderRadius = _props$attributes.containerBorderRadius,
            containerBorderColor = _props$attributes.containerBorderColor,
            firstBorder = _props$attributes.firstBorder,
            secondBorder = _props$attributes.secondBorder,
            containerBorder = _props$attributes.containerBorder,
            firstOpacity = _props$attributes.firstOpacity,
            secondOpacity = _props$attributes.secondOpacity,
            containerOpacity = _props$attributes.containerOpacity,
            hideDesktop = _props$attributes.hideDesktop,
            hideTablet = _props$attributes.hideTablet,
            hideMobile = _props$attributes.hideMobile;


        var mainClasses = (0, _classnames2.default)(className, "premium-dheading-block__container");

        return React.createElement(
            "div",
            {
                id: "premium-dheading-block-" + block_id,
                className: mainClasses + " premium-dheading-" + block_id + " " + hideDesktop + " " + hideTablet + " " + hideMobile,
                style: {
                    textAlign: contentAlign,
                    backgroundColor: containerBack ? (0, _hexToRgba2.default)(containerBack, containerOpacity) : "transparent",
                    backgroundImage: "url('" + imageURL + "')",
                    backgroundRepeat: backgroundRepeat,
                    backgroundPosition: backgroundPosition,
                    backgroundSize: backgroundSize,
                    backgroundAttachment: fixed ? "fixed" : "unset",
                    borderStyle: containerBorderType,
                    borderWidth: containerBorder ? containerBorderTop + "px " + containerBorderRight + "px " + containerBorderBottom + "px " + containerBorderLeft + "px" : containerBorderWidth + "px",
                    borderRadius: containerBorderRadius + "px",
                    borderColor: containerBorderColor
                }
            },
            React.createElement(
                "div",
                { className: "premium-dheading-block__wrap" },
                React.createElement(
                    "h2",
                    { className: "premium-dheading-block__title" },
                    React.createElement(
                        "span",
                        {
                            className: "premium-dheading-block__first premium-headingc-" + firstClip + " premium-headinga-" + firstAnim + " premium-headings-" + firstStroke,
                            style: {
                                display: display,
                                color: firstColor,
                                backgroundColor: firstClip ? "none" : firstBackground ? (0, _hexToRgba2.default)(firstBackground, firstOpacity) : "transparent",
                                backgroundImage: firstClip ? "linear-gradient(to left, " + firstColor + ", " + firstClipColor + ")" : "none",
                                fontFamily: firstFamily,
                                letterSpacing: firstLetter + "px",
                                textTransform: firstUpper ? "uppercase" : "none",
                                fontStyle: firstStyle,
                                fontWeight: firstWeight,
                                borderStyle: firstBorderType,
                                borderWidth: firstBorder ? firstBorderTop + "px " + firstBorderRight + "px " + firstBorderBottom + "px " + firstBorderLeft + "px" : firstBorderWidth + "px",
                                borderRadius: firstBorderRadius + "px",
                                borderColor: firstBorderColor,
                                padding: firstPadding + "px",
                                margin: firstMargin + "px",
                                textShadow: firstShadowHorizontal + "px " + firstShadowVertical + "px " + firstShadowBlur + "px " + firstShadowColor
                            }
                        },
                        firstHeading
                    ),
                    React.createElement(
                        "span",
                        {
                            className: "premium-dheading-block__second premium-headingc-" + secondClip + " premium-headinga-" + secondAnim + " premium-headings-" + secondStroke,
                            style: {
                                display: display,
                                color: secondColor,
                                backgroundColor: secondClip ? "none" : secondBackground ? (0, _hexToRgba2.default)(secondBackground, secondOpacity) : "transparent",
                                backgroundImage: secondClip ? "linear-gradient(to left, " + secondColor + ", " + secondClipColor + ")" : "none",
                                fontFamily: secondFamily,
                                letterSpacing: secondLetter + "px",
                                textTransform: secondUpper ? "uppercase" : "none",
                                fontStyle: secondStyle,
                                fontWeight: secondWeight,
                                borderStyle: secondBorderType,
                                borderWidth: secondBorder ? secondBorderTop + "px " + secondBorderRight + "px " + secondBorderBottom + "px " + secondBorderLeft + "px" : secondBorderWidth + "px",
                                borderRadius: secondBorderRadius + "px",
                                borderColor: secondBorderColor,
                                padding: secondPadding + "px",
                                margin: secondMargin + "px",
                                textShadow: secondShadowHorizontal + "px " + secondShadowVertical + "px " + secondShadowBlur + "px " + secondShadowColor
                            }
                        },
                        secondHeading
                    )
                ),
                link && headingURL && React.createElement("a", {
                    className: "premium-dheading-block__link",
                    href: link && headingURL,
                    target: target && "_blank"
                })
            )
        );
    }
}, {
    attributes: attributes,
    migrate: function migrate(attributes) {
        var newAttributes = {
            firstBorder: attributes.firstBorder,
            secondBorder: attributes.secondBorder,
            containerBorder: attributes.containerBorder,
            containerBorderTop: "",
            containerBorderRight: "",
            containerBorderBottom: "",
            containerBorderLeft: "",
            firstBorderTop: "",
            firstBorderRight: "",
            firstBorderBottom: "",
            firstBorderLeft: "",
            secondBorderTop: "",
            secondBorderRight: "",
            secondBorderBottom: "",
            secondBorderLeft: "",
            classMigrate: false,
            block_id: '',
            secondSizeUnit: 'px',
            secondSizeTablet: '',
            secondSizeMobile: '',
            firstSizeUnit: 'px',
            firstSizeTablet: '',
            firstSizeMobile: '',
            firstOpacity: "",
            secondOpacity: "",
            containerOpacity: "",
            hideDesktop: false,
            hideTablet: false,
            hideMobile: false
        };
        return Object.assign(attributes, newAttributes);
    },
    save: function save(props) {
        var className = props.className;
        var _props$attributes2 = props.attributes,
            contentAlign = _props$attributes2.contentAlign,
            firstHeading = _props$attributes2.firstHeading,
            secondHeading = _props$attributes2.secondHeading,
            display = _props$attributes2.display,
            firstColor = _props$attributes2.firstColor,
            firstBackground = _props$attributes2.firstBackground,
            firstSize = _props$attributes2.firstSize,
            firstFamily = _props$attributes2.firstFamily,
            firstStyle = _props$attributes2.firstStyle,
            firstUpper = _props$attributes2.firstUpper,
            firstLetter = _props$attributes2.firstLetter,
            firstWeight = _props$attributes2.firstWeight,
            firstBorderType = _props$attributes2.firstBorderType,
            firstBorderWidth = _props$attributes2.firstBorderWidth,
            firstBorderRadius = _props$attributes2.firstBorderRadius,
            firstBorderColor = _props$attributes2.firstBorderColor,
            firstPadding = _props$attributes2.firstPadding,
            firstMargin = _props$attributes2.firstMargin,
            firstClip = _props$attributes2.firstClip,
            firstAnim = _props$attributes2.firstAnim,
            firstStroke = _props$attributes2.firstStroke,
            firstClipColor = _props$attributes2.firstClipColor,
            firstShadowBlur = _props$attributes2.firstShadowBlur,
            firstShadowColor = _props$attributes2.firstShadowColor,
            firstShadowHorizontal = _props$attributes2.firstShadowHorizontal,
            firstShadowVertical = _props$attributes2.firstShadowVertical,
            secondColor = _props$attributes2.secondColor,
            secondBackground = _props$attributes2.secondBackground,
            secondSize = _props$attributes2.secondSize,
            secondFamily = _props$attributes2.secondFamily,
            secondLetter = _props$attributes2.secondLetter,
            secondUpper = _props$attributes2.secondUpper,
            secondWeight = _props$attributes2.secondWeight,
            secondStyle = _props$attributes2.secondStyle,
            secondBorderType = _props$attributes2.secondBorderType,
            secondBorderWidth = _props$attributes2.secondBorderWidth,
            secondBorderRadius = _props$attributes2.secondBorderRadius,
            secondBorderColor = _props$attributes2.secondBorderColor,
            secondPadding = _props$attributes2.secondPadding,
            secondMargin = _props$attributes2.secondMargin,
            secondClip = _props$attributes2.secondClip,
            secondStroke = _props$attributes2.secondStroke,
            secondAnim = _props$attributes2.secondAnim,
            secondClipColor = _props$attributes2.secondClipColor,
            secondShadowBlur = _props$attributes2.secondShadowBlur,
            secondShadowColor = _props$attributes2.secondShadowColor,
            secondShadowHorizontal = _props$attributes2.secondShadowHorizontal,
            secondShadowVertical = _props$attributes2.secondShadowVertical,
            link = _props$attributes2.link,
            target = _props$attributes2.target,
            headingURL = _props$attributes2.headingURL,
            containerBack = _props$attributes2.containerBack,
            imageURL = _props$attributes2.imageURL,
            fixed = _props$attributes2.fixed,
            backgroundRepeat = _props$attributes2.backgroundRepeat,
            backgroundPosition = _props$attributes2.backgroundPosition,
            backgroundSize = _props$attributes2.backgroundSize,
            containerBorderType = _props$attributes2.containerBorderType,
            containerBorderWidth = _props$attributes2.containerBorderWidth,
            containerBorderRadius = _props$attributes2.containerBorderRadius,
            containerBorderColor = _props$attributes2.containerBorderColor;


        var mainClasses = (0, _classnames2.default)(className, "premium-dheading-block__container");

        return React.createElement(
            "div",
            {
                className: "" + mainClasses,
                style: {
                    textAlign: contentAlign,
                    backgroundColor: containerBack,
                    backgroundImage: "url('" + imageURL + "')",
                    backgroundRepeat: backgroundRepeat,
                    backgroundPosition: backgroundPosition,
                    backgroundSize: backgroundSize,
                    backgroundAttachment: fixed ? "fixed" : "unset",
                    border: containerBorderType,
                    borderWidth: containerBorderWidth + "px",
                    borderRadius: containerBorderRadius + "px",
                    borderColor: containerBorderColor
                }
            },
            React.createElement(
                "div",
                { className: "premium-dheading-block__wrap" },
                React.createElement(
                    "h2",
                    { className: "premium-dheading-block__title" },
                    React.createElement(
                        "span",
                        {
                            className: "premium-dheading-block__first premium-headingc-" + firstClip + " premium-headinga-" + firstAnim + " premium-headings-" + firstStroke,
                            style: {
                                display: display,
                                color: firstColor,
                                backgroundColor: firstClip ? "none" : firstBackground,
                                backgroundImage: firstClip ? "linear-gradient(to left, " + firstColor + ", " + firstClipColor + ")" : "none",
                                fontSize: firstSize + "px",
                                fontFamily: firstFamily,
                                letterSpacing: firstLetter + "px",
                                textTransform: firstUpper ? "uppercase" : "none",
                                fontStyle: firstStyle,
                                fontWeight: firstWeight,
                                border: firstBorderType,
                                borderWidth: firstBorderWidth + "px",
                                borderRadius: firstBorderRadius + "px",
                                borderColor: firstBorderColor,
                                padding: firstPadding + "px",
                                margin: firstMargin + "px",
                                textShadow: firstShadowHorizontal + "px " + firstShadowVertical + "px " + firstShadowBlur + "px " + firstShadowColor
                            }
                        },
                        firstHeading
                    ),
                    React.createElement(
                        "span",
                        {
                            className: "premium-dheading-block__second premium-headingc-" + secondClip + " premium-headinga-" + secondAnim + " premium-headings-" + secondStroke,
                            style: {
                                display: display,
                                color: secondColor,
                                backgroundColor: secondClip ? "none" : secondBackground,
                                backgroundImage: secondClip ? "linear-gradient(to left, " + secondColor + ", " + secondClipColor + ")" : "none",
                                fontSize: secondSize + "px",
                                fontFamily: secondFamily,
                                letterSpacing: secondLetter + "px",
                                textTransform: secondUpper ? "uppercase" : "none",
                                fontStyle: secondStyle,
                                fontWeight: secondWeight,
                                border: secondBorderType,
                                borderWidth: secondBorderWidth + "px",
                                borderRadius: secondBorderRadius + "px",
                                borderColor: secondBorderColor,
                                padding: secondPadding + "px",
                                margin: secondMargin + "px",
                                textShadow: secondShadowHorizontal + "px " + secondShadowVertical + "px " + secondShadowBlur + "px " + secondShadowColor
                            }
                        },
                        secondHeading
                    )
                ),
                link && headingURL && React.createElement("a", {
                    className: "premium-dheading-block__link",
                    href: link && headingURL,
                    target: target && "_blank"
                })
            )
        );
    }
}, {
    attributes: attributes,
    migrate: function migrate(attributes) {
        var newAttributes = {
            firstStroke: false,
            secondStroke: false
        };
        return Object.assign(attributes, newAttributes);
    },
    save: function save(props) {
        var className = props.className;
        var _props$attributes3 = props.attributes,
            contentAlign = _props$attributes3.contentAlign,
            firstHeading = _props$attributes3.firstHeading,
            secondHeading = _props$attributes3.secondHeading,
            display = _props$attributes3.display,
            firstColor = _props$attributes3.firstColor,
            firstBackground = _props$attributes3.firstBackground,
            firstSize = _props$attributes3.firstSize,
            firstFamily = _props$attributes3.firstFamily,
            firstStyle = _props$attributes3.firstStyle,
            firstUpper = _props$attributes3.firstUpper,
            firstLetter = _props$attributes3.firstLetter,
            firstWeight = _props$attributes3.firstWeight,
            firstBorderType = _props$attributes3.firstBorderType,
            firstBorderWidth = _props$attributes3.firstBorderWidth,
            firstBorderRadius = _props$attributes3.firstBorderRadius,
            firstBorderColor = _props$attributes3.firstBorderColor,
            firstPadding = _props$attributes3.firstPadding,
            firstMargin = _props$attributes3.firstMargin,
            firstClip = _props$attributes3.firstClip,
            firstAnim = _props$attributes3.firstAnim,
            firstClipColor = _props$attributes3.firstClipColor,
            firstShadowBlur = _props$attributes3.firstShadowBlur,
            firstShadowColor = _props$attributes3.firstShadowColor,
            firstShadowHorizontal = _props$attributes3.firstShadowHorizontal,
            firstShadowVertical = _props$attributes3.firstShadowVertical,
            secondColor = _props$attributes3.secondColor,
            secondBackground = _props$attributes3.secondBackground,
            secondSize = _props$attributes3.secondSize,
            secondFamily = _props$attributes3.secondFamily,
            secondLetter = _props$attributes3.secondLetter,
            secondUpper = _props$attributes3.secondUpper,
            secondWeight = _props$attributes3.secondWeight,
            secondStyle = _props$attributes3.secondStyle,
            secondBorderType = _props$attributes3.secondBorderType,
            secondBorderWidth = _props$attributes3.secondBorderWidth,
            secondBorderRadius = _props$attributes3.secondBorderRadius,
            secondBorderColor = _props$attributes3.secondBorderColor,
            secondPadding = _props$attributes3.secondPadding,
            secondMargin = _props$attributes3.secondMargin,
            secondClip = _props$attributes3.secondClip,
            secondAnim = _props$attributes3.secondAnim,
            secondClipColor = _props$attributes3.secondClipColor,
            secondShadowBlur = _props$attributes3.secondShadowBlur,
            secondShadowColor = _props$attributes3.secondShadowColor,
            secondShadowHorizontal = _props$attributes3.secondShadowHorizontal,
            secondShadowVertical = _props$attributes3.secondShadowVertical,
            link = _props$attributes3.link,
            target = _props$attributes3.target,
            headingURL = _props$attributes3.headingURL,
            containerBack = _props$attributes3.containerBack,
            imageURL = _props$attributes3.imageURL,
            fixed = _props$attributes3.fixed,
            backgroundRepeat = _props$attributes3.backgroundRepeat,
            backgroundPosition = _props$attributes3.backgroundPosition,
            backgroundSize = _props$attributes3.backgroundSize,
            containerBorderType = _props$attributes3.containerBorderType,
            containerBorderWidth = _props$attributes3.containerBorderWidth,
            containerBorderRadius = _props$attributes3.containerBorderRadius,
            containerBorderColor = _props$attributes3.containerBorderColor;


        var mainClasses = (0, _classnames2.default)(className, "premium-dheading-block__container");

        return React.createElement(
            "div",
            {
                className: "" + mainClasses,
                style: {
                    textAlign: contentAlign,
                    backgroundColor: containerBack,
                    backgroundImage: "url('" + imageURL + "')",
                    backgroundRepeat: backgroundRepeat,
                    backgroundPosition: backgroundPosition,
                    backgroundSize: backgroundSize,
                    backgroundAttachment: fixed ? "fixed" : "unset",
                    border: containerBorderType,
                    borderWidth: containerBorderWidth + "px",
                    borderRadius: containerBorderRadius + "px",
                    borderColor: containerBorderColor
                }
            },
            React.createElement(
                "div",
                { className: "premium-dheading-block__wrap" },
                React.createElement(
                    "h2",
                    { className: "premium-dheading-block__title" },
                    React.createElement(
                        "span",
                        {
                            className: "premium-dheading-block__first premium-headingc-" + firstClip + " premium-headinga-" + firstAnim,
                            style: {
                                display: display,
                                color: firstColor,
                                backgroundColor: firstClip ? "none" : firstBackground,
                                backgroundImage: firstClip ? "linear-gradient(to left, " + firstColor + ", " + firstClipColor + ")" : "none",
                                fontSize: firstSize + "px",
                                fontFamily: firstFamily,
                                letterSpacing: firstLetter + "px",
                                textTransform: firstUpper ? "uppercase" : "none",
                                fontStyle: firstStyle,
                                fontWeight: firstWeight,
                                border: firstBorderType,
                                borderWidth: firstBorderWidth + "px",
                                borderRadius: firstBorderRadius + "px",
                                borderColor: firstBorderColor,
                                padding: firstPadding + "px",
                                margin: firstMargin + "px",
                                textShadow: firstShadowHorizontal + "px " + firstShadowVertical + "px " + firstShadowBlur + "px " + firstShadowColor
                            }
                        },
                        firstHeading
                    ),
                    React.createElement(
                        "span",
                        {
                            className: "premium-dheading-block__second premium-headingc-" + secondClip + " premium-headinga-" + secondAnim,
                            style: {
                                display: display,
                                color: secondColor,
                                backgroundColor: secondClip ? "none" : secondBackground,
                                backgroundImage: secondClip ? "linear-gradient(to left, " + secondColor + ", " + secondClipColor + ")" : "none",
                                fontSize: secondSize + "px",
                                fontFamily: secondFamily,
                                letterSpacing: secondLetter + "px",
                                textTransform: secondUpper ? "uppercase" : "none",
                                fontStyle: secondStyle,
                                fontWeight: secondWeight,
                                border: secondBorderType,
                                borderWidth: secondBorderWidth + "px",
                                borderRadius: secondBorderRadius + "px",
                                borderColor: secondBorderColor,
                                padding: secondPadding + "px",
                                margin: secondMargin + "px",
                                textShadow: secondShadowHorizontal + "px " + secondShadowVertical + "px " + secondShadowBlur + "px " + secondShadowColor
                            }
                        },
                        secondHeading
                    )
                ),
                link && headingURL && React.createElement("a", {
                    className: "premium-dheading-block__link",
                    href: link && headingURL,
                    target: target && "_blank"
                })
            )
        );
    }
}, {
    attributes: attributes,
    migrate: function migrate(attributes) {
        var newAttributes = {
            containerBorderType: "none",
            containerBorderWidth: "1",
            containerBorderRadius: "0",
            containerBorderColor: ""
        };
        return Object.assign(attributes, newAttributes);
    },
    save: function save(props) {
        var _props$attributes4 = props.attributes,
            contentAlign = _props$attributes4.contentAlign,
            firstHeading = _props$attributes4.firstHeading,
            secondHeading = _props$attributes4.secondHeading,
            display = _props$attributes4.display,
            firstColor = _props$attributes4.firstColor,
            firstBackground = _props$attributes4.firstBackground,
            firstSize = _props$attributes4.firstSize,
            firstFamily = _props$attributes4.firstFamily,
            firstStyle = _props$attributes4.firstStyle,
            firstUpper = _props$attributes4.firstUpper,
            firstLetter = _props$attributes4.firstLetter,
            firstWeight = _props$attributes4.firstWeight,
            firstBorderType = _props$attributes4.firstBorderType,
            firstBorderWidth = _props$attributes4.firstBorderWidth,
            firstBorderRadius = _props$attributes4.firstBorderRadius,
            firstBorderColor = _props$attributes4.firstBorderColor,
            firstPadding = _props$attributes4.firstPadding,
            firstMargin = _props$attributes4.firstMargin,
            firstClip = _props$attributes4.firstClip,
            firstAnim = _props$attributes4.firstAnim,
            firstClipColor = _props$attributes4.firstClipColor,
            firstShadowBlur = _props$attributes4.firstShadowBlur,
            firstShadowColor = _props$attributes4.firstShadowColor,
            firstShadowHorizontal = _props$attributes4.firstShadowHorizontal,
            firstShadowVertical = _props$attributes4.firstShadowVertical,
            secondColor = _props$attributes4.secondColor,
            secondBackground = _props$attributes4.secondBackground,
            secondSize = _props$attributes4.secondSize,
            secondFamily = _props$attributes4.secondFamily,
            secondLetter = _props$attributes4.secondLetter,
            secondUpper = _props$attributes4.secondUpper,
            secondWeight = _props$attributes4.secondWeight,
            secondStyle = _props$attributes4.secondStyle,
            secondBorderType = _props$attributes4.secondBorderType,
            secondBorderWidth = _props$attributes4.secondBorderWidth,
            secondBorderRadius = _props$attributes4.secondBorderRadius,
            secondBorderColor = _props$attributes4.secondBorderColor,
            secondPadding = _props$attributes4.secondPadding,
            secondMargin = _props$attributes4.secondMargin,
            secondClip = _props$attributes4.secondClip,
            secondAnim = _props$attributes4.secondAnim,
            secondClipColor = _props$attributes4.secondClipColor,
            secondShadowBlur = _props$attributes4.secondShadowBlur,
            secondShadowColor = _props$attributes4.secondShadowColor,
            secondShadowHorizontal = _props$attributes4.secondShadowHorizontal,
            secondShadowVertical = _props$attributes4.secondShadowVertical,
            link = _props$attributes4.link,
            target = _props$attributes4.target,
            headingURL = _props$attributes4.headingURL,
            containerBack = _props$attributes4.containerBack,
            imageURL = _props$attributes4.imageURL,
            fixed = _props$attributes4.fixed,
            backgroundRepeat = _props$attributes4.backgroundRepeat,
            backgroundPosition = _props$attributes4.backgroundPosition,
            backgroundSize = _props$attributes4.backgroundSize;


        return React.createElement(
            "div",
            {
                className: className + "__container",
                style: {
                    textAlign: contentAlign,
                    backgroundColor: containerBack,
                    backgroundImage: "url('" + imageURL + "')",
                    backgroundRepeat: backgroundRepeat,
                    backgroundPosition: backgroundPosition,
                    backgroundSize: backgroundSize,
                    backgroundAttachment: fixed ? "fixed" : "unset"
                }
            },
            React.createElement(
                "div",
                { className: className + "__wrap" },
                React.createElement(
                    "h2",
                    { className: className + "__title" },
                    React.createElement(
                        "span",
                        {
                            className: className + "__first premium-headingc-" + firstClip + " premium-headinga-" + firstAnim,
                            style: {
                                display: display,
                                color: firstColor,
                                backgroundColor: firstClip ? "none" : firstBackground,
                                backgroundImage: firstClip ? "linear-gradient(to left, " + firstColor + ", " + firstClipColor + ")" : "none",
                                fontSize: firstSize + "px",
                                fontFamily: firstFamily,
                                letterSpacing: firstLetter + "px",
                                textTransform: firstUpper ? "uppercase" : "none",
                                fontStyle: firstStyle,
                                fontWeight: firstWeight,
                                border: firstBorderType,
                                borderWidth: firstBorderWidth + "px",
                                borderRadius: firstBorderRadius + "px",
                                borderColor: firstBorderColor,
                                padding: firstPadding + "px",
                                margin: firstMargin + "px",
                                textShadow: firstShadowHorizontal + "px " + firstShadowVertical + "px " + firstShadowBlur + "px " + firstShadowColor
                            }
                        },
                        firstHeading
                    ),
                    React.createElement(
                        "span",
                        {
                            className: className + "__second premium-headingc-" + secondClip + " premium-headinga-" + secondAnim,
                            style: {
                                display: display,
                                color: secondColor,
                                backgroundColor: secondClip ? "none" : secondBackground,
                                backgroundImage: secondClip ? "linear-gradient(to left, " + secondColor + ", " + secondClipColor + ")" : "none",
                                fontSize: secondSize + "px",
                                fontFamily: secondFamily,
                                letterSpacing: secondLetter + "px",
                                textTransform: secondUpper ? "uppercase" : "none",
                                fontStyle: secondStyle,
                                fontWeight: secondWeight,
                                border: secondBorderType,
                                borderWidth: secondBorderWidth + "px",
                                borderRadius: secondBorderRadius + "px",
                                borderColor: secondBorderColor,
                                padding: secondPadding + "px",
                                margin: secondMargin + "px",
                                textShadow: secondShadowHorizontal + "px " + secondShadowVertical + "px " + secondShadowBlur + "px " + secondShadowColor
                            }
                        },
                        secondHeading
                    )
                ),
                link && headingURL && React.createElement("a", {
                    className: className + "__link",
                    href: link && headingURL,
                    target: target && "_blank"
                })
            )
        );
    }
}, {
    attributes: attributes,
    migrate: function migrate(attributes) {
        var newAttributes = {
            firstFamily: "",
            secondFamily: ""
        };
        return Object.assign(attributes, newAttributes);
    },
    save: function save(props) {
        var _props$attributes5 = props.attributes,
            contentAlign = _props$attributes5.contentAlign,
            firstHeading = _props$attributes5.firstHeading,
            secondHeading = _props$attributes5.secondHeading,
            display = _props$attributes5.display,
            firstColor = _props$attributes5.firstColor,
            firstBackground = _props$attributes5.firstBackground,
            firstSize = _props$attributes5.firstSize,
            firstStyle = _props$attributes5.firstStyle,
            firstUpper = _props$attributes5.firstUpper,
            firstLetter = _props$attributes5.firstLetter,
            firstWeight = _props$attributes5.firstWeight,
            firstBorderType = _props$attributes5.firstBorderType,
            firstBorderWidth = _props$attributes5.firstBorderWidth,
            firstBorderRadius = _props$attributes5.firstBorderRadius,
            firstBorderColor = _props$attributes5.firstBorderColor,
            firstPadding = _props$attributes5.firstPadding,
            firstMargin = _props$attributes5.firstMargin,
            firstClip = _props$attributes5.firstClip,
            firstAnim = _props$attributes5.firstAnim,
            firstClipColor = _props$attributes5.firstClipColor,
            firstShadowBlur = _props$attributes5.firstShadowBlur,
            firstShadowColor = _props$attributes5.firstShadowColor,
            firstShadowHorizontal = _props$attributes5.firstShadowHorizontal,
            firstShadowVertical = _props$attributes5.firstShadowVertical,
            secondColor = _props$attributes5.secondColor,
            secondBackground = _props$attributes5.secondBackground,
            secondSize = _props$attributes5.secondSize,
            secondLetter = _props$attributes5.secondLetter,
            secondUpper = _props$attributes5.secondUpper,
            secondWeight = _props$attributes5.secondWeight,
            secondStyle = _props$attributes5.secondStyle,
            secondBorderType = _props$attributes5.secondBorderType,
            secondBorderWidth = _props$attributes5.secondBorderWidth,
            secondBorderRadius = _props$attributes5.secondBorderRadius,
            secondBorderColor = _props$attributes5.secondBorderColor,
            secondPadding = _props$attributes5.secondPadding,
            secondMargin = _props$attributes5.secondMargin,
            secondClip = _props$attributes5.secondClip,
            secondAnim = _props$attributes5.secondAnim,
            secondClipColor = _props$attributes5.secondClipColor,
            secondShadowBlur = _props$attributes5.secondShadowBlur,
            secondShadowColor = _props$attributes5.secondShadowColor,
            secondShadowHorizontal = _props$attributes5.secondShadowHorizontal,
            secondShadowVertical = _props$attributes5.secondShadowVertical,
            link = _props$attributes5.link,
            target = _props$attributes5.target,
            headingURL = _props$attributes5.headingURL,
            containerBack = _props$attributes5.containerBack,
            imageURL = _props$attributes5.imageURL,
            fixed = _props$attributes5.fixed,
            backgroundRepeat = _props$attributes5.backgroundRepeat,
            backgroundPosition = _props$attributes5.backgroundPosition,
            backgroundSize = _props$attributes5.backgroundSize;


        return React.createElement(
            "div",
            {
                className: className + "__container",
                style: {
                    textAlign: contentAlign,
                    backgroundColor: containerBack,
                    backgroundImage: "url('" + imageURL + "')",
                    backgroundRepeat: backgroundRepeat,
                    backgroundPosition: backgroundPosition,
                    backgroundSize: backgroundSize,
                    backgroundAttachment: fixed ? "fixed" : "unset"
                }
            },
            React.createElement(
                "div",
                { className: className + "__wrap" },
                React.createElement(
                    "h2",
                    { className: className + "__title" },
                    React.createElement(
                        "span",
                        {
                            className: className + "__first premium-headingc-" + firstClip + " premium-headinga-" + firstAnim,
                            style: {
                                display: display,
                                color: firstColor,
                                backgroundColor: firstClip ? "none" : firstBackground,
                                backgroundImage: firstClip ? "linear-gradient(to left, " + firstColor + ", " + firstClipColor + ")" : "none",
                                fontSize: firstSize + "px",
                                letterSpacing: firstLetter + "px",
                                textTransform: firstUpper ? "uppercase" : "none",
                                fontStyle: firstStyle,
                                fontWeight: firstWeight,
                                border: firstBorderType,
                                borderWidth: firstBorderWidth + "px",
                                borderRadius: firstBorderRadius + "px",
                                borderColor: firstBorderColor,
                                padding: firstPadding + "px",
                                margin: firstMargin + "px",
                                textShadow: firstShadowHorizontal + "px " + firstShadowVertical + "px " + firstShadowBlur + "px " + firstShadowColor
                            }
                        },
                        firstHeading
                    ),
                    React.createElement(
                        "span",
                        {
                            className: className + "__second premium-headingc-" + secondClip + " premium-headinga-" + secondAnim,
                            style: {
                                display: display,
                                color: secondColor,
                                backgroundColor: secondClip ? "none" : secondBackground,
                                backgroundImage: secondClip ? "linear-gradient(to left, " + secondColor + ", " + secondClipColor + ")" : "none",
                                fontSize: secondSize + "px",
                                letterSpacing: secondLetter + "px",
                                textTransform: secondUpper ? "uppercase" : "none",
                                fontStyle: secondStyle,
                                fontWeight: secondWeight,
                                border: secondBorderType,
                                borderWidth: secondBorderWidth + "px",
                                borderRadius: secondBorderRadius + "px",
                                borderColor: secondBorderColor,
                                padding: secondPadding + "px",
                                margin: secondMargin + "px",
                                textShadow: secondShadowHorizontal + "px " + secondShadowVertical + "px " + secondShadowBlur + "px " + secondShadowColor
                            }
                        },
                        secondHeading
                    )
                ),
                link && headingURL && React.createElement("a", {
                    className: className + "__link",
                    href: link && headingURL,
                    target: target && "_blank"
                })
            )
        );
    }
}, {
    attributes: attributes,
    migrate: function migrate(attributes) {
        var newAttributes = {
            imageID: "",
            imageURL: "",
            fixed: false,
            backgroundRepeat: "no-repeat",
            backgroundPosition: "top center",
            backgroundSize: "auto"
        };
        return Object.assign(attributes, newAttributes);
    },
    save: function save(props) {
        var _props$attributes6 = props.attributes,
            contentAlign = _props$attributes6.contentAlign,
            firstHeading = _props$attributes6.firstHeading,
            secondHeading = _props$attributes6.secondHeading,
            display = _props$attributes6.display,
            firstColor = _props$attributes6.firstColor,
            firstBackground = _props$attributes6.firstBackground,
            firstSize = _props$attributes6.firstSize,
            firstStyle = _props$attributes6.firstStyle,
            firstUpper = _props$attributes6.firstUpper,
            firstLetter = _props$attributes6.firstLetter,
            firstWeight = _props$attributes6.firstWeight,
            firstBorderType = _props$attributes6.firstBorderType,
            firstBorderWidth = _props$attributes6.firstBorderWidth,
            firstBorderRadius = _props$attributes6.firstBorderRadius,
            firstBorderColor = _props$attributes6.firstBorderColor,
            firstPadding = _props$attributes6.firstPadding,
            firstMargin = _props$attributes6.firstMargin,
            firstClip = _props$attributes6.firstClip,
            firstAnim = _props$attributes6.firstAnim,
            firstClipColor = _props$attributes6.firstClipColor,
            firstShadowBlur = _props$attributes6.firstShadowBlur,
            firstShadowColor = _props$attributes6.firstShadowColor,
            firstShadowHorizontal = _props$attributes6.firstShadowHorizontal,
            firstShadowVertical = _props$attributes6.firstShadowVertical,
            secondColor = _props$attributes6.secondColor,
            secondBackground = _props$attributes6.secondBackground,
            secondSize = _props$attributes6.secondSize,
            secondLetter = _props$attributes6.secondLetter,
            secondUpper = _props$attributes6.secondUpper,
            secondWeight = _props$attributes6.secondWeight,
            secondStyle = _props$attributes6.secondStyle,
            secondBorderType = _props$attributes6.secondBorderType,
            secondBorderWidth = _props$attributes6.secondBorderWidth,
            secondBorderRadius = _props$attributes6.secondBorderRadius,
            secondBorderColor = _props$attributes6.secondBorderColor,
            secondPadding = _props$attributes6.secondPadding,
            secondMargin = _props$attributes6.secondMargin,
            secondClip = _props$attributes6.secondClip,
            secondAnim = _props$attributes6.secondAnim,
            secondClipColor = _props$attributes6.secondClipColor,
            secondShadowBlur = _props$attributes6.secondShadowBlur,
            secondShadowColor = _props$attributes6.secondShadowColor,
            secondShadowHorizontal = _props$attributes6.secondShadowHorizontal,
            secondShadowVertical = _props$attributes6.secondShadowVertical,
            link = _props$attributes6.link,
            target = _props$attributes6.target,
            headingURL = _props$attributes6.headingURL,
            containerBack = _props$attributes6.containerBack;


        return React.createElement(
            "div",
            {
                className: className + "__container",
                style: {
                    textAlign: contentAlign,
                    backgroundColor: containerBack
                }
            },
            React.createElement(
                "div",
                { className: className + "__wrap" },
                React.createElement(
                    "h2",
                    { className: className + "__title" },
                    React.createElement(
                        "span",
                        {
                            className: className + "__first premium-headingc-" + firstClip + " premium-headinga-" + firstAnim,
                            style: {
                                display: display,
                                color: firstColor,
                                backgroundColor: firstClip ? "none" : firstBackground,
                                backgroundImage: firstClip ? "linear-gradient(to left, " + firstColor + ", " + firstClipColor + ")" : "none",
                                fontSize: firstSize + "px",
                                letterSpacing: firstLetter + "px",
                                textTransform: firstUpper ? "uppercase" : "none",
                                fontStyle: firstStyle,
                                fontWeight: firstWeight,
                                border: firstBorderType,
                                borderWidth: firstBorderWidth + "px",
                                borderRadius: firstBorderRadius + "px",
                                borderColor: firstBorderColor,
                                padding: firstPadding + "px",
                                margin: firstMargin + "px",
                                textShadow: firstShadowHorizontal + "px " + firstShadowVertical + "px " + firstShadowBlur + "px " + firstShadowColor
                            }
                        },
                        firstHeading
                    ),
                    React.createElement(
                        "span",
                        {
                            className: className + "__second premium-headingc-" + secondClip + " premium-headinga-" + secondAnim,
                            style: {
                                display: display,
                                color: secondColor,
                                backgroundColor: secondClip ? "none" : secondBackground,
                                backgroundImage: secondClip ? "linear-gradient(to left, " + secondColor + ", " + secondClipColor + ")" : "none",
                                fontSize: secondSize + "px",
                                letterSpacing: secondLetter + "px",
                                textTransform: secondUpper ? "uppercase" : "none",
                                fontStyle: secondStyle,
                                fontWeight: secondWeight,
                                border: secondBorderType,
                                borderWidth: secondBorderWidth + "px",
                                borderRadius: secondBorderRadius + "px",
                                borderColor: secondBorderColor,
                                padding: secondPadding + "px",
                                margin: secondMargin + "px",
                                textShadow: secondShadowHorizontal + "px " + secondShadowVertical + "px " + secondShadowBlur + "px " + secondShadowColor
                            }
                        },
                        secondHeading
                    )
                ),
                link && headingURL && React.createElement("a", {
                    className: className + "__link",
                    href: link && headingURL,
                    target: target && "_blank"
                })
            )
        );
    }
}, {
    attributes: attributes,
    save: function save(props) {
        {
            var _props$attributes7 = props.attributes,
                contentAlign = _props$attributes7.contentAlign,
                firstHeading = _props$attributes7.firstHeading,
                secondHeading = _props$attributes7.secondHeading,
                display = _props$attributes7.display,
                firstColor = _props$attributes7.firstColor,
                firstBackground = _props$attributes7.firstBackground,
                firstSize = _props$attributes7.firstSize,
                firstStyle = _props$attributes7.firstStyle,
                firstUpper = _props$attributes7.firstUpper,
                firstLetter = _props$attributes7.firstLetter,
                firstWeight = _props$attributes7.firstWeight,
                firstBorderType = _props$attributes7.firstBorderType,
                firstBorderWidth = _props$attributes7.firstBorderWidth,
                firstBorderRadius = _props$attributes7.firstBorderRadius,
                firstBorderColor = _props$attributes7.firstBorderColor,
                firstPadding = _props$attributes7.firstPadding,
                firstMargin = _props$attributes7.firstMargin,
                firstClip = _props$attributes7.firstClip,
                firstAnim = _props$attributes7.firstAnim,
                firstClipColor = _props$attributes7.firstClipColor,
                firstShadowBlur = _props$attributes7.firstShadowBlur,
                firstShadowColor = _props$attributes7.firstShadowColor,
                firstShadowHorizontal = _props$attributes7.firstShadowHorizontal,
                firstShadowVertical = _props$attributes7.firstShadowVertical,
                secondColor = _props$attributes7.secondColor,
                secondBackground = _props$attributes7.secondBackground,
                secondSize = _props$attributes7.secondSize,
                secondLetter = _props$attributes7.secondLetter,
                secondUpper = _props$attributes7.secondUpper,
                secondWeight = _props$attributes7.secondWeight,
                secondStyle = _props$attributes7.secondStyle,
                secondBorderType = _props$attributes7.secondBorderType,
                secondBorderWidth = _props$attributes7.secondBorderWidth,
                secondBorderRadius = _props$attributes7.secondBorderRadius,
                secondBorderColor = _props$attributes7.secondBorderColor,
                secondPadding = _props$attributes7.secondPadding,
                secondMargin = _props$attributes7.secondMargin,
                secondClip = _props$attributes7.secondClip,
                secondAnim = _props$attributes7.secondAnim,
                secondClipColor = _props$attributes7.secondClipColor,
                secondShadowBlur = _props$attributes7.secondShadowBlur,
                secondShadowColor = _props$attributes7.secondShadowColor,
                secondShadowHorizontal = _props$attributes7.secondShadowHorizontal,
                secondShadowVertical = _props$attributes7.secondShadowVertical,
                link = _props$attributes7.link,
                target = _props$attributes7.target,
                headingURL = _props$attributes7.headingURL,
                containerBack = _props$attributes7.containerBack;


            return React.createElement(
                "a",
                {
                    className: className + "__link",
                    href: link && headingURL,
                    target: target && "_blank"
                },
                React.createElement(
                    "div",
                    {
                        className: className + "__container",
                        style: {
                            textAlign: contentAlign,
                            backgroundColor: containerBack
                        }
                    },
                    React.createElement(
                        "h2",
                        { className: className + "__title" },
                        React.createElement(
                            "span",
                            {
                                className: className + "__first premium-headingc-" + firstClip + " premium-headinga-" + firstAnim,
                                style: {
                                    display: display,
                                    color: firstColor,
                                    backgroundColor: firstClip ? "none" : firstBackground,
                                    backgroundImage: firstClip ? "linear-gradient(to left, " + firstColor + ", " + firstClipColor + ")" : "none",
                                    fontSize: firstSize + "px",
                                    letterSpacing: firstLetter + "px",
                                    textTransform: firstUpper ? "uppercase" : "none",
                                    fontStyle: firstStyle,
                                    fontWeight: firstWeight,
                                    border: firstBorderType,
                                    borderWidth: firstBorderWidth + "px",
                                    borderRadius: firstBorderRadius + "px",
                                    borderColor: firstBorderColor,
                                    padding: firstPadding + "px",
                                    margin: firstMargin + "px",
                                    textShadow: firstShadowHorizontal + "px " + firstShadowVertical + "px " + firstShadowBlur + "px " + firstShadowColor
                                }
                            },
                            firstHeading
                        ),
                        React.createElement(
                            "span",
                            {
                                className: className + "__second premium-headingc-" + secondClip + " premium-headinga-" + secondAnim,
                                style: {
                                    display: display,
                                    color: secondColor,
                                    backgroundColor: secondClip ? "none" : secondBackground,
                                    backgroundImage: secondClip ? "linear-gradient(to left, " + secondColor + ", " + secondClipColor + ")" : "none",
                                    fontSize: secondSize + "px",
                                    letterSpacing: secondLetter + "px",
                                    textTransform: secondUpper ? "uppercase" : "none",
                                    fontStyle: secondStyle,
                                    fontWeight: secondWeight,
                                    border: secondBorderType,
                                    borderWidth: secondBorderWidth + "px",
                                    borderRadius: secondBorderRadius + "px",
                                    borderColor: secondBorderColor,
                                    padding: secondPadding + "px",
                                    margin: secondMargin + "px",
                                    textShadow: secondShadowHorizontal + "px " + secondShadowVertical + "px " + secondShadowBlur + "px " + secondShadowColor
                                }
                            },
                            secondHeading
                        )
                    )
                )
            );
        }
    }
}];

exports.default = deprecatedContent;

/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _attributes;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var __ = wp.i18n.__;

var attributes = (_attributes = {
    block_id: {
        type: "string"
    },
    contentAlign: {
        type: "string",
        default: "center"
    },
    firstHeading: {
        type: "array",
        source: "children",
        default: "Premium ",
        selector: ".premium-dheading-block__first"
    },
    secondHeading: {
        type: "array",
        source: "children",
        default: "Blocks",
        selector: ".premium-dheading-block__second"
    },
    titleTag: {
        type: "string",
        default: "h1"
    },
    display: {
        type: "string",
        default: "inline"
    },
    firstStyles: {
        type: "array",
        default: [{
            firstClip: false,
            firstAnim: false,
            firstStroke: false,
            firstFamily: __('Default', 'premium-blocks-for-gutenebrg'),
            firstSizeUnit: 'px',
            firstSize: '',
            firstSizeMobile: '',
            firstWeight: '',
            firstStyle: '',
            firstLetter: '',
            firstUpper: false,
            firstColor: '',
            firstBackground: '',
            firstOpacity: '1',
            firstClipColor: "#54595f",
            firstBorderType: 'none',
            firstBorderWidth: '',
            firstBorderColor: '',
            firstBorderRadius: 0,
            firstShadowColor: '',
            firstShadowBlur: 0,
            firstShadowHorizontal: 0,
            firstShadowVertical: 0,
            firstMarginL: 0,
            firstMarginR: 0,
            firstPadding: 0
        }]
    },
    secondStyles: {
        type: "array",
        default: [{
            secondClip: false,
            secondAnim: false,
            secondStroke: false,
            secondFamily: __('Default', 'premium-blocks-for-gutenberg'),
            secondSizeUnit: 'px',
            secondSize: '20',
            secondSizeTablet: '',
            secondSizeMobile: '',
            secondWeight: '',
            secondStyle: '',
            secondLetter: '',
            secondUpper: false,
            secondColor: "#54595f",
            secondBackground: '',
            secondOpacity: '',
            secondClipColor: "#6ec1e4",
            secondBorderType: "none",
            secondBorderWidth: '1',
            secondBorderColor: '',
            secondBorderRadius: '0',
            secondShadowColor: '',
            secondShadowBlur: '0',
            secondShadowHorizontal: '0',
            secondShadowVertical: '0',
            secondMarginL: '0',
            secondMarginR: '0',
            secondPadding: '0'

        }]
    },
    containerStyles: {
        type: 'array',
        default: [{
            backgroundImageID: '',
            backgroundImageURL: '',
            backgroundRepeat: 'no-reapet',
            backgroundPosition: 'top center',
            backgroundSize: 'auto',
            fixed: false,
            containerBorderType: "none",
            containerBorderWidth: "1",
            containerBorderColor: '',
            containerBorderRadius: '0',
            containerBack: '',
            containerOpacity: 1,
            gradientLocationOne: '0',
            gradientColorTwo: '',
            gradientLocationTwo: '100',
            gradientType: 'linear',
            gradientAngle: '180',
            gradientPosition: 'center center'
        }]
    },
    containerBorder: {
        type: 'boolean',
        default: false
    },
    firstBorder: {
        type: 'boolean',
        default: false
    },
    secondBorder: {
        type: 'boolean',
        default: false
    },
    containerBorderTop: {
        type: 'number'
    },
    containerBorderRight: {
        type: 'number'
    },
    containerBorderBottom: {
        type: 'number'
    },
    containerBorderLeft: {
        type: 'number'
    },
    firstBorderTop: {
        type: 'number'
    },
    firstBorderRight: {
        type: 'number'
    },
    firstBorderBottom: {
        type: 'number'
    },
    firstBorderLeft: {
        type: 'number'
    },
    secondBorderTop: {
        type: 'number'
    },
    secondBorderRight: {
        type: 'number'
    },
    secondBorderBottom: {
        type: 'number'
    },
    secondBorderLeft: {
        type: 'number'
    },
    link: {
        type: "boolean",
        default: false
    },
    target: {
        type: "boolean",
        default: false
    },
    headingURL: {
        type: "string"
    },
    hideDesktop: {
        type: 'boolean',
        default: false
    },
    hideTablet: {
        type: 'boolean',
        default: false
    },
    hideMobile: {
        type: 'boolean',
        default: false
    }
}, _defineProperty(_attributes, "secondBorder", {
    type: 'boolean',
    default: false
}), _defineProperty(_attributes, "backgroundType", {
    type: "string",
    default: ""
}), _attributes);
exports.default = attributes;

/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _settings = __webpack_require__(1);

var _icons = __webpack_require__(4);

var _icons2 = _interopRequireDefault(_icons);

var _edit = __webpack_require__(246);

var _edit2 = _interopRequireDefault(_edit);

var _save = __webpack_require__(260);

var _save2 = _interopRequireDefault(_save);

var _deprecated = __webpack_require__(261);

var _deprecated2 = _interopRequireDefault(_deprecated);

var _attributes = __webpack_require__(262);

var _attributes2 = _interopRequireDefault(_attributes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __ = wp.i18n.__;
var registerBlockType = wp.blocks.registerBlockType;


registerBlockType("premium/icon", {
    title: __("Icon"),
    icon: React.createElement(_icons2.default, { icon: "icon" }),
    category: "premium-blocks",
    attributes: _attributes2.default,
    supports: {
        inserter: _settings.icon
    },
    example: {},
    edit: _edit2.default,
    save: _save2.default,
    deprecated: _deprecated2.default
});

/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _classnames = __webpack_require__(0);

var _classnames2 = _interopRequireDefault(_classnames);

var _settings = __webpack_require__(1);

var _reactFonticonpicker = __webpack_require__(24);

var _reactFonticonpicker2 = _interopRequireDefault(_reactFonticonpicker);

var _premiumIconsList = __webpack_require__(31);

var _premiumIconsList2 = _interopRequireDefault(_premiumIconsList);

var _premiumBorder = __webpack_require__(6);

var _premiumBorder2 = _interopRequireDefault(_premiumBorder);

var _PremiumBackgroundControl = __webpack_require__(23);

var _PremiumBackgroundControl2 = _interopRequireDefault(_PremiumBackgroundControl);

var _premiumResponsiveTabs = __webpack_require__(8);

var _premiumResponsiveTabs2 = _interopRequireDefault(_premiumResponsiveTabs);

var _singleRangeControl = __webpack_require__(3);

var _singleRangeControl2 = _interopRequireDefault(_singleRangeControl);

var _ColorComponent = __webpack_require__(2);

var _ColorComponent2 = _interopRequireDefault(_ColorComponent);

var _radioControl = __webpack_require__(10);

var _radioControl2 = _interopRequireDefault(_radioControl);

var _PremiumShadow = __webpack_require__(5);

var _PremiumShadow2 = _interopRequireDefault(_PremiumShadow);

var _premiumResponsiveSpacing = __webpack_require__(51);

var _premiumResponsiveSpacing2 = _interopRequireDefault(_premiumResponsiveSpacing);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __ = wp.i18n.__;
var _wp$components = wp.components,
    PanelBody = _wp$components.PanelBody,
    SelectControl = _wp$components.SelectControl,
    ToggleControl = _wp$components.ToggleControl;
var useEffect = wp.element.useEffect;
var _wp$blockEditor = wp.blockEditor,
    InspectorControls = _wp$blockEditor.InspectorControls,
    URLInput = _wp$blockEditor.URLInput;
var withSelect = wp.data.withSelect;

function getPreviewSize(device, desktopSize, tabletSize, mobileSize) {
    if (device === 'Mobile') {
        if (undefined !== mobileSize && '' !== mobileSize) {
            return mobileSize;
        } else if (undefined !== tabletSize && '' !== tabletSize) {
            return tabletSize;
        }
    } else if (device === 'Tablet') {
        if (undefined !== tabletSize && '' !== tabletSize) {
            return tabletSize;
        }
    }
    return desktopSize;
}

var edit = function edit(props) {
    var isSelected = props.isSelected,
        setAttributes = props.setAttributes,
        className = props.className;


    useEffect(function () {
        setAttributes({ block_id: props.clientId });
        setAttributes({ classMigrate: true });
    }, []);

    var _props$attributes = props.attributes,
        block_id = _props$attributes.block_id,
        iconType = _props$attributes.iconType,
        selectedIcon = _props$attributes.selectedIcon,
        align = _props$attributes.align,
        hoverEffect = _props$attributes.hoverEffect,
        iconStyles = _props$attributes.iconStyles,
        containerStyles = _props$attributes.containerStyles,
        urlCheck = _props$attributes.urlCheck,
        link = _props$attributes.link,
        target = _props$attributes.target,
        hideDesktop = _props$attributes.hideDesktop,
        hideTablet = _props$attributes.hideTablet,
        hideMobile = _props$attributes.hideMobile,
        backgroundType = _props$attributes.backgroundType,
        iconPadding = _props$attributes.iconPadding,
        iconMargin = _props$attributes.iconMargin,
        wrapPadding = _props$attributes.wrapPadding,
        wrapMargin = _props$attributes.wrapMargin,
        containerBorder = _props$attributes.containerBorder,
        iconBorder = _props$attributes.iconBorder;


    var EFFECTS = [{
        value: "none",
        label: __("None", 'premium-blocks-for-gutenberg')
    }, {
        value: "pulse",
        label: __("Pulse", 'premium-blocks-for-gutenberg')
    }, {
        value: "rotate",
        label: __("Rotate", 'premium-blocks-for-gutenberg')
    }, {
        value: "drotate",
        label: __("3D Rotate", 'premium-blocks-for-gutenberg')
    }, {
        value: "buzz",
        label: __("Buzz", 'premium-blocks-for-gutenberg')
    }, {
        value: "drop",
        label: __("Drop Shadow", 'premium-blocks-for-gutenberg')
    }, {
        value: "wobble",
        label: __("Wobble", 'premium-blocks-for-gutenberg')
    }];

    var saveContainerStyle = function saveContainerStyle(value) {
        var newUpdate = containerStyles.map(function (item, index) {
            if (0 === index) {
                item = _extends({}, item, value);
            }
            return item;
        });
        setAttributes({
            containerStyles: newUpdate
        });
    };

    var saveIconStyle = function saveIconStyle(value) {
        var newUpdate = iconStyles.map(function (item, index) {
            if (0 === index) {
                item = _extends({}, item, value);
            }
            return item;
        });
        setAttributes({
            iconStyles: newUpdate
        });
    };

    var btnGrad = void 0,
        btnGrad2 = void 0,
        btnbg = void 0;
    if (undefined !== backgroundType && 'gradient' === backgroundType) {
        btnGrad = 'transparent' === containerStyles[0].containerBack || undefined === containerStyles[0].containerBack ? 'rgba(255,255,255,0)' : containerStyles[0].containerBack;
        btnGrad2 = undefined !== containerStyles[0].gradientColorTwo && undefined !== containerStyles[0].gradientColorTwo && '' !== containerStyles[0].gradientColorTwo ? containerStyles[0].gradientColorTwo : '#777';
        if ('radial' === containerStyles[0].gradientType) {
            btnbg = "radial-gradient(at " + containerStyles[0].gradientPosition + ", " + btnGrad + " " + containerStyles[0].gradientLocationOne + "%, " + btnGrad2 + " " + containerStyles[0].gradientLocationTwo + "%)";
        } else if ('radial' !== containerStyles[0].gradientType) {
            btnbg = "linear-gradient(" + containerStyles[0].gradientAngle + "deg, " + btnGrad + " " + containerStyles[0].gradientLocationOne + "%, " + btnGrad2 + " " + containerStyles[0].gradientLocationTwo + "%)";
        }
    } else {
        btnbg = containerStyles[0].backgroundImageURL ? "url('" + containerStyles[0].backgroundImageURL + "')" : "";
    }

    var mainClasses = (0, _classnames2.default)(className, "premium-icon");
    var iconPaddingTop = getPreviewSize(props.deviceType, iconPadding.Desktop.top, iconPadding.Tablet.top, iconPadding.Mobile.top);
    var iconPaddingRight = getPreviewSize(props.deviceType, iconPadding.Desktop.right, iconPadding.Tablet.right, iconPadding.Mobile.right);
    var iconPaddingBottom = getPreviewSize(props.deviceType, iconPadding.Desktop.bottom, iconPadding.Tablet.bottom, iconPadding.Mobile.bottom);
    var iconPaddingLeft = getPreviewSize(props.deviceType, iconPadding.Desktop.left, iconPadding.Tablet.left, iconPadding.Mobile.left);
    var iconMarginTop = getPreviewSize(props.deviceType, iconMargin.Desktop.top, iconMargin.Tablet.top, iconMargin.Mobile.top);
    var iconMarginRight = getPreviewSize(props.deviceType, iconMargin.Desktop.right, iconMargin.Tablet.right, iconMargin.Mobile.right);
    var iconMarginBottom = getPreviewSize(props.deviceType, iconMargin.Desktop.bottom, iconMargin.Tablet.bottom, iconMargin.Mobile.bottom);
    var iconMarginLeft = getPreviewSize(props.deviceType, iconMargin.Desktop.left, iconMargin.Tablet.left, iconMargin.Mobile.left);
    var wrapPaddingTop = getPreviewSize(props.deviceType, wrapPadding.Desktop.top, wrapPadding.Tablet.top, wrapPadding.Mobile.top);
    var wrapPaddingRight = getPreviewSize(props.deviceType, wrapPadding.Desktop.right, wrapPadding.Tablet.right, wrapPadding.Mobile.right);
    var wrapPaddingBottom = getPreviewSize(props.deviceType, wrapPadding.Desktop.bottom, wrapPadding.Tablet.bottom, wrapPadding.Mobile.bottom);
    var wrapPaddingLeft = getPreviewSize(props.deviceType, wrapPadding.Desktop.left, wrapPadding.Tablet.left, wrapPadding.Mobile.left);
    var wrapMarginTop = getPreviewSize(props.deviceType, wrapMargin.Desktop.top, wrapMargin.Tablet.top, wrapMargin.Mobile.top);
    var wrapMarginRight = getPreviewSize(props.deviceType, wrapMargin.Desktop.right, wrapMargin.Tablet.right, wrapMargin.Mobile.right);
    var wrapMarginBottom = getPreviewSize(props.deviceType, wrapMargin.Desktop.bottom, wrapMargin.Tablet.bottom, wrapMargin.Mobile.bottom);
    var wrapMarginLeft = getPreviewSize(props.deviceType, wrapMargin.Desktop.left, wrapMargin.Tablet.left, wrapMargin.Mobile.left);

    return [isSelected && React.createElement(
        InspectorControls,
        { key: "inspector" },
        React.createElement(
            PanelBody,
            {
                title: __("Icon", 'premium-blocks-for-gutenberg'),
                className: "premium-panel-body",
                initialOpen: false
            },
            React.createElement(
                "p",
                { className: "premium-editor-paragraph" },
                __("Select Icon", 'premium-blocks-for-gutenberg')
            ),
            React.createElement(_reactFonticonpicker2.default, {
                icons: _premiumIconsList2.default,
                onChange: function onChange(newIcon) {
                    return setAttributes({ selectedIcon: newIcon });
                },
                value: selectedIcon,
                isMulti: false,
                appendTo: "body",
                noSelectedPlaceholder: __("Select Icon", 'premium-blocks-for-gutenberg')
            }),
            React.createElement(SelectControl, {
                label: __("Hover Effect", 'premium-blocks-for-gutenberg'),
                options: EFFECTS,
                value: hoverEffect,
                onChange: function onChange(newEffect) {
                    return setAttributes({ hoverEffect: newEffect });
                }
            }),
            React.createElement(_radioControl2.default, {
                choices: ["left", "center", "right"],
                value: align,
                onChange: function onChange(newValue) {
                    return setAttributes({ align: newValue });
                },
                label: __("Align", 'premium-blocks-for-gutenberg')
            }),
            React.createElement(ToggleControl, {
                label: __("Link", 'premium-blocks-for-gutenberg'),
                checked: urlCheck,
                onChange: function onChange(newValue) {
                    return setAttributes({ urlCheck: newValue });
                }
            }),
            urlCheck && React.createElement(ToggleControl, {
                label: __("Open link in new tab", 'premium-blocks-for-gutenberg'),
                checked: target,
                onChange: function onChange(newValue) {
                    return setAttributes({ target: newValue });
                }
            })
        ),
        React.createElement(
            PanelBody,
            {
                title: __("Icon Style", 'premium-blocks-for-gutenberg'),
                className: "premium-panel-body",
                initialOpen: false
            },
            React.createElement(_singleRangeControl2.default, {
                label: __("Size", 'premium-blocks-for-gutenberg'),
                value: iconStyles[0].iconSize,
                onChange: function onChange(newValue) {
                    return saveIconStyle({ iconSize: newValue });
                },
                units: ['px', 'em', 'rem'],
                defaultValue: 0,
                onChangeUnit: function onChangeUnit(newValue) {
                    return saveIconStyle({ iconSizeUnit: newValue });
                },
                showUnit: true,
                unit: iconStyles[0].iconSizeUnit
            }),
            React.createElement(_ColorComponent2.default, {
                label: __("Icon Color", 'premium-blocks-for-gutenberg'),
                colorValue: iconStyles[0].iconColor,
                colorDefault: '',
                onColorChange: function onColorChange(value) {
                    return saveIconStyle({ iconColor: value });
                }
            }),
            React.createElement(_ColorComponent2.default, {
                label: __("Background Color", 'premium-blocks-for-gutenberg'),
                colorValue: iconStyles[0].iconBack,
                colorDefault: '',
                onColorChange: function onColorChange(value) {
                    return saveIconStyle({ iconBack: value });
                }
            }),
            React.createElement(_premiumBorder2.default, {
                label: __('Border', 'premium-blocks-for-gutenberg'),
                value: iconBorder,
                onChange: function onChange(value) {
                    return setAttributes({ iconBorder: value });
                }
            }),
            React.createElement(_PremiumShadow2.default, {
                label: __("Text Shadow", "premium-blocks-for-gutenberg"),
                color: iconStyles[0].shadowColor,
                blur: iconStyles[0].shadowBlur,
                horizontal: iconStyles[0].shadowHorizontal,
                vertical: iconStyles[0].shadowVertical,
                onChangeColor: function onChangeColor(newColor) {
                    return saveIconStyle({ shadowColor: newColor });
                },
                onChangeBlur: function onChangeBlur(newBlur) {
                    return saveIconStyle({ shadowBlur: newBlur });
                },
                onChangehHorizontal: function onChangehHorizontal(newValue) {
                    return saveIconStyle({ shadowHorizontal: newValue });
                },
                onChangeVertical: function onChangeVertical(newValue) {
                    return saveIconStyle({ shadowVertical: newValue });
                }
            }),
            React.createElement(_premiumResponsiveSpacing2.default, {
                label: __('Margin', 'premium-blocks-for-gutenberg'),
                value: iconMargin,
                onChange: function onChange(value) {
                    return setAttributes({ iconMargin: value });
                },
                showUnits: true,
                responsive: true
            }),
            React.createElement(_premiumResponsiveSpacing2.default, {
                label: __('Padding', 'premium-blocks-for-gutenberg'),
                value: iconPadding,
                onChange: function onChange(value) {
                    return setAttributes({ iconPadding: value });
                },
                showUnits: true,
                responsive: true
            })
        ),
        React.createElement(
            PanelBody,
            {
                title: __("Container Style", 'premium-blocks-for-gutenberg'),
                className: "premium-panel-body",
                initialOpen: false
            },
            React.createElement(_PremiumBackgroundControl2.default, {
                setAttributes: setAttributes,
                saveContainerStyle: saveContainerStyle,
                backgroundType: backgroundType,
                backgroundColor: containerStyles[0].containerBack,
                backgroundImageID: containerStyles[0].backgroundImageID,
                backgroundImageURL: containerStyles[0].backgroundImageURL,
                backgroundPosition: containerStyles[0].backgroundPosition,
                backgroundRepeat: containerStyles[0].backgroundRepeat,
                backgroundSize: containerStyles[0].backgroundSize,
                fixed: containerStyles[0].fixed,
                gradientLocationOne: containerStyles[0].gradientLocationOne,
                gradientColorTwo: containerStyles[0].gradientColorTwo,
                gradientLocationTwo: containerStyles[0].gradientLocationTwo,
                gradientAngle: containerStyles[0].gradientAngle,
                gradientPosition: containerStyles[0].gradientPosition,
                gradientType: containerStyles[0].gradientType
            }),
            React.createElement(_premiumBorder2.default, {
                label: __('Border', 'premium-blocks-for-gutenberg'),
                value: containerBorder,
                onChange: function onChange(value) {
                    return setAttributes({ containerBorder: value });
                }
            }),
            React.createElement(_PremiumShadow2.default, {
                label: __("Box Shadow", 'premium-blocks-for-gutenberg'),
                boxShadow: true,
                color: containerStyles[0].wrapShadowColor,
                blur: containerStyles[0].wrapShadowBlur,
                horizontal: containerStyles[0].wrapShadowHorizontal,
                vertical: containerStyles[0].wrapShadowVertical,
                position: containerStyles[0].wrapShadowPosition,
                onChangeColor: function onChangeColor(newColor) {
                    return saveContainerStyle({ wrapShadowColor: newColor });
                },
                onChangeBlur: function onChangeBlur(newBlur) {
                    return saveContainerStyle({ wrapShadowBlur: newBlur });
                },
                onChangehHorizontal: function onChangehHorizontal(newValue) {
                    return saveContainerStyle({ wrapShadowHorizontal: newValue });
                },
                onChangeVertical: function onChangeVertical(newValue) {
                    return saveContainerStyle({ wrapShadowVertical: newValue });
                },
                onChangePosition: function onChangePosition(newValue) {
                    return saveContainerStyle({ wrapShadowPosition: newValue });
                }
            }),
            React.createElement(_premiumResponsiveSpacing2.default, {
                label: __('Margin', 'premium-blocks-for-gutenberg'),
                value: wrapMargin,
                onChange: function onChange(value) {
                    return setAttributes({ wrapMargin: value });
                },
                showUnits: true,
                responsive: true
            }),
            React.createElement(_premiumResponsiveSpacing2.default, {
                label: __('Padding', 'premium-blocks-for-gutenberg'),
                value: wrapPadding,
                onChange: function onChange(value) {
                    return setAttributes({ wrapPadding: value });
                },
                showUnits: true,
                responsive: true
            })
        ),
        React.createElement(_premiumResponsiveTabs2.default, {
            Desktop: hideDesktop,
            Tablet: hideTablet,
            Mobile: hideMobile,
            onChangeDesktop: function onChangeDesktop(value) {
                return setAttributes({ hideDesktop: value ? " premium-desktop-hidden" : "" });
            },
            onChangeTablet: function onChangeTablet(value) {
                return setAttributes({ hideTablet: value ? " premium-tablet-hidden" : "" });
            },
            onChangeMobile: function onChangeMobile(value) {
                return setAttributes({ hideMobile: value ? " premium-mobile-hidden" : "" });
            }
        })
    ), React.createElement(
        "div",
        {
            className: mainClasses + "__container " + hideDesktop + " " + hideTablet + " " + hideMobile,
            id: "premium-icon-" + block_id
        },
        React.createElement(
            "div",
            {
                className: "premium-icon-container",
                style: {
                    textAlign: align,
                    backgroundColor: backgroundType === "solid" ? containerStyles[0].containerBack : "transparent",
                    backgroundImage: btnbg,
                    backgroundRepeat: containerStyles[0].backgroundRepeat,
                    backgroundPosition: containerStyles[0].backgroundPosition,
                    backgroundSize: containerStyles[0].backgroundSize,
                    backgroundAttachment: containerStyles[0].fixed ? "fixed" : "unset",
                    borderStyle: containerBorder.borderType,
                    borderTopWidth: containerBorder['borderWidth'][props.deviceType]['top'] && containerBorder['borderWidth'][props.deviceType]['top'] + "px",
                    borderRightWidth: containerBorder['borderWidth'][props.deviceType]['right'] && containerBorder['borderWidth'][props.deviceType]['right'] + "px",
                    borderBottomWidth: containerBorder['borderWidth'][props.deviceType]['bottom'] && containerBorder['borderWidth'][props.deviceType]['bottom'] + "px",
                    borderLeftWidth: containerBorder['borderWidth'][props.deviceType]['left'] && containerBorder['borderWidth'][props.deviceType]['left'] + "px",
                    borderBottomLeftRadius: containerBorder['borderRadius'][props.deviceType]['left'] && containerBorder['borderRadius'][props.deviceType]['left'] + "px",
                    borderTopLeftRadius: containerBorder['borderRadius'][props.deviceType]['top'] && containerBorder['borderRadius'][props.deviceType]['top'] + "px",
                    borderTopRightRadius: containerBorder['borderRadius'][props.deviceType]['right'] && containerBorder['borderRadius'][props.deviceType]['right'] + "px",
                    borderBottomRightRadius: containerBorder['borderRadius'][props.deviceType]['bottom'] && containerBorder['borderRadius'][props.deviceType]['bottom'] + "px",
                    borderColor: containerBorder.borderColor,
                    boxShadow: (containerStyles[0].wrapShadowHorizontal || 0) + "px " + (containerStyles[0].wrapShadowVertical || 0) + "px " + (containerStyles[0].wrapShadowBlur || 0) + "px " + containerStyles[0].wrapShadowColor + " " + containerStyles[0].wrapShadowPosition,
                    paddingTop: wrapPaddingTop + wrapPadding.unit,
                    paddingRight: wrapPaddingRight + wrapPadding.unit,
                    paddingBottom: wrapPaddingBottom + wrapPadding.unit,
                    paddingLeft: wrapPaddingLeft + wrapPadding.unit,
                    marginTop: wrapMarginTop + wrapMargin.unit,
                    marginRight: wrapMarginRight + wrapMargin.unit,
                    marginBottom: wrapMarginBottom + wrapMargin.unit,
                    marginLeft: wrapMarginLeft + wrapMargin.unit
                }
            },
            iconType === "fa" && 1 != _settings.FontAwesomeEnabled && React.createElement(
                "p",
                { className: "premium-icon__alert" },
                __("Please Enable Font Awesome Icons from Plugin settings")
            ),
            (iconType === "dash" || 1 == _settings.FontAwesomeEnabled) && React.createElement("i", {
                className: "premium-icon " + selectedIcon + " premium-icon__" + hoverEffect,
                style: {
                    color: iconStyles[0].iconColor || "#6ec1e4",
                    backgroundColor: iconStyles[0].iconBack,
                    fontSize: (iconStyles[0].iconSize || 50) + iconStyles[0].iconSizeUnit,
                    paddingTop: iconPaddingTop + iconPadding.unit,
                    paddingRight: iconPaddingRight + iconPadding.unit,
                    paddingBottom: iconPaddingBottom + iconPadding.unit,
                    paddingLeft: iconPaddingLeft + iconPadding.unit,
                    marginTop: iconMarginTop + iconMargin.unit,
                    marginRight: iconMarginRight + iconMargin.unit,
                    marginBottom: iconMarginBottom + iconMargin.unit,
                    marginLeft: iconMarginLeft + iconMargin.unit,
                    borderStyle: iconBorder.borderType,
                    borderTopWidth: iconBorder['borderWidth'][props.deviceType]['top'] && iconBorder['borderWidth'][props.deviceType]['top'] + "px",
                    borderRightWidth: iconBorder['borderWidth'][props.deviceType]['right'] && iconBorder['borderWidth'][props.deviceType]['right'] + "px",
                    borderBottomWidth: iconBorder['borderWidth'][props.deviceType]['bottom'] && iconBorder['borderWidth'][props.deviceType]['bottom'] + "px",
                    borderLeftWidth: iconBorder['borderWidth'][props.deviceType]['left'] && iconBorder['borderWidth'][props.deviceType]['left'] + "px",
                    borderBottomLeftRadius: iconBorder['borderRadius'][props.deviceType]['left'] && iconBorder['borderRadius'][props.deviceType]['left'] + "px",
                    borderTopLeftRadius: iconBorder['borderRadius'][props.deviceType]['top'] && iconBorder['borderRadius'][props.deviceType]['top'] + "px",
                    borderTopRightRadius: iconBorder['borderRadius'][props.deviceType]['right'] && iconBorder['borderRadius'][props.deviceType]['right'] + "px",
                    borderBottomRightRadius: iconBorder['borderRadius'][props.deviceType]['bottom'] && iconBorder['borderRadius'][props.deviceType]['bottom'] + "px",
                    borderColor: iconBorder.borderColor,
                    textShadow: (iconStyles[0].shadowHorizontal || 0) + "px " + (iconStyles[0].shadowVertical || 0) + "px " + (iconStyles[0].shadowBlur || 0) + "px " + iconStyles[0].shadowColor
                }
            }),
            urlCheck && isSelected && React.createElement(URLInput, {
                value: link,
                onChange: function onChange(newUrl) {
                    return setAttributes({ link: newUrl });
                }
            })
        )
    )];
};

exports.default = withSelect(function (select, props) {
    var _select = select('core/edit-post'),
        _select$__experimenta = _select.__experimentalGetPreviewDeviceType,
        __experimentalGetPreviewDeviceType = _select$__experimenta === undefined ? null : _select$__experimenta;

    var deviceType = __experimentalGetPreviewDeviceType ? __experimentalGetPreviewDeviceType() : null;

    return {
        deviceType: deviceType
    };
})(edit);

/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v16.8.6
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", { value: !0 });
var b = "function" === typeof Symbol && Symbol.for,
    c = b ? Symbol.for("react.element") : 60103,
    d = b ? Symbol.for("react.portal") : 60106,
    e = b ? Symbol.for("react.fragment") : 60107,
    f = b ? Symbol.for("react.strict_mode") : 60108,
    g = b ? Symbol.for("react.profiler") : 60114,
    h = b ? Symbol.for("react.provider") : 60109,
    k = b ? Symbol.for("react.context") : 60110,
    l = b ? Symbol.for("react.async_mode") : 60111,
    m = b ? Symbol.for("react.concurrent_mode") : 60111,
    n = b ? Symbol.for("react.forward_ref") : 60112,
    p = b ? Symbol.for("react.suspense") : 60113,
    q = b ? Symbol.for("react.memo") : 60115,
    r = b ? Symbol.for("react.lazy") : 60116;function t(a) {
  if ("object" === (typeof a === "undefined" ? "undefined" : _typeof(a)) && null !== a) {
    var u = a.$$typeof;switch (u) {case c:
        switch (a = a.type, a) {case l:case m:case e:case g:case f:case p:
            return a;default:
            switch (a = a && a.$$typeof, a) {case k:case n:case h:
                return a;default:
                return u;}}case r:case q:case d:
        return u;}
  }
}function v(a) {
  return t(a) === m;
}exports.typeOf = t;exports.AsyncMode = l;exports.ConcurrentMode = m;exports.ContextConsumer = k;exports.ContextProvider = h;exports.Element = c;exports.ForwardRef = n;
exports.Fragment = e;exports.Lazy = r;exports.Memo = q;exports.Portal = d;exports.Profiler = g;exports.StrictMode = f;exports.Suspense = p;exports.isValidElementType = function (a) {
  return "string" === typeof a || "function" === typeof a || a === e || a === m || a === g || a === f || a === p || "object" === (typeof a === "undefined" ? "undefined" : _typeof(a)) && null !== a && (a.$$typeof === r || a.$$typeof === q || a.$$typeof === h || a.$$typeof === k || a.$$typeof === n);
};exports.isAsyncMode = function (a) {
  return v(a) || t(a) === l;
};exports.isConcurrentMode = v;exports.isContextConsumer = function (a) {
  return t(a) === k;
};
exports.isContextProvider = function (a) {
  return t(a) === h;
};exports.isElement = function (a) {
  return "object" === (typeof a === "undefined" ? "undefined" : _typeof(a)) && null !== a && a.$$typeof === c;
};exports.isForwardRef = function (a) {
  return t(a) === n;
};exports.isFragment = function (a) {
  return t(a) === e;
};exports.isLazy = function (a) {
  return t(a) === r;
};exports.isMemo = function (a) {
  return t(a) === q;
};exports.isPortal = function (a) {
  return t(a) === d;
};exports.isProfiler = function (a) {
  return t(a) === g;
};exports.isStrictMode = function (a) {
  return t(a) === f;
};
exports.isSuspense = function (a) {
  return t(a) === p;
};

/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/** @license React v16.8.6
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

if (process.env.NODE_ENV !== "production") {
  (function () {
    'use strict';

    Object.defineProperty(exports, '__esModule', { value: true });

    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var hasSymbol = typeof Symbol === 'function' && Symbol.for;

    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
    var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;

    function isValidElementType(type) {
      return typeof type === 'string' || typeof type === 'function' ||
      // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
      type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || (typeof type === 'undefined' ? 'undefined' : _typeof(type)) === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE);
    }

    /**
     * Forked from fbjs/warning:
     * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
     *
     * Only change is we use console.warn instead of console.error,
     * and do nothing when 'console' is not supported.
     * This really simplifies the code.
     * ---
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */

    var lowPriorityWarning = function lowPriorityWarning() {};

    {
      var printWarning = function printWarning(format) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        var argIndex = 0;
        var message = 'Warning: ' + format.replace(/%s/g, function () {
          return args[argIndex++];
        });
        if (typeof console !== 'undefined') {
          console.warn(message);
        }
        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          throw new Error(message);
        } catch (x) {}
      };

      lowPriorityWarning = function lowPriorityWarning(condition, format) {
        if (format === undefined) {
          throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');
        }
        if (!condition) {
          for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
            args[_key2 - 2] = arguments[_key2];
          }

          printWarning.apply(undefined, [format].concat(args));
        }
      };
    }

    var lowPriorityWarning$1 = lowPriorityWarning;

    function typeOf(object) {
      if ((typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && object !== null) {
        var $$typeof = object.$$typeof;
        switch ($$typeof) {
          case REACT_ELEMENT_TYPE:
            var type = object.type;

            switch (type) {
              case REACT_ASYNC_MODE_TYPE:
              case REACT_CONCURRENT_MODE_TYPE:
              case REACT_FRAGMENT_TYPE:
              case REACT_PROFILER_TYPE:
              case REACT_STRICT_MODE_TYPE:
              case REACT_SUSPENSE_TYPE:
                return type;
              default:
                var $$typeofType = type && type.$$typeof;

                switch ($$typeofType) {
                  case REACT_CONTEXT_TYPE:
                  case REACT_FORWARD_REF_TYPE:
                  case REACT_PROVIDER_TYPE:
                    return $$typeofType;
                  default:
                    return $$typeof;
                }
            }
          case REACT_LAZY_TYPE:
          case REACT_MEMO_TYPE:
          case REACT_PORTAL_TYPE:
            return $$typeof;
        }
      }

      return undefined;
    }

    // AsyncMode is deprecated along with isAsyncMode
    var AsyncMode = REACT_ASYNC_MODE_TYPE;
    var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
    var ContextConsumer = REACT_CONTEXT_TYPE;
    var ContextProvider = REACT_PROVIDER_TYPE;
    var Element = REACT_ELEMENT_TYPE;
    var ForwardRef = REACT_FORWARD_REF_TYPE;
    var Fragment = REACT_FRAGMENT_TYPE;
    var Lazy = REACT_LAZY_TYPE;
    var Memo = REACT_MEMO_TYPE;
    var Portal = REACT_PORTAL_TYPE;
    var Profiler = REACT_PROFILER_TYPE;
    var StrictMode = REACT_STRICT_MODE_TYPE;
    var Suspense = REACT_SUSPENSE_TYPE;

    var hasWarnedAboutDeprecatedIsAsyncMode = false;

    // AsyncMode should be deprecated
    function isAsyncMode(object) {
      {
        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
          hasWarnedAboutDeprecatedIsAsyncMode = true;
          lowPriorityWarning$1(false, 'The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
        }
      }
      return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
    }
    function isConcurrentMode(object) {
      return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
    }
    function isContextConsumer(object) {
      return typeOf(object) === REACT_CONTEXT_TYPE;
    }
    function isContextProvider(object) {
      return typeOf(object) === REACT_PROVIDER_TYPE;
    }
    function isElement(object) {
      return (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function isForwardRef(object) {
      return typeOf(object) === REACT_FORWARD_REF_TYPE;
    }
    function isFragment(object) {
      return typeOf(object) === REACT_FRAGMENT_TYPE;
    }
    function isLazy(object) {
      return typeOf(object) === REACT_LAZY_TYPE;
    }
    function isMemo(object) {
      return typeOf(object) === REACT_MEMO_TYPE;
    }
    function isPortal(object) {
      return typeOf(object) === REACT_PORTAL_TYPE;
    }
    function isProfiler(object) {
      return typeOf(object) === REACT_PROFILER_TYPE;
    }
    function isStrictMode(object) {
      return typeOf(object) === REACT_STRICT_MODE_TYPE;
    }
    function isSuspense(object) {
      return typeOf(object) === REACT_SUSPENSE_TYPE;
    }

    exports.typeOf = typeOf;
    exports.AsyncMode = AsyncMode;
    exports.ConcurrentMode = ConcurrentMode;
    exports.ContextConsumer = ContextConsumer;
    exports.ContextProvider = ContextProvider;
    exports.Element = Element;
    exports.ForwardRef = ForwardRef;
    exports.Fragment = Fragment;
    exports.Lazy = Lazy;
    exports.Memo = Memo;
    exports.Portal = Portal;
    exports.Profiler = Profiler;
    exports.StrictMode = StrictMode;
    exports.Suspense = Suspense;
    exports.isValidElementType = isValidElementType;
    exports.isAsyncMode = isAsyncMode;
    exports.isConcurrentMode = isConcurrentMode;
    exports.isContextConsumer = isContextConsumer;
    exports.isContextProvider = isContextProvider;
    exports.isElement = isElement;
    exports.isForwardRef = isForwardRef;
    exports.isFragment = isFragment;
    exports.isLazy = isLazy;
    exports.isMemo = isMemo;
    exports.isPortal = isPortal;
    exports.isProfiler = isProfiler;
    exports.isStrictMode = isStrictMode;
    exports.isSuspense = isSuspense;
  })();
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)))

/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var ReactIs = __webpack_require__(106);
var assign = __webpack_require__(250);

var ReactPropTypesSecret = __webpack_require__(67);
var checkPropTypes = __webpack_require__(251);

var has = Function.call.bind(Object.prototype.hasOwnProperty);
var printWarning = function printWarning() {};

if (process.env.NODE_ENV !== 'production') {
  printWarning = function printWarning(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

function emptyFunctionThatReturnsNull() {
  return null;
}

module.exports = function (isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    elementType: createElementTypeTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker,
    exact: createStrictShapeTypeChecker
  };

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /*eslint-disable no-self-compare*/
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */
  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  }
  // Make `instanceof Error` still work for returned errors.
  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if (process.env.NODE_ENV !== 'production') {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
          err.name = 'Invariant Violation';
          throw err;
        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;
          if (!manualPropTypeCallCache[cacheKey] &&
          // Avoid spamming the console because they are often not actionable except for lib authors
          manualPropTypeWarningCount < 3) {
            printWarning('You are manually calling a React.PropTypes validation ' + 'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!ReactIs.isValidElementType(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      if (process.env.NODE_ENV !== 'production') {
        if (arguments.length > 1) {
          printWarning('Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' + 'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).');
        } else {
          printWarning('Invalid argument supplied to oneOf, expected an array.');
        }
      }
      return emptyFunctionThatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
        var type = getPreciseType(value);
        if (type === 'symbol') {
          return String(value);
        }
        return value;
      });
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (has(propValue, key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      process.env.NODE_ENV !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
      return emptyFunctionThatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        printWarning('Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.');
        return emptyFunctionThatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createStrictShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      // We need to check all keys in case some are required but missing from
      // props.
      var allKeys = assign({}, props[propName], shapeTypes);
      for (var key in allKeys) {
        var checker = shapeTypes[key];
        if (!checker) {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue === 'undefined' ? 'undefined' : _typeof(propValue)) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    }

    // falsy value can't be a Symbol
    if (!propValue) {
      return false;
    }

    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue === 'undefined' ? 'undefined' : _typeof(propValue);
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"
  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }

  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes;
  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)))

/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/


/* eslint-disable no-unused-vars */

var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var printWarning = function printWarning() {};

if (process.env.NODE_ENV !== 'production') {
  var ReactPropTypesSecret = __webpack_require__(67);
  var loggedTypeFailures = {};
  var has = Function.call.bind(Object.prototype.hasOwnProperty);

  printWarning = function printWarning(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (process.env.NODE_ENV !== 'production') {
    for (var typeSpecName in typeSpecs) {
      if (has(typeSpecs, typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + _typeof(typeSpecs[typeSpecName]) + '`.');
            err.name = 'Invariant Violation';
            throw err;
          }
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }
        if (error && !(error instanceof Error)) {
          printWarning((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + (typeof error === 'undefined' ? 'undefined' : _typeof(error)) + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');
        }
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
        }
      }
    }
  }
}

/**
 * Resets warning cache when testing.
 *
 * @private
 */
checkPropTypes.resetWarningCache = function () {
  if (process.env.NODE_ENV !== 'production') {
    loggedTypeFailures = {};
  }
};

module.exports = checkPropTypes;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)))

/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactPropTypesSecret = __webpack_require__(67);

function emptyFunction() {}
function emptyFunctionWithReset() {}
emptyFunctionWithReset.resetWarningCache = emptyFunction;

module.exports = function () {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret) {
      // It is still safe when called from React.
      return;
    }
    var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use PropTypes.checkPropTypes() to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
    err.name = 'Invariant Violation';
    throw err;
  };
  shim.isRequired = shim;
  function getShim() {
    return shim;
  };
  // Important!
  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
  var ReactPropTypes = {
    array: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,

    any: shim,
    arrayOf: getShim,
    element: shim,
    elementType: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim,
    exact: getShim,

    checkPropTypes: emptyFunctionWithReset,
    resetWarningCache: emptyFunction
  };

  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

exports.__esModule = true;
exports.default = void 0;

var PropTypes = _interopRequireWildcard(__webpack_require__(18));

var _addClass = _interopRequireDefault(__webpack_require__(254));

var _removeClass = _interopRequireDefault(__webpack_require__(257));

var _react = _interopRequireDefault(__webpack_require__(9));

var _Transition = _interopRequireDefault(__webpack_require__(108));

var _PropTypes = __webpack_require__(110);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};if (desc.get || desc.set) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
    }newObj.default = obj;return newObj;
  }
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }return target;
  };return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);subClass.prototype.constructor = subClass;subClass.__proto__ = superClass;
}

var addClass = function addClass(node, classes) {
  return node && classes && classes.split(' ').forEach(function (c) {
    return (0, _addClass.default)(node, c);
  });
};

var removeClass = function removeClass(node, classes) {
  return node && classes && classes.split(' ').forEach(function (c) {
    return (0, _removeClass.default)(node, c);
  });
};
/**
 * A transition component inspired by the excellent
 * [ng-animate](http://www.nganimate.org/) library, you should use it if you're
 * using CSS transitions or animations. It's built upon the
 * [`Transition`](https://reactcommunity.org/react-transition-group/transition)
 * component, so it inherits all of its props.
 *
 * `CSSTransition` applies a pair of class names during the `appear`, `enter`,
 * and `exit` states of the transition. The first class is applied and then a
 * second `*-active` class in order to activate the CSSS transition. After the
 * transition, matching `*-done` class names are applied to persist the
 * transition state.
 *
 * ```jsx
 * function App() {
 *   const [inProp, setInProp] = useState(false);
 *   return (
 *     <div>
 *       <CSSTransition in={inProp} timeout={200} classNames="my-node">
 *         <div>
 *           {"I'll receive my-node-* classes"}
 *         </div>
 *       </CSSTransition>
 *       <button type="button" onClick={() => setInProp(true)}>
 *         Click to Enter
 *       </button>
 *     </div>
 *   );
 * }
 * ```
 *
 * When the `in` prop is set to `true`, the child component will first receive
 * the class `example-enter`, then the `example-enter-active` will be added in
 * the next tick. `CSSTransition` [forces a
 * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)
 * between before adding the `example-enter-active`. This is an important trick
 * because it allows us to transition between `example-enter` and
 * `example-enter-active` even though they were added immediately one after
 * another. Most notably, this is what makes it possible for us to animate
 * _appearance_.
 *
 * ```css
 * .my-node-enter {
 *   opacity: 0;
 * }
 * .my-node-enter-active {
 *   opacity: 1;
 *   transition: opacity 200ms;
 * }
 * .my-node-exit {
 *   opacity: 1;
 * }
 * .my-node-exit-active {
 *   opacity: 0;
 *   transition: opacity: 200ms;
 * }
 * ```
 *
 * `*-active` classes represent which styles you want to animate **to**.
 */

var CSSTransition =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(CSSTransition, _React$Component);

  function CSSTransition() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

    _this.onEnter = function (node, appearing) {
      var _this$getClassNames = _this.getClassNames(appearing ? 'appear' : 'enter'),
          className = _this$getClassNames.className;

      _this.removeClasses(node, 'exit');

      addClass(node, className);

      if (_this.props.onEnter) {
        _this.props.onEnter(node, appearing);
      }
    };

    _this.onEntering = function (node, appearing) {
      var _this$getClassNames2 = _this.getClassNames(appearing ? 'appear' : 'enter'),
          activeClassName = _this$getClassNames2.activeClassName;

      _this.reflowAndAddClass(node, activeClassName);

      if (_this.props.onEntering) {
        _this.props.onEntering(node, appearing);
      }
    };

    _this.onEntered = function (node, appearing) {
      var appearClassName = _this.getClassNames('appear').doneClassName;

      var enterClassName = _this.getClassNames('enter').doneClassName;

      var doneClassName = appearing ? appearClassName + " " + enterClassName : enterClassName;

      _this.removeClasses(node, appearing ? 'appear' : 'enter');

      addClass(node, doneClassName);

      if (_this.props.onEntered) {
        _this.props.onEntered(node, appearing);
      }
    };

    _this.onExit = function (node) {
      var _this$getClassNames3 = _this.getClassNames('exit'),
          className = _this$getClassNames3.className;

      _this.removeClasses(node, 'appear');

      _this.removeClasses(node, 'enter');

      addClass(node, className);

      if (_this.props.onExit) {
        _this.props.onExit(node);
      }
    };

    _this.onExiting = function (node) {
      var _this$getClassNames4 = _this.getClassNames('exit'),
          activeClassName = _this$getClassNames4.activeClassName;

      _this.reflowAndAddClass(node, activeClassName);

      if (_this.props.onExiting) {
        _this.props.onExiting(node);
      }
    };

    _this.onExited = function (node) {
      var _this$getClassNames5 = _this.getClassNames('exit'),
          doneClassName = _this$getClassNames5.doneClassName;

      _this.removeClasses(node, 'exit');

      addClass(node, doneClassName);

      if (_this.props.onExited) {
        _this.props.onExited(node);
      }
    };

    _this.getClassNames = function (type) {
      var classNames = _this.props.classNames;
      var isStringClassNames = typeof classNames === 'string';
      var prefix = isStringClassNames && classNames ? classNames + '-' : '';
      var className = isStringClassNames ? prefix + type : classNames[type];
      var activeClassName = isStringClassNames ? className + '-active' : classNames[type + 'Active'];
      var doneClassName = isStringClassNames ? className + '-done' : classNames[type + 'Done'];
      return {
        className: className,
        activeClassName: activeClassName,
        doneClassName: doneClassName
      };
    };

    return _this;
  }

  var _proto = CSSTransition.prototype;

  _proto.removeClasses = function removeClasses(node, type) {
    var _this$getClassNames6 = this.getClassNames(type),
        className = _this$getClassNames6.className,
        activeClassName = _this$getClassNames6.activeClassName,
        doneClassName = _this$getClassNames6.doneClassName;

    className && removeClass(node, className);
    activeClassName && removeClass(node, activeClassName);
    doneClassName && removeClass(node, doneClassName);
  };

  _proto.reflowAndAddClass = function reflowAndAddClass(node, className) {
    // This is for to force a repaint,
    // which is necessary in order to transition styles when adding a class name.
    if (className) {
      /* eslint-disable no-unused-expressions */
      node && node.scrollTop;
      /* eslint-enable no-unused-expressions */

      addClass(node, className);
    }
  };

  _proto.render = function render() {
    var props = _extends({}, this.props);

    delete props.classNames;
    return _react.default.createElement(_Transition.default, _extends({}, props, {
      onEnter: this.onEnter,
      onEntered: this.onEntered,
      onEntering: this.onEntering,
      onExit: this.onExit,
      onExiting: this.onExiting,
      onExited: this.onExited
    }));
  };

  return CSSTransition;
}(_react.default.Component);

CSSTransition.defaultProps = {
  classNames: ''
};
CSSTransition.propTypes = process.env.NODE_ENV !== "production" ? _extends({}, _Transition.default.propTypes, {
  /**
   * The animation classNames applied to the component as it enters, exits or
   * has finished the transition. A single name can be provided and it will be
   * suffixed for each stage: e.g.
   *
   * `classNames="fade"` applies `fade-enter`, `fade-enter-active`,
   * `fade-enter-done`, `fade-exit`, `fade-exit-active`, `fade-exit-done`,
   * `fade-appear`, `fade-appear-active`, and `fade-appear-done`.
   *
   * **Note**: `fade-appear-done` and `fade-enter-done` will _both_ be applied.
   * This allows you to define different behavior for when appearing is done and
   * when regular entering is done, using selectors like
   * `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply an
   * epic entrance animation when element first appears in the DOM using
   * [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can
   * simply use `fade-enter-done` for defining both cases.
   *
   * Each individual classNames can also be specified independently like:
   *
   * ```js
   * classNames={{
   *  appear: 'my-appear',
   *  appearActive: 'my-active-appear',
   *  appearDone: 'my-done-appear',
   *  enter: 'my-enter',
   *  enterActive: 'my-active-enter',
   *  enterDone: 'my-done-enter',
   *  exit: 'my-exit',
   *  exitActive: 'my-active-exit',
   *  exitDone: 'my-done-exit',
   * }}
   * ```
   *
   * If you want to set these classes using CSS Modules:
   *
   * ```js
   * import styles from './styles.css';
   * ```
   *
   * you might want to use camelCase in your CSS file, that way could simply
   * spread them instead of listing them one by one:
   *
   * ```js
   * classNames={{ ...styles }}
   * ```
   *
   * @type {string | {
   *  appear?: string,
   *  appearActive?: string,
   *  appearDone?: string,
   *  enter?: string,
   *  enterActive?: string,
   *  enterDone?: string,
   *  exit?: string,
   *  exitActive?: string,
   *  exitDone?: string,
   * }}
   */
  classNames: _PropTypes.classNamesShape,

  /**
   * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is
   * applied.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEnter: PropTypes.func,

  /**
   * A `<Transition>` callback fired immediately after the 'enter-active' or
   * 'appear-active' class is applied.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEntering: PropTypes.func,

  /**
   * A `<Transition>` callback fired immediately after the 'enter' or
   * 'appear' classes are **removed** and the `done` class is added to the DOM node.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEntered: PropTypes.func,

  /**
   * A `<Transition>` callback fired immediately after the 'exit' class is
   * applied.
   *
   * @type Function(node: HtmlElement)
   */
  onExit: PropTypes.func,

  /**
   * A `<Transition>` callback fired immediately after the 'exit-active' is applied.
   *
   * @type Function(node: HtmlElement)
   */
  onExiting: PropTypes.func,

  /**
   * A `<Transition>` callback fired immediately after the 'exit' classes
   * are **removed** and the `exit-done` class is added to the DOM node.
   *
   * @type Function(node: HtmlElement)
   */
  onExited: PropTypes.func
}) : {};
var _default = CSSTransition;
exports.default = _default;
module.exports = exports["default"];
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)))

/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(255);

exports.__esModule = true;
exports.default = addClass;

var _hasClass = _interopRequireDefault(__webpack_require__(256));

function addClass(element, className) {
  if (element.classList) element.classList.add(className);else if (!(0, _hasClass.default)(element, className)) if (typeof element.className === 'string') element.className = element.className + ' ' + className;else element.setAttribute('class', (element.className && element.className.baseVal || '') + ' ' + className);
}

module.exports = exports["default"];

/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = hasClass;

function hasClass(element, className) {
  if (element.classList) return !!className && element.classList.contains(className);else return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
}

module.exports = exports["default"];

/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function replaceClassName(origClass, classToRemove) {
  return origClass.replace(new RegExp('(^|\\s)' + classToRemove + '(?:\\s|$)', 'g'), '$1').replace(/\s+/g, ' ').replace(/^\s*|\s*$/g, '');
}

module.exports = function removeClass(element, className) {
  if (element.classList) element.classList.remove(className);else if (typeof element.className === 'string') element.className = replaceClassName(element.className, className);else element.setAttribute('class', replaceClassName(element.className && element.className.baseVal || '', className));
};

/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

exports.__esModule = true;
exports.default = void 0;

var _propTypes = _interopRequireDefault(__webpack_require__(18));

var _react = _interopRequireDefault(__webpack_require__(9));

var _reactDom = __webpack_require__(40);

var _TransitionGroup = _interopRequireDefault(__webpack_require__(111));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};var target = {};var sourceKeys = Object.keys(source);var key, i;for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];if (excluded.indexOf(key) >= 0) continue;target[key] = source[key];
  }return target;
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);subClass.prototype.constructor = subClass;subClass.__proto__ = superClass;
}

/**
 * The `<ReplaceTransition>` component is a specialized `Transition` component
 * that animates between two children.
 *
 * ```jsx
 * <ReplaceTransition in>
 *   <Fade><div>I appear first</div></Fade>
 *   <Fade><div>I replace the above</div></Fade>
 * </ReplaceTransition>
 * ```
 */
var ReplaceTransition =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(ReplaceTransition, _React$Component);

  function ReplaceTransition() {
    var _this;

    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
      _args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;

    _this.handleEnter = function () {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return _this.handleLifecycle('onEnter', 0, args);
    };

    _this.handleEntering = function () {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      return _this.handleLifecycle('onEntering', 0, args);
    };

    _this.handleEntered = function () {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      return _this.handleLifecycle('onEntered', 0, args);
    };

    _this.handleExit = function () {
      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }

      return _this.handleLifecycle('onExit', 1, args);
    };

    _this.handleExiting = function () {
      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        args[_key6] = arguments[_key6];
      }

      return _this.handleLifecycle('onExiting', 1, args);
    };

    _this.handleExited = function () {
      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
        args[_key7] = arguments[_key7];
      }

      return _this.handleLifecycle('onExited', 1, args);
    };

    return _this;
  }

  var _proto = ReplaceTransition.prototype;

  _proto.handleLifecycle = function handleLifecycle(handler, idx, originalArgs) {
    var _child$props;

    var children = this.props.children;

    var child = _react.default.Children.toArray(children)[idx];

    if (child.props[handler]) (_child$props = child.props)[handler].apply(_child$props, originalArgs);
    if (this.props[handler]) this.props[handler]((0, _reactDom.findDOMNode)(this));
  };

  _proto.render = function render() {
    var _this$props = this.props,
        children = _this$props.children,
        inProp = _this$props.in,
        props = _objectWithoutPropertiesLoose(_this$props, ["children", "in"]);

    var _React$Children$toArr = _react.default.Children.toArray(children),
        first = _React$Children$toArr[0],
        second = _React$Children$toArr[1];

    delete props.onEnter;
    delete props.onEntering;
    delete props.onEntered;
    delete props.onExit;
    delete props.onExiting;
    delete props.onExited;
    return _react.default.createElement(_TransitionGroup.default, props, inProp ? _react.default.cloneElement(first, {
      key: 'first',
      onEnter: this.handleEnter,
      onEntering: this.handleEntering,
      onEntered: this.handleEntered
    }) : _react.default.cloneElement(second, {
      key: 'second',
      onEnter: this.handleExit,
      onEntering: this.handleExiting,
      onEntered: this.handleExited
    }));
  };

  return ReplaceTransition;
}(_react.default.Component);

ReplaceTransition.propTypes = process.env.NODE_ENV !== "production" ? {
  in: _propTypes.default.bool.isRequired,
  children: function children(props, propName) {
    if (_react.default.Children.count(props[propName]) !== 2) return new Error("\"" + propName + "\" must be exactly two transition components.");
    return null;
  }
} : {};
var _default = ReplaceTransition;
exports.default = _default;
module.exports = exports["default"];
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)))

/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.getChildMapping = getChildMapping;
exports.mergeChildMappings = mergeChildMappings;
exports.getInitialChildMapping = getInitialChildMapping;
exports.getNextChildMapping = getNextChildMapping;

var _react = __webpack_require__(9);

/**
 * Given `this.props.children`, return an object mapping key to child.
 *
 * @param {*} children `this.props.children`
 * @return {object} Mapping of key to child
 */
function getChildMapping(children, mapFn) {
  var mapper = function mapper(child) {
    return mapFn && (0, _react.isValidElement)(child) ? mapFn(child) : child;
  };

  var result = Object.create(null);
  if (children) _react.Children.map(children, function (c) {
    return c;
  }).forEach(function (child) {
    // run the map function here instead so that the key is the computed one
    result[child.key] = mapper(child);
  });
  return result;
}
/**
 * When you're adding or removing children some may be added or removed in the
 * same render pass. We want to show *both* since we want to simultaneously
 * animate elements in and out. This function takes a previous set of keys
 * and a new set of keys and merges them with its best guess of the correct
 * ordering. In the future we may expose some of the utilities in
 * ReactMultiChild to make this easy, but for now React itself does not
 * directly have this concept of the union of prevChildren and nextChildren
 * so we implement it here.
 *
 * @param {object} prev prev children as returned from
 * `ReactTransitionChildMapping.getChildMapping()`.
 * @param {object} next next children as returned from
 * `ReactTransitionChildMapping.getChildMapping()`.
 * @return {object} a key set that contains all keys in `prev` and all keys
 * in `next` in a reasonable order.
 */

function mergeChildMappings(prev, next) {
  prev = prev || {};
  next = next || {};

  function getValueForKey(key) {
    return key in next ? next[key] : prev[key];
  } // For each key of `next`, the list of keys to insert before that key in
  // the combined list


  var nextKeysPending = Object.create(null);
  var pendingKeys = [];

  for (var prevKey in prev) {
    if (prevKey in next) {
      if (pendingKeys.length) {
        nextKeysPending[prevKey] = pendingKeys;
        pendingKeys = [];
      }
    } else {
      pendingKeys.push(prevKey);
    }
  }

  var i;
  var childMapping = {};

  for (var nextKey in next) {
    if (nextKeysPending[nextKey]) {
      for (i = 0; i < nextKeysPending[nextKey].length; i++) {
        var pendingNextKey = nextKeysPending[nextKey][i];
        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
      }
    }

    childMapping[nextKey] = getValueForKey(nextKey);
  } // Finally, add the keys which didn't appear before any key in `next`


  for (i = 0; i < pendingKeys.length; i++) {
    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
  }

  return childMapping;
}

function getProp(child, prop, props) {
  return props[prop] != null ? props[prop] : child.props[prop];
}

function getInitialChildMapping(props, onExited) {
  return getChildMapping(props.children, function (child) {
    return (0, _react.cloneElement)(child, {
      onExited: onExited.bind(null, child),
      in: true,
      appear: getProp(child, 'appear', props),
      enter: getProp(child, 'enter', props),
      exit: getProp(child, 'exit', props)
    });
  });
}

function getNextChildMapping(nextProps, prevChildMapping, onExited) {
  var nextChildMapping = getChildMapping(nextProps.children);
  var children = mergeChildMappings(prevChildMapping, nextChildMapping);
  Object.keys(children).forEach(function (key) {
    var child = children[key];
    if (!(0, _react.isValidElement)(child)) return;
    var hasPrev = key in prevChildMapping;
    var hasNext = key in nextChildMapping;
    var prevChild = prevChildMapping[key];
    var isLeaving = (0, _react.isValidElement)(prevChild) && !prevChild.props.in; // item is new (entering)

    if (hasNext && (!hasPrev || isLeaving)) {
      // console.log('entering', key)
      children[key] = (0, _react.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: true,
        exit: getProp(child, 'exit', nextProps),
        enter: getProp(child, 'enter', nextProps)
      });
    } else if (!hasNext && hasPrev && !isLeaving) {
      // item is old (exiting)
      // console.log('leaving', key)
      children[key] = (0, _react.cloneElement)(child, {
        in: false
      });
    } else if (hasNext && hasPrev && (0, _react.isValidElement)(prevChild)) {
      // item hasn't changed transition states
      // copy over the last transition props;
      // console.log('unchanged', key)
      children[key] = (0, _react.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: prevChild.props.in,
        exit: getProp(child, 'exit', nextProps),
        enter: getProp(child, 'enter', nextProps)
      });
    }
  });
  return children;
}

/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classnames = __webpack_require__(0);

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var save = function save(props) {
    var className = props.className;
    var _props$attributes = props.attributes,
        block_id = _props$attributes.block_id,
        iconBorder = _props$attributes.iconBorder,
        selectedIcon = _props$attributes.selectedIcon,
        align = _props$attributes.align,
        hoverEffect = _props$attributes.hoverEffect,
        iconStyles = _props$attributes.iconStyles,
        containerStyles = _props$attributes.containerStyles,
        urlCheck = _props$attributes.urlCheck,
        link = _props$attributes.link,
        target = _props$attributes.target,
        hideDesktop = _props$attributes.hideDesktop,
        hideTablet = _props$attributes.hideTablet,
        hideMobile = _props$attributes.hideMobile,
        backgroundType = _props$attributes.backgroundType,
        containerBorder = _props$attributes.containerBorder;


    var mainClasses = (0, _classnames2.default)(className, 'premium-icon');

    var btnGrad = void 0,
        btnGrad2 = void 0,
        btnbg = void 0;
    if ('gradient' === backgroundType) {
        btnGrad = 'transparent' === containerStyles[0].containerBack || undefined === containerStyles[0].containerBack ? 'rgba(255,255,255,0)' : containerStyles[0].containerBack;
        btnGrad2 = undefined !== containerStyles[0].gradientColorTwo && '' !== containerStyles[0].gradientColorTwo ? containerStyles[0].gradientColorTwo : '#777';
        if ('radial' === containerStyles[0].gradientType) {
            btnbg = 'radial-gradient(at ' + containerStyles[0].gradientPosition + ', ' + btnGrad + ' ' + containerStyles[0].gradientLocationOne + '%, ' + btnGrad2 + ' ' + containerStyles[0].gradientLocationTwo + '%)';
        } else if ('radial' !== containerStyles[0].gradientType) {
            btnbg = 'linear-gradient(' + containerStyles[0].gradientAngle + 'deg, ' + btnGrad + ' ' + containerStyles[0].gradientLocationOne + '%, ' + btnGrad2 + ' ' + containerStyles[0].gradientLocationTwo + '%)';
        }
    } else {
        btnbg = containerStyles[0].backgroundImageURL ? 'url(\'' + containerStyles[0].backgroundImageURL + '\')' : '';
    }

    return React.createElement(
        'div',
        {
            className: mainClasses + '__container ' + hideDesktop + ' ' + hideTablet + ' ' + hideMobile,
            id: 'premium-icon-' + block_id
        },
        React.createElement(
            'div',
            {
                className: 'premium-icon-container',
                style: {
                    textAlign: align,
                    backgroundColor: backgroundType === "solid" ? containerStyles[0].containerBack : "transparent",
                    backgroundImage: btnbg,
                    backgroundRepeat: containerStyles[0].backgroundRepeat,
                    backgroundPosition: containerStyles[0].backgroundPosition,
                    backgroundSize: containerStyles[0].backgroundSize,
                    backgroundAttachment: containerStyles[0].fixed ? "fixed" : "unset",
                    borderStyle: containerBorder.borderType,
                    // borderTopWidth: ContainerBorderWidthTop && ContainerBorderWidthTop + "px",
                    // borderRightWidth: ContainerBorderWidthRight && ContainerBorderWidthRight + "px",
                    // borderBottomWidth: ContainerBorderWidthBottom && ContainerBorderWidthBottom + "px",
                    // borderLeftWidth: ContainerBorderWidthLeft && ContainerBorderWidthLeft + "px",
                    // borderBottomLeftRadius: ContainerBorderRadiusLeft && ContainerBorderRadiusLeft + "px",
                    // borderTopLeftRadius: ContainerBorderRadiusTop && ContainerBorderRadiusTop + "px",
                    // borderTopRightRadius: ContainerBorderRadiusRight && ContainerBorderRadiusRight + "px",
                    // borderBottomRightRadius: ContainerBorderRadiusBottom && ContainerBorderRadiusBottom + "px",
                    borderColor: containerBorder.borderColor,
                    boxShadow: (containerStyles[0].wrapShadowHorizontal || 0) + 'px ' + (containerStyles[0].wrapShadowVertical || 0) + 'px ' + (containerStyles[0].wrapShadowBlur || 0) + 'px ' + containerStyles[0].wrapShadowColor + ' ' + containerStyles[0].wrapShadowPosition

                }
            },
            React.createElement(
                'a',
                {
                    className: 'premium-icon__link',
                    href: urlCheck && link,
                    rel: 'noopener noreferrer',
                    target: target ? "_blank" : "_self"
                },
                React.createElement('i', {
                    className: 'premium-icon ' + selectedIcon + ' premium-icon__' + hoverEffect,
                    style: {
                        color: iconStyles[0].iconColor || "#6ec1e4",
                        backgroundColor: iconStyles[0].iconBack,
                        fontSize: (iconStyles[0].iconSize || 50) + iconStyles[0].iconSizeUnit,
                        borderStyle: iconBorder.borderType,
                        // borderTopWidth: iconBorderWidthTop && iconBorderWidthTop + "px",
                        // borderRightWidth: iconBorderWidthRight && iconBorderWidthRight + "px",
                        // borderBottomWidth: iconBorderWidthBottom && iconBorderWidthBottom + "px",
                        // borderLeftWidth: iconBorderWidthLeft && iconBorderWidthLeft + "px",
                        // borderBottomLeftRadius: iconBorderRadiusLeft && iconBorderRadiusLeft + "px",
                        // borderTopLeftRadius: iconBorderRadiusTop && iconBorderRadiusTop + "px",
                        // borderTopRightRadius: iconBorderRadiusRight && iconBorderRadiusRight + "px",
                        // borderBottomRightRadius: iconBorderRadiusBottom && iconBorderRadiusBottom + "px",
                        borderColor: iconBorder.borderColor,
                        textShadow: (iconStyles[0].shadowHorizontal || 0) + 'px ' + (iconStyles[0].shadowVertical || 0) + 'px ' + (iconStyles[0].shadowBlur || 0) + 'px ' + iconStyles[0].shadowColor
                    }
                })
            )
        )
    );
};

exports.default = save;

/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _hexToRgba = __webpack_require__(17);

var _hexToRgba2 = _interopRequireDefault(_hexToRgba);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var className = "premium-icon";
var __ = wp.i18n.__;


var attributes = {
    iconBorder: {
        type: "boolean",
        default: false
    },
    wrapBorder: {
        type: "boolean",
        default: false
    },
    iconType: {
        type: "string",
        default: "dash"
    },
    selectedIcon: {
        type: "string",
        default: "dashicons dashicons-admin-site"
    },
    align: {
        type: "string",
        default: "center"
    },
    hoverEffect: {
        type: "string",
        default: "none"
    },
    iconSize: {
        type: "number"
    },
    iconSizeUnit: {
        type: "string",
        default: "px"
    },
    iconColor: {
        type: "string",
        default: "#6ec1e4"
    },
    iconBack: {
        type: "string"
    },
    iconOpacity: {
        type: "number",
        default: "1"
    },
    padding: {
        type: "string",
        default: "up"
    },
    shadowColor: {
        type: "string"
    },
    shadowBlur: {
        type: "number",
        default: "0"
    },
    shadowHorizontal: {
        type: "number",
        default: "0"
    },
    shadowVertical: {
        type: "number",
        default: "0"
    },
    paddingT: {
        type: "number"
    },
    paddingR: {
        type: "number"
    },
    paddingB: {
        type: "number"
    },
    paddingL: {
        type: "number"
    },
    paddingU: {
        type: "string",
        default: "px"
    },
    margin: {
        type: "string",
        default: "up"
    },
    marginT: {
        type: "number"
    },
    marginR: {
        type: "number"
    },
    marginB: {
        type: "number"
    },
    marginL: {
        type: "number"
    },
    borderType: {
        type: "string",
        default: "none"
    },
    borderWidth: {
        type: "number",
        default: "1"
    },
    iconBorderTop: {
        type: "number",
        default: 1
    },
    iconBorderRight: {
        type: "number",
        default: 1
    },
    iconBorderBottom: {
        type: "number",
        default: 1
    },
    iconBorderLeft: {
        type: "number",
        default: 1
    },
    borderRadius: {
        type: "number",
        default: 100
    },
    borderColor: {
        type: "string"
    },
    backgroundColor: {
        type: "string"
    },
    backgroundOpacity: {
        type: "number",
        default: "1"
    },
    background: {
        type: "string"
    },
    imageID: {
        type: "string"
    },
    imageURL: {
        type: "string"
    },
    backgroundRepeat: {
        type: "string",
        default: "no-repeat"
    },
    backgroundPosition: {
        type: "string",
        default: "top center"
    },
    backgroundSize: {
        type: "string",
        default: "auto"
    },
    fixed: {
        type: "boolean",
        default: false
    },
    wrapBorderType: {
        type: "string",
        default: "none"
    },
    wrapBorderWidth: {
        type: "number",
        default: "1"
    },
    wrapBorderTop: {
        type: "number",
        default: 1
    },
    wrapBorderRight: {
        type: "number",
        default: 1
    },
    wrapBorderBottom: {
        type: "number",
        default: 1
    },
    wrapBorderLeft: {
        type: "number",
        default: 1
    },
    wrapBorderRadius: {
        type: "number"
    },
    wrapBorderColor: {
        type: "string"
    },
    wrapPadding: {
        type: "string",
        default: "up"
    },
    wrapShadowColor: {
        type: "string"
    },
    wrapShadowBlur: {
        type: "number",
        default: "0"
    },
    wrapShadowHorizontal: {
        type: "number",
        default: "0"
    },
    wrapShadowVertical: {
        type: "number",
        default: "0"
    },
    wrapShadowPosition: {
        type: "string",
        default: ""
    },
    wrapPaddingT: {
        type: "number"
    },
    wrapPaddingR: {
        type: "number"
    },
    wrapPaddingB: {
        type: "number"
    },
    wrapPaddingL: {
        type: "number"
    },
    wrapMargin: {
        type: "string",
        default: "up"
    },
    wrapMarginT: {
        type: "number"
    },
    wrapMarginR: {
        type: "number"
    },
    wrapMarginB: {
        type: "number"
    },
    wrapMarginL: {
        type: "number"
    },
    urlCheck: {
        type: "boolean"
    },
    link: {
        type: "string"
    },
    target: {
        type: "boolean"
    },
    hideDesktop: {
        type: 'boolean',
        default: false
    },
    hideTablet: {
        type: 'boolean',
        default: false
    },
    hideMobile: {
        type: 'boolean',
        default: false
    }
};

var new_attributes = {
    iconStyles: {
        type: "array",
        default: [{
            iconSizeUnit: 'px',
            iconSize: '',
            iconColor: '',
            iconBack: '',
            iconOpacity: '1',
            borderType: 'none',
            borderWidth: '1',
            iconBorderTop: '1',
            iconBorderRight: '1',
            iconBorderBottom: '1',
            iconBorderLeft: '1',
            borderColor: '',
            borderRadius: '100',
            shadowColor: '',
            shadowBlur: '',
            shadowHorizontal: '',
            shadowVertical: ''
        }]
    },
    containerStyles: {
        type: "array",
        default: [{
            containerBack: '',
            backgroundOpacity: 1,
            backgroundImageID: '',
            backgroundImageURL: '',
            backgroundRepeat: 'no-reapet',
            backgroundPosition: 'top center',
            backgroundSize: 'auto',
            fixed: false,
            wrapBorderType: 'none',
            wrapBorderWidth: '1',
            wrapBorderTop: '1',
            wrapBorderRight: '1',
            wrapBorderBottom: '1',
            wrapBorderLeft: '1',
            wrapBorderColor: '',
            wrapBorderRadius: '',
            wrapShadowColor: '',
            wrapShadowBlur: '0',
            wrapShadowHorizontal: '0',
            wrapShadowVertical: '0',
            wrapShadowPosition: '',
            gradientLocationOne: '0',
            gradientColorTwo: '',
            gradientLocationTwo: '100',
            gradientType: 'linear',
            gradientAngle: '180',
            gradientPosition: 'center center'
        }]
    },
    backgroundType: {
        type: "string",
        default: ""
    },
    paddingTTablet: {
        type: "number"
    },
    paddingRTablet: {
        type: "number"
    },
    paddingBTablet: {
        type: "number"
    },
    paddingLTablet: {
        type: "number"
    },
    paddingTMobile: {
        type: "number"
    },
    paddingRMobile: {
        type: "number"
    },
    paddingBMobile: {
        type: "number"
    },
    paddingLMobile: {
        type: "number"
    },
    wrapPaddingTTablet: {
        type: "number"
    },
    wrapPaddingRTablet: {
        type: "number"
    },
    wrapPaddingBTablet: {
        type: "number"
    },
    wrapPaddingLTablet: {
        type: "number"
    },
    wrapPaddingTMobile: {
        type: "number"
    },
    wrapPaddingRMobile: {
        type: "number"
    },
    wrapPaddingBMobile: {
        type: "number"
    },
    wrapPaddingLMobile: {
        type: "number"
    },
    marginTTablet: {
        type: "number"
    },
    marginRTablet: {
        type: "number"
    },
    marginBTablet: {
        type: "number"
    },
    marginLTablet: {
        type: "number"
    },
    marginTMobile: {
        type: "number"
    },
    marginRMobile: {
        type: "number"
    },
    marginBMobile: {
        type: "number"
    },
    marginLMobile: {
        type: "number"
    },
    wrapMarginTTablet: {
        type: "number"
    },
    wrapMarginRTablet: {
        type: "number"
    },
    wrapMarginBTablet: {
        type: "number"
    },
    wrapMarginLTablet: {
        type: "number"
    },
    wrapMarginTMobile: {
        type: "number"
    },
    wrapMarginRMobile: {
        type: "number"
    },
    wrapMarginBMobile: {
        type: "number"
    },
    wrapMarginLMobile: {
        type: "number"
    }
};

var deprecated_attributes = Object.assign(attributes, new_attributes);
var deprecatedContent = [{
    attributes: deprecated_attributes,
    migrate: function migrate(attributes) {
        var newAttributes = {
            iconStyles: [{
                iconSizeUnit: attributes.iconSizeUnit,
                iconSize: attributes.iconSize,
                iconColor: attributes.iconColor,
                iconBack: attributes.iconBack,
                iconOpacity: attributes.iconOpacity,
                borderType: attributes.borderType,
                borderWidth: attributes.borderWidth,
                iconBorderTop: attributes.iconBorderTop,
                iconBorderRight: attributes.iconBorderRight,
                iconBorderBottom: attributes.iconBorderBottom,
                iconBorderLeft: attributes.iconBorderLeft,
                borderColor: attributes.borderColor,
                borderRadius: attributes.borderRadius,
                shadowColor: attributes.shadowColor,
                shadowBlur: attributes.shadowBlur,
                shadowHorizontal: attributes.shadowHorizontal,
                shadowVertical: attributes.shadowVertical
            }],
            containerStyles: [{
                containerBack: attributes.backgroundColor,
                backgroundOpacity: attributes.backgroundOpacity,
                backgroundImageID: attributes.imageID,
                backgroundImageURL: attributes.imageURL,
                backgroundRepeat: attributes.backgroundRepeat,
                backgroundPosition: attributes.backgroundPosition,
                backgroundSize: attributes.backgroundSize,
                fixed: attributes.fixed,
                wrapBorderType: attributes.wrapBorderType,
                wrapBorderWidth: attributes.wrapBorderWidth,
                wrapBorderTop: attributes.wrapBorderTop,
                wrapBorderRight: attributes.wrapBorderRight,
                wrapBorderBottom: attributes.wrapBorderBottom,
                wrapBorderLeft: attributes.wrapBorderLeft,
                wrapBorderColor: attributes.wrapBorderColor,
                wrapBorderRadius: attributes.wrapBorderRadius,
                wrapShadowColor: attributes.wrapShadowColor,
                wrapShadowBlur: attributes.wrapShadowBlur,
                wrapShadowHorizontal: attributes.wrapShadowHorizontal,
                wrapShadowVertical: attributes.wrapShadowVertical,
                wrapShadowPosition: attributes.wrapShadowPosition,
                gradientLocationOne: '0',
                gradientColorTwo: '',
                gradientLocationTwo: '100',
                gradientType: 'linear',
                gradientAngle: '180',
                gradientPosition: 'center center'
            }],
            backgroundType: 'solid',
            paddingTTablet: '',
            paddingRTablet: '',
            paddingBTablet: '',
            paddingLTablet: '',
            paddingTMobile: '',
            paddingRMobile: '',
            paddingBMobile: '',
            paddingLMobile: '',
            wrapPaddingTTablet: '',
            wrapPaddingRTablet: '',
            wrapPaddingBTablet: '',
            wrapPaddingLTablet: '',
            wrapPaddingTMobile: '',
            wrapPaddingRMobile: '',
            wrapPaddingBMobile: '',
            wrapPaddingLMobile: '',
            marginTTablet: '',
            marginRTablet: '',
            marginBTablet: '',
            marginLTablet: '',
            marginTMobile: '',
            marginRMobile: '',
            marginBMobile: '',
            marginLMobile: '',
            wrapMarginTTablet: '',
            wrapMarginRTablet: '',
            wrapMarginBTablet: '',
            wrapMarginLTablet: '',
            wrapMarginTMobile: '',
            wrapMarginRMobile: '',
            wrapMarginBMobile: '',
            wrapMarginLMobile: ''
        };
        return Object.assign(attributes, newAttributes);
    },
    save: function save(props) {
        var _props$attributes = props.attributes,
            wrapBorder = _props$attributes.wrapBorder,
            iconBorder = _props$attributes.iconBorder,
            selectedIcon = _props$attributes.selectedIcon,
            align = _props$attributes.align,
            hoverEffect = _props$attributes.hoverEffect,
            iconSize = _props$attributes.iconSize,
            iconSizeUnit = _props$attributes.iconSizeUnit,
            iconColor = _props$attributes.iconColor,
            iconBack = _props$attributes.iconBack,
            shadowBlur = _props$attributes.shadowBlur,
            shadowColor = _props$attributes.shadowColor,
            shadowHorizontal = _props$attributes.shadowHorizontal,
            shadowVertical = _props$attributes.shadowVertical,
            paddingT = _props$attributes.paddingT,
            paddingR = _props$attributes.paddingR,
            paddingB = _props$attributes.paddingB,
            paddingL = _props$attributes.paddingL,
            paddingU = _props$attributes.paddingU,
            marginT = _props$attributes.marginT,
            marginR = _props$attributes.marginR,
            marginB = _props$attributes.marginB,
            marginL = _props$attributes.marginL,
            borderType = _props$attributes.borderType,
            borderWidth = _props$attributes.borderWidth,
            iconBorderTop = _props$attributes.iconBorderTop,
            iconBorderRight = _props$attributes.iconBorderRight,
            iconBorderBottom = _props$attributes.iconBorderBottom,
            iconBorderLeft = _props$attributes.iconBorderLeft,
            borderRadius = _props$attributes.borderRadius,
            borderColor = _props$attributes.borderColor,
            backgroundColor = _props$attributes.backgroundColor,
            imageURL = _props$attributes.imageURL,
            fixed = _props$attributes.fixed,
            backgroundRepeat = _props$attributes.backgroundRepeat,
            backgroundPosition = _props$attributes.backgroundPosition,
            backgroundSize = _props$attributes.backgroundSize,
            wrapBorderType = _props$attributes.wrapBorderType,
            wrapBorderWidth = _props$attributes.wrapBorderWidth,
            wrapBorderTop = _props$attributes.wrapBorderTop,
            wrapBorderRight = _props$attributes.wrapBorderRight,
            wrapBorderBottom = _props$attributes.wrapBorderBottom,
            wrapBorderLeft = _props$attributes.wrapBorderLeft,
            wrapBorderRadius = _props$attributes.wrapBorderRadius,
            wrapBorderColor = _props$attributes.wrapBorderColor,
            wrapShadowBlur = _props$attributes.wrapShadowBlur,
            wrapShadowColor = _props$attributes.wrapShadowColor,
            wrapShadowHorizontal = _props$attributes.wrapShadowHorizontal,
            wrapShadowVertical = _props$attributes.wrapShadowVertical,
            wrapShadowPosition = _props$attributes.wrapShadowPosition,
            wrapPaddingT = _props$attributes.wrapPaddingT,
            wrapPaddingR = _props$attributes.wrapPaddingR,
            wrapPaddingB = _props$attributes.wrapPaddingB,
            wrapPaddingL = _props$attributes.wrapPaddingL,
            wrapMarginT = _props$attributes.wrapMarginT,
            wrapMarginR = _props$attributes.wrapMarginR,
            wrapMarginB = _props$attributes.wrapMarginB,
            wrapMarginL = _props$attributes.wrapMarginL,
            urlCheck = _props$attributes.urlCheck,
            link = _props$attributes.link,
            target = _props$attributes.target,
            iconOpacity = _props$attributes.iconOpacity,
            backgroundOpacity = _props$attributes.backgroundOpacity,
            hideDesktop = _props$attributes.hideDesktop,
            hideTablet = _props$attributes.hideTablet,
            hideMobile = _props$attributes.hideMobile;


        return React.createElement(
            "div",
            {
                className: className + "__container " + hideDesktop + " " + hideTablet + " " + hideMobile,
                style: {
                    textAlign: align,
                    backgroundColor: backgroundColor ? (0, _hexToRgba2.default)(backgroundColor, backgroundOpacity) : "transparent",
                    backgroundImage: "url('" + imageURL + "')",
                    backgroundRepeat: backgroundRepeat,
                    backgroundPosition: backgroundPosition,
                    backgroundSize: backgroundSize,
                    backgroundAttachment: fixed ? "fixed" : "unset",
                    borderStyle: wrapBorderType,
                    borderWidth: wrapBorder ? wrapBorderTop + "px " + wrapBorderRight + "px " + wrapBorderBottom + "px " + wrapBorderLeft + "px" : wrapBorderWidth + "px",
                    borderRadius: wrapBorderRadius + "px",
                    borderColor: wrapBorderColor,
                    boxShadow: (wrapShadowHorizontal || 0) + "px " + (wrapShadowVertical || 0) + "px " + (wrapShadowBlur || 0) + "px " + wrapShadowColor + " " + wrapShadowPosition,
                    paddingTop: wrapPaddingT,
                    paddingRight: wrapPaddingR,
                    paddingBottom: wrapPaddingB,
                    paddingLeft: wrapPaddingL,
                    marginTop: wrapMarginT,
                    marginRight: wrapMarginR,
                    marginBottom: wrapMarginB,
                    marginLeft: wrapMarginL
                }
            },
            React.createElement(
                "a",
                {
                    className: "premium-icon__link",
                    href: urlCheck && link,
                    rel: "noopener noreferrer",
                    target: target ? "_blank" : "_self"
                },
                React.createElement("i", {
                    className: "premium-icon " + selectedIcon + " premium-icon__" + hoverEffect,
                    style: {
                        color: iconColor || "#6ec1e4",
                        backgroundColor: iconBack ? (0, _hexToRgba2.default)(iconBack, iconOpacity) : "transparent",
                        fontSize: (iconSize || 50) + iconSizeUnit,
                        paddingTop: paddingT + paddingU,
                        paddingRight: paddingR + paddingU,
                        paddingBottom: paddingB + paddingU,
                        paddingLeft: paddingL + paddingU,
                        marginTop: marginT,
                        marginRight: marginR,
                        marginBottom: marginB,
                        marginLeft: marginL,
                        borderStyle: borderType,
                        borderWidth: iconBorder ? iconBorderTop + "px " + iconBorderRight + "px " + iconBorderBottom + "px " + iconBorderLeft + "px" : borderWidth + "px",
                        borderRadius: borderRadius || 100 + "px",
                        borderColor: borderColor,
                        textShadow: (shadowHorizontal || 0) + "px " + (shadowVertical || 0) + "px " + (shadowBlur || 0) + "px " + shadowColor
                    }
                })
            )
        );
    }
}, {
    attributes: attributes,
    save: function save(props) {
        var _props$attributes2 = props.attributes,
            selectedIcon = _props$attributes2.selectedIcon,
            align = _props$attributes2.align,
            hoverEffect = _props$attributes2.hoverEffect,
            iconSize = _props$attributes2.iconSize,
            iconSizeUnit = _props$attributes2.iconSizeUnit,
            iconColor = _props$attributes2.iconColor,
            iconBack = _props$attributes2.iconBack,
            shadowBlur = _props$attributes2.shadowBlur,
            shadowColor = _props$attributes2.shadowColor,
            shadowHorizontal = _props$attributes2.shadowHorizontal,
            shadowVertical = _props$attributes2.shadowVertical,
            paddingT = _props$attributes2.paddingT,
            paddingR = _props$attributes2.paddingR,
            paddingB = _props$attributes2.paddingB,
            paddingL = _props$attributes2.paddingL,
            marginT = _props$attributes2.marginT,
            marginR = _props$attributes2.marginR,
            marginB = _props$attributes2.marginB,
            marginL = _props$attributes2.marginL,
            borderType = _props$attributes2.borderType,
            borderWidth = _props$attributes2.borderWidth,
            borderRadius = _props$attributes2.borderRadius,
            borderColor = _props$attributes2.borderColor,
            backgroundColor = _props$attributes2.backgroundColor,
            imageURL = _props$attributes2.imageURL,
            fixed = _props$attributes2.fixed,
            backgroundRepeat = _props$attributes2.backgroundRepeat,
            backgroundPosition = _props$attributes2.backgroundPosition,
            backgroundSize = _props$attributes2.backgroundSize,
            wrapBorderType = _props$attributes2.wrapBorderType,
            wrapBorderWidth = _props$attributes2.wrapBorderWidth,
            wrapBorderRadius = _props$attributes2.wrapBorderRadius,
            wrapBorderColor = _props$attributes2.wrapBorderColor,
            wrapShadowBlur = _props$attributes2.wrapShadowBlur,
            wrapShadowColor = _props$attributes2.wrapShadowColor,
            wrapShadowHorizontal = _props$attributes2.wrapShadowHorizontal,
            wrapShadowVertical = _props$attributes2.wrapShadowVertical,
            wrapShadowPosition = _props$attributes2.wrapShadowPosition,
            wrapPaddingT = _props$attributes2.wrapPaddingT,
            wrapPaddingR = _props$attributes2.wrapPaddingR,
            wrapPaddingB = _props$attributes2.wrapPaddingB,
            wrapPaddingL = _props$attributes2.wrapPaddingL,
            wrapMarginT = _props$attributes2.wrapMarginT,
            wrapMarginR = _props$attributes2.wrapMarginR,
            wrapMarginB = _props$attributes2.wrapMarginB,
            wrapMarginL = _props$attributes2.wrapMarginL,
            urlCheck = _props$attributes2.urlCheck,
            link = _props$attributes2.link,
            target = _props$attributes2.target;


        return React.createElement(
            "div",
            {
                className: className + "__container",
                style: {
                    textAlign: align,
                    backgroundColor: backgroundColor,
                    backgroundImage: "url('" + imageURL + "')",
                    backgroundRepeat: backgroundRepeat,
                    backgroundPosition: backgroundPosition,
                    backgroundSize: backgroundSize,
                    backgroundAttachment: fixed ? "fixed" : "unset",
                    border: wrapBorderType,
                    borderWidth: wrapBorderWidth + "px",
                    borderRadius: wrapBorderRadius + "px",
                    borderColor: wrapBorderColor,
                    boxShadow: (wrapShadowHorizontal || 0) + "px " + (wrapShadowVertical || 0) + "px " + (wrapShadowBlur || 0) + "px " + wrapShadowColor + " " + wrapShadowPosition,
                    paddingTop: wrapPaddingT,
                    paddingRight: wrapPaddingR,
                    paddingBottom: wrapPaddingB,
                    paddingLeft: wrapPaddingL,
                    marginTop: wrapMarginT,
                    marginRight: wrapMarginR,
                    marginBottom: wrapMarginB,
                    marginLeft: wrapMarginL
                }
            },
            React.createElement(
                "a",
                {
                    className: className + "__link",
                    href: urlCheck && link,
                    rel: "noopener noreferrer",
                    target: target ? "_blank" : "_self"
                },
                React.createElement("i", {
                    className: className + " " + selectedIcon + " " + className + "__" + hoverEffect,
                    style: {
                        color: iconColor || "#6ec1e4",
                        backgroundColor: iconBack,
                        fontSize: (iconSize || 50) + iconSizeUnit,
                        paddingTop: paddingT,
                        paddingRight: paddingR,
                        paddingBottom: paddingB,
                        paddingLeft: paddingL,
                        marginTop: marginT,
                        marginRight: marginR,
                        marginBottom: marginB,
                        marginLeft: marginL,
                        border: borderType,
                        borderWidth: borderWidth + "px",
                        borderRadius: borderRadius || 100 + "px",
                        borderColor: borderColor,
                        textShadow: (shadowHorizontal || 0) + "px " + (shadowVertical || 0) + "px " + (shadowBlur || 0) + "px " + shadowColor
                    }
                })
            )
        );
    }
}, {
    attributes: attributes,
    migrate: function migrate(attributes) {
        var newAttributes = {
            iconSizeUnit: "px"
        };
        return Object.assign(attributes, newAttributes);
    },
    save: function save(props) {
        var _props$attributes3 = props.attributes,
            selectedIcon = _props$attributes3.selectedIcon,
            align = _props$attributes3.align,
            hoverEffect = _props$attributes3.hoverEffect,
            iconSize = _props$attributes3.iconSize,
            iconColor = _props$attributes3.iconColor,
            iconBack = _props$attributes3.iconBack,
            shadowBlur = _props$attributes3.shadowBlur,
            shadowColor = _props$attributes3.shadowColor,
            shadowHorizontal = _props$attributes3.shadowHorizontal,
            shadowVertical = _props$attributes3.shadowVertical,
            paddingT = _props$attributes3.paddingT,
            paddingR = _props$attributes3.paddingR,
            paddingB = _props$attributes3.paddingB,
            paddingL = _props$attributes3.paddingL,
            marginT = _props$attributes3.marginT,
            marginR = _props$attributes3.marginR,
            marginB = _props$attributes3.marginB,
            marginL = _props$attributes3.marginL,
            borderType = _props$attributes3.borderType,
            borderWidth = _props$attributes3.borderWidth,
            borderRadius = _props$attributes3.borderRadius,
            borderColor = _props$attributes3.borderColor,
            backgroundColor = _props$attributes3.backgroundColor,
            imageURL = _props$attributes3.imageURL,
            fixed = _props$attributes3.fixed,
            backgroundRepeat = _props$attributes3.backgroundRepeat,
            backgroundPosition = _props$attributes3.backgroundPosition,
            backgroundSize = _props$attributes3.backgroundSize,
            wrapBorderType = _props$attributes3.wrapBorderType,
            wrapBorderWidth = _props$attributes3.wrapBorderWidth,
            wrapBorderRadius = _props$attributes3.wrapBorderRadius,
            wrapBorderColor = _props$attributes3.wrapBorderColor,
            wrapShadowBlur = _props$attributes3.wrapShadowBlur,
            wrapShadowColor = _props$attributes3.wrapShadowColor,
            wrapShadowHorizontal = _props$attributes3.wrapShadowHorizontal,
            wrapShadowVertical = _props$attributes3.wrapShadowVertical,
            wrapShadowPosition = _props$attributes3.wrapShadowPosition,
            wrapPaddingT = _props$attributes3.wrapPaddingT,
            wrapPaddingR = _props$attributes3.wrapPaddingR,
            wrapPaddingB = _props$attributes3.wrapPaddingB,
            wrapPaddingL = _props$attributes3.wrapPaddingL,
            wrapMarginT = _props$attributes3.wrapMarginT,
            wrapMarginR = _props$attributes3.wrapMarginR,
            wrapMarginB = _props$attributes3.wrapMarginB,
            wrapMarginL = _props$attributes3.wrapMarginL,
            urlCheck = _props$attributes3.urlCheck,
            link = _props$attributes3.link,
            target = _props$attributes3.target;


        return React.createElement(
            "div",
            {
                className: className + "__container",
                style: {
                    textAlign: align,
                    backgroundColor: backgroundColor,
                    backgroundImage: "url('" + imageURL + "')",
                    backgroundRepeat: backgroundRepeat,
                    backgroundPosition: backgroundPosition,
                    backgroundSize: backgroundSize,
                    backgroundAttachment: fixed ? "fixed" : "unset",
                    border: wrapBorderType,
                    borderWidth: wrapBorderWidth + "px",
                    borderRadius: wrapBorderRadius + "px",
                    borderColor: wrapBorderColor,
                    boxShadow: (wrapShadowHorizontal || 0) + "px " + (wrapShadowVertical || 0) + "px " + (wrapShadowBlur || 0) + "px " + wrapShadowColor + " " + wrapShadowPosition,
                    paddingTop: wrapPaddingT,
                    paddingRight: wrapPaddingR,
                    paddingBottom: wrapPaddingB,
                    paddingLeft: wrapPaddingL,
                    marginTop: wrapMarginT,
                    marginRight: wrapMarginR,
                    marginBottom: wrapMarginB,
                    marginLeft: wrapMarginL
                }
            },
            React.createElement(
                "a",
                {
                    className: className + "__link",
                    href: urlCheck && link,
                    rel: "noopener noreferrer",
                    target: target ? "_blank" : "_self"
                },
                React.createElement("i", {
                    className: className + " " + selectedIcon + " " + className + "__" + hoverEffect,
                    style: {
                        color: iconColor || "#6ec1e4",
                        backgroundColor: iconBack,
                        fontSize: iconSize || 50,
                        paddingTop: paddingT,
                        paddingRight: paddingR,
                        paddingBottom: paddingB,
                        paddingLeft: paddingL,
                        marginTop: marginT,
                        marginRight: marginR,
                        marginBottom: marginB,
                        marginLeft: marginL,
                        border: borderType,
                        borderWidth: borderWidth + "px",
                        borderRadius: borderRadius || 100 + "px",
                        borderColor: borderColor,
                        textShadow: (shadowHorizontal || 0) + "px " + (shadowVertical || 0) + "px " + (shadowBlur || 0) + "px " + shadowColor
                    }
                })
            )
        );
    }
}, {
    attributes: attributes,
    migrate: function migrate(attributes) {
        var newAttributes = {
            backgroundColor: attributes.background,
            imageID: "",
            imageURL: "",
            fixed: false,
            backgroundRepeat: "no-repeat",
            backgroundPosition: "top center",
            backgroundSize: "auto"
        };
        return Object.assign(attributes, newAttributes);
    },
    save: function save(props) {
        var _props$attributes4 = props.attributes,
            selectedIcon = _props$attributes4.selectedIcon,
            align = _props$attributes4.align,
            hoverEffect = _props$attributes4.hoverEffect,
            iconSize = _props$attributes4.iconSize,
            iconColor = _props$attributes4.iconColor,
            iconBack = _props$attributes4.iconBack,
            shadowBlur = _props$attributes4.shadowBlur,
            shadowColor = _props$attributes4.shadowColor,
            shadowHorizontal = _props$attributes4.shadowHorizontal,
            shadowVertical = _props$attributes4.shadowVertical,
            paddingT = _props$attributes4.paddingT,
            paddingR = _props$attributes4.paddingR,
            paddingB = _props$attributes4.paddingB,
            paddingL = _props$attributes4.paddingL,
            marginT = _props$attributes4.marginT,
            marginR = _props$attributes4.marginR,
            marginB = _props$attributes4.marginB,
            marginL = _props$attributes4.marginL,
            borderType = _props$attributes4.borderType,
            borderWidth = _props$attributes4.borderWidth,
            borderRadius = _props$attributes4.borderRadius,
            borderColor = _props$attributes4.borderColor,
            background = _props$attributes4.background,
            wrapBorderType = _props$attributes4.wrapBorderType,
            wrapBorderWidth = _props$attributes4.wrapBorderWidth,
            wrapBorderRadius = _props$attributes4.wrapBorderRadius,
            wrapBorderColor = _props$attributes4.wrapBorderColor,
            wrapShadowBlur = _props$attributes4.wrapShadowBlur,
            wrapShadowColor = _props$attributes4.wrapShadowColor,
            wrapShadowHorizontal = _props$attributes4.wrapShadowHorizontal,
            wrapShadowVertical = _props$attributes4.wrapShadowVertical,
            wrapShadowPosition = _props$attributes4.wrapShadowPosition,
            wrapPaddingT = _props$attributes4.wrapPaddingT,
            wrapPaddingR = _props$attributes4.wrapPaddingR,
            wrapPaddingB = _props$attributes4.wrapPaddingB,
            wrapPaddingL = _props$attributes4.wrapPaddingL,
            wrapMarginT = _props$attributes4.wrapMarginT,
            wrapMarginR = _props$attributes4.wrapMarginR,
            wrapMarginB = _props$attributes4.wrapMarginB,
            wrapMarginL = _props$attributes4.wrapMarginL,
            urlCheck = _props$attributes4.urlCheck,
            link = _props$attributes4.link,
            target = _props$attributes4.target;


        return React.createElement(
            "div",
            {
                className: className + "__container",
                style: {
                    textAlign: align,
                    backgroundColor: background,
                    border: wrapBorderType,
                    borderWidth: wrapBorderWidth + "px",
                    borderRadius: wrapBorderRadius + "px",
                    borderColor: wrapBorderColor,
                    boxShadow: (wrapShadowHorizontal || 0) + "px " + (wrapShadowVertical || 0) + "px " + (wrapShadowBlur || 0) + "px " + wrapShadowColor + " " + wrapShadowPosition,
                    paddingTop: wrapPaddingT,
                    paddingRight: wrapPaddingR,
                    paddingBottom: wrapPaddingB,
                    paddingLeft: wrapPaddingL,
                    marginTop: wrapMarginT,
                    marginRight: wrapMarginR,
                    marginBottom: wrapMarginB,
                    marginLeft: wrapMarginL
                }
            },
            React.createElement(
                "a",
                {
                    className: className + "__link",
                    href: urlCheck && link,
                    target: target ? "_blank" : "_self"
                },
                React.createElement("i", {
                    className: className + " " + selectedIcon + " " + className + "__" + hoverEffect,
                    style: {
                        color: iconColor || "#6ec1e4",
                        backgroundColor: iconBack,
                        fontSize: iconSize || 50,
                        paddingTop: paddingT,
                        paddingRight: paddingR,
                        paddingBottom: paddingB,
                        paddingLeft: paddingL,
                        marginTop: marginT,
                        marginRight: marginR,
                        marginBottom: marginB,
                        marginLeft: marginL,
                        border: borderType,
                        borderWidth: borderWidth + "px",
                        borderRadius: borderRadius || 100 + "px",
                        borderColor: borderColor,
                        textShadow: (shadowHorizontal || 0) + "px " + (shadowVertical || 0) + "px " + (shadowBlur || 0) + "px " + shadowColor
                    }
                })
            )
        );
    }
}, {
    attributes: attributes,
    save: function save(props) {
        var _props$attributes5 = props.attributes,
            selectedIcon = _props$attributes5.selectedIcon,
            align = _props$attributes5.align,
            hoverEffect = _props$attributes5.hoverEffect,
            iconSize = _props$attributes5.iconSize,
            iconColor = _props$attributes5.iconColor,
            iconBack = _props$attributes5.iconBack,
            shadowBlur = _props$attributes5.shadowBlur,
            shadowColor = _props$attributes5.shadowColor,
            shadowHorizontal = _props$attributes5.shadowHorizontal,
            shadowVertical = _props$attributes5.shadowVertical,
            paddingT = _props$attributes5.paddingT,
            paddingR = _props$attributes5.paddingR,
            paddingB = _props$attributes5.paddingB,
            paddingL = _props$attributes5.paddingL,
            marginT = _props$attributes5.marginT,
            marginR = _props$attributes5.marginR,
            marginB = _props$attributes5.marginB,
            marginL = _props$attributes5.marginL,
            borderType = _props$attributes5.borderType,
            borderWidth = _props$attributes5.borderWidth,
            borderRadius = _props$attributes5.borderRadius,
            borderColor = _props$attributes5.borderColor,
            background = _props$attributes5.background,
            wrapBorderType = _props$attributes5.wrapBorderType,
            wrapBorderWidth = _props$attributes5.wrapBorderWidth,
            wrapBorderRadius = _props$attributes5.wrapBorderRadius,
            wrapBorderColor = _props$attributes5.wrapBorderColor,
            wrapPaddingT = _props$attributes5.wrapPaddingT,
            wrapPaddingR = _props$attributes5.wrapPaddingR,
            wrapPaddingB = _props$attributes5.wrapPaddingB,
            wrapPaddingL = _props$attributes5.wrapPaddingL,
            wrapMarginT = _props$attributes5.wrapMarginT,
            wrapMarginR = _props$attributes5.wrapMarginR,
            wrapMarginB = _props$attributes5.wrapMarginB,
            wrapMarginL = _props$attributes5.wrapMarginL,
            urlCheck = _props$attributes5.urlCheck,
            link = _props$attributes5.link,
            target = _props$attributes5.target;


        return React.createElement(
            "div",
            {
                className: className + "__container",
                style: {
                    textAlign: align,
                    backgroundColor: background,
                    border: wrapBorderType,
                    borderWidth: wrapBorderWidth + "px",
                    borderRadius: wrapBorderRadius + "px",
                    borderColor: wrapBorderColor,
                    paddingTop: wrapPaddingT,
                    paddingRight: wrapPaddingR,
                    paddingBottom: wrapPaddingB,
                    paddingLeft: wrapPaddingL,
                    marginTop: wrapMarginT,
                    marginRight: wrapMarginR,
                    marginBottom: wrapMarginB,
                    marginLeft: wrapMarginL
                }
            },
            React.createElement(
                "a",
                {
                    className: className + "__link",
                    href: urlCheck && link,
                    target: target ? "_blank" : "_self"
                },
                React.createElement("i", {
                    className: className + " " + selectedIcon + " " + className + "__" + hoverEffect,
                    style: {
                        color: iconColor,
                        backgroundColor: iconBack,
                        fontSize: iconSize,
                        paddingTop: paddingT,
                        paddingRight: paddingR,
                        paddingBottom: paddingB,
                        paddingLeft: paddingL,
                        marginTop: marginT,
                        marginRight: marginR,
                        marginBottom: marginB,
                        marginLeft: marginL,
                        border: borderType,
                        borderWidth: borderWidth + "px",
                        borderRadius: borderRadius + "px",
                        borderColor: borderColor,
                        textShadow: shadowHorizontal + "px " + shadowVertical + "px " + shadowBlur + "px " + shadowColor
                    }
                })
            )
        );
    }
}, {
    attributes: attributes,
    migrate: function migrate(attributes) {
        var newAttributes = {
            block_id: '',
            classMigrate: '',
            iconMargin: {
                "Desktop": {
                    top: attributes.marginT,
                    right: attributes.marginR,
                    bottom: attributes.marginB,
                    left: attributes.marginL
                },
                "Tablet": {
                    top: attributes.marginTTablet,
                    right: attributes.marginRTablet,
                    bottom: attributes.marginBTablet,
                    left: attributes.marginLTablet
                },
                "Mobile": {
                    top: attributes.marginTMobile,
                    right: attributes.marginRMobile,
                    bottom: attributes.marginBMobile,
                    left: attributes.marginLMobile
                }
            },
            iconPadding: {
                "Desktop": {
                    top: attributes.paddingT,
                    right: attributes.paddingR,
                    bottom: attributes.paddingB,
                    left: attributes.paddingL
                },
                "Tablet": {
                    top: attributes.paddingTTablet,
                    right: attributes.paddingRTablet,
                    bottom: attributes.paddingBTablet,
                    left: attributes.paddingLTablet
                },
                "Mobile": {
                    top: attributes.paddingTMobile,
                    right: attributes.paddingRMobile,
                    bottom: attributes.paddingBMobile,
                    left: attributes.paddingLMobile
                }
            },
            wrapMargin: {
                "Desktop": {
                    top: attributes.wrapMarginT,
                    right: attributes.wrapMarginR,
                    bottom: attributes.wrapMarginB,
                    left: attributes.wrapMarginL
                },
                "Tablet": {
                    top: attributes.wrapMarginTTablet,
                    right: attributes.wrapMarginRTablet,
                    bottom: attributes.wrapMarginBTablet,
                    left: attributes.wrapMarginLTablet
                },
                "Mobile": {
                    top: attributes.wrapMarginTMobile,
                    right: attributes.wrapMarginRMobile,
                    bottom: attributes.wrapMarginBMobile,
                    left: attributes.wrapMarginLMobile
                }
            },
            wrapPadding: {
                "Desktop": {
                    top: attributes.wrapPaddingT,
                    right: attributes.wrapPaddingR,
                    bottom: attributes.wrapPaddingB,
                    left: attributes.wrapPaddingL
                },
                "Tablet": {
                    top: attributes.wrapPaddingTTablet,
                    right: attributes.wrapPaddingRTablet,
                    bottom: attributes.wrapPaddingBTablet,
                    left: attributes.wrapPaddingLTablet
                },
                "Mobile": {
                    top: attributes.wrapPaddingTMobile,
                    right: attributes.wrapPaddingRMobile,
                    bottom: attributes.wrapPaddingBMobile,
                    left: attributes.wrapPaddingLMobile
                }
            },
            iconBorder: {
                borderColor: attributes.iconStyles[0].btnBorderColor,
                borderType: attributes.iconStyles[0].borderColor,
                borderRadius: {
                    "Desktop": {
                        top: "",
                        right: "",
                        bottom: "",
                        left: ""
                    },
                    "Tablet": {
                        top: "",
                        right: "",
                        bottom: "",
                        left: ""
                    },
                    "Mobile": {
                        top: "",
                        right: "",
                        bottom: "",
                        left: ""
                    }
                },
                borderWidth: {
                    "Desktop": {
                        top: attributes.iconBorderTop,
                        right: attributes.iconBorderRight,
                        bottom: attributes.iconBorderBottom,
                        left: attributes.iconBorderLeft
                    },
                    "Tablet": {
                        top: "",
                        right: "",
                        bottom: "",
                        left: ""
                    },
                    "Mobile": {
                        top: "",
                        right: "",
                        bottom: "",
                        left: ""
                    }
                }
            },
            containerBorder: {
                borderColor: attributes.containerStyles[0].wrapBorderType,
                borderType: attributes.containerStyles[0].wrapBorderColor,
                borderRadius: {
                    "Desktop": {
                        top: "",
                        right: "",
                        bottom: "",
                        left: ""
                    },
                    "Tablet": {
                        top: "",
                        right: "",
                        bottom: "",
                        left: ""
                    },
                    "Mobile": {
                        top: "",
                        right: "",
                        bottom: "",
                        left: ""
                    }
                },
                borderWidth: {
                    "Desktop": {
                        top: attributes.wrapBorderTop,
                        right: attributes.wrapBorderRight,
                        bottom: attributes.wrapBorderBottom,
                        left: attributes.wrapBorderLeft
                    },
                    "Tablet": {
                        top: "",
                        right: "",
                        bottom: "",
                        left: ""
                    },
                    "Mobile": {
                        top: "",
                        right: "",
                        bottom: "",
                        left: ""
                    }
                }
            }
        };
        return Object.assign(attributes, newAttributes);
    },
    save: function save(props) {
        var _props$attributes6 = props.attributes,
            block_id = _props$attributes6.block_id,
            iconBorder = _props$attributes6.iconBorder,
            wrapBorder = _props$attributes6.wrapBorder,
            selectedIcon = _props$attributes6.selectedIcon,
            align = _props$attributes6.align,
            hoverEffect = _props$attributes6.hoverEffect,
            iconStyles = _props$attributes6.iconStyles,
            containerStyles = _props$attributes6.containerStyles,
            borderWidth = _props$attributes6.borderWidth,
            iconBorderTop = _props$attributes6.iconBorderTop,
            iconBorderRight = _props$attributes6.iconBorderRight,
            iconBorderBottom = _props$attributes6.iconBorderBottom,
            iconBorderLeft = _props$attributes6.iconBorderLeft,
            wrapBorderWidth = _props$attributes6.wrapBorderWidth,
            wrapBorderTop = _props$attributes6.wrapBorderTop,
            wrapBorderRight = _props$attributes6.wrapBorderRight,
            wrapBorderBottom = _props$attributes6.wrapBorderBottom,
            wrapBorderLeft = _props$attributes6.wrapBorderLeft,
            urlCheck = _props$attributes6.urlCheck,
            link = _props$attributes6.link,
            target = _props$attributes6.target,
            hideDesktop = _props$attributes6.hideDesktop,
            hideTablet = _props$attributes6.hideTablet,
            hideMobile = _props$attributes6.hideMobile,
            backgroundType = _props$attributes6.backgroundType;


        return React.createElement(
            "div",
            {
                className: mainClasses + "__container " + hideDesktop + " " + hideTablet + " " + hideMobile,
                id: "premium-icon-" + block_id
            },
            React.createElement(
                "div",
                {
                    className: "premium-icon-container",
                    style: {
                        textAlign: align,
                        backgroundColor: backgroundType === "solid" ? containerStyles[0].containerBack : "transparent",
                        backgroundImage: btnbg,
                        backgroundRepeat: containerStyles[0].backgroundRepeat,
                        backgroundPosition: containerStyles[0].backgroundPosition,
                        backgroundSize: containerStyles[0].backgroundSize,
                        backgroundAttachment: containerStyles[0].fixed ? "fixed" : "unset",
                        borderStyle: containerBorder.borderType,
                        borderColor: containerBorder.borderColor,
                        boxShadow: (containerStyles[0].wrapShadowHorizontal || 0) + "px " + (containerStyles[0].wrapShadowVertical || 0) + "px " + (containerStyles[0].wrapShadowBlur || 0) + "px " + containerStyles[0].wrapShadowColor + " " + containerStyles[0].wrapShadowPosition

                    }
                },
                React.createElement(
                    "a",
                    {
                        className: "premium-icon__link",
                        href: urlCheck && link,
                        rel: "noopener noreferrer",
                        target: target ? "_blank" : "_self"
                    },
                    React.createElement("i", {
                        className: "premium-icon " + selectedIcon + " premium-icon__" + hoverEffect,
                        style: {
                            color: iconStyles[0].iconColor || "#6ec1e4",
                            backgroundColor: iconStyles[0].iconBack,
                            fontSize: (iconStyles[0].iconSize || 50) + iconStyles[0].iconSizeUnit,
                            borderStyle: iconBorder.borderType,
                            borderColor: iconBorder.borderColor,
                            textShadow: (iconStyles[0].shadowHorizontal || 0) + "px " + (iconStyles[0].shadowVertical || 0) + "px " + (iconStyles[0].shadowBlur || 0) + "px " + iconStyles[0].shadowColor
                        }
                    })
                )
            )
        );
    }
}];

exports.default = deprecatedContent;

/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
var attributes = {
    block_id: {
        type: "string"
    },
    classMigrate: {
        type: "boolean",
        default: false
    },
    wrapBorder: {
        type: "boolean",
        default: false
    },
    iconType: {
        type: "string",
        default: "dash"
    },
    selectedIcon: {
        type: "string",
        default: "dashicons dashicons-admin-site"
    },
    align: {
        type: "string",
        default: "center"
    },
    hoverEffect: {
        type: "string",
        default: "none"
    },
    iconStyles: {
        type: "array",
        default: [{
            iconSizeUnit: 'px',
            iconSize: '',
            iconColor: '',
            iconBack: '',
            iconOpacity: '1',
            shadowColor: '',
            shadowBlur: '',
            shadowHorizontal: '',
            shadowVertical: ''
        }]
    },
    containerStyles: {
        type: "array",
        default: [{
            containerBack: '',
            backgroundOpacity: 1,
            backgroundImageID: '',
            backgroundImageURL: '',
            backgroundRepeat: 'no-reapet',
            backgroundPosition: 'top center',
            backgroundSize: 'auto',
            fixed: false,
            wrapShadowColor: '',
            wrapShadowBlur: '0',
            wrapShadowHorizontal: '0',
            wrapShadowVertical: '0',
            wrapShadowPosition: '',
            gradientLocationOne: '0',
            gradientColorTwo: '',
            gradientLocationTwo: '100',
            gradientType: 'linear',
            gradientAngle: '180',
            gradientPosition: 'center center'
        }]
    },
    background: {
        type: "string"
    },
    urlCheck: {
        type: "boolean"
    },
    link: {
        type: "string"
    },
    target: {
        type: "boolean"
    },
    hideDesktop: {
        type: 'boolean',
        default: false
    },
    hideTablet: {
        type: 'boolean',
        default: false
    },
    hideMobile: {
        type: 'boolean',
        default: false
    },
    backgroundType: {
        type: "string",
        default: ""
    },
    iconMargin: {
        type: "object",
        default: {
            Desktop: {
                top: "",
                right: "",
                bottom: "",
                left: ""
            },
            Tablet: {
                top: "",
                right: "",
                bottom: "",
                left: ""
            },
            Mobile: {
                top: "",
                right: "",
                bottom: "",
                left: ""
            },
            unit: "px"
        }
    },
    iconPadding: {
        type: "object",
        default: {
            Desktop: {
                top: "",
                right: "",
                bottom: "",
                left: ""
            },
            Tablet: {
                top: "",
                right: "",
                bottom: "",
                left: ""
            },
            Mobile: {
                top: "",
                right: "",
                bottom: "",
                left: ""
            },
            unit: "px"
        }
    },
    wrapMargin: {
        type: "object",
        default: {
            Desktop: {
                top: "",
                right: "",
                bottom: "",
                left: ""
            },
            Tablet: {
                top: "",
                right: "",
                bottom: "",
                left: ""
            },
            Mobile: {
                top: "",
                right: "",
                bottom: "",
                left: ""
            },
            unit: "px"
        }
    },
    wrapPadding: {
        type: "object",
        default: {
            Desktop: {
                top: "",
                right: "",
                bottom: "",
                left: ""
            },
            Tablet: {
                top: "",
                right: "",
                bottom: "",
                left: ""
            },
            Mobile: {
                top: "",
                right: "",
                bottom: "",
                left: ""
            },
            unit: "px"
        }
    },
    iconBorder: {
        type: "object",
        default: {
            borderColor: "",
            borderType: "none",
            borderRadius: {
                Desktop: {
                    top: "",
                    right: "",
                    bottom: "",
                    left: ""
                },
                Tablet: {
                    top: "",
                    right: "",
                    bottom: "",
                    left: ""
                },
                Mobile: {
                    top: "",
                    right: "",
                    bottom: "",
                    left: ""
                }
            },
            borderWidth: {
                Desktop: {
                    top: "",
                    right: "",
                    bottom: "",
                    left: ""
                }

            }
        }
    },
    containerBorder: {
        type: "object",
        default: {
            borderColor: "",
            borderType: "none",
            borderRadius: {
                Desktop: {
                    top: "",
                    right: "",
                    bottom: "",
                    left: ""
                },
                Tablet: {
                    top: "",
                    right: "",
                    bottom: "",
                    left: ""
                },
                Mobile: {
                    top: "",
                    right: "",
                    bottom: "",
                    left: ""
                }
            },
            borderWidth: {
                Desktop: {
                    top: "",
                    right: "",
                    bottom: "",
                    left: ""
                },
                Tablet: {
                    top: "",
                    right: "",
                    bottom: "",
                    left: ""
                },
                Mobile: {
                    top: "",
                    right: "",
                    bottom: "",
                    left: ""
                }
            }
        }
    }
};
exports.default = attributes;

/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _settings = __webpack_require__(1);

var _icons = __webpack_require__(4);

var _icons2 = _interopRequireDefault(_icons);

var _edit = __webpack_require__(264);

var _edit2 = _interopRequireDefault(_edit);

var _save = __webpack_require__(265);

var _save2 = _interopRequireDefault(_save);

var _deprecated = __webpack_require__(266);

var _deprecated2 = _interopRequireDefault(_deprecated);

var _attributes = __webpack_require__(267);

var _attributes2 = _interopRequireDefault(_attributes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __ = wp.i18n.__;
var registerBlockType = wp.blocks.registerBlockType;


registerBlockType("premium/icon-box", {
    title: __("Icon Box"),
    icon: React.createElement(_icons2.default, { icon: "icon-box" }),
    category: "premium-blocks",
    attributes: _attributes2.default,
    supports: {
        inserter: _settings.iconBox
    },
    example: {},
    edit: _edit2.default,
    save: _save2.default,
    deprecated: _deprecated2.default
});

/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _classnames = __webpack_require__(0);

var _classnames2 = _interopRequireDefault(_classnames);

var _settings = __webpack_require__(1);

var _premiumTypo = __webpack_require__(7);

var _premiumTypo2 = _interopRequireDefault(_premiumTypo);

var _reactFonticonpicker = __webpack_require__(24);

var _reactFonticonpicker2 = _interopRequireDefault(_reactFonticonpicker);

var _premiumIconsList = __webpack_require__(31);

var _premiumIconsList2 = _interopRequireDefault(_premiumIconsList);

var _premiumBorder = __webpack_require__(6);

var _premiumBorder2 = _interopRequireDefault(_premiumBorder);

var _premiumBackground = __webpack_require__(105);

var _premiumBackground2 = _interopRequireDefault(_premiumBackground);

var _premiumMediaUpload = __webpack_require__(12);

var _premiumMediaUpload2 = _interopRequireDefault(_premiumMediaUpload);

var _premiumResponsiveTabs = __webpack_require__(8);

var _premiumResponsiveTabs2 = _interopRequireDefault(_premiumResponsiveTabs);

var _singleRangeControl = __webpack_require__(3);

var _singleRangeControl2 = _interopRequireDefault(_singleRangeControl);

var _ColorComponent = __webpack_require__(2);

var _ColorComponent2 = _interopRequireDefault(_ColorComponent);

var _radioControl = __webpack_require__(10);

var _radioControl2 = _interopRequireDefault(_radioControl);

var _premiumResponsiveSpacing = __webpack_require__(51);

var _premiumResponsiveSpacing2 = _interopRequireDefault(_premiumResponsiveSpacing);

var _fontLoader = __webpack_require__(22);

var _fontLoader2 = _interopRequireDefault(_fontLoader);

var _PremiumShadow = __webpack_require__(5);

var _PremiumShadow2 = _interopRequireDefault(_PremiumShadow);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var __ = wp.i18n.__;
var _wp$components = wp.components,
    PanelBody = _wp$components.PanelBody,
    SelectControl = _wp$components.SelectControl,
    ToggleControl = _wp$components.ToggleControl,
    TabPanel = _wp$components.TabPanel;
var _wp$element = wp.element,
    Fragment = _wp$element.Fragment,
    Component = _wp$element.Component;
var withSelect = wp.data.withSelect;
var _wp$blockEditor = wp.blockEditor,
    BlockControls = _wp$blockEditor.BlockControls,
    InspectorControls = _wp$blockEditor.InspectorControls,
    RichText = _wp$blockEditor.RichText,
    AlignmentToolbar = _wp$blockEditor.AlignmentToolbar,
    URLInput = _wp$blockEditor.URLInput;

var edit = function (_Component) {
    _inherits(edit, _Component);

    function edit() {
        _classCallCheck(this, edit);

        return _possibleConstructorReturn(this, (edit.__proto__ || Object.getPrototypeOf(edit)).apply(this, arguments));
    }

    _createClass(edit, [{
        key: "componentDidMount",
        value: function componentDidMount() {
            var _props = this.props,
                setAttributes = _props.setAttributes,
                clientId = _props.clientId;

            setAttributes({ block_id: clientId });
            this.getPreviewSize = this.getPreviewSize.bind(this);
        }
    }, {
        key: "getPreviewSize",
        value: function getPreviewSize(device, desktopSize, tabletSize, mobileSize) {
            if (device === 'Mobile') {
                if (undefined !== mobileSize && '' !== mobileSize) {
                    return mobileSize;
                } else if (undefined !== tabletSize && '' !== tabletSize) {
                    return tabletSize;
                }
            } else if (device === 'Tablet') {
                if (undefined !== tabletSize && '' !== tabletSize) {
                    return tabletSize;
                }
            }
            return desktopSize;
        }
    }, {
        key: "render",
        value: function render() {
            var _props2 = this.props,
                isSelected = _props2.isSelected,
                setAttributes = _props2.setAttributes,
                className = _props2.className,
                blockId = _props2.clientId,
                attributes = _props2.attributes;

            var saveContainerStyle = function saveContainerStyle(value) {
                var newUpdate = containerStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({ containerStyles: newUpdate });
            };

            var saveTitleStyle = function saveTitleStyle(value) {
                var newUpdate = titleStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({ titleStyles: newUpdate });
            };

            var saveButtonStyle = function saveButtonStyle(value) {
                var newUpdate = btnStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({ btnStyles: newUpdate });
            };

            var saveDescriptionStyle = function saveDescriptionStyle(value) {
                var newUpdate = descStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({ descStyles: newUpdate });
            };

            var block_id = attributes.block_id,
                borderIconBox = attributes.borderIconBox,
                btnBorderIconBox = attributes.btnBorderIconBox,
                align = attributes.align,
                iconImage = attributes.iconImage,
                iconImgId = attributes.iconImgId,
                iconImgUrl = attributes.iconImgUrl,
                hoverEffect = attributes.hoverEffect,
                iconChecked = attributes.iconChecked,
                iconPos = attributes.iconPos,
                iconHPos = attributes.iconHPos,
                iconVPos = attributes.iconVPos,
                iconSize = attributes.iconSize,
                iconRadius = attributes.iconRadius,
                iconColor = attributes.iconColor,
                iconBackColor = attributes.iconBackColor,
                selectedIcon = attributes.selectedIcon,
                titleChecked = attributes.titleChecked,
                titleText = attributes.titleText,
                descText = attributes.descText,
                descChecked = attributes.descChecked,
                btnChecked = attributes.btnChecked,
                btnEffect = attributes.btnEffect,
                effectDir = attributes.effectDir,
                btnTarget = attributes.btnTarget,
                btnText = attributes.btnText,
                btnLink = attributes.btnLink,
                btnHoverBorder = attributes.btnHoverBorder,
                hideDesktop = attributes.hideDesktop,
                hideTablet = attributes.hideTablet,
                hideMobile = attributes.hideMobile,
                titleStyles = attributes.titleStyles,
                descStyles = attributes.descStyles,
                btnStyles = attributes.btnStyles,
                containerStyles = attributes.containerStyles,
                iconType = attributes.iconType,
                containerPadding = attributes.containerPadding,
                containerMargin = attributes.containerMargin,
                btnMargin = attributes.btnMargin,
                descMargin = attributes.descMargin,
                titleMargin = attributes.titleMargin,
                btnBorder = attributes.btnBorder,
                containerBorder = attributes.containerBorder;


            var imgIcon = [{
                label: __("Icon", 'premium-blocks-for-gutenberg'),
                value: "icon"
            }, {
                label: __("Image", 'premium-blocks-for-gutenberg'),
                value: "image"
            }];

            var EFFECTS = [{
                value: "none",
                label: __("None", 'premium-blocks-for-gutenberg')
            }, {
                value: "pulse",
                label: __("Pulse", 'premium-blocks-for-gutenberg')
            }, {
                value: "rotate",
                label: __("Rotate", 'premium-blocks-for-gutenberg')
            }, {
                value: "drotate",
                label: __("3D Rotate", 'premium-blocks-for-gutenberg')
            }, {
                value: "buzz",
                label: __("Buzz", 'premium-blocks-for-gutenberg')
            }, {
                value: "drop",
                label: __("Drop Shadow", 'premium-blocks-for-gutenberg')
            }, {
                value: "wobble",
                label: __("Wobble", 'premium-blocks-for-gutenberg')
            }];

            var BTN_EFFECTS = [{
                value: "none",
                label: __("None", 'premium-blocks-for-gutenberg')
            }, {
                value: "slide",
                label: __("Slide", 'premium-blocks-for-gutenberg')
            }];

            var DIRECTION = [{
                value: "top",
                label: __("Top to Bottom", 'premium-blocks-for-gutenberg')
            }, {
                value: "bottom",
                label: __("Bottom to Top", 'premium-blocks-for-gutenberg')
            }, {
                value: "left",
                label: __("Left to Right", 'premium-blocks-for-gutenberg')
            }, {
                value: "right",
                label: __("Right to Left", 'premium-blocks-for-gutenberg')
            }];

            var ICON_POS = [{
                label: __("Inline", 'premium-blocks-for-gutenberg'),
                value: "inline"
            }, {
                label: __("Block", 'premium-blocks-for-gutenberg'),
                value: "block"
            }];

            var ICON_HPOS = [{
                label: __("Before", 'premium-blocks-for-gutenberg'),
                value: "before"
            }, {
                label: __("After", 'premium-blocks-for-gutenberg'),
                value: "after"
            }];

            var ICON_VPOS = [{
                label: __("Top", 'premium-blocks-for-gutenberg'),
                value: "top"
            }, {
                label: __("Middle", 'premium-blocks-for-gutenberg'),
                value: "center"
            }, {
                label: __("Bottom", 'premium-blocks-for-gutenberg'),
                value: "bottom"
            }];

            var loadTitleGoogleFonts = void 0;
            var loadDescriptionGoogleFonts = void 0;
            if (titleStyles[0].titleFont !== 'Default') {
                var titleConfig = {
                    google: {
                        families: [titleStyles[0].titleFont]
                    }
                };
                loadTitleGoogleFonts = React.createElement(_fontLoader2.default, { config: titleConfig });
            }
            if (descStyles[0].descFont !== 'Default') {
                var descriptionConfig = {
                    google: {
                        families: [descStyles[0].descFont]
                    }
                };
                loadDescriptionGoogleFonts = React.createElement(_fontLoader2.default, { config: descriptionConfig });
            }

            var mainClasses = (0, _classnames2.default)(className, "premium-icon-box");
            var titleFontSize = this.getPreviewSize(this.props.deviceType, titleStyles[0].titleSize, titleStyles[0].titleSizeTablet, titleStyles[0].titleSizeMobile);
            var descriptionFontSize = this.getPreviewSize(this.props.deviceType, descStyles[0].descSize, descStyles[0].descSizeTablet, descStyles[0].descSizeMobile);
            var buttonFontSize = this.getPreviewSize(this.props.deviceType, btnStyles[0].btnSize, btnStyles[0].btnSizeTablet, btnStyles[0].btnSizeMobile);
            var containerPaddingTop = this.getPreviewSize(this.props.deviceType, containerPadding.Desktop.top, containerPadding.Tablet.top, containerPadding.Mobile.top);
            var containerPaddingRight = this.getPreviewSize(this.props.deviceType, containerPadding.Desktop.right, containerPadding.Tablet.right, containerPadding.Mobile.right);
            var containerPaddingBottom = this.getPreviewSize(this.props.deviceType, containerPadding.Desktop.bottom, containerPadding.Tablet.bottom, containerPadding.Mobile.bottom);
            var containerPaddingLeft = this.getPreviewSize(this.props.deviceType, containerPadding.Desktop.left, containerPadding.Tablet.left, containerPadding.Mobile.left);
            var containerMarginTop = this.getPreviewSize(this.props.deviceType, containerMargin.Desktop.top, containerMargin.Tablet.top, containerMargin.Mobile.top);
            var containerMarginRight = this.getPreviewSize(this.props.deviceType, containerMargin.Desktop.right, containerMargin.Tablet.right, containerMargin.Mobile.right);
            var containerMarginBottom = this.getPreviewSize(this.props.deviceType, containerMargin.Desktop.bottom, containerMargin.Tablet.bottom, containerMargin.Mobile.bottom);
            var containerMarginLeft = this.getPreviewSize(this.props.deviceType, containerMargin.Desktop.left, containerMargin.Tablet.left, containerMargin.Mobile.left);
            var titleMarginTop = this.getPreviewSize(this.props.deviceType, titleMargin.Desktop.top, titleMargin.Tablet.top, titleMargin.Mobile.top);
            var titleMarginRight = this.getPreviewSize(this.props.deviceType, titleMargin.Desktop.right, titleMargin.Tablet.right, titleMargin.Mobile.right);
            var titleMarginBottom = this.getPreviewSize(this.props.deviceType, titleMargin.Desktop.bottom, titleMargin.Tablet.bottom, titleMargin.Mobile.bottom);
            var titlePaddingLeft = this.getPreviewSize(this.props.deviceType, titleMargin.Desktop.left, titleMargin.Tablet.left, titleMargin.Mobile.left);
            var descMarginTop = this.getPreviewSize(this.props.deviceType, descMargin.Desktop.top, descMargin.Tablet.top, descMargin.Mobile.top);
            var descMarginRight = this.getPreviewSize(this.props.deviceType, descMargin.Desktop.right, descMargin.Tablet.right, descMargin.Mobile.right);
            var descMarginBottom = this.getPreviewSize(this.props.deviceType, descMargin.Desktop.bottom, descMargin.Tablet.bottom, descMargin.Mobile.bottom);
            var descMarginLeft = this.getPreviewSize(this.props.deviceType, descMargin.Desktop.left, descMargin.Tablet.left, descMargin.Mobile.left);
            var btnMarginTop = this.getPreviewSize(this.props.deviceType, btnMargin.Desktop.top, btnMargin.Tablet.top, btnMargin.Mobile.top);
            var btnMarginRight = this.getPreviewSize(this.props.deviceType, btnMargin.Desktop.right, btnMargin.Tablet.right, btnMargin.Mobile.right);
            var btnMarginBottom = this.getPreviewSize(this.props.deviceType, btnMargin.Desktop.bottom, btnMargin.Tablet.bottom, btnMargin.Mobile.bottom);
            var btnMarginLeft = this.getPreviewSize(this.props.deviceType, btnMargin.Desktop.left, btnMargin.Tablet.left, btnMargin.Mobile.left);
            var BtnBorderWidthTop = this.getPreviewSize(this.props.deviceType, btnBorder.borderWidth.Desktop.top, btnBorder.borderWidth.Tablet.top, btnBorder.borderWidth.Mobile.top);
            var BtnBorderWidthRight = this.getPreviewSize(this.props.deviceType, btnBorder.borderWidth.Desktop.right, btnBorder.borderWidth.Tablet.right, btnBorder.borderWidth.Mobile.right);
            var BtnBorderWidthBottom = this.getPreviewSize(this.props.deviceType, btnBorder.borderWidth.Desktop.bottom, btnBorder.borderWidth.Tablet.bottom, btnBorder.borderWidth.Mobile.bottom);
            var BtnBorderWidthLeft = this.getPreviewSize(this.props.deviceType, btnBorder.borderWidth.Desktop.left, btnBorder.borderWidth.Tablet.left, btnBorder.borderWidth.Mobile.left);
            var BtnBorderRadiusTop = this.getPreviewSize(this.props.deviceType, btnBorder.borderRadius.Desktop.top, btnBorder.borderRadius.Tablet.top, btnBorder.borderRadius.Mobile.top);
            var BtnBorderRadiusRight = this.getPreviewSize(this.props.deviceType, btnBorder.borderRadius.Desktop.right, btnBorder.borderRadius.Tablet.right, btnBorder.borderRadius.Mobile.right);
            var BtnBorderRadiusBottom = this.getPreviewSize(this.props.deviceType, btnBorder.borderRadius.Desktop.bottom, btnBorder.borderRadius.Tablet.bottom, btnBorder.borderRadius.Mobile.bottom);
            var BtnBorderRadiusLeft = this.getPreviewSize(this.props.deviceType, btnBorder.borderRadius.Desktop.left, btnBorder.borderRadius.Tablet.left, btnBorder.borderRadius.Mobile.left);
            var ContainerBorderWidthTop = this.getPreviewSize(this.props.deviceType, containerBorder.borderWidth.Desktop.top, containerBorder.borderWidth.Tablet.top, containerBorder.borderWidth.Mobile.top);
            var ContainerBorderWidthRight = this.getPreviewSize(this.props.deviceType, containerBorder.borderWidth.Desktop.right, containerBorder.borderWidth.Tablet.right, containerBorder.borderWidth.Mobile.right);
            var ContainerBorderWidthBottom = this.getPreviewSize(this.props.deviceType, containerBorder.borderWidth.Desktop.bottom, containerBorder.borderWidth.Tablet.bottom, containerBorder.borderWidth.Mobile.bottom);
            var ContainerBorderWidthLeft = this.getPreviewSize(this.props.deviceType, containerBorder.borderWidth.Desktop.left, containerBorder.borderWidth.Tablet.left, containerBorder.borderWidth.Mobile.left);
            var ContainerBorderRadiusTop = this.getPreviewSize(this.props.deviceType, containerBorder.borderRadius.Desktop.top, containerBorder.borderRadius.Tablet.top, containerBorder.borderRadius.Mobile.top);
            var ContainerBorderRadiusRight = this.getPreviewSize(this.props.deviceType, containerBorder.borderRadius.Desktop.right, containerBorder.borderRadius.Tablet.right, containerBorder.borderRadius.Mobile.right);
            var ContainerBorderRadiusBottom = this.getPreviewSize(this.props.deviceType, containerBorder.borderRadius.Desktop.bottom, containerBorder.borderRadius.Tablet.bottom, containerBorder.borderRadius.Mobile.bottom);
            var ContainerBorderRadiusLeft = this.getPreviewSize(this.props.deviceType, containerBorder.borderRadius.Desktop.left, containerBorder.borderRadius.Tablet.left, containerBorder.borderRadius.Mobile.left);

            return [isSelected && React.createElement(
                BlockControls,
                { key: "controls" },
                React.createElement(AlignmentToolbar, {
                    value: align,
                    onChange: function onChange(newAlign) {
                        return setAttributes({ align: newAlign });
                    }
                })
            ), isSelected && React.createElement(
                InspectorControls,
                { key: "inspector" },
                React.createElement(
                    PanelBody,
                    {
                        title: __("Display Options", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(ToggleControl, {
                        label: __("Icon", 'premium-blocks-for-gutenberg'),
                        checked: iconChecked,
                        onChange: function onChange(newValue) {
                            return setAttributes({ iconChecked: newValue });
                        }
                    }),
                    React.createElement(ToggleControl, {
                        label: __("Title", 'premium-blocks-for-gutenberg'),
                        checked: titleChecked,
                        onChange: function onChange(newValue) {
                            return setAttributes({ titleChecked: newValue });
                        }
                    }),
                    React.createElement(ToggleControl, {
                        label: __("Description", 'premium-blocks-for-gutenberg'),
                        checked: descChecked,
                        onChange: function onChange(newValue) {
                            return setAttributes({ descChecked: newValue });
                        }
                    }),
                    React.createElement(ToggleControl, {
                        label: __("Button", 'premium-blocks-for-gutenberg'),
                        checked: btnChecked,
                        onChange: function onChange(newValue) {
                            return setAttributes({ btnChecked: newValue });
                        }
                    })
                ),
                iconChecked && React.createElement(
                    PanelBody,
                    {
                        title: __("Icon", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(SelectControl, {
                        label: __("Icon Position", 'premium-blocks-for-gutenberg'),
                        options: ICON_POS,
                        value: iconPos,
                        onChange: function onChange(newValue) {
                            return setAttributes({ iconPos: newValue });
                        }
                    }),
                    "inline" === iconPos && React.createElement(
                        Fragment,
                        null,
                        React.createElement(SelectControl, {
                            label: __("Horizontal Position", 'premium-blocks-for-gutenberg'),
                            options: ICON_HPOS,
                            value: iconHPos,
                            onChange: function onChange(newValue) {
                                return setAttributes({ iconHPos: newValue });
                            }
                        }),
                        React.createElement(SelectControl, {
                            label: __("Vertical Position", 'premium-blocks-for-gutenberg'),
                            options: ICON_VPOS,
                            value: iconVPos,
                            onChange: function onChange(newValue) {
                                return setAttributes({ iconVPos: newValue });
                            }
                        })
                    ),
                    React.createElement(SelectControl, {
                        label: __("Icon Type", 'premium-blocks-for-gutenberg'),
                        options: imgIcon,
                        value: iconImage,
                        onChange: function onChange(newType) {
                            return setAttributes({ iconImage: newType });
                        }
                    }),
                    "icon" === iconImage && React.createElement(
                        Fragment,
                        null,
                        React.createElement(
                            "p",
                            { className: "premium-editor-paragraph" },
                            __("Select Icon", 'premium-blocks-for-gutenberg')
                        ),
                        React.createElement(_reactFonticonpicker2.default, {
                            icons: _premiumIconsList2.default,
                            onChange: function onChange(newIcon) {
                                return setAttributes({ selectedIcon: newIcon });
                            },
                            value: selectedIcon,
                            isMulti: false,
                            appendTo: "body",
                            noSelectedPlaceholder: __("Select Icon", 'premium-blocks-for-gutenberg')
                        })
                    ),
                    "image" === iconImage && React.createElement(
                        Fragment,
                        null,
                        React.createElement(_premiumMediaUpload2.default, {
                            type: "image",
                            imageID: iconImgId,
                            imageURL: iconImgUrl,
                            onSelectMedia: function onSelectMedia(media) {
                                setAttributes({
                                    iconImgId: media.id,
                                    iconImgUrl: media.url
                                });
                            },
                            onRemoveImage: function onRemoveImage() {
                                return setAttributes({
                                    iconImgUrl: "",
                                    iconImgId: ""
                                });
                            }
                        }),
                        React.createElement(_singleRangeControl2.default, {
                            label: __("Border Radius (PX)", 'premium-blocks-for-gutenberg'),
                            value: iconRadius,
                            onChange: function onChange(newValue) {
                                return setAttributes({ iconRadius: newValue || 0 });
                            },
                            showUnit: false,
                            defaultValue: 0
                        })
                    ),
                    React.createElement(SelectControl, {
                        label: __("Hover Effect", 'premium-blocks-for-gutenberg'),
                        options: EFFECTS,
                        value: hoverEffect,
                        onChange: function onChange(newEffect) {
                            return setAttributes({ hoverEffect: newEffect });
                        }
                    }),
                    React.createElement(_singleRangeControl2.default, {
                        label: __("Size (PX)", 'premium-blocks-for-gutenberg'),
                        value: iconSize,
                        min: "10",
                        max: "200",
                        onChange: function onChange(newValue) {
                            return setAttributes({ iconSize: newValue || 30 });
                        },
                        showUnit: false,
                        defaultValue: ''
                    })
                ),
                titleChecked && React.createElement(
                    PanelBody,
                    {
                        title: __("Title", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(_radioControl2.default, {
                        label: __("Title", 'premium-blocks-for-gutenberg'),
                        choices: ['H1', 'H2', 'H3', 'H4', 'H5', 'H6'],
                        value: titleStyles[0].titleTag,
                        onChange: function onChange(newValue) {
                            return saveTitleStyle({ titleTag: newValue });
                        }
                    }),
                    React.createElement(_premiumTypo2.default, {
                        components: ["responsiveSize", "weight", "style", "upper", "spacing", "line", "family"],
                        setAttributes: saveTitleStyle,
                        fontSizeType: {
                            value: titleStyles[0].titleSizeUnit,
                            label: __("titleSizeUnit", 'premium-blocks-for-gutenberg')
                        },
                        fontSize: titleStyles[0].titleSize,
                        fontSizeMobile: titleStyles[0].titleSizeMobile,
                        fontSizeTablet: titleStyles[0].titleSizeTablet,
                        onChangeSize: function onChangeSize(newSize) {
                            return saveTitleStyle({ titleSize: newSize });
                        },
                        onChangeTabletSize: function onChangeTabletSize(newSize) {
                            return saveTitleStyle({ titleSizeTablet: newSize });
                        },
                        onChangeMobileSize: function onChangeMobileSize(newSize) {
                            return saveTitleStyle({ titleSizeMobile: newSize });
                        },
                        weight: titleStyles[0].titleWeight,
                        style: titleStyles[0].titleStyle,
                        spacing: titleStyles[0].titleLetter,
                        line: titleStyles[0].titleLine,
                        upper: titleStyles[0].titleUpper,
                        fontFamily: titleStyles[0].titleFont,
                        onChangeWeight: function onChangeWeight(newWeight) {
                            return saveTitleStyle({ titleWeight: newWeight || 500 });
                        },
                        onChangeStyle: function onChangeStyle(newStyle) {
                            return saveTitleStyle({ titleStyle: newStyle });
                        },
                        onChangeSpacing: function onChangeSpacing(newValue) {
                            return saveTitleStyle({ titleLetter: newValue });
                        },
                        onChangeLine: function onChangeLine(newValue) {
                            return saveTitleStyle({ titleLine: newValue });
                        },
                        onChangeUpper: function onChangeUpper(check) {
                            return saveTitleStyle({ titleUpper: check });
                        },
                        onChangeFamily: function onChangeFamily(fontFamily) {
                            return saveTitleStyle({ titleFont: fontFamily });
                        }
                    }),
                    React.createElement(_PremiumShadow2.default, {
                        label: __("Text Shadow", 'premium-blocks-for-gutenberg'),
                        color: titleStyles[0].titleShadowColor,
                        blur: titleStyles[0].titleShadowBlur,
                        horizontal: titleStyles[0].titleShadowHorizontal,
                        vertical: titleStyles[0].titleShadowVertical,
                        onChangeColor: function onChangeColor(newColor) {
                            return saveTitleStyle({ titleShadowColor: newColor || "transparent" });
                        },
                        onChangeBlur: function onChangeBlur(newBlur) {
                            return saveTitleStyle({ titleShadowBlur: newBlur || 0 });
                        },
                        onChangehHorizontal: function onChangehHorizontal(newValue) {
                            return saveTitleStyle({ titleShadowHorizontal: newValue || 0 });
                        },
                        onChangeVertical: function onChangeVertical(newValue) {
                            return saveTitleStyle({ titleShadowVertical: newValue || 0 });
                        }
                    }),
                    React.createElement(_premiumResponsiveSpacing2.default, {
                        label: __('Margin', 'premium-blocks-for-gutenberg'),
                        value: titleMargin,
                        onChange: function onChange(value) {
                            return setAttributes({ titleMargin: value });
                        },
                        showUnits: false,
                        responsive: true
                    })
                ),
                descChecked && React.createElement(
                    PanelBody,
                    {
                        title: __("Description", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(_premiumTypo2.default, {
                        components: ["responsiveSize", "weight", "line", "family"],
                        setAttributes: saveDescriptionStyle,
                        fontSizeType: {
                            value: descStyles[0].descSizeUnit,
                            label: __("descSizeUnit", 'premium-blocks-for-gutenberg')
                        },
                        fontSize: descStyles[0].descSize,
                        fontSizeMobile: descStyles[0].descSizeMobile,
                        fontSizeTablet: descStyles[0].descSizeTablet,
                        onChangeSize: function onChangeSize(newSize) {
                            return saveDescriptionStyle({ descSize: newSize });
                        },
                        onChangeTabletSize: function onChangeTabletSize(newSize) {
                            return saveDescriptionStyle({ descSizeTablet: newSize });
                        },
                        onChangeMobileSize: function onChangeMobileSize(newSize) {
                            return saveDescriptionStyle({ descSizeMobile: newSize });
                        },
                        fontFamily: descStyles[0].descFont,
                        weight: descStyles[0].descWeight,
                        line: descStyles[0].descLine,
                        onChangeWeight: function onChangeWeight(newWeight) {
                            return saveDescriptionStyle({ descWeight: newWeight || 500 });
                        },
                        onChangeLine: function onChangeLine(newValue) {
                            return saveDescriptionStyle({ descLine: newValue });
                        },
                        onChangeFamily: function onChangeFamily(fontFamily) {
                            return saveDescriptionStyle({ descFont: fontFamily });
                        }
                    }),
                    React.createElement(_premiumResponsiveSpacing2.default, {
                        label: __('Margin', 'premium-blocks-for-gutenberg'),
                        value: descMargin,
                        onChange: function onChange(value) {
                            return setAttributes({ descMargin: value });
                        },
                        showUnits: false,
                        responsive: true
                    })
                ),
                btnChecked && React.createElement(
                    PanelBody,
                    {
                        title: __("Button", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(SelectControl, {
                        options: BTN_EFFECTS,
                        label: __("Hover Effect", 'premium-blocks-for-gutenberg'),
                        value: btnEffect,
                        onChange: function onChange(newValue) {
                            return setAttributes({ btnEffect: newValue });
                        }
                    }),
                    "slide" === btnEffect && React.createElement(SelectControl, {
                        options: DIRECTION,
                        label: __("Direction", 'premium-blocks-for-gutenberg'),
                        value: effectDir,
                        onChange: function onChange(newValue) {
                            return setAttributes({ effectDir: newValue });
                        }
                    }),
                    React.createElement(ToggleControl, {
                        label: __("Open link in new tab", 'premium-blocks-for-gutenberg'),
                        checked: btnTarget,
                        onChange: function onChange(newValue) {
                            return setAttributes({ btnTarget: newValue });
                        }
                    }),
                    React.createElement(_premiumTypo2.default, {
                        components: ["responsiveSize", "weight", "style", "upper", "spacing"],

                        setAttributes: saveButtonStyle,
                        fontSizeType: {
                            value: btnStyles[0].btnSizeUnit,
                            label: __("btnSizeUnit", 'premium-blocks-for-gutenberg')
                        },
                        fontSize: btnStyles[0].btnSize,
                        fontSizeMobile: btnStyles[0].btnSizeMobile,
                        fontSizeTablet: btnStyles[0].btnSizeTablet,
                        weight: btnStyles[0].btnWeight,
                        style: btnStyles[0].btnStyle,
                        spacing: btnStyles[0].btnLetter,
                        upper: btnStyles[0].btnUpper,
                        onChangeWeight: function onChangeWeight(newWeight) {
                            return saveButtonStyle({ btnWeight: newWeight || 500 });
                        },
                        onChangeStyle: function onChangeStyle(newStyle) {
                            return saveButtonStyle({ btnStyle: newStyle });
                        },
                        onChangeSpacing: function onChangeSpacing(newValue) {
                            return saveButtonStyle({ btnLetter: newValue });
                        },
                        onChangeUpper: function onChangeUpper(check) {
                            return saveButtonStyle({ btnUpper: check });
                        },
                        onChangeSize: function onChangeSize(newSize) {
                            return saveButtonStyle({ btnSize: newSize });
                        },
                        onChangeTabletSize: function onChangeTabletSize(newSize) {
                            return saveButtonStyle({ btnSizeTablet: newSize });
                        },
                        onChangeMobileSize: function onChangeMobileSize(newSize) {
                            return saveButtonStyle({ btnSizeMobile: newSize });
                        }
                    }),
                    React.createElement(_premiumBorder2.default, {
                        label: __('Border', 'premium-blocks-for-gutenberg'),
                        value: btnBorder,
                        onChange: function onChange(value) {
                            return setAttributes({ btnBorder: value });
                        }
                    }),
                    React.createElement(_PremiumShadow2.default, {
                        label: __("Box Shadow", 'premium-blocks-for-gutenberg'),
                        boxShadow: true,
                        color: btnStyles[0].btnShadowColor,
                        blur: btnStyles[0].btnShadowBlur,
                        horizontal: btnStyles[0].btnShadowHorizontal,
                        vertical: btnStyles[0].btnShadowVertical,
                        position: btnStyles[0].btnShadowPosition,
                        onChangeColor: function onChangeColor(newColor) {
                            return saveButtonStyle({ btnShadowColor: newColor || "transparent" });
                        },
                        onChangeBlur: function onChangeBlur(newBlur) {
                            return saveButtonStyle({ btnShadowBlur: newBlur || 0 });
                        },
                        onChangehHorizontal: function onChangehHorizontal(newValue) {
                            return saveButtonStyle({ btnShadowHorizontal: newValue || 0 });
                        },
                        onChangeVertical: function onChangeVertical(newValue) {
                            return saveButtonStyle({ btnShadowVertical: newValue || 0 });
                        },
                        onChangePosition: function onChangePosition(newValue) {
                            return saveButtonStyle({ btnShadowPosition: newValue || 0 });
                        }
                    }),
                    React.createElement(_singleRangeControl2.default, {
                        label: __("Padding", 'premium-blocks-for-gutenberg'),
                        value: btnStyles[0].btnPadding,
                        onChange: function onChange(newValue) {
                            return saveButtonStyle({ btnPadding: newValue });
                        },
                        showUnit: true,
                        defaultValue: '',
                        onChangeUnit: function onChangeUnit(newValue) {
                            return saveButtonStyle({ btnPaddingU: newValue });
                        },
                        unit: btnStyles[0].btnPaddingU
                    }),
                    React.createElement(_premiumResponsiveSpacing2.default, {
                        label: __('Margin', 'premium-blocks-for-gutenberg'),
                        value: btnMargin,
                        onChange: function onChange(value) {
                            return setAttributes({ btnMargin: value });
                        },
                        showUnits: false,
                        responsive: true
                    })
                ),
                React.createElement(
                    PanelBody,
                    {
                        title: __("Container", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(_premiumBackground2.default, {
                        imageID: containerStyles[0].imageID,
                        imageURL: containerStyles[0].imageURL,
                        backgroundPosition: containerStyles[0].backgroundPosition,
                        backgroundRepeat: containerStyles[0].backgroundRepeat,
                        backgroundSize: containerStyles[0].backgroundSize,
                        fixed: containerStyles[0].fixed,
                        onSelectMedia: function onSelectMedia(media) {
                            saveContainerStyle({
                                imageID: media.id,
                                imageURL: media.url
                            });
                        },
                        onRemoveImage: function onRemoveImage(value) {
                            return saveContainerStyle({ imageURL: "", imageID: "" });
                        },
                        onChangeBackPos: function onChangeBackPos(newValue) {
                            return saveContainerStyle({ backgroundPosition: newValue });
                        },
                        onchangeBackRepeat: function onchangeBackRepeat(newValue) {
                            return saveContainerStyle({ backgroundRepeat: newValue });
                        },
                        onChangeBackSize: function onChangeBackSize(newValue) {
                            return saveContainerStyle({ backgroundSize: newValue });
                        },
                        onChangeFixed: function onChangeFixed(check) {
                            return saveContainerStyle({ fixed: check });
                        }
                    }),
                    React.createElement(_premiumBorder2.default, {
                        label: __('Border', 'premium-blocks-for-gutenberg'),
                        value: containerBorder,
                        onChange: function onChange(value) {
                            return setAttributes({ containerBorder: value });
                        }
                    }),
                    React.createElement(_PremiumShadow2.default, {
                        label: __("Box Shadow", 'premium-blocks-for-gutenberg'),
                        boxShadow: true,
                        color: containerStyles[0].shadowColor,
                        blur: containerStyles[0].shadowBlur,
                        horizontal: containerStyles[0].shadowHorizontal,
                        vertical: containerStyles[0].shadowVertical,
                        position: containerStyles[0].shadowPosition,
                        onChangeColor: function onChangeColor(newColor) {
                            return saveContainerStyle({ shadowColor: newColor || "transparent" });
                        },
                        onChangeBlur: function onChangeBlur(newBlur) {
                            return saveContainerStyle({ shadowBlur: newBlur || 0 });
                        },
                        onChangehHorizontal: function onChangehHorizontal(newValue) {
                            return saveContainerStyle({ shadowHorizontal: newValue || 0 });
                        },
                        onChangeVertical: function onChangeVertical(newValue) {
                            return saveContainerStyle({ shadowVertical: newValue || 0 });
                        },
                        onChangePosition: function onChangePosition(newValue) {
                            return saveContainerStyle({ shadowPosition: newValue });
                        }
                    }),
                    React.createElement(_PremiumShadow2.default, {
                        label: __("Hover Box Shadow", 'premium-blocks-for-gutenberg'),
                        boxShadow: true,
                        color: containerStyles[0].hoverShadowColor,
                        blur: containerStyles[0].hoverShadowBlur,
                        horizontal: containerStyles[0].hoverShadowHorizontal,
                        vertical: containerStyles[0].hoverShadowVertical,
                        position: containerStyles[0].hoverShadowPosition,
                        onChangeColor: function onChangeColor(newColor) {
                            return saveContainerStyle({ hoverShadowColor: newColor });
                        },
                        onChangeBlur: function onChangeBlur(newBlur) {
                            return saveContainerStyle({ hoverShadowBlur: newBlur });
                        },
                        onChangehHorizontal: function onChangehHorizontal(newValue) {
                            return saveContainerStyle({ hoverShadowHorizontal: newValue });
                        },
                        onChangeVertical: function onChangeVertical(newValue) {
                            return saveContainerStyle({ hoverShadowVertical: newValue });
                        },
                        onChangePosition: function onChangePosition(newValue) {
                            return saveContainerStyle({ hoverShadowPosition: newValue });
                        }
                    }),
                    React.createElement(_premiumResponsiveSpacing2.default, {
                        label: __('Margin', 'premium-blocks-for-gutenberg'),
                        value: containerMargin,
                        onChange: function onChange(value) {
                            return setAttributes({ containerMargin: value });
                        },
                        showUnits: false,
                        responsive: true
                    }),
                    React.createElement(_premiumResponsiveSpacing2.default, {
                        label: __('Padding', 'premium-blocks-for-gutenberg'),
                        value: containerPadding,
                        onChange: function onChange(value) {
                            return setAttributes({ containerPadding: value });
                        },
                        showUnits: true,
                        responsive: true
                    })
                ),
                React.createElement(
                    PanelBody,
                    {
                        title: __("Colors"),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(
                        TabPanel,
                        {
                            className: "premium-color-tabpanel",
                            activeClass: "active-tab",
                            tabs: [{
                                name: "normal",
                                title: "Normal",
                                className: "premium-tab"
                            }, {
                                name: "hover",
                                title: "Hover",
                                className: "premium-tab"
                            }]
                        },
                        function (tab) {
                            var tabout = void 0;
                            if ("normal" === tab.name) {
                                tabout = React.createElement(
                                    Fragment,
                                    null,
                                    iconChecked && React.createElement(
                                        Fragment,
                                        null,
                                        React.createElement(_ColorComponent2.default, {
                                            label: __("Icon Color", 'premium-blocks-for-gutenberg'),
                                            colorValue: iconColor,
                                            colorDefault: '',
                                            onColorChange: function onColorChange(newValue) {
                                                return setAttributes({ iconColor: newValue || "transparent" });
                                            }
                                        }),
                                        React.createElement(_ColorComponent2.default, {
                                            label: __("Icon Background Color"),
                                            colorValue: iconBackColor,
                                            onColorChange: function onColorChange(newvalue) {
                                                return setAttributes({ iconBackColor: newvalue });
                                            },
                                            colorDefault: ""
                                        })
                                    ),
                                    titleChecked && React.createElement(_ColorComponent2.default, {
                                        label: __("Title Color", 'premium-blocks-for-gutenberg'),
                                        colorValue: titleStyles[0].titleColor,
                                        colorDefault: '',
                                        onColorChange: function onColorChange(newValue) {
                                            return saveTitleStyle({ titleColor: newValue || "transparent" });
                                        }
                                    }),
                                    descChecked && React.createElement(_ColorComponent2.default, {
                                        label: __("Description Color", 'premium-blocks-for-gutenberg'),
                                        colorValue: descStyles[0].descColor,
                                        colorDefault: '',
                                        onColorChange: function onColorChange(newValue) {
                                            return saveDescriptionStyle({ descColor: newValue || "transparent" });
                                        }
                                    }),
                                    btnChecked && React.createElement(
                                        Fragment,
                                        null,
                                        React.createElement(_ColorComponent2.default, {
                                            label: __("Button Color", 'premium-blocks-for-gutenberg'),
                                            colorValue: btnStyles[0].btnColor,
                                            colorDefault: '',
                                            onColorChange: function onColorChange(newValue) {
                                                return saveButtonStyle({ btnColor: newValue || "#000" });
                                            }
                                        }),
                                        React.createElement(_ColorComponent2.default, {
                                            label: __("Button Background Color"),
                                            colorValue: btnStyles[0].btnBack,
                                            onColorChange: function onColorChange(newvalue) {
                                                return saveButtonStyle({ btnBack: newvalue });
                                            },
                                            colorDefault: ""
                                        })
                                    ),
                                    React.createElement(_ColorComponent2.default, {
                                        label: __("Container Background Color"),
                                        colorValue: containerStyles[0].backColor,
                                        onColorChange: function onColorChange(newvalue) {
                                            return saveContainerStyle({ backColor: newvalue });
                                        },
                                        colorDefault: ""
                                    })
                                );
                            }
                            if ("hover" === tab.name) {
                                tabout = React.createElement(
                                    Fragment,
                                    null,
                                    btnChecked && React.createElement(
                                        Fragment,
                                        null,
                                        React.createElement(_ColorComponent2.default, {
                                            label: __("Button Hover Color", 'premium-blocks-for-gutenberg'),
                                            colorValue: btnStyles[0].btnHoverColor,
                                            colorDefault: '',
                                            onColorChange: function onColorChange(newValue) {
                                                return saveButtonStyle({ btnHoverColor: newValue || "#000" });
                                            }
                                        }),
                                        React.createElement(_ColorComponent2.default, {
                                            label: __('Button Background Hover Color', 'premium-blocks-for-gutenberg'),
                                            colorValue: btnStyles[0].btnHoverBack,
                                            colorDefault: '',
                                            onColorChange: function onColorChange(newValue) {
                                                return saveButtonStyle({ btnHoverBack: newValue });
                                            }
                                        })
                                    ),
                                    React.createElement(_ColorComponent2.default, {
                                        label: __('Button Border Hover Color', 'premium-blocks-for-gutenberg'),
                                        colorValue: btnHoverBorder,
                                        colorDefault: '',
                                        onColorChange: function onColorChange(newValue) {
                                            return setAttributes({ btnHoverBorder: newValue || "transparent" });
                                        }
                                    })
                                );
                            }
                            return React.createElement(
                                "div",
                                null,
                                tabout,
                                React.createElement("hr", null)
                            );
                        }
                    )
                ),
                React.createElement(_premiumResponsiveTabs2.default, {
                    Desktop: hideDesktop,
                    Tablet: hideTablet,
                    Mobile: hideMobile,
                    onChangeDesktop: function onChangeDesktop(value) {
                        return setAttributes({ hideDesktop: value ? " premium-desktop-hidden" : "" });
                    },
                    onChangeTablet: function onChangeTablet(value) {
                        return setAttributes({ hideTablet: value ? " premium-tablet-hidden" : "" });
                    },
                    onChangeMobile: function onChangeMobile(value) {
                        return setAttributes({ hideMobile: value ? " premium-mobile-hidden" : "" });
                    }
                })
            ), React.createElement(
                "div",
                {
                    id: "premium-icon-box-" + block_id,
                    className: mainClasses + " premium-icon-box-" + iconPos + " premium-icon-box-" + iconHPos + " premium-icon-box-" + block_id + " " + hideDesktop + " " + hideTablet + " " + hideMobile,
                    style: {
                        textAlign: align,
                        borderStyle: containerBorder.borderType,
                        borderTopWidth: ContainerBorderWidthTop && ContainerBorderWidthTop + "px",
                        borderRightWidth: ContainerBorderWidthRight && ContainerBorderWidthRight + "px",
                        borderBottomWidth: ContainerBorderWidthBottom && ContainerBorderWidthBottom + "px",
                        borderLeftWidth: ContainerBorderWidthLeft && ContainerBorderWidthLeft + "px",
                        borderBottomLeftRadius: ContainerBorderRadiusLeft && ContainerBorderRadiusLeft + "px",
                        borderTopLeftRadius: ContainerBorderRadiusTop && ContainerBorderRadiusTop + "px",
                        borderTopRightRadius: ContainerBorderRadiusRight && ContainerBorderRadiusRight + "px",
                        borderBottomRightRadius: ContainerBorderRadiusBottom && ContainerBorderRadiusBottom + "px",
                        borderColor: containerBorder.borderColor,
                        marginTop: containerMarginTop,
                        marginRight: containerMarginRight,
                        marginBottom: containerMarginBottom,
                        marginLeft: containerMarginLeft,
                        paddingTop: containerPaddingTop && containerPaddingTop + (containerPadding.unit ? containerPadding.unit : 'px'),
                        paddingRight: containerPaddingRight && containerPaddingRight + (containerPadding.unit ? containerPadding.unit : 'px'),
                        paddingBottom: containerPaddingBottom && containerPaddingBottom + (containerPadding.unit ? containerPadding.unit : 'px'),
                        paddingLeft: containerPaddingLeft && containerPaddingLeft + (containerPadding.unit ? containerPadding.unit : 'px'),
                        boxShadow: containerStyles[0].shadowHorizontal + "px " + containerStyles[0].shadowVertical + "px " + containerStyles[0].shadowBlur + "px " + containerStyles[0].shadowColor + " " + containerStyles[0].shadowPosition,
                        backgroundColor: containerStyles[0].backColor,
                        backgroundImage: containerStyles[0].imageURL ? "url('" + containerStyles[0].imageURL + "')" : 'none',
                        backgroundRepeat: containerStyles[0].backgroundRepeat,
                        backgroundPosition: containerStyles[0].backgroundPosition,
                        backgroundSize: containerStyles[0].backgroundSize,
                        backgroundAttachment: containerStyles[0].fixed ? "fixed" : "unset"
                    }
                },
                btnChecked && btnText && React.createElement("style", {
                    dangerouslySetInnerHTML: {
                        __html: ["#premium-icon-box-" + block_id + ":hover {", "box-shadow: " + containerStyles[0].hoverShadowHorizontal + "px " + containerStyles[0].hoverShadowVertical + "px " + containerStyles[0].hoverShadowBlur + "px " + containerStyles[0].hoverShadowColor + " " + containerStyles[0].hoverShadowPosition + " !important", "}", "#premium-icon-box-" + block_id + " .premium-icon-box__btn:hover {", "color: " + btnStyles[0].btnHoverColor + " !important;", "border-color: " + btnHoverBorder + " !important;", "}", "#premium-icon-box-" + block_id + " .premium-button__none .premium-icon-box__btn:hover {", "background-color: " + btnStyles[0].btnHoverBack + " !important;", "}", "#premium-icon-box-" + block_id + " .premium-button__slide .premium-button::before {", "background-color: " + btnStyles[0].btnHoverBack + " !important;", "}"].join("\n")
                    }
                }),
                iconChecked && React.createElement(
                    "div",
                    {
                        className: "premium-icon-box__icon_wrap premium-icon-box__icon_" + iconVPos
                    },
                    "icon" === iconImage && React.createElement(
                        Fragment,
                        null,
                        iconType === "fa" && 1 != _settings.FontAwesomeEnabled && React.createElement(
                            "p",
                            { className: "premium-icon-box__alert" },
                            __("Please Enable Font Awesome Icons from Plugin settings")
                        ),
                        (iconType === "dash" || 1 == _settings.FontAwesomeEnabled) && React.createElement("i", {
                            className: selectedIcon + " premium-icon-box__icon premium-icon__" + hoverEffect,
                            style: {
                                color: iconColor,
                                backgroundColor: iconBackColor,
                                fontSize: iconSize
                            }
                        })
                    ),
                    "image" === iconImage && iconImgUrl && React.createElement("img", {
                        className: "premium-icon-box__icon premium-icon__" + hoverEffect,
                        src: "" + iconImgUrl,
                        alt: "Image Icon",
                        style: {
                            width: iconSize + "px",
                            height: iconSize + "px",
                            borderRadius: iconRadius + "px"
                        }
                    })
                ),
                React.createElement(
                    "div",
                    { className: "premium-icon-box__content_wrap" },
                    titleChecked && titleText && React.createElement(
                        "div",
                        {
                            className: "premium-icon-box__title_wrap",
                            style: {
                                marginTop: titleMarginTop,
                                marginRight: titleMarginRight,
                                marginBottom: titleMarginBottom,
                                marginLeft: titlePaddingLeft
                            }
                        },
                        React.createElement(RichText, {
                            tagName: titleStyles[0].titleTag.toLowerCase(),
                            className: "premium-icon-box__title",
                            onChange: function onChange(newText) {
                                return setAttributes({ titleText: newText });
                            },
                            placeholder: __("Awesome Title"),
                            value: titleText,
                            style: {
                                fontSize: "" + titleFontSize + titleStyles[0].titleSizeUnit,
                                color: titleStyles[0].titleColor,
                                fontFamily: titleStyles[0].titleFont,
                                letterSpacing: titleStyles[0].titleLetter + "px",
                                textTransform: titleStyles[0].titleUpper ? "uppercase" : "none",
                                fontStyle: titleStyles[0].titleStyle,
                                fontWeight: titleStyles[0].titleWeight,
                                textShadow: titleStyles[0].titleShadowHorizontal + "px " + titleStyles[0].titleShadowVertical + "px " + titleStyles[0].titleShadowBlur + "px " + titleStyles[0].titleShadowColor,
                                lineHeight: titleStyles[0].titleLine + "px"
                            },
                            keepPlaceholderOnFocus: true
                        })
                    ),
                    descChecked && descText && React.createElement(
                        "div",
                        {
                            className: "premium-icon-box__desc_wrap",
                            style: {
                                marginTop: descMarginTop,
                                marginRight: descMarginRight,
                                marginBottom: descMarginBottom,
                                marginLeft: descMarginLeft
                            }
                        },
                        React.createElement(RichText, {
                            tagName: "p",
                            className: "premium-icon-box__desc",
                            value: descText,
                            isSelected: false,
                            placeholder: "Donec id elit non mi porta gravida at eget metus. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Cras mattis consectetur purus sit amet fermentum. Nullam id dolor id nibh ultricies vehicula ut id elit. Donec id elit non mi porta gravida at eget metus.",
                            onChange: function onChange(newText) {
                                return setAttributes({ descText: newText });
                            },
                            style: {
                                color: descStyles[0].descColor,
                                fontFamily: descStyles[0].descFont,
                                lineHeight: descStyles[0].descLine + "px",
                                fontWeight: descStyles[0].descWeight,
                                fontSize: "" + descriptionFontSize + descStyles[0].descSizeUnit
                            },
                            keepPlaceholderOnFocus: true
                        })
                    ),
                    btnChecked && btnText && React.createElement(
                        "div",
                        {
                            className: "premium-icon-box__btn_wrap premium-button__" + btnEffect + " premium-button__" + effectDir,
                            style: {
                                marginTop: btnMarginTop,
                                marginRight: btnMarginRight,
                                marginBottom: btnMarginBottom,
                                marginLeft: btnMarginLeft
                            }
                        },
                        React.createElement(RichText, {
                            tagName: "a",
                            className: "premium-icon-box__btn premium-button",
                            onChange: function onChange(newText) {
                                return setAttributes({ btnText: newText });
                            },
                            placeholder: __("Click Here"),
                            value: btnText,
                            style: {
                                fontSize: "" + buttonFontSize + btnStyles[0].btnSizeUnit,
                                color: btnStyles[0].btnColor,
                                backgroundColor: btnStyles[0].btnBack,
                                letterSpacing: btnStyles[0].btnLetter + "px",
                                textTransform: btnStyles[0].btnUpper ? "uppercase" : "none",
                                fontStyle: btnStyles[0].btnStyle,
                                fontWeight: btnStyles[0].btnWeight,
                                borderStyle: btnBorder.borderType,
                                borderTopWidth: BtnBorderWidthTop && BtnBorderWidthTop + "px",
                                borderRightWidth: BtnBorderWidthRight && BtnBorderWidthRight + "px",
                                borderBottomWidth: BtnBorderWidthBottom && BtnBorderWidthBottom + "px",
                                borderLeftWidth: BtnBorderWidthLeft && BtnBorderWidthLeft + "px",
                                borderBottomLeftRadius: BtnBorderRadiusLeft && BtnBorderRadiusLeft + "px",
                                borderTopLeftRadius: BtnBorderRadiusTop && BtnBorderRadiusTop + "px",
                                borderTopRightRadius: BtnBorderRadiusRight && BtnBorderRadiusRight + "px",
                                borderBottomRightRadius: BtnBorderRadiusBottom && BtnBorderRadiusBottom + "px",
                                borderColor: btnBorder.borderColor,
                                padding: btnStyles[0].btnPadding && btnStyles[0].btnPadding + (btnStyles[0].btnPaddingU ? btnStyles[0].btnPaddingU : 'px'),
                                boxShadow: btnStyles[0].btnShadowHorizontal + "px " + btnStyles[0].btnShadowVertical + "px " + btnStyles[0].btnShadowBlur + "px " + btnStyles[0].btnShadowColor + " " + btnStyles[0].btnShadowPosition
                            },
                            keepPlaceholderOnFocus: true
                        }),
                        isSelected && React.createElement(URLInput, {
                            value: btnLink,
                            onChange: function onChange(newLink) {
                                return setAttributes({ btnLink: newLink });
                            }
                        })
                    )
                ),
                loadTitleGoogleFonts,
                loadDescriptionGoogleFonts
            )];
        }
    }]);

    return edit;
}(Component);

;

exports.default = withSelect(function (select, props) {
    var _select = select('core/edit-post'),
        _select$__experimenta = _select.__experimentalGetPreviewDeviceType,
        __experimentalGetPreviewDeviceType = _select$__experimenta === undefined ? null : _select$__experimenta;

    var deviceType = __experimentalGetPreviewDeviceType ? __experimentalGetPreviewDeviceType() : null;

    return {
        deviceType: deviceType
    };
})(edit);

/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classnames = __webpack_require__(0);

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var RichText = wp.blockEditor.RichText;


var save = function save(props) {
    var className = props.className;
    var _props$attributes = props.attributes,
        block_id = _props$attributes.block_id,
        borderIconBox = _props$attributes.borderIconBox,
        btnBorderIconBox = _props$attributes.btnBorderIconBox,
        align = _props$attributes.align,
        iconImage = _props$attributes.iconImage,
        iconImgUrl = _props$attributes.iconImgUrl,
        hoverEffect = _props$attributes.hoverEffect,
        iconChecked = _props$attributes.iconChecked,
        iconPos = _props$attributes.iconPos,
        iconHPos = _props$attributes.iconHPos,
        iconVPos = _props$attributes.iconVPos,
        iconSize = _props$attributes.iconSize,
        iconRadius = _props$attributes.iconRadius,
        iconColor = _props$attributes.iconColor,
        iconBackColor = _props$attributes.iconBackColor,
        selectedIcon = _props$attributes.selectedIcon,
        titleChecked = _props$attributes.titleChecked,
        titleText = _props$attributes.titleText,
        descText = _props$attributes.descText,
        descChecked = _props$attributes.descChecked,
        btnChecked = _props$attributes.btnChecked,
        btnEffect = _props$attributes.btnEffect,
        effectDir = _props$attributes.effectDir,
        btnTarget = _props$attributes.btnTarget,
        btnText = _props$attributes.btnText,
        btnLink = _props$attributes.btnLink,
        btnHoverBorder = _props$attributes.btnHoverBorder,
        hideDesktop = _props$attributes.hideDesktop,
        hideTablet = _props$attributes.hideTablet,
        hideMobile = _props$attributes.hideMobile,
        titleStyles = _props$attributes.titleStyles,
        descStyles = _props$attributes.descStyles,
        btnStyles = _props$attributes.btnStyles,
        containerStyles = _props$attributes.containerStyles,
        btnBorder = _props$attributes.btnBorder,
        containerBorder = _props$attributes.containerBorder;


    var mainClasses = (0, _classnames2.default)(className, 'premium-icon-box');

    return React.createElement(
        'div',
        {
            id: 'premium-icon-box-' + block_id,
            className: mainClasses + ' premium-icon-box-' + iconPos + ' premium-icon-box-' + iconHPos + ' premium-icon-box-' + block_id + ' ' + hideDesktop + ' ' + hideTablet + ' ' + hideMobile
        },
        btnChecked && btnText && React.createElement('style', {
            dangerouslySetInnerHTML: {
                __html: ['#premium-icon-box-' + block_id + ':hover {', 'box-shadow: ' + containerStyles[0].hoverShadowHorizontal + 'px ' + containerStyles[0].hoverShadowVertical + 'px ' + containerStyles[0].hoverShadowBlur + 'px ' + containerStyles[0].hoverShadowColor + ' ' + containerStyles[0].hoverShadowPosition + ' !important', "}", '#premium-icon-box-' + block_id + ' .premium-icon-box__btn:hover {', 'color: ' + btnStyles[0].btnHoverColor + ' !important;', 'border-color: ' + btnHoverBorder + ' !important;', "}", '#premium-icon-box-' + block_id + ' .premium-button__none .premium-icon-box__btn:hover {', 'background-color: ' + btnStyles[0].btnHoverBack + ' !important;', "}", '#premium-icon-box-' + block_id + ' .premium-button__slide .premium-button::before {', 'background-color: ' + btnStyles[0].btnHoverBack + ' !important;', "}"].join("\n")
            }
        }),
        React.createElement(
            'div',
            {
                className: 'premium-icon-box-container',
                style: {
                    textAlign: align,
                    borderStyle: containerBorder.borderType,
                    borderColor: containerBorder.borderColor,
                    boxShadow: containerStyles[0].shadowHorizontal + 'px ' + containerStyles[0].shadowVertical + 'px ' + containerStyles[0].shadowBlur + 'px ' + containerStyles[0].shadowColor + ' ' + containerStyles[0].shadowPosition,
                    backgroundColor: containerStyles[0].backColor,
                    backgroundImage: containerStyles[0].imageURL ? 'url(\'' + containerStyles[0].imageURL + '\')' : 'none',
                    backgroundRepeat: containerStyles[0].backgroundRepeat,
                    backgroundPosition: containerStyles[0].backgroundPosition,
                    backgroundSize: containerStyles[0].backgroundSize,
                    backgroundAttachment: containerStyles[0].fixed ? "fixed" : "unset"
                }
            },
            iconChecked && React.createElement(
                'div',
                {
                    className: 'premium-icon-box__icon_wrap premium-icon-box__icon_' + iconVPos
                },
                "icon" === iconImage && selectedIcon && React.createElement('i', {
                    className: selectedIcon + ' premium-icon-box__icon premium-icon__' + hoverEffect,
                    style: {
                        color: iconColor,
                        backgroundColor: iconBackColor,
                        fontSize: iconSize
                    }
                }),
                "image" === iconImage && iconImgUrl && React.createElement('img', {
                    className: 'premium-icon-box__icon premium-icon__' + hoverEffect,
                    src: '' + iconImgUrl,
                    alt: 'Image Icon',
                    style: {
                        width: iconSize + "px",
                        height: iconSize + "px",
                        borderRadius: iconRadius + "px"
                    }
                })
            ),
            React.createElement(
                'div',
                { className: 'premium-icon-box__content_wrap' },
                titleChecked && titleText && React.createElement(
                    'div',
                    {
                        className: 'premium-icon-box__title_wrap'
                    },
                    React.createElement(RichText.Content, {
                        tagName: titleStyles[0].titleTag.toLowerCase(),
                        className: 'premium-icon-box__title',
                        value: titleText,
                        style: {
                            color: titleStyles[0].titleColor,
                            fontFamily: titleStyles[0].titleFont,
                            letterSpacing: titleStyles[0].titleLetter + "px",
                            textTransform: titleStyles[0].titleUpper ? "uppercase" : "none",
                            fontStyle: titleStyles[0].titleStyle,
                            fontWeight: titleStyles[0].titleWeight,
                            textShadow: titleStyles[0].titleShadowHorizontal + 'px ' + titleStyles[0].titleShadowVertical + 'px ' + titleStyles[0].titleShadowBlur + 'px ' + titleStyles[0].titleShadowColor,
                            lineHeight: titleStyles[0].titleLine + "px"
                        }
                    })
                ),
                descChecked && descText && React.createElement(
                    'div',
                    {
                        className: 'premium-icon-box__desc_wrap'
                    },
                    React.createElement(RichText.Content, {
                        tagName: 'p',
                        className: 'premium-icon-box__desc',
                        value: descText,
                        style: {
                            color: descStyles[0].descColor,
                            fontFamily: descStyles[0].descFont,
                            lineHeight: descStyles[0].descLine + "px",
                            fontWeight: descStyles[0].descWeight
                        }
                    })
                ),
                btnChecked && btnText && React.createElement(
                    'div',
                    {
                        className: 'premium-icon-box__btn_wrap premium-button__' + btnEffect + ' premium-button__' + effectDir
                    },
                    React.createElement(RichText.Content, {
                        tagName: 'a',
                        className: 'premium-icon-box__btn premium-button',
                        href: btnLink,
                        rel: 'noopener noreferrer',
                        target: btnTarget ? "_blank" : "_self",
                        value: btnText,
                        style: {
                            color: btnStyles[0].btnColor,
                            backgroundColor: btnStyles[0].btnBack,
                            letterSpacing: btnStyles[0].btnLetter + "px",
                            textTransform: btnStyles[0].btnUpper ? "uppercase" : "none",
                            fontStyle: btnStyles[0].btnStyle,
                            fontWeight: btnStyles[0].btnWeight,
                            borderStyle: btnBorder.borderType,
                            borderColor: btnBorder.borderColor,
                            padding: btnStyles[0].btnPadding + btnStyles[0].btnPaddingU,
                            boxShadow: btnStyles[0].btnShadowHorizontal + 'px ' + btnStyles[0].btnShadowVertical + 'px ' + btnStyles[0].btnShadowBlur + 'px ' + btnStyles[0].btnShadowColor + ' ' + btnStyles[0].btnShadowPosition
                        }
                    })
                )
            )
        )
    );
};

exports.default = save;

/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _hexToRgba = __webpack_require__(17);

var _hexToRgba2 = _interopRequireDefault(_hexToRgba);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var className = "premium-icon-box";
var __ = wp.i18n.__;
var RichText = wp.editor.RichText;


var attributes = {
    block_id: {
        type: "string"
    },
    borderIconBox: {
        type: "boolean",
        default: false
    },
    btnBorderIconBox: {
        type: "boolean",
        default: false
    },
    align: {
        type: "string",
        default: "center"
    },
    iconImage: {
        type: "string",
        default: "icon"
    },
    iconImgId: {
        type: "string"
    },
    iconImgUrl: {
        type: "string"
    },
    hoverEffect: {
        type: "string",
        default: "none"
    },
    iconChecked: {
        type: "boolean",
        default: true
    },
    iconPos: {
        type: "string",
        default: "block"
    },
    iconHPos: {
        type: "string",
        default: "before"
    },
    iconVPos: {
        type: "string",
        default: "center"
    },
    iconSize: {
        type: "number"
    },
    iconRadius: {
        type: "number"
    },
    iconColor: {
        type: "string"
    },
    iconBackColor: {
        type: "string"
    },
    selectedIcon: {
        type: "string",
        default: "dashicons dashicons-admin-site"
    },
    titleChecked: {
        type: "boolean",
        default: true
    },
    titleText: {
        type: "array",
        source: "children",
        selector: ".premium-icon-box__title",
        default: __("Awesome Title")
    },
    titleTag: {
        type: "string",
        default: "H2"
    },
    titleFont: {
        type: "string"
    },
    titleColor: {
        type: "string"
    },
    titleSize: {
        type: "number",
        default: '20'
    },
    titleSizeUnit: {
        type: 'string',
        default: 'px'
    },
    titleSizeTablet: {
        type: 'number',
        default: '20'
    },
    titleSizeMobile: {
        type: 'number',
        default: '20'
    },
    titleLine: {
        type: "number"
    },
    titleLetter: {
        type: "number"
    },
    titleStyle: {
        type: "string"
    },
    titleUpper: {
        type: "boolean"
    },
    titleWeight: {
        type: "number",
        default: 500
    },
    titleShadowColor: {
        type: "string"
    },
    titleShadowBlur: {
        type: "number",
        default: "0"
    },
    titleShadowHorizontal: {
        type: "number",
        default: "0"
    },
    titleShadowVertical: {
        type: "number",
        default: "0"
    },
    titleMarginT: {
        type: "number"
    },
    titleMarginB: {
        type: "number"
    },
    descText: {
        type: "array",
        source: "children",
        selector: ".premium-icon-box__desc",
        default: "Donec id elit non mi porta gravida at eget metus. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Cras mattis consectetur purus sit amet fermentum. Nullam id dolor id nibh ultricies vehicula ut id elit. Donec id elit non mi porta gravida at eget metus."
    },
    descChecked: {
        type: "boolean",
        default: true
    },
    descFont: {
        type: "string"
    },
    descColor: {
        type: "string"
    },
    descSize: {
        type: "number",
        default: '20'
    },
    descSizeUnit: {
        type: "string",
        default: 'px'
    },
    descSizeTablet: {
        type: "number",
        default: '20'
    },
    descSizeMobile: {
        type: "number",
        default: '20'
    },
    descLine: {
        type: "number"
    },
    descWeight: {
        type: "number",
        default: 500
    },
    descMarginT: {
        type: "number"
    },
    descMarginB: {
        type: "number"
    },
    btnChecked: {
        type: "boolean",
        default: true
    },
    btnEffect: {
        type: "string",
        default: "none"
    },
    effectDir: {
        type: "string",
        default: "top"
    },
    btnTarget: {
        type: "boolean",
        default: false
    },
    btnText: {
        type: "array",
        source: "children",
        selector: ".premium-icon-box__btn",
        default: __("Click Here")
    },
    btnLink: {
        type: "string",
        source: "attribute",
        attribute: "href",
        selector: ".premium-icon-box__btn"
    },
    btnColor: {
        type: "string"
    },
    btnHoverColor: {
        type: "string"
    },
    btnBack: {
        type: "string"
    },
    btnHoverBack: {
        type: "string"
    },
    btnHoverBorder: {
        type: "string"
    },
    btnSize: {
        type: "number",
        default: '20'
    },
    btnSizeUnit: {
        type: "string",
        default: "px"
    },
    btnSizeTablet: {
        type: "number",
        default: '20'
    },
    btnSizeMobile: {
        type: "number",
        default: '20'
    },
    btnLine: {
        type: "number"
    },
    btnLetter: {
        type: "number"
    },
    btnStyle: {
        type: "string"
    },
    btnUpper: {
        type: "boolean"
    },
    btnWeight: {
        type: "number",
        default: 500
    },
    btnBorderType: {
        type: "string",
        default: "none"
    },
    btnBorderWidth: {
        type: "number",
        default: "1"
    },
    btnBorderTop: {
        type: "number"
    },
    btnBorderRight: {
        type: "number"
    },
    btnBorderBottom: {
        type: "number"
    },
    btnBorderLeft: {
        type: "number"
    },
    borderTop: {
        type: "number"
    },
    borderRight: {
        type: "number"
    },
    borderBottom: {
        type: "number"
    },
    borderLeft: {
        type: "number"
    },
    btnBorderRadius: {
        type: "number"
    },
    btnBorderColor: {
        type: "string"
    },
    btnPadding: {
        type: "number"
    },
    btnPaddingU: {
        type: "string"
    },
    btnMarginT: {
        type: "number"
    },
    btnMarginB: {
        type: "number"
    },
    btnShadowColor: {
        type: "string"
    },
    btnShadowBlur: {
        type: "number",
        default: "0"
    },
    btnShadowHorizontal: {
        type: "number",
        default: "0"
    },
    btnShadowVertical: {
        type: "number",
        default: "0"
    },
    btnShadowPosition: {
        type: "string",
        default: ""
    },
    imageID: {
        type: "string"
    },
    imageURL: {
        type: "string"
    },
    backColor: {
        type: "string"
    },
    backgroundRepeat: {
        type: "string",
        default: "no-repeat"
    },
    backgroundPosition: {
        type: "string",
        default: "top center"
    },
    backgroundSize: {
        type: "string",
        default: "auto"
    },
    fixed: {
        type: "boolean",
        default: false
    },
    borderType: {
        type: "string",
        default: "none"
    },
    borderWidth: {
        type: "number",
        default: "1"
    },
    borderRadius: {
        type: "number"
    },
    borderColor: {
        type: "string"
    },
    marginT: {
        type: "number"
    },
    marginR: {
        type: "number"
    },
    marginB: {
        type: "number"
    },
    marginL: {
        type: "number"
    },
    paddingT: {
        type: "number"
    },
    paddingR: {
        type: "number"
    },
    paddingB: {
        type: "number"
    },
    paddingL: {
        type: "number"
    },
    paddingU: {
        type: "string"
    },
    shadowColor: {
        type: "string"
    },
    shadowBlur: {
        type: "number",
        default: "0"
    },
    shadowHorizontal: {
        type: "number",
        default: "0"
    },
    shadowVertical: {
        type: "number",
        default: "0"
    },
    shadowPosition: {
        type: "string",
        default: ""
    },
    hoverShadowColor: {
        type: "string"
    },
    hoverShadowBlur: {
        type: "number"
    },
    hoverShadowHorizontal: {
        type: "number"
    },
    hoverShadowVertical: {
        type: "number"
    },
    hoverShadowPosition: {
        type: "string"
    },
    classMigrate: {
        type: "boolean",
        default: false
    },
    hideDesktop: {
        type: 'boolean',
        default: false
    },
    hideTablet: {
        type: 'boolean',
        default: false
    },
    hideMobile: {
        type: 'boolean',
        default: false
    },
    backOpacity: {
        type: "number",
        default: "1"
    },
    iconOpacity: {
        type: "number",
        default: "1"
    },
    btnOpacity: {
        type: "number",
        default: "1"
    }
};

var deprecatedContent = [{
    attributes: attributes,
    migrate: function migrate(attributes) {
        var newAttributes = {
            titleStyles: [{
                titleTag: attributes.titleTag,
                titleFont: attributes.titleFont,
                titleColor: attributes.titleColor,
                titleSize: attributes.titleSize,
                titleSizeUnit: attributes.titleSize,
                titleSizeTablet: attributes.titleSizeTablet,
                titleSizeMobile: attributes.titleSizeMobile,
                titleLine: attributes.titleLine,
                titleLetter: attributes.titleLetter,
                titleStyle: attributes.titleStyle,
                titleUpper: attributes.titleUpper,
                titleWeight: attributes.titleWeight,
                titleShadowColor: attributes.titleShadowColor,
                titleShadowBlur: attributes.titleShadowBlur,
                titleShadowHorizontal: attributes.titleShadowHorizontal,
                titleShadowVertical: attributes.titleShadowVertical,
                titleMarginT: attributes.titleMarginT,
                titleMarginB: attributes.titleMarginB
            }],
            descStyles: [{
                descFont: attributes.descFont,
                descColor: attributes.descColor,
                descSize: attributes.descSize,
                descSizeUnit: attributes.descSizeUnit,
                descSizeTablet: attributes.descSizeTablet,
                descSizeMobile: attributes.descSizeMobile,
                descLine: attributes.descLine,
                descWeight: attributes.descWeight,
                descMarginT: attributes.descMarginT,
                descMarginB: attributes.descMarginB
            }],
            btnStyles: [{
                btnSize: attributes.btnSize,
                btnSizeUnit: attributes.btnSizeUnit,
                btnSizeTablet: attributes.btnSizeTablet,
                btnSizeMobile: attributes.btnSizeMobile,
                btnLine: attributes.btnLine,
                btnLetter: attributes.btnLetter,
                btnStyle: attributes.btnStyle,
                btnUpper: attributes.btnUpper,
                btnWeight: attributes.btnWeight,
                btnBorderType: attributes.btnBorderType,
                btnBorderWidth: attributes.btnBorderWidth,
                btnBorderTop: attributes.btnBorderTop,
                btnBorderRight: attributes.btnBorderRight,
                btnBorderBottom: attributes.btnBorderBottom,
                btnBorderLeft: attributes.btnBorderLeft,
                btnBorderRadius: attributes.btnBorderRadius,
                btnBorderColor: attributes.btnBorderColor,
                btnPadding: attributes.btnPadding,
                btnPaddingU: attributes.btnPaddingU,
                btnMarginT: attributes.btnMarginT,
                btnMarginB: attributes.btnMarginB,
                btnShadowColor: attributes.btnShadowColor,
                btnShadowBlur: attributes.btnShadowBlur,
                btnShadowHorizontal: attributes.btnShadowHorizontal,
                btnShadowVertical: attributes.btnShadowVertical,
                btnShadowPosition: attributes.btnShadowPosition,
                btnColor: attributes.btnColor,
                btnHoverColor: attributes.btnHoverColor,
                btnBack: attributes.btnBack,
                btnHoverBack: attributes.btnHoverBack,
                btnOpacity: attributes.btnOpacity
            }],
            containerStyles: [{
                backOpacity: attributes.backOpacity,
                backColor: attributes.backColor,
                imageID: attributes.imageID,
                imageURL: attributes.imageURL,
                backgroundRepeat: attributes.backgroundRepeat,
                backgroundPosition: attributes.backgroundPosition,
                backgroundSize: attributes.backgroundSize,
                fixed: attributes.fixed,
                borderType: attributes.borderType,
                borderWidth: attributes.borderWidth,
                borderRadius: attributes.borderRadius,
                borderColor: attributes.borderColor,
                borderTop: attributes.borderTop,
                borderRight: attributes.borderRight,
                borderBottom: attributes.borderBottom,
                borderLeft: attributes.borderLeft,
                shadowColor: attributes.shadowColor,
                shadowBlur: attributes.shadowBlur,
                shadowHorizontal: attributes.shadowHorizontal,
                shadowVertical: attributes.shadowVertical,
                shadowPosition: attributes.shadowPosition,
                hoverShadowColor: attributes.hoverShadowColor,
                hoverShadowBlur: attributes.hoverShadowBlur,
                hoverShadowHorizontal: attributes.hoverShadowHorizontal,
                hoverShadowVertical: attributes.hoverShadowVertical,
                hoverShadowPosition: attributes.hoverShadowPosition,
                marginT: attributes.marginT,
                marginR: attributes.marginR,
                marginB: attributes.marginB,
                marginL: attributes.marginL,
                paddingT: attributes.paddingT,
                paddingR: attributes.paddingR,
                paddingB: attributes.paddingB,
                paddingL: attributes.paddingL,
                paddingU: attributes.paddingU,
                gradientColorOne: '',
                gradientLocationOne: '0',
                gradientColorTwo: '',
                gradientLocationTwo: '100',
                gradientType: 'linear',
                gradientAngle: '180',
                gradientPosition: 'center center'
            }],
            marginTTablet: '',
            marginRTablet: '',
            marginBTablet: '',
            marginLTablet: '',
            marginTMobile: '',
            marginRMobile: '',
            marginBMobile: '',
            marginLMobile: '',
            paddingTTablet: '',
            paddingRTablet: '',
            paddingBTablet: '',
            paddingLTablet: '',
            paddingTMobile: '',
            paddingRMobile: '',
            paddingBMobile: '',
            paddingLMobile: '',
            btnMarginTTablet: '',
            btnMarginBTablet: '',
            btnMarginTMobile: '',
            btnMarginBMobile: '',
            titleMarginTTablet: '',
            titleMarginBTablet: '',
            titleMarginTMobile: '',
            titleMarginBMobile: '',
            descMarginTTablet: '',
            descMarginBTablet: '',
            descMarginTMobile: '',
            descMarginBMobile: ''
        };

        return Object.assign(attributes, newAttributes);
    },
    save: function save(props) {
        var _props$attributes = props.attributes,
            block_id = _props$attributes.block_id,
            borderIconBox = _props$attributes.borderIconBox,
            btnBorderIconBox = _props$attributes.btnBorderIconBox,
            align = _props$attributes.align,
            iconImage = _props$attributes.iconImage,
            iconImgUrl = _props$attributes.iconImgUrl,
            iconRadius = _props$attributes.iconRadius,
            selectedIcon = _props$attributes.selectedIcon,
            iconChecked = _props$attributes.iconChecked,
            hoverEffect = _props$attributes.hoverEffect,
            iconPos = _props$attributes.iconPos,
            iconHPos = _props$attributes.iconHPos,
            iconVPos = _props$attributes.iconVPos,
            iconSize = _props$attributes.iconSize,
            iconColor = _props$attributes.iconColor,
            iconBackColor = _props$attributes.iconBackColor,
            titleChecked = _props$attributes.titleChecked,
            titleText = _props$attributes.titleText,
            titleTag = _props$attributes.titleTag,
            titleColor = _props$attributes.titleColor,
            titleFont = _props$attributes.titleFont,
            titleLine = _props$attributes.titleLine,
            titleLetter = _props$attributes.titleLetter,
            titleStyle = _props$attributes.titleStyle,
            titleUpper = _props$attributes.titleUpper,
            titleWeight = _props$attributes.titleWeight,
            titleShadowBlur = _props$attributes.titleShadowBlur,
            titleShadowColor = _props$attributes.titleShadowColor,
            titleShadowHorizontal = _props$attributes.titleShadowHorizontal,
            titleShadowVertical = _props$attributes.titleShadowVertical,
            titleMarginT = _props$attributes.titleMarginT,
            titleMarginB = _props$attributes.titleMarginB,
            descChecked = _props$attributes.descChecked,
            descText = _props$attributes.descText,
            descColor = _props$attributes.descColor,
            descFont = _props$attributes.descFont,
            descLine = _props$attributes.descLine,
            descWeight = _props$attributes.descWeight,
            descMarginT = _props$attributes.descMarginT,
            descMarginB = _props$attributes.descMarginB,
            btnChecked = _props$attributes.btnChecked,
            btnEffect = _props$attributes.btnEffect,
            effectDir = _props$attributes.effectDir,
            btnText = _props$attributes.btnText,
            btnTarget = _props$attributes.btnTarget,
            btnLink = _props$attributes.btnLink,
            btnStyle = _props$attributes.btnStyle,
            btnUpper = _props$attributes.btnUpper,
            btnWeight = _props$attributes.btnWeight,
            btnLetter = _props$attributes.btnLetter,
            btnColor = _props$attributes.btnColor,
            btnHoverColor = _props$attributes.btnHoverColor,
            btnHoverBorder = _props$attributes.btnHoverBorder,
            btnBack = _props$attributes.btnBack,
            btnHoverBack = _props$attributes.btnHoverBack,
            btnBorderWidth = _props$attributes.btnBorderWidth,
            btnBorderTop = _props$attributes.btnBorderTop,
            btnBorderRight = _props$attributes.btnBorderRight,
            btnBorderBottom = _props$attributes.btnBorderBottom,
            btnBorderLeft = _props$attributes.btnBorderLeft,
            borderTop = _props$attributes.borderTop,
            borderRight = _props$attributes.borderRight,
            borderBottom = _props$attributes.borderBottom,
            borderLeft = _props$attributes.borderLeft,
            btnBorderRadius = _props$attributes.btnBorderRadius,
            btnBorderColor = _props$attributes.btnBorderColor,
            btnBorderType = _props$attributes.btnBorderType,
            btnPadding = _props$attributes.btnPadding,
            btnPaddingU = _props$attributes.btnPaddingU,
            btnMarginT = _props$attributes.btnMarginT,
            btnMarginB = _props$attributes.btnMarginB,
            btnShadowBlur = _props$attributes.btnShadowBlur,
            btnShadowColor = _props$attributes.btnShadowColor,
            btnShadowHorizontal = _props$attributes.btnShadowHorizontal,
            btnShadowVertical = _props$attributes.btnShadowVertical,
            btnShadowPosition = _props$attributes.btnShadowPosition,
            backColor = _props$attributes.backColor,
            imageURL = _props$attributes.imageURL,
            fixed = _props$attributes.fixed,
            backgroundRepeat = _props$attributes.backgroundRepeat,
            backgroundPosition = _props$attributes.backgroundPosition,
            backgroundSize = _props$attributes.backgroundSize,
            borderType = _props$attributes.borderType,
            borderWidth = _props$attributes.borderWidth,
            borderRadius = _props$attributes.borderRadius,
            borderColor = _props$attributes.borderColor,
            marginT = _props$attributes.marginT,
            marginR = _props$attributes.marginR,
            marginB = _props$attributes.marginB,
            marginL = _props$attributes.marginL,
            paddingT = _props$attributes.paddingT,
            paddingR = _props$attributes.paddingR,
            paddingB = _props$attributes.paddingB,
            paddingL = _props$attributes.paddingL,
            paddingU = _props$attributes.paddingU,
            shadowBlur = _props$attributes.shadowBlur,
            shadowColor = _props$attributes.shadowColor,
            shadowHorizontal = _props$attributes.shadowHorizontal,
            shadowVertical = _props$attributes.shadowVertical,
            shadowPosition = _props$attributes.shadowPosition,
            hoverShadowBlur = _props$attributes.hoverShadowBlur,
            hoverShadowColor = _props$attributes.hoverShadowColor,
            hoverShadowHorizontal = _props$attributes.hoverShadowHorizontal,
            hoverShadowVertical = _props$attributes.hoverShadowVertical,
            hoverShadowPosition = _props$attributes.hoverShadowPosition,
            iconOpacity = _props$attributes.iconOpacity,
            btnOpacity = _props$attributes.btnOpacity,
            backOpacity = _props$attributes.backOpacity,
            hideDesktop = _props$attributes.hideDesktop,
            hideTablet = _props$attributes.hideTablet,
            hideMobile = _props$attributes.hideMobile;

        return React.createElement(
            "div",
            {
                id: "premium-icon-box-" + block_id,
                className: className + " premium-icon-box-" + iconPos + " premium-icon-box-" + iconHPos + " premium-icon-box-" + block_id + " " + hideDesktop + " " + hideTablet + " " + hideMobile,
                style: {
                    textAlign: align,
                    borderStyle: borderType,
                    borderWidth: borderIconBox ? borderTop + "px " + borderRight + "px " + borderBottom + "px " + borderLeft + "px" : borderWidth + "px",
                    borderRadius: borderRadius + "px",
                    borderColor: borderColor,
                    marginTop: marginT,
                    marginRight: marginR,
                    marginBottom: marginB,
                    marginLeft: marginL,
                    paddingTop: paddingT + paddingU,
                    paddingRight: paddingR + paddingU,
                    paddingBottom: paddingB + paddingU,
                    paddingLeft: paddingL + paddingU,
                    boxShadow: shadowHorizontal + "px " + shadowVertical + "px " + shadowBlur + "px " + shadowColor + " " + shadowPosition,
                    backgroundColor: backColor ? (0, _hexToRgba2.default)(backColor, backOpacity) : "transparent",
                    backgroundImage: "url('" + imageURL + "')",
                    backgroundRepeat: backgroundRepeat,
                    backgroundPosition: backgroundPosition,
                    backgroundSize: backgroundSize,
                    backgroundAttachment: fixed ? "fixed" : "unset"
                }
            },
            btnChecked && btnText && React.createElement("style", {
                dangerouslySetInnerHTML: {
                    __html: ["#premium-icon-box-" + block_id + ":hover {", "box-shadow: " + hoverShadowHorizontal + "px " + hoverShadowVertical + "px " + hoverShadowBlur + "px " + hoverShadowColor + " " + hoverShadowPosition + " !important", "}", "#premium-icon-box-" + block_id + " .premium-icon-box__btn:hover {", "color: " + btnHoverColor + " !important;", "border-color: " + btnHoverBorder + " !important;", "}", "#premium-icon-box-" + block_id + " .premium-button__none .premium-icon-box__btn:hover {", "background-color: " + btnHoverBack + " !important;", "}", "#premium-icon-box-" + block_id + " .premium-button__slide .premium-button::before {", "background-color: " + btnHoverBack + " !important;", "}"].join("\n")
                }
            }),
            iconChecked && React.createElement(
                "div",
                {
                    className: "premium-icon-box__icon_wrap premium-icon-box__icon_" + iconVPos
                },
                "icon" === iconImage && selectedIcon && React.createElement("i", {
                    className: selectedIcon + " premium-icon-box__icon premium-icon__" + hoverEffect,
                    style: {
                        color: iconColor,
                        backgroundColor: iconBackColor ? (0, _hexToRgba2.default)(iconBackColor, iconOpacity) : "transparent",
                        fontSize: iconSize
                    }
                }),
                "image" === iconImage && iconImgUrl && React.createElement("img", {
                    className: "premium-icon-box__icon premium-icon__" + hoverEffect,
                    src: "" + iconImgUrl,
                    alt: "Image Icon",
                    style: {
                        width: iconSize + "px",
                        height: iconSize + "px",
                        borderRadius: iconRadius + "px"
                    }
                })
            ),
            React.createElement(
                "div",
                { className: "premium-icon-box__content_wrap" },
                titleChecked && titleText && React.createElement(
                    "div",
                    {
                        className: "premium-icon-box__title_wrap",
                        style: {
                            marginTop: titleMarginT,
                            marginBottom: titleMarginB
                        }
                    },
                    React.createElement(RichText.Content, {
                        tagName: titleTag.toLowerCase(),
                        className: "premium-icon-box__title",
                        value: titleText,
                        style: {
                            color: titleColor,
                            fontFamily: titleFont,
                            letterSpacing: titleLetter + "px",
                            textTransform: titleUpper ? "uppercase" : "none",
                            fontStyle: titleStyle,
                            fontWeight: titleWeight,
                            textShadow: titleShadowHorizontal + "px " + titleShadowVertical + "px " + titleShadowBlur + "px " + titleShadowColor,
                            lineHeight: titleLine + "px"
                        }
                    })
                ),
                descChecked && descText && React.createElement(
                    "div",
                    {
                        className: "premium-icon-box__desc_wrap",
                        style: {
                            marginTop: descMarginT,
                            marginBottom: descMarginB
                        }
                    },
                    React.createElement(RichText.Content, {
                        tagName: "p",
                        className: "premium-icon-box__desc",
                        value: descText,
                        style: {
                            color: descColor,
                            fontFamily: descFont,
                            lineHeight: descLine + "px",
                            fontWeight: descWeight
                        }
                    })
                ),
                btnChecked && btnText && React.createElement(
                    "div",
                    {
                        className: "premium-icon-box__btn_wrap premium-button__" + btnEffect + " premium-button__" + effectDir,
                        style: {
                            marginTop: btnMarginT,
                            marginBottom: btnMarginB
                        }
                    },
                    React.createElement(RichText.Content, {
                        tagName: "a",
                        className: "premium-icon-box__btn premium-button",
                        href: btnLink,
                        rel: "noopener noreferrer",
                        target: btnTarget ? "_blank" : "_self",
                        value: btnText,
                        style: {
                            color: btnColor,
                            backgroundColor: btnBack ? (0, _hexToRgba2.default)(btnBack, btnOpacity) : "transparent",
                            letterSpacing: btnLetter + "px",
                            textTransform: btnUpper ? "uppercase" : "none",
                            fontStyle: btnStyle,
                            fontWeight: btnWeight,
                            borderStyle: btnBorderType,
                            borderWidth: btnBorderIconBox ? btnBorderTop + "px " + btnBorderRight + "px " + btnBorderBottom + "px " + btnBorderLeft + "px" : btnBorderWidth + "px",
                            borderRadius: btnBorderRadius + "px",
                            borderColor: btnBorderColor,
                            padding: btnPadding + btnPaddingU,
                            boxShadow: btnShadowHorizontal + "px " + btnShadowVertical + "px " + btnShadowBlur + "px " + btnShadowColor + " " + btnShadowPosition
                        }
                    })
                )
            )
        );
    }
}, {
    attributes: attributes,
    migrate: function migrate(attributes) {
        var newAttributes = {
            borderLeft: "",
            borderTop: "",
            borderRight: "",
            borderBottom: "",
            btnBorderBottom: "",
            btnBorderLeft: "",
            btnBorderTop: "",
            btnBorderRight: "",
            borderIconBox: "",
            btnBorderIconBox: "",
            classMigrate: false,
            block_id: '',
            titleSizeUnit: "px",
            titleSizeTablet: '',
            titleSizeMobile: '',
            descSizeUnit: 'px',
            descSizeTablet: '',
            descSizeMobile: '',
            btnSizeUnit: 'px',
            btnSizeTablet: '',
            btnSizeMobile: '',
            btnOpacity: "",
            iconOpacity: "",
            backOpacity: "",
            hideDesktop: false,
            hideTablet: false,
            hideMobile: false
        };
        return Object.assign(attributes, newAttributes);
    },
    save: function save(props) {
        var _props$attributes2 = props.attributes,
            id = _props$attributes2.id,
            align = _props$attributes2.align,
            iconImage = _props$attributes2.iconImage,
            iconImgUrl = _props$attributes2.iconImgUrl,
            iconRadius = _props$attributes2.iconRadius,
            selectedIcon = _props$attributes2.selectedIcon,
            iconChecked = _props$attributes2.iconChecked,
            hoverEffect = _props$attributes2.hoverEffect,
            iconPos = _props$attributes2.iconPos,
            iconHPos = _props$attributes2.iconHPos,
            iconVPos = _props$attributes2.iconVPos,
            iconSize = _props$attributes2.iconSize,
            iconColor = _props$attributes2.iconColor,
            iconBackColor = _props$attributes2.iconBackColor,
            titleChecked = _props$attributes2.titleChecked,
            titleText = _props$attributes2.titleText,
            titleTag = _props$attributes2.titleTag,
            titleColor = _props$attributes2.titleColor,
            titleFont = _props$attributes2.titleFont,
            titleSize = _props$attributes2.titleSize,
            titleLine = _props$attributes2.titleLine,
            titleLetter = _props$attributes2.titleLetter,
            titleStyle = _props$attributes2.titleStyle,
            titleUpper = _props$attributes2.titleUpper,
            titleWeight = _props$attributes2.titleWeight,
            titleShadowBlur = _props$attributes2.titleShadowBlur,
            titleShadowColor = _props$attributes2.titleShadowColor,
            titleShadowHorizontal = _props$attributes2.titleShadowHorizontal,
            titleShadowVertical = _props$attributes2.titleShadowVertical,
            titleMarginT = _props$attributes2.titleMarginT,
            titleMarginB = _props$attributes2.titleMarginB,
            descChecked = _props$attributes2.descChecked,
            descText = _props$attributes2.descText,
            descColor = _props$attributes2.descColor,
            descFont = _props$attributes2.descFont,
            descSize = _props$attributes2.descSize,
            descLine = _props$attributes2.descLine,
            descWeight = _props$attributes2.descWeight,
            descMarginT = _props$attributes2.descMarginT,
            descMarginB = _props$attributes2.descMarginB,
            btnChecked = _props$attributes2.btnChecked,
            btnEffect = _props$attributes2.btnEffect,
            effectDir = _props$attributes2.effectDir,
            btnText = _props$attributes2.btnText,
            btnTarget = _props$attributes2.btnTarget,
            btnLink = _props$attributes2.btnLink,
            btnSize = _props$attributes2.btnSize,
            btnStyle = _props$attributes2.btnStyle,
            btnUpper = _props$attributes2.btnUpper,
            btnWeight = _props$attributes2.btnWeight,
            btnLetter = _props$attributes2.btnLetter,
            btnColor = _props$attributes2.btnColor,
            btnHoverColor = _props$attributes2.btnHoverColor,
            btnHoverBorder = _props$attributes2.btnHoverBorder,
            btnBack = _props$attributes2.btnBack,
            btnHoverBack = _props$attributes2.btnHoverBack,
            btnBorderWidth = _props$attributes2.btnBorderWidth,
            btnBorderRadius = _props$attributes2.btnBorderRadius,
            btnBorderColor = _props$attributes2.btnBorderColor,
            btnBorderType = _props$attributes2.btnBorderType,
            btnPadding = _props$attributes2.btnPadding,
            btnPaddingU = _props$attributes2.btnPaddingU,
            btnMarginT = _props$attributes2.btnMarginT,
            btnMarginB = _props$attributes2.btnMarginB,
            btnShadowBlur = _props$attributes2.btnShadowBlur,
            btnShadowColor = _props$attributes2.btnShadowColor,
            btnShadowHorizontal = _props$attributes2.btnShadowHorizontal,
            btnShadowVertical = _props$attributes2.btnShadowVertical,
            btnShadowPosition = _props$attributes2.btnShadowPosition,
            backColor = _props$attributes2.backColor,
            imageURL = _props$attributes2.imageURL,
            fixed = _props$attributes2.fixed,
            backgroundRepeat = _props$attributes2.backgroundRepeat,
            backgroundPosition = _props$attributes2.backgroundPosition,
            backgroundSize = _props$attributes2.backgroundSize,
            borderType = _props$attributes2.borderType,
            borderWidth = _props$attributes2.borderWidth,
            borderRadius = _props$attributes2.borderRadius,
            borderColor = _props$attributes2.borderColor,
            marginT = _props$attributes2.marginT,
            marginR = _props$attributes2.marginR,
            marginB = _props$attributes2.marginB,
            marginL = _props$attributes2.marginL,
            paddingT = _props$attributes2.paddingT,
            paddingR = _props$attributes2.paddingR,
            paddingB = _props$attributes2.paddingB,
            paddingL = _props$attributes2.paddingL,
            paddingU = _props$attributes2.paddingU,
            shadowBlur = _props$attributes2.shadowBlur,
            shadowColor = _props$attributes2.shadowColor,
            shadowHorizontal = _props$attributes2.shadowHorizontal,
            shadowVertical = _props$attributes2.shadowVertical,
            shadowPosition = _props$attributes2.shadowPosition,
            hoverShadowBlur = _props$attributes2.hoverShadowBlur,
            hoverShadowColor = _props$attributes2.hoverShadowColor,
            hoverShadowHorizontal = _props$attributes2.hoverShadowHorizontal,
            hoverShadowVertical = _props$attributes2.hoverShadowVertical,
            hoverShadowPosition = _props$attributes2.hoverShadowPosition;


        return React.createElement(
            "div",
            {
                id: "premium-icon-box-" + id,
                className: className + " premium-icon-box-" + iconPos + " premium-icon-box-" + iconHPos,
                style: {
                    textAlign: align,
                    border: borderType,
                    borderWidth: borderWidth + "px",
                    borderRadius: borderRadius + "px",
                    borderColor: borderColor,
                    marginTop: marginT,
                    marginRight: marginR,
                    marginBottom: marginB,
                    marginLeft: marginL,
                    paddingTop: paddingT + paddingU,
                    paddingRight: paddingR + paddingU,
                    paddingBottom: paddingB + paddingU,
                    paddingLeft: paddingL + paddingU,
                    boxShadow: shadowHorizontal + "px " + shadowVertical + "px " + shadowBlur + "px " + shadowColor + " " + shadowPosition,
                    backgroundColor: backColor,
                    backgroundImage: "url('" + imageURL + "')",
                    backgroundRepeat: backgroundRepeat,
                    backgroundPosition: backgroundPosition,
                    backgroundSize: backgroundSize,
                    backgroundAttachment: fixed ? "fixed" : "unset"
                }
            },
            btnChecked && btnText && React.createElement("style", {
                dangerouslySetInnerHTML: {
                    __html: ["#premium-icon-box-" + id + ":hover {", "box-shadow: " + hoverShadowHorizontal + "px " + hoverShadowVertical + "px " + hoverShadowBlur + "px " + hoverShadowColor + " " + hoverShadowPosition + " !important", "}", "#premium-icon-box-" + id + " .premium-icon-box__btn:hover {", "color: " + btnHoverColor + " !important;", "border-color: " + btnHoverBorder + " !important;", "}", "#premium-icon-box-" + id + " .premium-button__none .premium-icon-box__btn:hover {", "background-color: " + btnHoverBack + " !important;", "}", "#premium-icon-box-" + id + " .premium-button__slide .premium-button::before {", "background-color: " + btnHoverBack + " !important;", "}"].join("\n")
                }
            }),
            iconChecked && React.createElement(
                "div",
                {
                    className: "premium-icon-box__icon_wrap premium-icon-box__icon_" + iconVPos
                },
                "icon" === iconImage && selectedIcon && React.createElement("i", {
                    className: selectedIcon + " premium-icon-box__icon premium-icon__" + hoverEffect,
                    style: {
                        color: iconColor,
                        backgroundColor: iconBackColor,
                        fontSize: iconSize
                    }
                }),
                "image" === iconImage && iconImgUrl && React.createElement("img", {
                    className: "premium-icon-box__icon premium-icon__" + hoverEffect,
                    src: "" + iconImgUrl,
                    alt: "Image Icon",
                    style: {
                        width: iconSize + "px",
                        height: iconSize + "px",
                        borderRadius: iconRadius + "px"
                    }
                })
            ),
            React.createElement(
                "div",
                { className: "premium-icon-box__content_wrap" },
                titleChecked && titleText && React.createElement(
                    "div",
                    {
                        className: "premium-icon-box__title_wrap",
                        style: {
                            marginTop: titleMarginT,
                            marginBottom: titleMarginB
                        }
                    },
                    React.createElement(RichText.Content, {
                        tagName: titleTag.toLowerCase(),
                        className: "premium-icon-box__title",
                        value: titleText,
                        style: {
                            color: titleColor,
                            fontSize: titleSize + "px",
                            fontFamily: titleFont,
                            letterSpacing: titleLetter + "px",
                            textTransform: titleUpper ? "uppercase" : "none",
                            fontStyle: titleStyle,
                            fontWeight: titleWeight,
                            textShadow: titleShadowHorizontal + "px " + titleShadowVertical + "px " + titleShadowBlur + "px " + titleShadowColor,
                            lineHeight: titleLine + "px"
                        }
                    })
                ),
                descChecked && descText && React.createElement(
                    "div",
                    {
                        className: "premium-icon-box__desc_wrap",
                        style: {
                            marginTop: descMarginT,
                            marginBottom: descMarginB
                        }
                    },
                    React.createElement(RichText.Content, {
                        tagName: "p",
                        className: "premium-icon-box__desc",
                        value: descText,
                        style: {
                            color: descColor,
                            fontSize: descSize + "px",
                            fontFamily: descFont,
                            lineHeight: descLine + "px",
                            fontWeight: descWeight
                        }
                    })
                ),
                btnChecked && btnText && React.createElement(
                    "div",
                    {
                        className: "premium-icon-box__btn_wrap premium-button__" + btnEffect + " premium-button__" + effectDir,
                        style: {
                            marginTop: btnMarginT,
                            marginBottom: btnMarginB
                        }
                    },
                    React.createElement(RichText.Content, {
                        tagName: "a",
                        className: "premium-icon-box__btn premium-button",
                        href: btnLink,
                        rel: "noopener noreferrer",
                        target: btnTarget ? "_blank" : "_self",
                        value: btnText,
                        style: {
                            color: btnColor,
                            backgroundColor: btnBack,
                            fontSize: btnSize + "px",
                            letterSpacing: btnLetter + "px",
                            textTransform: btnUpper ? "uppercase" : "none",
                            fontStyle: btnStyle,
                            fontWeight: btnWeight,
                            border: btnBorderType,
                            borderWidth: btnBorderWidth + "px",
                            borderRadius: btnBorderRadius + "px",
                            borderColor: btnBorderColor,
                            padding: btnPadding + btnPaddingU,
                            boxShadow: btnShadowHorizontal + "px " + btnShadowVertical + "px " + btnShadowBlur + "px " + btnShadowColor + " " + btnShadowPosition
                        }
                    })
                )
            )
        );
    }
}, {
    attributes: attributes,
    migrate: function migrate(attributes) {
        var newAttributes = {
            iconPos: "block",
            iconHPos: "before",
            iconVPos: "center"
        };
        return Object.assign(attributes, newAttributes);
    },
    save: function save(props) {
        var _props$attributes3 = props.attributes,
            id = _props$attributes3.id,
            align = _props$attributes3.align,
            iconImage = _props$attributes3.iconImage,
            iconImgUrl = _props$attributes3.iconImgUrl,
            iconRadius = _props$attributes3.iconRadius,
            selectedIcon = _props$attributes3.selectedIcon,
            iconChecked = _props$attributes3.iconChecked,
            hoverEffect = _props$attributes3.hoverEffect,
            iconSize = _props$attributes3.iconSize,
            iconColor = _props$attributes3.iconColor,
            iconBackColor = _props$attributes3.iconBackColor,
            titleChecked = _props$attributes3.titleChecked,
            titleText = _props$attributes3.titleText,
            titleTag = _props$attributes3.titleTag,
            titleColor = _props$attributes3.titleColor,
            titleFont = _props$attributes3.titleFont,
            titleSize = _props$attributes3.titleSize,
            titleLine = _props$attributes3.titleLine,
            titleLetter = _props$attributes3.titleLetter,
            titleStyle = _props$attributes3.titleStyle,
            titleUpper = _props$attributes3.titleUpper,
            titleWeight = _props$attributes3.titleWeight,
            titleShadowBlur = _props$attributes3.titleShadowBlur,
            titleShadowColor = _props$attributes3.titleShadowColor,
            titleShadowHorizontal = _props$attributes3.titleShadowHorizontal,
            titleShadowVertical = _props$attributes3.titleShadowVertical,
            titleMarginT = _props$attributes3.titleMarginT,
            titleMarginB = _props$attributes3.titleMarginB,
            descChecked = _props$attributes3.descChecked,
            descText = _props$attributes3.descText,
            descColor = _props$attributes3.descColor,
            descFont = _props$attributes3.descFont,
            descSize = _props$attributes3.descSize,
            descLine = _props$attributes3.descLine,
            descWeight = _props$attributes3.descWeight,
            descMarginT = _props$attributes3.descMarginT,
            descMarginB = _props$attributes3.descMarginB,
            btnChecked = _props$attributes3.btnChecked,
            btnEffect = _props$attributes3.btnEffect,
            effectDir = _props$attributes3.effectDir,
            btnText = _props$attributes3.btnText,
            btnTarget = _props$attributes3.btnTarget,
            btnLink = _props$attributes3.btnLink,
            btnSize = _props$attributes3.btnSize,
            btnStyle = _props$attributes3.btnStyle,
            btnUpper = _props$attributes3.btnUpper,
            btnWeight = _props$attributes3.btnWeight,
            btnLetter = _props$attributes3.btnLetter,
            btnColor = _props$attributes3.btnColor,
            btnHoverColor = _props$attributes3.btnHoverColor,
            btnHoverBorder = _props$attributes3.btnHoverBorder,
            btnBack = _props$attributes3.btnBack,
            btnHoverBack = _props$attributes3.btnHoverBack,
            btnBorderWidth = _props$attributes3.btnBorderWidth,
            btnBorderRadius = _props$attributes3.btnBorderRadius,
            btnBorderColor = _props$attributes3.btnBorderColor,
            btnBorderType = _props$attributes3.btnBorderType,
            btnPadding = _props$attributes3.btnPadding,
            btnPaddingU = _props$attributes3.btnPaddingU,
            btnMarginT = _props$attributes3.btnMarginT,
            btnMarginB = _props$attributes3.btnMarginB,
            btnShadowBlur = _props$attributes3.btnShadowBlur,
            btnShadowColor = _props$attributes3.btnShadowColor,
            btnShadowHorizontal = _props$attributes3.btnShadowHorizontal,
            btnShadowVertical = _props$attributes3.btnShadowVertical,
            btnShadowPosition = _props$attributes3.btnShadowPosition,
            backColor = _props$attributes3.backColor,
            imageURL = _props$attributes3.imageURL,
            fixed = _props$attributes3.fixed,
            backgroundRepeat = _props$attributes3.backgroundRepeat,
            backgroundPosition = _props$attributes3.backgroundPosition,
            backgroundSize = _props$attributes3.backgroundSize,
            borderType = _props$attributes3.borderType,
            borderWidth = _props$attributes3.borderWidth,
            borderRadius = _props$attributes3.borderRadius,
            borderColor = _props$attributes3.borderColor,
            marginT = _props$attributes3.marginT,
            marginR = _props$attributes3.marginR,
            marginB = _props$attributes3.marginB,
            marginL = _props$attributes3.marginL,
            paddingT = _props$attributes3.paddingT,
            paddingR = _props$attributes3.paddingR,
            paddingB = _props$attributes3.paddingB,
            paddingL = _props$attributes3.paddingL,
            paddingU = _props$attributes3.paddingU,
            shadowBlur = _props$attributes3.shadowBlur,
            shadowColor = _props$attributes3.shadowColor,
            shadowHorizontal = _props$attributes3.shadowHorizontal,
            shadowVertical = _props$attributes3.shadowVertical,
            shadowPosition = _props$attributes3.shadowPosition,
            hoverShadowBlur = _props$attributes3.hoverShadowBlur,
            hoverShadowColor = _props$attributes3.hoverShadowColor,
            hoverShadowHorizontal = _props$attributes3.hoverShadowHorizontal,
            hoverShadowVertical = _props$attributes3.hoverShadowVertical,
            hoverShadowPosition = _props$attributes3.hoverShadowPosition;


        return React.createElement(
            "div",
            {
                id: className + "-" + id,
                className: "" + className,
                style: {
                    textAlign: align,
                    border: borderType,
                    borderWidth: borderWidth + "px",
                    borderRadius: borderRadius + "px",
                    borderColor: borderColor,
                    marginTop: marginT,
                    marginRight: marginR,
                    marginBottom: marginB,
                    marginLeft: marginL,
                    paddingTop: paddingT + paddingU,
                    paddingRight: paddingR + paddingU,
                    paddingBottom: paddingB + paddingU,
                    paddingLeft: paddingL + paddingU,
                    boxShadow: shadowHorizontal + "px " + shadowVertical + "px " + shadowBlur + "px " + shadowColor + " " + shadowPosition,
                    backgroundColor: backColor,
                    backgroundImage: "url('" + imageURL + "')",
                    backgroundRepeat: backgroundRepeat,
                    backgroundPosition: backgroundPosition,
                    backgroundSize: backgroundSize,
                    backgroundAttachment: fixed ? "fixed" : "unset"
                }
            },
            btnChecked && btnText && React.createElement("style", {
                dangerouslySetInnerHTML: {
                    __html: ["#premium-icon-box-" + id + ":hover {", "box-shadow: " + hoverShadowHorizontal + "px " + hoverShadowVertical + "px " + hoverShadowBlur + "px " + hoverShadowColor + " " + hoverShadowPosition + " !important", "}", "#premium-icon-box-" + id + " .premium-icon-box__btn:hover {", "color: " + btnHoverColor + " !important;", "border-color: " + btnHoverBorder + " !important;", "}", "#premium-icon-box-" + id + " .premium-button__none .premium-icon-box__btn:hover {", "background-color: " + btnHoverBack + " !important;", "}", "#premium-icon-box-" + id + " .premium-button__slide .premium-button::before {", "background-color: " + btnHoverBack + " !important;", "}"].join("\n")
                }
            }),
            iconChecked && React.createElement(
                "div",
                { className: className + "__icon_wrap" },
                "icon" === iconImage && selectedIcon && React.createElement("i", {
                    className: selectedIcon + " " + className + "__icon premium-icon__" + hoverEffect,
                    style: {
                        color: iconColor,
                        backgroundColor: iconBackColor,
                        fontSize: iconSize
                    }
                }),
                "image" === iconImage && iconImgUrl && React.createElement("img", {
                    className: className + "__icon premium-icon__" + hoverEffect,
                    src: "" + iconImgUrl,
                    alt: "Image Icon",
                    style: {
                        width: iconSize + "px",
                        height: iconSize + "px",
                        borderRadius: iconRadius + "px"
                    }
                })
            ),
            titleChecked && titleText && React.createElement(
                "div",
                {
                    className: className + "__title_wrap",
                    style: {
                        marginTop: titleMarginT,
                        marginBottom: titleMarginB
                    }
                },
                React.createElement(RichText.Content, {
                    tagName: titleTag.toLowerCase(),
                    className: className + "__title",
                    value: titleText,
                    style: {
                        color: titleColor,
                        fontSize: titleSize + "px",
                        fontFamily: titleFont,
                        letterSpacing: titleLetter + "px",
                        textTransform: titleUpper ? "uppercase" : "none",
                        fontStyle: titleStyle,
                        fontWeight: titleWeight,
                        textShadow: titleShadowHorizontal + "px " + titleShadowVertical + "px " + titleShadowBlur + "px " + titleShadowColor,
                        lineHeight: titleLine + "px"
                    }
                })
            ),
            descChecked && descText && React.createElement(
                "div",
                {
                    className: className + "__desc_wrap",
                    style: {
                        marginTop: descMarginT,
                        marginBottom: descMarginB
                    }
                },
                React.createElement(RichText.Content, {
                    tagName: "p",
                    className: className + "__desc",
                    value: descText,
                    style: {
                        color: descColor,
                        fontSize: descSize + "px",
                        fontFamily: descFont,
                        lineHeight: descLine + "px",
                        fontWeight: descWeight
                    }
                })
            ),
            btnChecked && btnText && React.createElement(
                "div",
                {
                    className: className + "__btn_wrap premium-button__" + btnEffect + " premium-button__" + effectDir,
                    style: {
                        marginTop: btnMarginT,
                        marginBottom: btnMarginB
                    }
                },
                React.createElement(RichText.Content, {
                    tagName: "a",
                    className: className + "__btn premium-button",
                    href: btnLink,
                    rel: "noopener noreferrer",
                    target: btnTarget ? "_blank" : "_self",
                    value: btnText,
                    style: {
                        color: btnColor,
                        backgroundColor: btnBack,
                        fontSize: btnSize + "px",
                        letterSpacing: btnLetter + "px",
                        textTransform: btnUpper ? "uppercase" : "none",
                        fontStyle: btnStyle,
                        fontWeight: btnWeight,
                        border: btnBorderType,
                        borderWidth: btnBorderWidth + "px",
                        borderRadius: btnBorderRadius + "px",
                        borderColor: btnBorderColor,
                        padding: btnPadding + btnPaddingU,
                        boxShadow: btnShadowHorizontal + "px " + btnShadowVertical + "px " + btnShadowBlur + "px " + btnShadowColor + " " + btnShadowPosition
                    }
                })
            )
        );
    }
}, {
    attributes: attributes,
    migrate: function migrate(attributes) {
        var newAttributes = {
            paddingU: "",
            btnPaddingU: ""
        };
        return Object.assign(attributes, newAttributes);
    },
    save: function save(props) {
        var _props$attributes4 = props.attributes,
            id = _props$attributes4.id,
            align = _props$attributes4.align,
            iconImage = _props$attributes4.iconImage,
            iconImgUrl = _props$attributes4.iconImgUrl,
            iconRadius = _props$attributes4.iconRadius,
            selectedIcon = _props$attributes4.selectedIcon,
            iconChecked = _props$attributes4.iconChecked,
            hoverEffect = _props$attributes4.hoverEffect,
            iconSize = _props$attributes4.iconSize,
            iconColor = _props$attributes4.iconColor,
            iconBackColor = _props$attributes4.iconBackColor,
            titleChecked = _props$attributes4.titleChecked,
            titleText = _props$attributes4.titleText,
            titleTag = _props$attributes4.titleTag,
            titleColor = _props$attributes4.titleColor,
            titleFont = _props$attributes4.titleFont,
            titleSize = _props$attributes4.titleSize,
            titleLine = _props$attributes4.titleLine,
            titleLetter = _props$attributes4.titleLetter,
            titleStyle = _props$attributes4.titleStyle,
            titleUpper = _props$attributes4.titleUpper,
            titleWeight = _props$attributes4.titleWeight,
            titleShadowBlur = _props$attributes4.titleShadowBlur,
            titleShadowColor = _props$attributes4.titleShadowColor,
            titleShadowHorizontal = _props$attributes4.titleShadowHorizontal,
            titleShadowVertical = _props$attributes4.titleShadowVertical,
            titleMarginT = _props$attributes4.titleMarginT,
            titleMarginB = _props$attributes4.titleMarginB,
            descChecked = _props$attributes4.descChecked,
            descText = _props$attributes4.descText,
            descColor = _props$attributes4.descColor,
            descFont = _props$attributes4.descFont,
            descSize = _props$attributes4.descSize,
            descLine = _props$attributes4.descLine,
            descWeight = _props$attributes4.descWeight,
            descMarginT = _props$attributes4.descMarginT,
            descMarginB = _props$attributes4.descMarginB,
            btnChecked = _props$attributes4.btnChecked,
            btnEffect = _props$attributes4.btnEffect,
            effectDir = _props$attributes4.effectDir,
            btnText = _props$attributes4.btnText,
            btnTarget = _props$attributes4.btnTarget,
            btnLink = _props$attributes4.btnLink,
            btnSize = _props$attributes4.btnSize,
            btnStyle = _props$attributes4.btnStyle,
            btnUpper = _props$attributes4.btnUpper,
            btnWeight = _props$attributes4.btnWeight,
            btnLetter = _props$attributes4.btnLetter,
            btnColor = _props$attributes4.btnColor,
            btnHoverColor = _props$attributes4.btnHoverColor,
            btnHoverBorder = _props$attributes4.btnHoverBorder,
            btnBack = _props$attributes4.btnBack,
            btnHoverBack = _props$attributes4.btnHoverBack,
            btnBorderWidth = _props$attributes4.btnBorderWidth,
            btnBorderRadius = _props$attributes4.btnBorderRadius,
            btnBorderColor = _props$attributes4.btnBorderColor,
            btnBorderType = _props$attributes4.btnBorderType,
            btnPadding = _props$attributes4.btnPadding,
            btnMarginT = _props$attributes4.btnMarginT,
            btnMarginB = _props$attributes4.btnMarginB,
            btnShadowBlur = _props$attributes4.btnShadowBlur,
            btnShadowColor = _props$attributes4.btnShadowColor,
            btnShadowHorizontal = _props$attributes4.btnShadowHorizontal,
            btnShadowVertical = _props$attributes4.btnShadowVertical,
            btnShadowPosition = _props$attributes4.btnShadowPosition,
            backColor = _props$attributes4.backColor,
            imageURL = _props$attributes4.imageURL,
            fixed = _props$attributes4.fixed,
            backgroundRepeat = _props$attributes4.backgroundRepeat,
            backgroundPosition = _props$attributes4.backgroundPosition,
            backgroundSize = _props$attributes4.backgroundSize,
            borderType = _props$attributes4.borderType,
            borderWidth = _props$attributes4.borderWidth,
            borderRadius = _props$attributes4.borderRadius,
            borderColor = _props$attributes4.borderColor,
            marginT = _props$attributes4.marginT,
            marginR = _props$attributes4.marginR,
            marginB = _props$attributes4.marginB,
            marginL = _props$attributes4.marginL,
            paddingT = _props$attributes4.paddingT,
            paddingR = _props$attributes4.paddingR,
            paddingB = _props$attributes4.paddingB,
            paddingL = _props$attributes4.paddingL,
            shadowBlur = _props$attributes4.shadowBlur,
            shadowColor = _props$attributes4.shadowColor,
            shadowHorizontal = _props$attributes4.shadowHorizontal,
            shadowVertical = _props$attributes4.shadowVertical,
            shadowPosition = _props$attributes4.shadowPosition,
            hoverShadowBlur = _props$attributes4.hoverShadowBlur,
            hoverShadowColor = _props$attributes4.hoverShadowColor,
            hoverShadowHorizontal = _props$attributes4.hoverShadowHorizontal,
            hoverShadowVertical = _props$attributes4.hoverShadowVertical,
            hoverShadowPosition = _props$attributes4.hoverShadowPosition;


        return React.createElement(
            "div",
            {
                id: className + "-" + id,
                className: "" + className,
                style: {
                    textAlign: align,
                    border: borderType,
                    borderWidth: borderWidth + "px",
                    borderRadius: borderRadius + "px",
                    borderColor: borderColor,
                    marginTop: marginT,
                    marginRight: marginR,
                    marginBottom: marginB,
                    marginLeft: marginL,
                    paddingTop: paddingT,
                    paddingRight: paddingR,
                    paddingBottom: paddingB,
                    paddingLeft: paddingL,
                    boxShadow: shadowHorizontal + "px " + shadowVertical + "px " + shadowBlur + "px " + shadowColor + " " + shadowPosition,
                    backgroundColor: backColor,
                    backgroundImage: "url('" + imageURL + "')",
                    backgroundRepeat: backgroundRepeat,
                    backgroundPosition: backgroundPosition,
                    backgroundSize: backgroundSize,
                    backgroundAttachment: fixed ? "fixed" : "unset"
                }
            },
            btnChecked && btnText && React.createElement("style", {
                dangerouslySetInnerHTML: {
                    __html: ["#premium-icon-box-" + id + ":hover {", "box-shadow: " + hoverShadowHorizontal + "px " + hoverShadowVertical + "px " + hoverShadowBlur + "px " + hoverShadowColor + " " + hoverShadowPosition + " !important", "}", "#premium-icon-box-" + id + " .premium-icon-box__btn:hover {", "color: " + btnHoverColor + " !important;", "border-color: " + btnHoverBorder + " !important;", "}", "#premium-icon-box-" + id + " .premium-button__none .premium-icon-box__btn:hover {", "background-color: " + btnHoverBack + " !important;", "}", "#premium-icon-box-" + id + " .premium-button__slide .premium-button::before {", "background-color: " + btnHoverBack + " !important;", "}"].join("\n")
                }
            }),
            iconChecked && React.createElement(
                "div",
                { className: className + "__icon_wrap" },
                "icon" === iconImage && selectedIcon && React.createElement("i", {
                    className: selectedIcon + " " + className + "__icon premium-icon__" + hoverEffect,
                    style: {
                        color: iconColor,
                        backgroundColor: iconBackColor,
                        fontSize: iconSize
                    }
                }),
                "image" === iconImage && iconImgUrl && React.createElement("img", {
                    className: className + "__icon premium-icon__" + hoverEffect,
                    src: "" + iconImgUrl,
                    alt: "Image Icon",
                    style: {
                        width: iconSize + "px",
                        height: iconSize + "px",
                        borderRadius: iconRadius + "px"
                    }
                })
            ),
            titleChecked && titleText && React.createElement(
                "div",
                {
                    className: className + "__title_wrap",
                    style: {
                        marginTop: titleMarginT,
                        marginBottom: titleMarginB
                    }
                },
                React.createElement(RichText.Content, {
                    tagName: titleTag.toLowerCase(),
                    className: className + "__title",
                    value: titleText,
                    style: {
                        color: titleColor,
                        fontSize: titleSize + "px",
                        fontFamily: titleFont,
                        letterSpacing: titleLetter + "px",
                        textTransform: titleUpper ? "uppercase" : "none",
                        fontStyle: titleStyle,
                        fontWeight: titleWeight,
                        textShadow: titleShadowHorizontal + "px " + titleShadowVertical + "px " + titleShadowBlur + "px " + titleShadowColor,
                        lineHeight: titleLine + "px"
                    }
                })
            ),
            descChecked && descText && React.createElement(
                "div",
                {
                    className: className + "__desc_wrap",
                    style: {
                        marginTop: descMarginT,
                        marginBottom: descMarginB
                    }
                },
                React.createElement(RichText.Content, {
                    tagName: "p",
                    className: className + "__desc",
                    value: descText,
                    style: {
                        color: descColor,
                        fontSize: descSize + "px",
                        fontFamily: descFont,
                        lineHeight: descLine + "px",
                        fontWeight: descWeight
                    }
                })
            ),
            btnChecked && btnText && React.createElement(
                "div",
                {
                    className: className + "__btn_wrap premium-button__" + btnEffect + " premium-button__" + effectDir,
                    style: {
                        marginTop: btnMarginT,
                        marginBottom: btnMarginB
                    }
                },
                React.createElement(RichText.Content, {
                    tagName: "a",
                    className: className + "__btn premium-button",
                    href: btnLink,
                    rel: "noopener noreferrer",
                    target: btnTarget ? "_blank" : "_self",
                    value: btnText,
                    style: {
                        color: btnColor,
                        backgroundColor: btnBack,
                        fontSize: btnSize + "px",
                        letterSpacing: btnLetter + "px",
                        textTransform: btnUpper ? "uppercase" : "none",
                        fontStyle: btnStyle,
                        fontWeight: btnWeight,
                        border: btnBorderType,
                        borderWidth: btnBorderWidth + "px",
                        borderRadius: btnBorderRadius + "px",
                        borderColor: btnBorderColor,
                        padding: btnPadding + "px",
                        boxShadow: btnShadowHorizontal + "px " + btnShadowVertical + "px " + btnShadowBlur + "px " + btnShadowColor + " " + btnShadowPosition
                    }
                })
            )
        );
    }
}, {
    attribute: attributes,
    migrate: function migrate(attributes) {
        var newAttributes = {
            titleFont: "",
            descFont: ""
        };
        return Object.assign(attributes, newAttributes);
    },
    save: function save(props) {
        var _props$attributes5 = props.attributes,
            id = _props$attributes5.id,
            align = _props$attributes5.align,
            iconImage = _props$attributes5.iconImage,
            iconImgUrl = _props$attributes5.iconImgUrl,
            iconRadius = _props$attributes5.iconRadius,
            selectedIcon = _props$attributes5.selectedIcon,
            iconChecked = _props$attributes5.iconChecked,
            hoverEffect = _props$attributes5.hoverEffect,
            iconSize = _props$attributes5.iconSize,
            iconColor = _props$attributes5.iconColor,
            iconBackColor = _props$attributes5.iconBackColor,
            titleChecked = _props$attributes5.titleChecked,
            titleText = _props$attributes5.titleText,
            titleTag = _props$attributes5.titleTag,
            titleColor = _props$attributes5.titleColor,
            titleSize = _props$attributes5.titleSize,
            titleLine = _props$attributes5.titleLine,
            titleLetter = _props$attributes5.titleLetter,
            titleStyle = _props$attributes5.titleStyle,
            titleUpper = _props$attributes5.titleUpper,
            titleWeight = _props$attributes5.titleWeight,
            titleShadowBlur = _props$attributes5.titleShadowBlur,
            titleShadowColor = _props$attributes5.titleShadowColor,
            titleShadowHorizontal = _props$attributes5.titleShadowHorizontal,
            titleShadowVertical = _props$attributes5.titleShadowVertical,
            titleMarginT = _props$attributes5.titleMarginT,
            titleMarginB = _props$attributes5.titleMarginB,
            descChecked = _props$attributes5.descChecked,
            descText = _props$attributes5.descText,
            descColor = _props$attributes5.descColor,
            descSize = _props$attributes5.descSize,
            descLine = _props$attributes5.descLine,
            descWeight = _props$attributes5.descWeight,
            descMarginT = _props$attributes5.descMarginT,
            descMarginB = _props$attributes5.descMarginB,
            btnChecked = _props$attributes5.btnChecked,
            btnEffect = _props$attributes5.btnEffect,
            effectDir = _props$attributes5.effectDir,
            btnText = _props$attributes5.btnText,
            btnTarget = _props$attributes5.btnTarget,
            btnLink = _props$attributes5.btnLink,
            btnSize = _props$attributes5.btnSize,
            btnStyle = _props$attributes5.btnStyle,
            btnUpper = _props$attributes5.btnUpper,
            btnWeight = _props$attributes5.btnWeight,
            btnLetter = _props$attributes5.btnLetter,
            btnColor = _props$attributes5.btnColor,
            btnHoverColor = _props$attributes5.btnHoverColor,
            btnHoverBorder = _props$attributes5.btnHoverBorder,
            btnBack = _props$attributes5.btnBack,
            btnHoverBack = _props$attributes5.btnHoverBack,
            btnBorderWidth = _props$attributes5.btnBorderWidth,
            btnBorderRadius = _props$attributes5.btnBorderRadius,
            btnBorderColor = _props$attributes5.btnBorderColor,
            btnBorderType = _props$attributes5.btnBorderType,
            btnPadding = _props$attributes5.btnPadding,
            btnMarginT = _props$attributes5.btnMarginT,
            btnMarginB = _props$attributes5.btnMarginB,
            btnShadowBlur = _props$attributes5.btnShadowBlur,
            btnShadowColor = _props$attributes5.btnShadowColor,
            btnShadowHorizontal = _props$attributes5.btnShadowHorizontal,
            btnShadowVertical = _props$attributes5.btnShadowVertical,
            btnShadowPosition = _props$attributes5.btnShadowPosition,
            backColor = _props$attributes5.backColor,
            imageURL = _props$attributes5.imageURL,
            fixed = _props$attributes5.fixed,
            backgroundRepeat = _props$attributes5.backgroundRepeat,
            backgroundPosition = _props$attributes5.backgroundPosition,
            backgroundSize = _props$attributes5.backgroundSize,
            borderType = _props$attributes5.borderType,
            borderWidth = _props$attributes5.borderWidth,
            borderRadius = _props$attributes5.borderRadius,
            borderColor = _props$attributes5.borderColor,
            marginT = _props$attributes5.marginT,
            marginR = _props$attributes5.marginR,
            marginB = _props$attributes5.marginB,
            marginL = _props$attributes5.marginL,
            paddingT = _props$attributes5.paddingT,
            paddingR = _props$attributes5.paddingR,
            paddingB = _props$attributes5.paddingB,
            paddingL = _props$attributes5.paddingL,
            shadowBlur = _props$attributes5.shadowBlur,
            shadowColor = _props$attributes5.shadowColor,
            shadowHorizontal = _props$attributes5.shadowHorizontal,
            shadowVertical = _props$attributes5.shadowVertical,
            shadowPosition = _props$attributes5.shadowPosition,
            hoverShadowBlur = _props$attributes5.hoverShadowBlur,
            hoverShadowColor = _props$attributes5.hoverShadowColor,
            hoverShadowHorizontal = _props$attributes5.hoverShadowHorizontal,
            hoverShadowVertical = _props$attributes5.hoverShadowVertical,
            hoverShadowPosition = _props$attributes5.hoverShadowPosition;


        return React.createElement(
            "div",
            {
                id: className + "-" + id,
                className: "" + className,
                style: {
                    textAlign: align,
                    border: borderType,
                    borderWidth: borderWidth + "px",
                    borderRadius: borderRadius + "px",
                    borderColor: borderColor,
                    marginTop: marginT,
                    marginRight: marginR,
                    marginBottom: marginB,
                    marginLeft: marginL,
                    paddingTop: paddingT,
                    paddingRight: paddingR,
                    paddingBottom: paddingB,
                    paddingLeft: paddingL,
                    boxShadow: shadowHorizontal + "px " + shadowVertical + "px " + shadowBlur + "px " + shadowColor + " " + shadowPosition,
                    backgroundColor: backColor,
                    backgroundImage: "url('" + imageURL + "')",
                    backgroundRepeat: backgroundRepeat,
                    backgroundPosition: backgroundPosition,
                    backgroundSize: backgroundSize,
                    backgroundAttachment: fixed ? "fixed" : "unset"
                }
            },
            btnChecked && btnText && React.createElement("style", {
                dangerouslySetInnerHTML: {
                    __html: ["#premium-icon-box-" + id + ":hover {", "box-shadow: " + hoverShadowHorizontal + "px " + hoverShadowVertical + "px " + hoverShadowBlur + "px " + hoverShadowColor + " " + hoverShadowPosition + " !important", "}", "#premium-icon-box-" + id + " .premium-icon-box__btn:hover {", "color: " + btnHoverColor + " !important;", "border-color: " + btnHoverBorder + " !important;", "}", "#premium-icon-box-" + id + " .premium-button__none .premium-icon-box__btn:hover {", "background-color: " + btnHoverBack + " !important;", "}", "#premium-icon-box-" + id + " .premium-button__slide .premium-button::before {", "background-color: " + btnHoverBack + " !important;", "}"].join("\n")
                }
            }),
            iconChecked && React.createElement(
                "div",
                { className: className + "__icon_wrap" },
                "icon" === iconImage && selectedIcon && React.createElement("i", {
                    className: selectedIcon + " " + className + "__icon premium-icon__" + hoverEffect,
                    style: {
                        color: iconColor,
                        backgroundColor: iconBackColor,
                        fontSize: iconSize
                    }
                }),
                "image" === iconImage && iconImgUrl && React.createElement("img", {
                    className: className + "__icon premium-icon__" + hoverEffect,
                    src: "" + iconImgUrl,
                    alt: "Image Icon",
                    style: {
                        width: iconSize + "px",
                        height: iconSize + "px",
                        borderRadius: iconRadius + "px"
                    }
                })
            ),
            titleChecked && titleText && React.createElement(
                "div",
                {
                    className: className + "__title_wrap",
                    style: {
                        marginTop: titleMarginT,
                        marginBottom: titleMarginB
                    }
                },
                React.createElement(RichText.Content, {
                    tagName: titleTag.toLowerCase(),
                    className: className + "__title",
                    value: titleText,
                    style: {
                        color: titleColor,
                        fontSize: titleSize + "px",
                        letterSpacing: titleLetter + "px",
                        textTransform: titleUpper ? "uppercase" : "none",
                        fontStyle: titleStyle,
                        fontWeight: titleWeight,
                        textShadow: titleShadowHorizontal + "px " + titleShadowVertical + "px " + titleShadowBlur + "px " + titleShadowColor,
                        lineHeight: titleLine + "px"
                    }
                })
            ),
            descChecked && descText && React.createElement(
                "div",
                {
                    className: className + "__desc_wrap",
                    style: {
                        marginTop: descMarginT,
                        marginBottom: descMarginB
                    }
                },
                React.createElement(RichText.Content, {
                    tagName: "p",
                    className: className + "__desc",
                    value: descText,
                    style: {
                        color: descColor,
                        fontSize: descSize + "px",
                        lineHeight: descLine + "px",
                        fontWeight: descWeight
                    }
                })
            ),
            btnChecked && btnText && React.createElement(
                "div",
                {
                    className: className + "__btn_wrap premium-button__" + btnEffect + " premium-button__" + effectDir,
                    style: {
                        marginTop: btnMarginT,
                        marginBottom: btnMarginB
                    }
                },
                React.createElement(RichText.Content, {
                    tagName: "a",
                    className: className + "__btn premium-button",
                    href: btnLink,
                    rel: "noopener noreferrer",
                    target: btnTarget ? "_blank" : "_self",
                    value: btnText,
                    style: {
                        color: btnColor,
                        backgroundColor: btnBack,
                        fontSize: btnSize + "px",
                        letterSpacing: btnLetter + "px",
                        textTransform: btnUpper ? "uppercase" : "none",
                        fontStyle: btnStyle,
                        fontWeight: btnWeight,
                        border: btnBorderType,
                        borderWidth: btnBorderWidth + "px",
                        borderRadius: btnBorderRadius + "px",
                        borderColor: btnBorderColor,
                        padding: btnPadding + "px",
                        boxShadow: btnShadowHorizontal + "px " + btnShadowVertical + "px " + btnShadowBlur + "px " + btnShadowColor + " " + btnShadowPosition
                    }
                })
            )
        );
    }
}, {
    attributes: attributes,
    migrate: function migrate(attributes) {
        var newAttributes = {
            iconBackColor: ""
        };
        return Object.assign(attributes, newAttributes);
    },
    save: function save(props) {
        var _props$attributes6 = props.attributes,
            id = _props$attributes6.id,
            align = _props$attributes6.align,
            iconImage = _props$attributes6.iconImage,
            iconImgUrl = _props$attributes6.iconImgUrl,
            iconRadius = _props$attributes6.iconRadius,
            selectedIcon = _props$attributes6.selectedIcon,
            iconChecked = _props$attributes6.iconChecked,
            hoverEffect = _props$attributes6.hoverEffect,
            iconSize = _props$attributes6.iconSize,
            iconColor = _props$attributes6.iconColor,
            titleChecked = _props$attributes6.titleChecked,
            titleText = _props$attributes6.titleText,
            titleTag = _props$attributes6.titleTag,
            titleColor = _props$attributes6.titleColor,
            titleSize = _props$attributes6.titleSize,
            titleLine = _props$attributes6.titleLine,
            titleLetter = _props$attributes6.titleLetter,
            titleStyle = _props$attributes6.titleStyle,
            titleUpper = _props$attributes6.titleUpper,
            titleWeight = _props$attributes6.titleWeight,
            titleShadowBlur = _props$attributes6.titleShadowBlur,
            titleShadowColor = _props$attributes6.titleShadowColor,
            titleShadowHorizontal = _props$attributes6.titleShadowHorizontal,
            titleShadowVertical = _props$attributes6.titleShadowVertical,
            titleMarginT = _props$attributes6.titleMarginT,
            titleMarginB = _props$attributes6.titleMarginB,
            descChecked = _props$attributes6.descChecked,
            descText = _props$attributes6.descText,
            descColor = _props$attributes6.descColor,
            descSize = _props$attributes6.descSize,
            descLine = _props$attributes6.descLine,
            descWeight = _props$attributes6.descWeight,
            descMarginT = _props$attributes6.descMarginT,
            descMarginB = _props$attributes6.descMarginB,
            btnChecked = _props$attributes6.btnChecked,
            btnEffect = _props$attributes6.btnEffect,
            effectDir = _props$attributes6.effectDir,
            btnText = _props$attributes6.btnText,
            btnTarget = _props$attributes6.btnTarget,
            btnLink = _props$attributes6.btnLink,
            btnSize = _props$attributes6.btnSize,
            btnStyle = _props$attributes6.btnStyle,
            btnUpper = _props$attributes6.btnUpper,
            btnWeight = _props$attributes6.btnWeight,
            btnLetter = _props$attributes6.btnLetter,
            btnColor = _props$attributes6.btnColor,
            btnHoverColor = _props$attributes6.btnHoverColor,
            btnHoverBorder = _props$attributes6.btnHoverBorder,
            btnBack = _props$attributes6.btnBack,
            btnHoverBack = _props$attributes6.btnHoverBack,
            btnBorderWidth = _props$attributes6.btnBorderWidth,
            btnBorderRadius = _props$attributes6.btnBorderRadius,
            btnBorderColor = _props$attributes6.btnBorderColor,
            btnBorderType = _props$attributes6.btnBorderType,
            btnPadding = _props$attributes6.btnPadding,
            btnMarginT = _props$attributes6.btnMarginT,
            btnMarginB = _props$attributes6.btnMarginB,
            btnShadowBlur = _props$attributes6.btnShadowBlur,
            btnShadowColor = _props$attributes6.btnShadowColor,
            btnShadowHorizontal = _props$attributes6.btnShadowHorizontal,
            btnShadowVertical = _props$attributes6.btnShadowVertical,
            btnShadowPosition = _props$attributes6.btnShadowPosition,
            backColor = _props$attributes6.backColor,
            imageURL = _props$attributes6.imageURL,
            fixed = _props$attributes6.fixed,
            backgroundRepeat = _props$attributes6.backgroundRepeat,
            backgroundPosition = _props$attributes6.backgroundPosition,
            backgroundSize = _props$attributes6.backgroundSize,
            borderType = _props$attributes6.borderType,
            borderWidth = _props$attributes6.borderWidth,
            borderRadius = _props$attributes6.borderRadius,
            borderColor = _props$attributes6.borderColor,
            marginT = _props$attributes6.marginT,
            marginR = _props$attributes6.marginR,
            marginB = _props$attributes6.marginB,
            marginL = _props$attributes6.marginL,
            paddingT = _props$attributes6.paddingT,
            paddingR = _props$attributes6.paddingR,
            paddingB = _props$attributes6.paddingB,
            paddingL = _props$attributes6.paddingL,
            shadowBlur = _props$attributes6.shadowBlur,
            shadowColor = _props$attributes6.shadowColor,
            shadowHorizontal = _props$attributes6.shadowHorizontal,
            shadowVertical = _props$attributes6.shadowVertical,
            shadowPosition = _props$attributes6.shadowPosition,
            hoverShadowBlur = _props$attributes6.hoverShadowBlur,
            hoverShadowColor = _props$attributes6.hoverShadowColor,
            hoverShadowHorizontal = _props$attributes6.hoverShadowHorizontal,
            hoverShadowVertical = _props$attributes6.hoverShadowVertical,
            hoverShadowPosition = _props$attributes6.hoverShadowPosition;


        return React.createElement(
            "div",
            {
                id: className + "-" + id,
                className: "" + className,
                style: {
                    textAlign: align,
                    border: borderType,
                    borderWidth: borderWidth + "px",
                    borderRadius: borderRadius + "px",
                    borderColor: borderColor,
                    marginTop: marginT,
                    marginRight: marginR,
                    marginBottom: marginB,
                    marginLeft: marginL,
                    paddingTop: paddingT,
                    paddingRight: paddingR,
                    paddingBottom: paddingB,
                    paddingLeft: paddingL,
                    boxShadow: shadowHorizontal + "px " + shadowVertical + "px " + shadowBlur + "px " + shadowColor + " " + shadowPosition,
                    backgroundColor: backColor,
                    backgroundImage: "url('" + imageURL + "')",
                    backgroundRepeat: backgroundRepeat,
                    backgroundPosition: backgroundPosition,
                    backgroundSize: backgroundSize,
                    backgroundAttachment: fixed ? "fixed" : "unset"
                }
            },
            btnChecked && btnText && React.createElement("style", {
                dangerouslySetInnerHTML: {
                    __html: ["#premium-icon-box-" + id + ":hover {", "box-shadow: " + hoverShadowHorizontal + "px " + hoverShadowVertical + "px " + hoverShadowBlur + "px " + hoverShadowColor + " " + hoverShadowPosition + " !important", "}", "#premium-icon-box-" + id + " .premium-icon-box__btn:hover {", "color: " + btnHoverColor + " !important;", "border-color: " + btnHoverBorder + " !important;", "}", "#premium-icon-box-" + id + " .premium-button__none .premium-icon-box__btn:hover {", "background-color: " + btnHoverBack + " !important;", "}", "#premium-icon-box-" + id + " .premium-button__slide .premium-button::before {", "background-color: " + btnHoverBack + " !important;", "}"].join("\n")
                }
            }),
            iconChecked && React.createElement(
                "div",
                { className: className + "__icon_wrap" },
                "icon" === iconImage && selectedIcon && React.createElement("i", {
                    className: selectedIcon + " " + className + "__icon premium-icon__" + hoverEffect,
                    style: {
                        color: iconColor,
                        fontSize: iconSize
                    }
                }),
                "image" === iconImage && iconImgUrl && React.createElement("img", {
                    className: className + "__icon premium-icon__" + hoverEffect,
                    src: "" + iconImgUrl,
                    alt: "Image Icon",
                    style: {
                        width: iconSize + "px",
                        height: iconSize + "px",
                        borderRadius: iconRadius + "px"
                    }
                })
            ),
            titleChecked && titleText && React.createElement(
                "div",
                {
                    className: className + "__title_wrap",
                    style: {
                        marginTop: titleMarginT,
                        marginBottom: titleMarginB
                    }
                },
                React.createElement(RichText.Content, {
                    tagName: titleTag.toLowerCase(),
                    className: className + "__title",
                    value: titleText,
                    style: {
                        color: titleColor,
                        fontSize: titleSize + "px",
                        letterSpacing: titleLetter + "px",
                        textTransform: titleUpper ? "uppercase" : "none",
                        fontStyle: titleStyle,
                        fontWeight: titleWeight,
                        textShadow: titleShadowHorizontal + "px " + titleShadowVertical + "px " + titleShadowBlur + "px " + titleShadowColor,
                        lineHeight: titleLine + "px"
                    }
                })
            ),
            descChecked && descText && React.createElement(
                "div",
                {
                    className: className + "__desc_wrap",
                    style: {
                        marginTop: descMarginT,
                        marginBottom: descMarginB
                    }
                },
                React.createElement(RichText.Content, {
                    tagName: "p",
                    className: className + "__desc",
                    value: descText,
                    style: {
                        color: descColor,
                        fontSize: descSize + "px",
                        lineHeight: descLine + "px",
                        fontWeight: descWeight
                    }
                })
            ),
            btnChecked && btnText && React.createElement(
                "div",
                {
                    className: className + "__btn_wrap premium-button__" + btnEffect + " premium-button__" + effectDir,
                    style: {
                        marginTop: btnMarginT,
                        marginBottom: btnMarginB
                    }
                },
                React.createElement(RichText.Content, {
                    tagName: "a",
                    className: className + "__btn premium-button",
                    href: btnLink,
                    target: btnTarget ? "_blank" : "_self",
                    value: btnText,
                    style: {
                        color: btnColor,
                        backgroundColor: btnBack,
                        fontSize: btnSize + "px",
                        letterSpacing: btnLetter + "px",
                        textTransform: btnUpper ? "uppercase" : "none",
                        fontStyle: btnStyle,
                        fontWeight: btnWeight,
                        border: btnBorderType,
                        borderWidth: btnBorderWidth + "px",
                        borderRadius: btnBorderRadius + "px",
                        borderColor: btnBorderColor,
                        padding: btnPadding + "px",
                        boxShadow: btnShadowHorizontal + "px " + btnShadowVertical + "px " + btnShadowBlur + "px " + btnShadowColor + " " + btnShadowPosition
                    }
                })
            )
        );
    }
}, {
    attributes: attributes,
    migrate: function migrate(attributes) {
        var newAttributes = {
            hoverShadowColor: "",
            hoverShadowBlur: "",
            hoverShadowHorizontal: "",
            hoverShadowVertical: "",
            hoverShadowPosition: ""
        };
        return Object.assign(attributes, newAttributes);
    },
    save: function save(props) {
        var _props$attributes7 = props.attributes,
            id = _props$attributes7.id,
            align = _props$attributes7.align,
            iconImage = _props$attributes7.iconImage,
            iconImgUrl = _props$attributes7.iconImgUrl,
            iconRadius = _props$attributes7.iconRadius,
            selectedIcon = _props$attributes7.selectedIcon,
            iconChecked = _props$attributes7.iconChecked,
            hoverEffect = _props$attributes7.hoverEffect,
            iconSize = _props$attributes7.iconSize,
            iconColor = _props$attributes7.iconColor,
            titleChecked = _props$attributes7.titleChecked,
            titleText = _props$attributes7.titleText,
            titleTag = _props$attributes7.titleTag,
            titleColor = _props$attributes7.titleColor,
            titleSize = _props$attributes7.titleSize,
            titleLine = _props$attributes7.titleLine,
            titleLetter = _props$attributes7.titleLetter,
            titleStyle = _props$attributes7.titleStyle,
            titleUpper = _props$attributes7.titleUpper,
            titleWeight = _props$attributes7.titleWeight,
            titleShadowBlur = _props$attributes7.titleShadowBlur,
            titleShadowColor = _props$attributes7.titleShadowColor,
            titleShadowHorizontal = _props$attributes7.titleShadowHorizontal,
            titleShadowVertical = _props$attributes7.titleShadowVertical,
            titleMarginT = _props$attributes7.titleMarginT,
            titleMarginB = _props$attributes7.titleMarginB,
            descChecked = _props$attributes7.descChecked,
            descText = _props$attributes7.descText,
            descColor = _props$attributes7.descColor,
            descSize = _props$attributes7.descSize,
            descLine = _props$attributes7.descLine,
            descWeight = _props$attributes7.descWeight,
            descMarginT = _props$attributes7.descMarginT,
            descMarginB = _props$attributes7.descMarginB,
            btnChecked = _props$attributes7.btnChecked,
            btnEffect = _props$attributes7.btnEffect,
            effectDir = _props$attributes7.effectDir,
            btnText = _props$attributes7.btnText,
            btnTarget = _props$attributes7.btnTarget,
            btnLink = _props$attributes7.btnLink,
            btnSize = _props$attributes7.btnSize,
            btnStyle = _props$attributes7.btnStyle,
            btnUpper = _props$attributes7.btnUpper,
            btnWeight = _props$attributes7.btnWeight,
            btnLetter = _props$attributes7.btnLetter,
            btnColor = _props$attributes7.btnColor,
            btnHoverColor = _props$attributes7.btnHoverColor,
            btnHoverBorder = _props$attributes7.btnHoverBorder,
            btnBack = _props$attributes7.btnBack,
            btnHoverBack = _props$attributes7.btnHoverBack,
            btnBorderWidth = _props$attributes7.btnBorderWidth,
            btnBorderRadius = _props$attributes7.btnBorderRadius,
            btnBorderColor = _props$attributes7.btnBorderColor,
            btnBorderType = _props$attributes7.btnBorderType,
            btnPadding = _props$attributes7.btnPadding,
            btnMarginT = _props$attributes7.btnMarginT,
            btnMarginB = _props$attributes7.btnMarginB,
            btnShadowBlur = _props$attributes7.btnShadowBlur,
            btnShadowColor = _props$attributes7.btnShadowColor,
            btnShadowHorizontal = _props$attributes7.btnShadowHorizontal,
            btnShadowVertical = _props$attributes7.btnShadowVertical,
            btnShadowPosition = _props$attributes7.btnShadowPosition,
            backColor = _props$attributes7.backColor,
            imageURL = _props$attributes7.imageURL,
            fixed = _props$attributes7.fixed,
            backgroundRepeat = _props$attributes7.backgroundRepeat,
            backgroundPosition = _props$attributes7.backgroundPosition,
            backgroundSize = _props$attributes7.backgroundSize,
            borderType = _props$attributes7.borderType,
            borderWidth = _props$attributes7.borderWidth,
            borderRadius = _props$attributes7.borderRadius,
            borderColor = _props$attributes7.borderColor,
            marginT = _props$attributes7.marginT,
            marginR = _props$attributes7.marginR,
            marginB = _props$attributes7.marginB,
            marginL = _props$attributes7.marginL,
            paddingT = _props$attributes7.paddingT,
            paddingR = _props$attributes7.paddingR,
            paddingB = _props$attributes7.paddingB,
            paddingL = _props$attributes7.paddingL,
            shadowBlur = _props$attributes7.shadowBlur,
            shadowColor = _props$attributes7.shadowColor,
            shadowHorizontal = _props$attributes7.shadowHorizontal,
            shadowVertical = _props$attributes7.shadowVertical,
            shadowPosition = _props$attributes7.shadowPosition;


        return React.createElement(
            "div",
            {
                id: className + "-" + id,
                className: "" + className,
                style: {
                    textAlign: align,
                    border: borderType,
                    borderWidth: borderWidth + "px",
                    borderRadius: borderRadius + "px",
                    borderColor: borderColor,
                    marginTop: marginT,
                    marginRight: marginR,
                    marginBottom: marginB,
                    marginLeft: marginL,
                    paddingTop: paddingT,
                    paddingRight: paddingR,
                    paddingBottom: paddingB,
                    paddingLeft: paddingL,
                    boxShadow: shadowHorizontal + "px " + shadowVertical + "px " + shadowBlur + "px " + shadowColor + " " + shadowPosition,
                    backgroundColor: backColor,
                    backgroundImage: "url('" + imageURL + "')",
                    backgroundRepeat: backgroundRepeat,
                    backgroundPosition: backgroundPosition,
                    backgroundSize: backgroundSize,
                    backgroundAttachment: fixed ? "fixed" : "unset"
                }
            },
            btnChecked && btnText && React.createElement("style", {
                dangerouslySetInnerHTML: {
                    __html: ["#premium-icon-box-" + id + " .premium-icon-box__btn:hover {", "color: " + btnHoverColor + " !important;", "border-color: " + btnHoverBorder + " !important;", "}", "#premium-icon-box-" + id + " .premium-button__none .premium-icon-box__btn:hover {", "background-color: " + btnHoverBack + " !important;", "}", "#premium-icon-box-" + id + " .premium-button__slide .premium-button::before {", "background-color: " + btnHoverBack + " !important;", "}"].join("\n")
                }
            }),
            iconChecked && React.createElement(
                "div",
                { className: className + "__icon_wrap" },
                "icon" === iconImage && selectedIcon && React.createElement("i", {
                    className: selectedIcon + " " + className + "__icon premium-icon__" + hoverEffect,
                    style: {
                        color: iconColor,
                        fontSize: iconSize
                    }
                }),
                "image" === iconImage && iconImgUrl && React.createElement("img", {
                    className: className + "__icon premium-icon__" + hoverEffect,
                    src: "" + iconImgUrl,
                    alt: "Image Icon",
                    style: {
                        width: iconSize + "px",
                        height: iconSize + "px",
                        borderRadius: iconRadius + "px"
                    }
                })
            ),
            titleChecked && titleText && React.createElement(
                "div",
                {
                    className: className + "__title_wrap",
                    style: {
                        marginTop: titleMarginT,
                        marginBottom: titleMarginB
                    }
                },
                React.createElement(RichText.Content, {
                    tagName: titleTag.toLowerCase(),
                    className: className + "__title",
                    value: titleText,
                    style: {
                        color: titleColor,
                        fontSize: titleSize + "px",
                        letterSpacing: titleLetter + "px",
                        textTransform: titleUpper ? "uppercase" : "none",
                        fontStyle: titleStyle,
                        fontWeight: titleWeight,
                        textShadow: titleShadowHorizontal + "px " + titleShadowVertical + "px " + titleShadowBlur + "px " + titleShadowColor,
                        lineHeight: titleLine + "px"
                    }
                })
            ),
            descChecked && descText && React.createElement(
                "div",
                {
                    className: className + "__desc_wrap",
                    style: {
                        marginTop: descMarginT,
                        marginBottom: descMarginB
                    }
                },
                React.createElement(RichText.Content, {
                    tagName: "p",
                    className: className + "__desc",
                    value: descText,
                    style: {
                        color: descColor,
                        fontSize: descSize + "px",
                        lineHeight: descLine + "px",
                        fontWeight: descWeight
                    }
                })
            ),
            btnChecked && btnText && React.createElement(
                "div",
                {
                    className: className + "__btn_wrap premium-button__" + btnEffect + " premium-button__" + effectDir,
                    style: {
                        marginTop: btnMarginT,
                        marginBottom: btnMarginB
                    }
                },
                React.createElement(RichText.Content, {
                    tagName: "a",
                    className: className + "__btn premium-button",
                    href: btnLink,
                    target: btnTarget ? "_blank" : "_self",
                    value: btnText,
                    style: {
                        color: btnColor,
                        backgroundColor: btnBack,
                        fontSize: btnSize + "px",
                        letterSpacing: btnLetter + "px",
                        textTransform: btnUpper ? "uppercase" : "none",
                        fontStyle: btnStyle,
                        fontWeight: btnWeight,
                        border: btnBorderType,
                        borderWidth: btnBorderWidth + "px",
                        borderRadius: btnBorderRadius + "px",
                        borderColor: btnBorderColor,
                        padding: btnPadding + "px",
                        boxShadow: btnShadowHorizontal + "px " + btnShadowVertical + "px " + btnShadowBlur + "px " + btnShadowColor + " " + btnShadowPosition
                    }
                })
            )
        );
    }
}, {
    attributes: attributes,
    migrate: function migrate(attributes) {
        return {
            iconSize: attributes.iconSize
        };
    },
    save: function save(props) {
        var _props$attributes8 = props.attributes,
            id = _props$attributes8.id,
            align = _props$attributes8.align,
            iconType = _props$attributes8.iconType,
            iconImage = _props$attributes8.iconImage,
            iconImgUrl = _props$attributes8.iconImgUrl,
            iconRadius = _props$attributes8.iconRadius,
            selectedIcon = _props$attributes8.selectedIcon,
            iconChecked = _props$attributes8.iconChecked,
            hoverEffect = _props$attributes8.hoverEffect,
            iconSize = _props$attributes8.iconSize,
            iconColor = _props$attributes8.iconColor,
            titleChecked = _props$attributes8.titleChecked,
            titleText = _props$attributes8.titleText,
            titleTag = _props$attributes8.titleTag,
            titleColor = _props$attributes8.titleColor,
            titleSize = _props$attributes8.titleSize,
            titleLine = _props$attributes8.titleLine,
            titleLetter = _props$attributes8.titleLetter,
            titleStyle = _props$attributes8.titleStyle,
            titleUpper = _props$attributes8.titleUpper,
            titleWeight = _props$attributes8.titleWeight,
            titleShadowBlur = _props$attributes8.titleShadowBlur,
            titleShadowColor = _props$attributes8.titleShadowColor,
            titleShadowHorizontal = _props$attributes8.titleShadowHorizontal,
            titleShadowVertical = _props$attributes8.titleShadowVertical,
            titleMarginT = _props$attributes8.titleMarginT,
            titleMarginB = _props$attributes8.titleMarginB,
            descChecked = _props$attributes8.descChecked,
            descText = _props$attributes8.descText,
            descColor = _props$attributes8.descColor,
            descSize = _props$attributes8.descSize,
            descLine = _props$attributes8.descLine,
            descWeight = _props$attributes8.descWeight,
            descMarginT = _props$attributes8.descMarginT,
            descMarginB = _props$attributes8.descMarginB,
            btnChecked = _props$attributes8.btnChecked,
            btnText = _props$attributes8.btnText,
            btnTarget = _props$attributes8.btnTarget,
            btnLink = _props$attributes8.btnLink,
            btnSize = _props$attributes8.btnSize,
            btnStyle = _props$attributes8.btnStyle,
            btnUpper = _props$attributes8.btnUpper,
            btnWeight = _props$attributes8.btnWeight,
            btnLetter = _props$attributes8.btnLetter,
            btnColor = _props$attributes8.btnColor,
            btnHoverColor = _props$attributes8.btnHoverColor,
            btnHoverBorder = _props$attributes8.btnHoverBorder,
            btnBack = _props$attributes8.btnBack,
            btnHoverBack = _props$attributes8.btnHoverBack,
            btnBorderWidth = _props$attributes8.btnBorderWidth,
            btnBorderRadius = _props$attributes8.btnBorderRadius,
            btnBorderColor = _props$attributes8.btnBorderColor,
            btnBorderType = _props$attributes8.btnBorderType,
            btnPadding = _props$attributes8.btnPadding,
            btnMarginT = _props$attributes8.btnMarginT,
            btnMarginB = _props$attributes8.btnMarginB,
            btnShadowBlur = _props$attributes8.btnShadowBlur,
            btnShadowColor = _props$attributes8.btnShadowColor,
            btnShadowHorizontal = _props$attributes8.btnShadowHorizontal,
            btnShadowVertical = _props$attributes8.btnShadowVertical,
            btnShadowPosition = _props$attributes8.btnShadowPosition,
            backColor = _props$attributes8.backColor,
            imageURL = _props$attributes8.imageURL,
            fixed = _props$attributes8.fixed,
            backgroundRepeat = _props$attributes8.backgroundRepeat,
            backgroundPosition = _props$attributes8.backgroundPosition,
            backgroundSize = _props$attributes8.backgroundSize,
            borderType = _props$attributes8.borderType,
            borderWidth = _props$attributes8.borderWidth,
            borderRadius = _props$attributes8.borderRadius,
            borderColor = _props$attributes8.borderColor,
            marginT = _props$attributes8.marginT,
            marginR = _props$attributes8.marginR,
            marginB = _props$attributes8.marginB,
            marginL = _props$attributes8.marginL,
            paddingT = _props$attributes8.paddingT,
            paddingR = _props$attributes8.paddingR,
            paddingB = _props$attributes8.paddingB,
            paddingL = _props$attributes8.paddingL,
            shadowBlur = _props$attributes8.shadowBlur,
            shadowColor = _props$attributes8.shadowColor,
            shadowHorizontal = _props$attributes8.shadowHorizontal,
            shadowVertical = _props$attributes8.shadowVertical,
            shadowPosition = _props$attributes8.shadowPosition;


        return React.createElement(
            "div",
            {
                id: className + "-" + id,
                className: "" + className,
                style: {
                    textAlign: align,
                    border: borderType,
                    borderWidth: borderWidth + "px",
                    borderRadius: borderRadius + "px",
                    borderColor: borderColor,
                    marginTop: marginT,
                    marginRight: marginR,
                    marginBottom: marginB,
                    marginLeft: marginL,
                    paddingTop: paddingT,
                    paddingRight: paddingR,
                    paddingBottom: paddingB,
                    paddingLeft: paddingL,
                    boxShadow: shadowHorizontal + "px " + shadowVertical + "px " + shadowBlur + "px " + shadowColor + " " + shadowPosition,
                    backgroundColor: backColor,
                    backgroundImage: "url('" + imageURL + "')",
                    backgroundRepeat: backgroundRepeat,
                    backgroundPosition: backgroundPosition,
                    backgroundSize: backgroundSize,
                    backgroundAttachment: fixed ? "fixed" : "unset"
                }
            },
            btnChecked && btnText && React.createElement("style", {
                dangerouslySetInnerHTML: {
                    __html: ["#premium-icon-box-" + id + " .premium-icon-box__btn:hover {", "color: " + btnHoverColor + " !important;", "background-color: " + btnHoverBack + " !important;", "border-color: " + btnHoverBorder + " !important;", "}"].join("\n")
                }
            }),
            iconChecked && React.createElement(
                "div",
                { className: className + "__icon_wrap" },
                "icon" === iconImage && selectedIcon && React.createElement("i", {
                    className: selectedIcon + " " + className + "__icon premium-icon__" + hoverEffect,
                    style: {
                        color: iconColor,
                        fontSize: iconSize
                    }
                }),
                "image" === iconImage && iconImgUrl && React.createElement("img", {
                    className: className + "__icon premium-icon__" + hoverEffect,
                    src: "" + iconImgUrl,
                    alt: "Image Icon",
                    style: {
                        width: iconSize + "px",
                        height: iconSize + "px",
                        borderRadius: iconRadius + "px"
                    }
                })
            ),
            titleChecked && titleText && React.createElement(
                "div",
                {
                    className: className + "__title_wrap",
                    style: {
                        marginTop: titleMarginT,
                        marginBottom: titleMarginB
                    }
                },
                React.createElement(RichText.Content, {
                    tagName: titleTag.toLowerCase(),
                    className: className + "__title",
                    value: titleText,
                    style: {
                        color: titleColor,
                        fontSize: titleSize + "px",
                        letterSpacing: titleLetter + "px",
                        textTransform: titleUpper ? "uppercase" : "none",
                        fontStyle: titleStyle,
                        fontWeight: titleWeight,
                        textShadow: titleShadowHorizontal + "px " + titleShadowVertical + "px " + titleShadowBlur + "px " + titleShadowColor,
                        lineHeight: titleLine + "px"
                    }
                })
            ),
            descChecked && descText && React.createElement(
                "div",
                {
                    className: className + "__desc_wrap",
                    style: {
                        marginTop: descMarginT,
                        marginBottom: descMarginB
                    }
                },
                React.createElement(RichText.Content, {
                    tagName: "p",
                    className: className + "__desc",
                    value: descText,
                    style: {
                        color: descColor,
                        fontSize: descSize + "px",
                        lineHeight: descLine + "px",
                        fontWeight: descWeight
                    }
                })
            ),
            btnChecked && btnText && React.createElement(
                "div",
                {
                    className: className + "__btn_wrap",
                    style: {
                        marginTop: btnMarginT,
                        marginBottom: btnMarginB
                    }
                },
                React.createElement(RichText.Content, {
                    tagName: "a",
                    className: className + "__btn",
                    href: btnLink,
                    target: btnTarget ? "_blank" : "_self",
                    value: btnText,
                    style: {
                        color: btnColor,
                        backgroundColor: btnBack,
                        fontSize: btnSize + "px",
                        letterSpacing: btnLetter + "px",
                        textTransform: btnUpper ? "uppercase" : "none",
                        fontStyle: btnStyle,
                        fontWeight: btnWeight,
                        border: btnBorderType,
                        borderWidth: btnBorderWidth + "px",
                        borderRadius: btnBorderRadius + "px",
                        borderColor: btnBorderColor,
                        padding: btnPadding + "px",
                        boxShadow: btnShadowHorizontal + "px " + btnShadowVertical + "px " + btnShadowBlur + "px " + btnShadowColor + " " + btnShadowPosition
                    }
                })
            )
        );
    }
}, {
    attributes: attributes,
    migrate: function migrate(attributes) {
        return {
            containerMargin: {
                "Desktop": {
                    top: attributes.marginT,
                    right: attributes.marginR,
                    bottom: attributes.marginB,
                    left: attributes.marginL
                },
                "Tablet": {
                    top: attributes.marginTTablet,
                    right: attributes.marginRTablet,
                    bottom: attributes.marginBTablet,
                    left: attributes.marginLTablet
                },
                "Mobile": {
                    top: attributes.marginTMobile,
                    right: attributes.marginRMobile,
                    bottom: attributes.marginBMobile,
                    left: attributes.marginLMobile
                }
            },
            containerPadding: {
                "Desktop": {
                    top: attributes.paddingT,
                    right: attributes.paddingR,
                    bottom: attributes.paddingB,
                    left: attributes.paddingL
                },
                "Tablet": {
                    top: attributes.paddingTTablet,
                    right: attributes.paddingRTablet,
                    bottom: attributes.paddingBTablet,
                    left: attributes.paddingLTablet
                },
                "Mobile": {
                    top: attributes.paddingTMobile,
                    right: attributes.paddingRMobile,
                    bottom: attributes.paddingBMobile,
                    left: attributes.paddingLMobile
                }
            },
            titleMargin: {
                "Desktop": {
                    top: attributes.titleMarginT,
                    right: "",
                    bottom: attributes.titleMarginB,
                    left: ""
                },
                "Tablet": {
                    top: "",
                    right: "",
                    bottom: "",
                    left: ""
                },
                "Mobile": {
                    top: "",
                    right: "",
                    bottom: "",
                    left: ""
                }
            },
            descMargin: {
                "Desktop": {
                    top: attributes.descMarginT,
                    right: "",
                    bottom: attributes.descMarginB,
                    left: ""
                },
                "Tablet": {
                    top: "",
                    right: "",
                    bottom: "",
                    left: ""
                },
                "Mobile": {
                    top: "",
                    right: "",
                    bottom: "",
                    left: ""
                }
            },
            btnMargin: {
                "Desktop": {
                    top: attributes.btnMarginT,
                    right: "",
                    bottom: attributes.btnMarginB,
                    left: ""
                },
                "Tablet": {
                    top: "",
                    right: "",
                    bottom: "",
                    left: ""
                },
                "Mobile": {
                    top: "",
                    right: "",
                    bottom: "",
                    left: ""
                }
            },
            btnBorder: {
                borderColor: attributes.btnStyles[0].btnBorderColor,
                borderType: attributes.btnStyles[0].btnBorderType,
                borderRadius: {
                    "Desktop": {
                        top: "",
                        right: "",
                        bottom: "",
                        left: ""
                    },
                    "Tablet": {
                        top: "",
                        right: "",
                        bottom: "",
                        left: ""
                    },
                    "Mobile": {
                        top: "",
                        right: "",
                        bottom: "",
                        left: ""
                    }
                },
                borderWidth: {
                    "Desktop": {
                        top: attributes.btnBorderTop,
                        right: attributes.btnBorderRight,
                        bottom: attributes.btnBorderBottom,
                        left: attributes.btnBorderLeft
                    },
                    "Tablet": {
                        top: "",
                        right: "",
                        bottom: "",
                        left: ""
                    },
                    "Mobile": {
                        top: "",
                        right: "",
                        bottom: "",
                        left: ""
                    }
                }
            },
            containerBorder: {
                borderColor: attributes.containerStyles[0].btnBorderColor,
                borderType: attributes.containerStyles[0].btnBorderType,
                borderRadius: {
                    "Desktop": {
                        top: "",
                        right: "",
                        bottom: "",
                        left: ""
                    },
                    "Tablet": {
                        top: "",
                        right: "",
                        bottom: "",
                        left: ""
                    },
                    "Mobile": {
                        top: "",
                        right: "",
                        bottom: "",
                        left: ""
                    }
                },
                borderWidth: {
                    "Desktop": {
                        top: attributes.borderTop,
                        right: attributes.borderRight,
                        bottom: attributes.borderBottom,
                        left: attributes.borderLeft
                    },
                    "Tablet": {
                        top: "",
                        right: "",
                        bottom: "",
                        left: ""
                    },
                    "Mobile": {
                        top: "",
                        right: "",
                        bottom: "",
                        left: ""
                    }
                }
            }
        };
    },
    save: function save(props) {
        var _props$attributes9 = props.attributes,
            block_id = _props$attributes9.block_id,
            align = _props$attributes9.align,
            iconType = _props$attributes9.iconType,
            iconImage = _props$attributes9.iconImage,
            iconImgUrl = _props$attributes9.iconImgUrl,
            iconRadius = _props$attributes9.iconRadius,
            selectedIcon = _props$attributes9.selectedIcon,
            iconChecked = _props$attributes9.iconChecked,
            hoverEffect = _props$attributes9.hoverEffect,
            iconSize = _props$attributes9.iconSize,
            iconColor = _props$attributes9.iconColor,
            titleChecked = _props$attributes9.titleChecked,
            titleText = _props$attributes9.titleText,
            titleTag = _props$attributes9.titleTag,
            titleColor = _props$attributes9.titleColor,
            titleSize = _props$attributes9.titleSize,
            titleLine = _props$attributes9.titleLine,
            titleLetter = _props$attributes9.titleLetter,
            titleStyle = _props$attributes9.titleStyle,
            titleUpper = _props$attributes9.titleUpper,
            titleWeight = _props$attributes9.titleWeight,
            titleShadowBlur = _props$attributes9.titleShadowBlur,
            titleShadowColor = _props$attributes9.titleShadowColor,
            titleShadowHorizontal = _props$attributes9.titleShadowHorizontal,
            titleShadowVertical = _props$attributes9.titleShadowVertical,
            titleMarginT = _props$attributes9.titleMarginT,
            titleMarginB = _props$attributes9.titleMarginB,
            descChecked = _props$attributes9.descChecked,
            descText = _props$attributes9.descText,
            descColor = _props$attributes9.descColor,
            descSize = _props$attributes9.descSize,
            descLine = _props$attributes9.descLine,
            descWeight = _props$attributes9.descWeight,
            descMarginT = _props$attributes9.descMarginT,
            descMarginB = _props$attributes9.descMarginB,
            btnChecked = _props$attributes9.btnChecked,
            btnText = _props$attributes9.btnText,
            btnTarget = _props$attributes9.btnTarget,
            btnLink = _props$attributes9.btnLink,
            btnSize = _props$attributes9.btnSize,
            btnStyle = _props$attributes9.btnStyle,
            btnUpper = _props$attributes9.btnUpper,
            btnWeight = _props$attributes9.btnWeight,
            btnLetter = _props$attributes9.btnLetter,
            btnColor = _props$attributes9.btnColor,
            btnHoverColor = _props$attributes9.btnHoverColor,
            btnHoverBorder = _props$attributes9.btnHoverBorder,
            btnBack = _props$attributes9.btnBack,
            btnHoverBack = _props$attributes9.btnHoverBack,
            btnBorderWidth = _props$attributes9.btnBorderWidth,
            btnBorderRadius = _props$attributes9.btnBorderRadius,
            btnBorderColor = _props$attributes9.btnBorderColor,
            btnBorderType = _props$attributes9.btnBorderType,
            btnPadding = _props$attributes9.btnPadding,
            btnMarginT = _props$attributes9.btnMarginT,
            btnMarginB = _props$attributes9.btnMarginB,
            btnShadowBlur = _props$attributes9.btnShadowBlur,
            btnShadowColor = _props$attributes9.btnShadowColor,
            btnShadowHorizontal = _props$attributes9.btnShadowHorizontal,
            btnShadowVertical = _props$attributes9.btnShadowVertical,
            btnShadowPosition = _props$attributes9.btnShadowPosition,
            backColor = _props$attributes9.backColor,
            imageURL = _props$attributes9.imageURL,
            fixed = _props$attributes9.fixed,
            backgroundRepeat = _props$attributes9.backgroundRepeat,
            backgroundPosition = _props$attributes9.backgroundPosition,
            backgroundSize = _props$attributes9.backgroundSize,
            borderType = _props$attributes9.borderType,
            borderWidth = _props$attributes9.borderWidth,
            borderRadius = _props$attributes9.borderRadius,
            borderColor = _props$attributes9.borderColor,
            marginT = _props$attributes9.marginT,
            marginR = _props$attributes9.marginR,
            marginB = _props$attributes9.marginB,
            marginL = _props$attributes9.marginL,
            paddingT = _props$attributes9.paddingT,
            paddingR = _props$attributes9.paddingR,
            paddingB = _props$attributes9.paddingB,
            paddingL = _props$attributes9.paddingL,
            shadowBlur = _props$attributes9.shadowBlur,
            shadowColor = _props$attributes9.shadowColor,
            shadowHorizontal = _props$attributes9.shadowHorizontal,
            shadowVertical = _props$attributes9.shadowVertical,
            shadowPosition = _props$attributes9.shadowPosition,
            btnBorder = _props$attributes9.btnBorder,
            containerBorder = _props$attributes9.containerBorder;


        return React.createElement(
            "div",
            {
                id: className + "-" + block_id,
                className: "" + className
            },
            btnChecked && btnText && React.createElement("style", {
                dangerouslySetInnerHTML: {
                    __html: ["#premium-icon-box-" + block_id + ":hover {", "box-shadow: " + containerStyles[0].hoverShadowHorizontal + "px " + containerStyles[0].hoverShadowVertical + "px " + containerStyles[0].hoverShadowBlur + "px " + containerStyles[0].hoverShadowColor + " " + containerStyles[0].hoverShadowPosition + " !important", "}", "#premium-icon-box-" + block_id + " .premium-icon-box__btn:hover {", "color: " + btnStyles[0].btnHoverColor + " !important;", "border-color: " + btnHoverBorder + " !important;", "}", "#premium-icon-box-" + block_id + " .premium-button__none .premium-icon-box__btn:hover {", "background-color: " + btnStyles[0].btnHoverBack + " !important;", "}", "#premium-icon-box-" + block_id + " .premium-button__slide .premium-button::before {", "background-color: " + btnStyles[0].btnHoverBack + " !important;", "}"].join("\n")
                }
            }),
            React.createElement(
                "div",
                {
                    className: "premium-icon-box-container",
                    style: {
                        textAlign: align,
                        border: containerBorder.borderType,
                        borderColor: containerBorder.borderColor,
                        marginTop: marginT,
                        marginRight: marginR,
                        marginBottom: marginB,
                        marginLeft: marginL,
                        paddingTop: paddingT,
                        paddingRight: paddingR,
                        paddingBottom: paddingB,
                        paddingLeft: paddingL,
                        boxShadow: shadowHorizontal + "px " + shadowVertical + "px " + shadowBlur + "px " + shadowColor + " " + shadowPosition,
                        backgroundColor: backColor,
                        backgroundImage: "url('" + imageURL + "')",
                        backgroundRepeat: backgroundRepeat,
                        backgroundPosition: backgroundPosition,
                        backgroundSize: backgroundSize,
                        backgroundAttachment: fixed ? "fixed" : "unset"
                    }
                },
                iconChecked && React.createElement(
                    "div",
                    { className: className + "__icon_wrap" },
                    "icon" === iconImage && selectedIcon && React.createElement("i", {
                        className: selectedIcon + " " + className + "__icon premium-icon__" + hoverEffect,
                        style: {
                            color: iconColor,
                            fontSize: iconSize
                        }
                    }),
                    "image" === iconImage && iconImgUrl && React.createElement("img", {
                        className: className + "__icon premium-icon__" + hoverEffect,
                        src: "" + iconImgUrl,
                        alt: "Image Icon",
                        style: {
                            width: iconSize + "px",
                            height: iconSize + "px",
                            borderRadius: iconRadius + "px"
                        }
                    })
                ),
                titleChecked && titleText && React.createElement(
                    "div",
                    {
                        className: className + "__title_wrap",
                        style: {
                            marginTop: titleMarginT,
                            marginBottom: titleMarginB
                        }
                    },
                    React.createElement(RichText.Content, {
                        tagName: titleTag.toLowerCase(),
                        className: className + "__title",
                        value: titleText,
                        style: {
                            color: titleColor,
                            fontSize: titleSize + "px",
                            letterSpacing: titleLetter + "px",
                            textTransform: titleUpper ? "uppercase" : "none",
                            fontStyle: titleStyle,
                            fontWeight: titleWeight,
                            textShadow: titleShadowHorizontal + "px " + titleShadowVertical + "px " + titleShadowBlur + "px " + titleShadowColor,
                            lineHeight: titleLine + "px"
                        }
                    })
                ),
                descChecked && descText && React.createElement(
                    "div",
                    {
                        className: className + "__desc_wrap",
                        style: {
                            marginTop: descMarginT,
                            marginBottom: descMarginB
                        }
                    },
                    React.createElement(RichText.Content, {
                        tagName: "p",
                        className: className + "__desc",
                        value: descText,
                        style: {
                            color: descColor,
                            fontSize: descSize + "px",
                            lineHeight: descLine + "px",
                            fontWeight: descWeight
                        }
                    })
                ),
                btnChecked && btnText && React.createElement(
                    "div",
                    {
                        className: className + "__btn_wrap",
                        style: {
                            marginTop: btnMarginT,
                            marginBottom: btnMarginB
                        }
                    },
                    React.createElement(RichText.Content, {
                        tagName: "a",
                        className: className + "__btn",
                        href: btnLink,
                        target: btnTarget ? "_blank" : "_self",
                        value: btnText,
                        style: {
                            color: btnColor,
                            backgroundColor: btnBack,
                            fontSize: btnSize + "px",
                            letterSpacing: btnLetter + "px",
                            textTransform: btnUpper ? "uppercase" : "none",
                            fontStyle: btnStyle,
                            fontWeight: btnWeight,
                            borderStyle: btnBorder.borderType,
                            borderColor: btnBorder.borderColor,
                            padding: btnPadding + "px",
                            boxShadow: btnShadowHorizontal + "px " + btnShadowVertical + "px " + btnShadowBlur + "px " + btnShadowColor + " " + btnShadowPosition
                        }
                    })
                )
            )
        );
    }
}];

exports.default = deprecatedContent;

/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
var __ = wp.i18n.__;

var attributes = {
    block_id: {
        type: "string"
    },
    borderIconBox: {
        type: "boolean",
        default: false
    },
    btnBorderIconBox: {
        type: "boolean",
        default: false
    },
    align: {
        type: "string",
        default: "center"
    },
    iconImage: {
        type: "string",
        default: "icon"
    },
    iconImgId: {
        type: "string"
    },
    iconImgUrl: {
        type: "string"
    },
    hoverEffect: {
        type: "string",
        default: "none"
    },
    iconChecked: {
        type: "boolean",
        default: true
    },
    iconPos: {
        type: "string",
        default: "block"
    },
    iconHPos: {
        type: "string",
        default: "before"
    },
    iconVPos: {
        type: "string",
        default: "center"
    },
    iconSize: {
        type: "number"
    },
    iconRadius: {
        type: "number"
    },
    iconColor: {
        type: "string"
    },
    iconBackColor: {
        type: "string"
    },
    selectedIcon: {
        type: "string",
        default: "dashicons dashicons-admin-site"
    },
    titleChecked: {
        type: "boolean",
        default: true
    },
    titleText: {
        type: "array",
        source: "children",
        selector: ".premium-icon-box__title",
        default: __("Awesome Title", 'premium-blocks-for-gutenberg')
    },
    descText: {
        type: "array",
        source: "children",
        selector: ".premium-icon-box__desc",
        default: "Donec id elit non mi porta gravida at eget metus. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Cras mattis consectetur purus sit amet fermentum. Nullam id dolor id nibh ultricies vehicula ut id elit. Donec id elit non mi porta gravida at eget metus."
    },
    descChecked: {
        type: "boolean",
        default: true
    },

    btnChecked: {
        type: "boolean",
        default: true
    },
    btnEffect: {
        type: "string",
        default: "none"
    },
    effectDir: {
        type: "string",
        default: "top"
    },
    btnTarget: {
        type: "boolean",
        default: false
    },
    btnText: {
        type: "array",
        source: "children",
        selector: ".premium-icon-box__btn",
        default: __("Click Here", 'premium-blocks-for-gutenberg')
    },
    btnLink: {
        type: "string",
        source: "attribute",
        attribute: "href",
        selector: ".premium-icon-box__btn"
    },

    btnHoverBorder: {
        type: "string"
    },
    classMigrate: {
        type: "boolean",
        default: false
    },
    hideDesktop: {
        type: 'boolean',
        default: false
    },
    hideTablet: {
        type: 'boolean',
        default: false
    },
    hideMobile: {
        type: 'boolean',
        default: false
    },

    iconOpacity: {
        type: "number",
        default: "1"
    },

    titleStyles: {
        type: "array",
        default: [{

            titleTag: "H2",
            titleFont: __('Default', 'premium - blocks -for-gutenberg'),
            titleColor: '',
            titleSize: 20,
            titleSizeUnit: 'px',
            titleSizeTablet: 20,
            titleSizeMobile: 20,
            titleLine: '',
            titleLetter: '',
            titleStyle: '',
            titleUpper: false,
            titleWeight: '',
            titleShadowColor: '',
            titleShadowBlur: '0',
            titleShadowHorizontal: '0',
            titleShadowVertical: '0'
        }]
    },
    descStyles: {
        type: "array",
        default: [{
            descFont: __('Default', 'premium-blocks-for-gutenberg'),
            descColor: '',
            descSize: 20,
            descSizeUnit: 'px',
            descSizeTablet: 20,
            descSizeMobile: 20,
            descLine: '',
            descWeight: ''
        }]
    },
    btnStyles: {
        type: 'array',
        default: [{
            btnSize: 20,
            btnSizeUnit: 'px',
            btnSizeTablet: 20,
            btnSizeMobile: 20,
            btnLine: '',
            btnLetter: '',
            btnStyle: '',
            btnUpper: false,
            btnWeight: '',
            btnBorderType: 'none',
            btnBorderWidth: 1,
            btnBorderTop: '',
            btnBorderRight: '',
            btnBorderBottom: '',
            btnBorderLeft: '',
            btnBorderRadius: '',
            btnBorderColor: '',
            btnPadding: '',
            btnPaddingU: 'px',
            btnShadowColor: '',
            btnShadowBlur: '',
            btnShadowHorizontal: '0',
            btnShadowVertical: '0',
            btnShadowPosition: '',
            btnColor: '',
            btnHoverColor: '',
            btnBack: '',
            btnHoverBack: '',
            btnOpacity: 1
        }]
    },
    containerStyles: {
        type: "array",
        default: [{
            backOpacity: 1,
            backColor: '',
            imageID: '',
            imageURL: '',
            backgroundRepeat: "no-repeat",
            backgroundPosition: "top center",
            backgroundSize: "auto",
            fixed: false,
            borderType: "none",
            borderWidth: 1,
            borderRadius: '',
            borderColor: '',
            borderTop: '',
            borderRight: '',
            borderBottom: '',
            borderLeft: '',
            shadowColor: '',
            shadowBlur: '',
            shadowHorizontal: '',
            shadowVertical: '',
            shadowPosition: '',
            hoverShadowColor: '',
            hoverShadowBlur: '',
            hoverShadowHorizontal: '',
            hoverShadowVertical: '',
            hoverShadowPosition: '',
            marginT: '',
            marginR: '',
            marginB: '',
            marginL: '',
            paddingT: '',
            paddingR: '',
            paddingB: '',
            paddingL: '',
            paddingU: 'px',
            gradientColorOne: '',
            gradientLocationOne: '0',
            gradientColorTwo: '',
            gradientLocationTwo: '100',
            gradientType: 'linear',
            gradientAngle: '180',
            gradientPosition: 'center center'

        }]
    },
    containerMargin: {
        type: "object",
        default: {
            Desktop: {
                top: "",
                right: "",
                bottom: "",
                left: ""
            },
            Tablet: {
                top: "",
                right: "",
                bottom: "",
                left: ""
            },
            Mobile: {
                top: "",
                right: "",
                bottom: "",
                left: ""
            },
            unit: "px"
        }
    },
    containerPadding: {
        type: "object",
        default: {
            Desktop: {
                top: "",
                right: "",
                bottom: "",
                left: ""
            },
            Tablet: {
                top: "",
                right: "",
                bottom: "",
                left: ""
            },
            Mobile: {
                top: "",
                right: "",
                bottom: "",
                left: ""
            },
            unit: "px"
        }
    },
    titleMargin: {
        type: "object",
        default: {
            Desktop: {
                top: "",
                right: "",
                bottom: "",
                left: ""
            },
            Tablet: {
                top: "",
                right: "",
                bottom: "",
                left: ""
            },
            Mobile: {
                top: "",
                right: "",
                bottom: "",
                left: ""
            },
            unit: "px"
        }
    },
    descMargin: {
        type: "object",
        default: {
            Desktop: {
                top: "",
                right: "",
                bottom: "",
                left: ""
            },
            Tablet: {
                top: "",
                right: "",
                bottom: "",
                left: ""
            },
            Mobile: {
                top: "",
                right: "",
                bottom: "",
                left: ""
            },
            unit: "px"
        }
    },
    btnMargin: {
        type: "object",
        default: {
            Desktop: {
                top: "",
                right: "",
                bottom: "",
                left: ""
            },
            Tablet: {
                top: "",
                right: "",
                bottom: "",
                left: ""
            },
            Mobile: {
                top: "",
                right: "",
                bottom: "",
                left: ""
            },
            unit: "px"
        }
    },
    btnBorder: {
        type: "object",
        default: {
            borderColor: "",
            borderType: "none",
            borderRadius: {
                Desktop: {
                    top: "",
                    right: "",
                    bottom: "",
                    left: ""
                },
                Tablet: {
                    top: "",
                    right: "",
                    bottom: "",
                    left: ""
                },
                Mobile: {
                    top: "",
                    right: "",
                    bottom: "",
                    left: ""
                }
            },
            borderWidth: {
                Desktop: {
                    top: "",
                    right: "",
                    bottom: "",
                    left: ""
                },
                Tablet: {
                    top: "",
                    right: "",
                    bottom: "",
                    left: ""
                },
                Mobile: {
                    top: "",
                    right: "",
                    bottom: "",
                    left: ""
                }
            }
        }
    },
    containerBorder: {
        type: "object",
        default: {
            borderColor: "",
            borderType: "none",
            borderRadius: {
                Desktop: {
                    top: "",
                    right: "",
                    bottom: "",
                    left: ""
                },
                Tablet: {
                    top: "",
                    right: "",
                    bottom: "",
                    left: ""
                },
                Mobile: {
                    top: "",
                    right: "",
                    bottom: "",
                    left: ""
                }
            },
            borderWidth: {
                Desktop: {
                    top: "",
                    right: "",
                    bottom: "",
                    left: ""
                },
                Tablet: {
                    top: "",
                    right: "",
                    bottom: "",
                    left: ""
                },
                Mobile: {
                    top: "",
                    right: "",
                    bottom: "",
                    left: ""
                }
            }
        }
    }
};
exports.default = attributes;

/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _settings = __webpack_require__(1);

var _premiumMediaUpload = __webpack_require__(12);

var _premiumMediaUpload2 = _interopRequireDefault(_premiumMediaUpload);

var _icons = __webpack_require__(4);

var _icons2 = _interopRequireDefault(_icons);

var _premiumResponsiveTabs = __webpack_require__(8);

var _premiumResponsiveTabs2 = _interopRequireDefault(_premiumResponsiveTabs);

var _singleRangeControl = __webpack_require__(3);

var _singleRangeControl2 = _interopRequireDefault(_singleRangeControl);

var _ColorComponent = __webpack_require__(2);

var _ColorComponent2 = _interopRequireDefault(_ColorComponent);

var _radioControl = __webpack_require__(10);

var _radioControl2 = _interopRequireDefault(_radioControl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var className = "premium-maps";
var __ = wp.i18n.__;
var registerBlockType = wp.blocks.registerBlockType;
var _wp$components = wp.components,
    PanelBody = _wp$components.PanelBody,
    SelectControl = _wp$components.SelectControl,
    TextControl = _wp$components.TextControl,
    TextareaControl = _wp$components.TextareaControl,
    ToggleControl = _wp$components.ToggleControl;
var InspectorControls = wp.editor.InspectorControls;
var _wp$element = wp.element,
    Component = _wp$element.Component,
    Fragment = _wp$element.Fragment;


var isMapUpdated = null;

var mapAttrs = {
    mapID: {
        type: "string"
    },
    mapStyle: {
        type: "string",
        default: "[]"
    },
    mapType: {
        type: "string",
        default: "roadmap"
    },
    height: {
        type: "number",
        default: 500
    },
    zoom: {
        type: "number",
        default: 6
    },
    mapTypeControl: {
        type: "boolean",
        default: true
    },
    zoomControl: {
        type: "boolean",
        default: true
    },
    fullscreenControl: {
        type: "boolean",
        default: true
    },
    streetViewControl: {
        type: "boolean",
        default: false
    },
    scrollwheel: {
        type: "boolean",
        default: false
    },
    centerLat: {
        type: "string",
        default: "40.7569733"
    },
    centerLng: {
        type: "string",
        default: " -73.98878250000001"
    },
    markerOpen: {
        type: "boolean",
        default: false
    },
    markerTitle: {
        type: "string",
        default: __("Awesome Title", 'premium-blocks-for-gutenberg')
    },
    markerDesc: {
        type: "string",
        default: __("Cool Description", 'premium-blocks-for-gutenberg')
    },
    mapMarker: {
        type: "boolean",
        default: true
    },
    markerIconUrl: {
        type: "string"
    },
    markerIconId: {
        type: "number",
        default: ""
    },
    markerCustom: {
        type: "boolean",
        default: false
    },
    maxWidth: {
        type: "number",
        default: 300
    },
    titleColor: {
        type: "string",
        default: "#6ec1e4"
    },
    titleSize: {
        type: "number",
        default: 20
    },
    descColor: {
        type: "string",
        default: "#000"
    },
    descSize: {
        type: "number",
        default: 16
    },
    boxAlign: {
        type: "string",
        default: "center"
    },
    boxPadding: {
        type: "number",
        default: "0"
    },
    gapBetween: {
        type: "number",
        default: 5
    },
    hideDesktop: {
        type: 'boolean',
        default: false
    },
    hideTablet: {
        type: 'boolean',
        default: false
    },
    hideMobile: {
        type: 'boolean',
        default: false
    }

};

var mapAttrs_1_2 = {
    mapID: {
        type: "string"
    },
    mapStyle: {
        type: "string",
        default: "[]"
    },
    mapType: {
        type: "string",
        default: "roadmap"
    },
    height: {
        type: "number",
        default: 500
    },
    zoom: {
        type: "number",
        default: 6
    },
    mapTypeControl: {
        type: "boolean",
        default: true
    },
    zoomControl: {
        type: "boolean",
        default: true
    },
    fullscreenControl: {
        type: "boolean",
        default: true
    },
    streetViewControl: {
        type: "boolean",
        default: false
    },
    scrollwheel: {
        type: "boolean",
        default: false
    },
    centerLat: {
        type: "string",
        default: "40.7569733"
    },
    centerLng: {
        type: "string",
        default: " -73.98878250000001"
    },
    markerOpen: {
        type: "boolean",
        default: false
    },
    markerTitle: {
        type: "string",
        default: __("Awesome Title", 'premium-blocks-for-gutenberg')
    },
    markerDesc: {
        type: "string",
        default: __("Cool Description", 'premium-blocks-for-gutenberg')
    },
    mapMarker: {
        type: "boolean",
        default: true
    },
    markerIconUrl: {
        type: "string"
    },
    markerIconId: {
        type: "number",
        default: ""
    },
    markerCustom: {
        type: "boolean",
        default: false
    },
    maxWidth: {
        type: "number",
        default: 300
    },
    titleColor: {
        type: "string",
        default: "#6ec1e4"
    },
    titleSize: {
        type: "number",
        default: 20
    },
    descColor: {
        type: "string",
        default: "#000"
    },
    descSize: {
        type: "number",
        default: 16
    },
    boxAlign: {
        type: "string",
        default: "center"
    },
    boxPadding: {
        type: "number",
        default: "0"
    },
    gapBetween: {
        type: "number",
        default: 5
    },
    hideDesktop: {
        type: 'boolean',
        default: false
    },
    hideTablet: {
        type: 'boolean',
        default: false
    },
    hideMobile: {
        type: 'boolean',
        default: false
    }
};
var newAttributes_1_0 = {
    hideDesktop: {
        type: "boolean",
        default: false
    },
    hideTablet: {
        type: "boolean",
        default: false
    },
    hideMobile: {
        type: 'boolean',
        default: false
    }
};
var mapAttrs_1_3 = Object.assign(mapAttrs_1_2, newAttributes_1_0);

var PremiumMap = function (_Component) {
    _inherits(PremiumMap, _Component);

    function PremiumMap() {
        _classCallCheck(this, PremiumMap);

        var _this = _possibleConstructorReturn(this, (PremiumMap.__proto__ || Object.getPrototypeOf(PremiumMap)).apply(this, arguments));

        _this.state = {
            thisAddress: "",
            thisMap: null,
            thisInfo: null,
            fetching: false
        };

        _this.initMap = _this.initMap.bind(_this);
        return _this;
    }

    _createClass(PremiumMap, [{
        key: "componentDidMount",
        value: function componentDidMount() {
            var _props = this.props,
                attributes = _props.attributes,
                setAttributes = _props.setAttributes,
                clientId = _props.clientId;

            if (!attributes.mapID) {
                setAttributes({ mapID: "premium-map-" + clientId });
            }
            this.initMap();
        }
    }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps, prevState) {
            //if (prevProps.attributes !== this.props.attributes) {
            clearTimeout(isMapUpdated);
            isMapUpdated = setTimeout(this.initMap, 500);
            //}
        }
    }, {
        key: "initMap",
        value: function initMap() {
            if (typeof google === "undefined" || !this.props.attributes.mapID) return null;

            var _state = this.state,
                thisMap = _state.thisMap,
                thisInfo = _state.thisInfo;
            var _props$attributes = this.props.attributes,
                mapID = _props$attributes.mapID,
                mapStyle = _props$attributes.mapStyle,
                mapType = _props$attributes.mapType,
                zoom = _props$attributes.zoom,
                mapTypeControl = _props$attributes.mapTypeControl,
                zoomControl = _props$attributes.zoomControl,
                fullscreenControl = _props$attributes.fullscreenControl,
                streetViewControl = _props$attributes.streetViewControl,
                scrollwheel = _props$attributes.scrollwheel,
                centerLng = _props$attributes.centerLng,
                centerLat = _props$attributes.centerLat,
                markerTitle = _props$attributes.markerTitle,
                markerOpen = _props$attributes.markerOpen,
                markerDesc = _props$attributes.markerDesc,
                mapMarker = _props$attributes.mapMarker,
                markerIconUrl = _props$attributes.markerIconUrl,
                markerCustom = _props$attributes.markerCustom,
                maxWidth = _props$attributes.maxWidth,
                boxAlign = _props$attributes.boxAlign,
                boxPadding = _props$attributes.boxPadding,
                titleColor = _props$attributes.titleColor,
                titleSize = _props$attributes.titleSize,
                descColor = _props$attributes.descColor,
                descSize = _props$attributes.descSize,
                gapBetween = _props$attributes.gapBetween;


            var map = thisMap;
            var infoWindow = thisInfo;
            var latlng = new google.maps.LatLng(parseFloat(centerLat), parseFloat(centerLng));
            if (!map) {
                var mapElem = document.getElementById(mapID);
                map = new google.maps.Map(mapElem, {
                    zoom: zoom,
                    gestureHandling: "cooperative",
                    mapTypeId: mapType,
                    mapTypeControl: mapTypeControl,
                    zoomControl: zoomControl,
                    fullscreenControl: fullscreenControl,
                    streetViewControl: streetViewControl,
                    scrollwheel: scrollwheel,
                    center: latlng,
                    styles: JSON.parse(mapStyle)
                });
                this.setState({ thisMap: map });
            }

            map.setOptions({
                zoom: zoom,
                mapTypeId: mapType,
                mapTypeControl: mapTypeControl,
                zoomControl: zoomControl,
                fullscreenControl: fullscreenControl,
                streetViewControl: streetViewControl,
                styles: JSON.parse(mapStyle)
            });

            if (!infoWindow && mapMarker && "" !== markerTitle && "" !== markerDesc) {
                infoWindow = new google.maps.InfoWindow({
                    maxWidth: maxWidth
                });
                this.setState({ thisInfo: infoWindow });
            }

            if (mapMarker && "" !== markerTitle && "" !== markerDesc) {
                infoWindow.setContent("<div class=\"" + className + "__info\" style=\"text-align:" + boxAlign + ";padding:" + boxPadding + "px\"\n            >\n            <h3\n                class=\"" + className + "__title\"\n                style=\"color:" + titleColor + ";font-size:" + titleSize + "px;margin-bottom:" + gapBetween + "px\"\n            >\n                " + markerTitle + "\n            </h3>\n            <div\n                class=\"" + className + "__desc\"\n                style=\"color: " + descColor + ";font-size: " + descSize + "px\"\n            >\n                " + markerDesc + "\n            </div>\n        </div>");
            }

            map.setCenter(latlng);

            if (mapMarker) {
                var marker = new google.maps.Marker({
                    position: latlng,
                    map: map,
                    icon: markerCustom ? markerIconUrl : ""
                });

                if (markerOpen) {
                    infoWindow.open(map, marker);
                }

                google.maps.event.addListener(marker, "click", function () {
                    infoWindow.open(map, marker);
                });
            }
        }
    }, {
        key: "render",
        value: function render() {
            var _props2 = this.props,
                isSelected = _props2.isSelected,
                setAttributes = _props2.setAttributes,
                clientId = _props2.clientId;
            var _props$attributes2 = this.props.attributes,
                mapID = _props$attributes2.mapID,
                mapStyle = _props$attributes2.mapStyle,
                mapType = _props$attributes2.mapType,
                height = _props$attributes2.height,
                zoom = _props$attributes2.zoom,
                mapTypeControl = _props$attributes2.mapTypeControl,
                zoomControl = _props$attributes2.zoomControl,
                fullscreenControl = _props$attributes2.fullscreenControl,
                streetViewControl = _props$attributes2.streetViewControl,
                scrollwheel = _props$attributes2.scrollwheel,
                centerLng = _props$attributes2.centerLng,
                centerLat = _props$attributes2.centerLat,
                markerDesc = _props$attributes2.markerDesc,
                markerTitle = _props$attributes2.markerTitle,
                markerOpen = _props$attributes2.markerOpen,
                mapMarker = _props$attributes2.mapMarker,
                markerIconUrl = _props$attributes2.markerIconUrl,
                markerIconId = _props$attributes2.markerIconId,
                markerCustom = _props$attributes2.markerCustom,
                maxWidth = _props$attributes2.maxWidth,
                titleColor = _props$attributes2.titleColor,
                titleSize = _props$attributes2.titleSize,
                descColor = _props$attributes2.descColor,
                descSize = _props$attributes2.descSize,
                boxAlign = _props$attributes2.boxAlign,
                boxPadding = _props$attributes2.boxPadding,
                gapBetween = _props$attributes2.gapBetween,
                hideDesktop = _props$attributes2.hideDesktop,
                hideTablet = _props$attributes2.hideTablet,
                hideMobile = _props$attributes2.hideMobile;


            var TYPES = [{
                value: "roadmap",
                label: __("Road Map", 'premium-blocks-for-gutenberg')
            }, {
                value: "satellite",
                label: __("Satellite", 'premium-blocks-for-gutenberg')
            }, {
                value: "terrain",
                label: __("Terrain", 'premium-blocks-for-gutenberg')
            }, {
                value: "hybrid",
                label: __("Hybrid", 'premium-blocks-for-gutenberg')
            }];

            var ALIGNS = ["left", "center", "right"];
            return [typeof google !== "undefined" && isSelected && React.createElement(
                InspectorControls,
                { key: "key" },
                React.createElement(
                    PanelBody,
                    {
                        title: __("Center Location"),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(TextControl, {
                        label: __("Longitude"),
                        value: centerLng,
                        help: [__("Get your location coordinates from"), React.createElement(
                            "a",
                            { href: "https://www.latlong.net/", target: "_blank" },
                            "\xA0",
                            __("here", 'premium-blocks-for-gutenberg')
                        )],
                        onChange: function onChange(newLng) {
                            return setAttributes({ centerLng: newLng });
                        }
                    }),
                    React.createElement(TextControl, {
                        label: __("Latitude"),
                        value: centerLat,
                        onChange: function onChange(newLat) {
                            return setAttributes({ centerLat: newLat });
                        }
                    })
                ),
                React.createElement(
                    PanelBody,
                    {
                        title: __("Marker", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(ToggleControl, {
                        label: __("Enable Marker", 'premium-blocks-for-gutenberg'),
                        checked: mapMarker,
                        onChange: function onChange(check) {
                            return setAttributes({ mapMarker: check });
                        },
                        help: __("Disable marker is applied on page reload", 'premium-blocks-for-gutenberg')
                    }),
                    mapMarker && React.createElement(
                        Fragment,
                        null,
                        React.createElement(TextControl, {
                            label: __("Marker Title", 'premium-blocks-for-gutenberg'),
                            value: markerTitle,
                            onChange: function onChange(newText) {
                                return setAttributes({ markerTitle: newText });
                            }
                        }),
                        React.createElement(TextareaControl, {
                            label: __("Marker Description", 'premium-blocks-for-gutenberg'),
                            value: markerDesc,
                            onChange: function onChange(newText) {
                                return setAttributes({ markerDesc: newText });
                            }
                        }),
                        React.createElement(_singleRangeControl2.default, {
                            label: __("Spacing (PX)", 'premium-blocks-for-gutenberg'),
                            value: gapBetween,
                            min: "10",
                            max: "80",
                            onChange: function onChange(newSize) {
                                return setAttributes({ gapBetween: newSize });
                            },
                            showUnit: false,
                            defaultValue: 10
                        }),
                        React.createElement(ToggleControl, {
                            label: __("Description opened by default", 'premium-blocks-for-gutenberg'),
                            checked: markerOpen,
                            onChange: function onChange(newValue) {
                                return setAttributes({ markerOpen: newValue });
                            }
                        }),
                        React.createElement(_radioControl2.default, {
                            choices: ["left", "center", "right"],
                            value: boxAlign,
                            onChange: function onChange(newValue) {
                                return setAttributes({ boxAlign: newValue });
                            },
                            label: __("Align", 'premium-blocks-for-gutenberg')
                        }),
                        React.createElement(ToggleControl, {
                            label: __("Custom Marker Icon", 'premium-blocks-for-gutenberg'),
                            checked: markerCustom,
                            onChange: function onChange(check) {
                                return setAttributes({ markerCustom: check });
                            }
                        }),
                        markerCustom && React.createElement(_premiumMediaUpload2.default, {
                            type: "image",
                            imageID: markerIconId,
                            imageURL: markerIconUrl,
                            onSelectMedia: function onSelectMedia(media) {
                                setAttributes({
                                    markerIconId: media.id,
                                    markerIconUrl: media.url
                                });
                            },
                            onRemoveImage: function onRemoveImage() {
                                return setAttributes({
                                    markerIconId: "",
                                    markerIconUrl: ""
                                });
                            }

                        }),
                        React.createElement(_singleRangeControl2.default, {
                            label: __("Description Box Max Width (PX)", 'premium-blocks-for-gutenberg'),
                            value: maxWidth,
                            min: "10",
                            max: "500",
                            onChange: function onChange(newSize) {
                                return setAttributes({ maxWidth: newSize });
                            },
                            showUnit: false,
                            defaultValue: 0
                        }),
                        React.createElement(_singleRangeControl2.default, {
                            label: __("Description Box Padding (PX)", 'premium-blocks-for-gutenberg'),
                            value: boxPadding,
                            min: "1",
                            max: "50",
                            onChange: function onChange(newSize) {
                                return setAttributes({ boxPadding: newSize });
                            },
                            showUnit: false,
                            defaultValue: 0
                        })
                    )
                ),
                mapMarker && markerTitle && React.createElement(
                    PanelBody,
                    {
                        title: __("Marker Title Style", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(_singleRangeControl2.default, {
                        label: __("Font Size (PX)", 'premium-blocks-for-gutenberg'),
                        value: titleSize,
                        min: "10",
                        max: "80",
                        onChange: function onChange(newSize) {
                            return setAttributes({ titleSize: newSize });
                        },
                        showUnit: false,
                        defaultValue: 0
                    }),
                    React.createElement(_ColorComponent2.default, {
                        label: __("Text Color", 'premium-blocks-for-gutenberg'),
                        colorValue: titleColor,
                        colorDefault: '',
                        onColorChange: function onColorChange(newValue) {
                            return setAttributes({ titleColor: newValue === undefined ? "transparent" : newValue });
                        }
                    })
                ),
                mapMarker && markerDesc && React.createElement(
                    PanelBody,
                    {
                        title: __("Marker Description Style", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(_singleRangeControl2.default, {
                        label: __("Font Size (PX)", 'premium-blocks-for-gutenberg'),
                        value: descSize,
                        min: "10",
                        max: "80",
                        onChange: function onChange(newSize) {
                            return setAttributes({ descSize: newSize });
                        },
                        showUnit: false,
                        defaultValue: 0
                    }),
                    React.createElement(_ColorComponent2.default, {
                        label: __("Text Color", 'premium-blocks-for-gutenberg'),
                        colorValue: descColor,
                        colorDefault: '',
                        onColorChange: function onColorChange(newValue) {
                            return setAttributes({ descColor: newValue === undefined ? "transparent" : newValue });
                        }
                    })
                ),
                mapMarker && markerDesc && React.createElement(
                    PanelBody,
                    {
                        title: __("Marker Description Style", 'premium-block-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(_singleRangeControl2.default, {
                        label: __("Font Size (PX)", 'premium-block-for-gutenberg'),
                        value: descSize,
                        min: "10",
                        max: "80",
                        onChange: function onChange(newSize) {
                            return setAttributes({ descSize: newSize });
                        },
                        showUnit: false,
                        defaultValue: 0
                    }),
                    React.createElement(_ColorComponent2.default, {
                        label: __("Text Color", 'premium-block-for-gutenberg'),
                        colorValue: descColor,
                        colorDefault: '',
                        onColorChange: function onColorChange(newValue) {
                            return setAttributes({ descColor: newValue === undefined ? "transparent" : newValue });
                        }
                    })
                ),
                React.createElement(
                    PanelBody,
                    {
                        title: __("Controls", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(SelectControl, {
                        label: __("Map Type", 'premium-blocks-for-gutenberg'),
                        options: TYPES,
                        value: mapType,
                        onChange: function onChange(newType) {
                            return setAttributes({ mapType: newType });
                        }
                    }),
                    React.createElement(_singleRangeControl2.default, {
                        label: __("Map Height (PX)", 'premium-blocks-for-gutenberg'),
                        value: height,
                        min: "10",
                        max: "800",
                        onChange: function onChange(newSize) {
                            return setAttributes({ height: newSize });
                        },
                        showUnit: false,
                        defaultValue: 0
                    }),
                    React.createElement(_singleRangeControl2.default, {
                        label: __("Zoom", 'premium-blocks-for-gutenberg'),
                        value: zoom,
                        min: "1",
                        max: "14",
                        onChange: function onChange(newSize) {
                            return setAttributes({ zoom: newSize });
                        },
                        showUnit: false,
                        defaultValue: 0
                    }),
                    React.createElement(ToggleControl, {
                        label: __("Map Type Controls", 'premium-blocks-for-gutenberg'),
                        checked: mapTypeControl,
                        onChange: function onChange(check) {
                            return setAttributes({ mapTypeControl: check });
                        }
                    }),
                    React.createElement(ToggleControl, {
                        label: __("Zoom Controls", 'premium-blocks-for-gutenberg'),
                        checked: zoomControl,
                        onChange: function onChange(check) {
                            return setAttributes({ zoomControl: check });
                        }
                    }),
                    React.createElement(ToggleControl, {
                        label: __("Street View Control", 'premium-blocks-for-gutenberg'),
                        checked: streetViewControl,
                        onChange: function onChange(check) {
                            return setAttributes({ streetViewControl: check });
                        }
                    }),
                    React.createElement(ToggleControl, {
                        label: __("Full Screen Control", 'premium-blocks-for-gutenberg'),
                        checked: fullscreenControl,
                        onChange: function onChange(check) {
                            return setAttributes({ fullscreenControl: check });
                        }
                    }),
                    React.createElement(ToggleControl, {
                        label: __("Scroll Wheel Zoom", 'premium-blocks-for-gutenberg'),
                        checked: scrollwheel,
                        onChange: function onChange(check) {
                            return setAttributes({ scrollwheel: check });
                        }
                    })
                ),
                React.createElement(
                    PanelBody,
                    {
                        title: __("Map Style", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(TextareaControl, {
                        label: __("Maps Style", 'premium-blocks-for-gutenberg'),
                        value: mapStyle,
                        help: [__("Get your custom styling from", 'premium-blocks-for-gutenberg'), React.createElement(
                            "a",
                            { href: "https://snazzymaps.com/", target: "_blank" },
                            "\xA0",
                            __("here")
                        )],
                        onChange: function onChange(newStyle) {
                            return setAttributes({ mapStyle: "" !== newStyle ? newStyle : "[]" });
                        }
                    })
                ),
                React.createElement(_premiumResponsiveTabs2.default, {
                    Desktop: hideDesktop,
                    Tablet: hideTablet,
                    Mobile: hideMobile,
                    onChangeDesktop: function onChangeDesktop(value) {
                        return setAttributes({ hideDesktop: value ? " premium-desktop-hidden" : "" });
                    },
                    onChangeTablet: function onChangeTablet(value) {
                        return setAttributes({ hideTablet: value ? " premium-tablet-hidden" : "" });
                    },
                    onChangeMobile: function onChangeMobile(value) {
                        return setAttributes({ hideMobile: value ? " premium-mobile-hidden" : "" });
                    }
                })
            ), React.createElement("div", {
                className: className + "__wrap " + hideDesktop + " " + hideTablet + " " + hideMobile,
                id: mapID,
                style: {
                    height: height + "px"
                }
            })];
        }
    }]);

    return PremiumMap;
}(Component);

registerBlockType("premium/maps", {
    title: __("Maps"),
    icon: React.createElement(_icons2.default, { icon: "maps" }),
    category: "premium-blocks",
    attributes: mapAttrs,
    supports: {
        inserter: _settings.maps
    },
    edit: PremiumMap,
    save: function save(props) {
        var _props$attributes3 = props.attributes,
            mapID = _props$attributes3.mapID,
            height = _props$attributes3.height,
            mapStyle = _props$attributes3.mapStyle,
            mapType = _props$attributes3.mapType,
            zoom = _props$attributes3.zoom,
            mapTypeControl = _props$attributes3.mapTypeControl,
            zoomControl = _props$attributes3.zoomControl,
            fullscreenControl = _props$attributes3.fullscreenControl,
            streetViewControl = _props$attributes3.streetViewControl,
            scrollwheel = _props$attributes3.scrollwheel,
            centerLat = _props$attributes3.centerLat,
            centerLng = _props$attributes3.centerLng,
            mapMarker = _props$attributes3.mapMarker,
            markerOpen = _props$attributes3.markerOpen,
            markerIconUrl = _props$attributes3.markerIconUrl,
            markerCustom = _props$attributes3.markerCustom,
            maxWidth = _props$attributes3.maxWidth,
            markerTitle = _props$attributes3.markerTitle,
            markerDesc = _props$attributes3.markerDesc,
            titleColor = _props$attributes3.titleColor,
            titleSize = _props$attributes3.titleSize,
            descColor = _props$attributes3.descColor,
            descSize = _props$attributes3.descSize,
            boxAlign = _props$attributes3.boxAlign,
            boxPadding = _props$attributes3.boxPadding,
            gapBetween = _props$attributes3.gapBetween,
            hideDesktop = _props$attributes3.hideDesktop,
            hideTablet = _props$attributes3.hideTablet,
            hideMobile = _props$attributes3.hideMobile;


        return React.createElement(
            "div",
            {
                className: className + "__wrap " + hideDesktop + " " + hideTablet + " " + hideMobile,
                id: mapID,
                style: {
                    height: height + "px"
                }
            },
            React.createElement(
                "div",
                { className: className + "__marker" },
                React.createElement(
                    "div",
                    {
                        className: className + "__info",
                        style: {
                            textAlign: boxAlign,
                            padding: boxPadding + "px"
                        }
                    },
                    markerTitle && React.createElement(
                        "h3",
                        {
                            className: className + "__title",
                            style: {
                                color: titleColor,
                                fontSize: titleSize + "px",
                                marginBottom: gapBetween + "px"
                            }
                        },
                        markerTitle
                    ),
                    markerDesc && React.createElement(
                        "div",
                        {
                            className: className + "__desc",
                            style: {
                                color: descColor,
                                fontSize: descSize + "px"
                            }
                        },
                        markerDesc
                    )
                )
            ),
            React.createElement(
                "script",
                null,
                "window.addEventListener('load',function(){\n                    if( typeof google === 'undefined' ) return;\n                    let mapElem = document.getElementById('" + mapID + "');\n                    let pin = mapElem.querySelector('." + className + "__marker');\n                    let latlng = new google.maps.LatLng( parseFloat( " + centerLat + " ) , parseFloat( " + centerLng + " ) );\n\n                    let map = new google.maps.Map(mapElem, {\n                        zoom: " + zoom + ",\n                        gestureHandling: 'cooperative',\n                        mapTypeId: '" + mapType + "',\n                        mapTypeControl: " + mapTypeControl + ",\n                        zoomControl: " + zoomControl + ",\n                        fullscreenControl: " + fullscreenControl + ",\n                        streetViewControl: " + streetViewControl + ",\n                        scrollwheel: " + scrollwheel + ",\n                        center: latlng,\n                        styles: " + mapStyle + "\n                    });\n                    if( " + mapMarker + " ) {\n                        let markerIcon = '" + markerIconUrl + "';\n                        let marker = new google.maps.Marker({\n                            position\t: latlng,\n                            map\t\t\t: map,\n                            icon        : " + markerCustom + " ? markerIcon : ''\n                        });\n\n                        let infowindow = new google.maps.InfoWindow({\n                            maxWidth    : " + maxWidth + ",\n                            content\t\t: pin.innerHTML\n                        });\n                        if (" + markerOpen + ") {\n                          infowindow.open( map, marker );\n                        }\n                        google.maps.event.addListener(marker, 'click', function() {\n                            infowindow.open( map, marker );\n                        });\n                    }\n\n                });"
            )
        );
    },
    deprecated: [{
        attributes: mapAttrs_1_3,
        migrate: function migrate(attributes) {
            var newAttributes = {
                hideDesktop: false,
                hideTablet: false,
                hideMobile: false
            };
            return Object.assign(attributes, newAttributes);
        },
        save: function save(props) {
            var _props$attributes4 = props.attributes,
                mapID = _props$attributes4.mapID,
                height = _props$attributes4.height,
                mapStyle = _props$attributes4.mapStyle,
                mapType = _props$attributes4.mapType,
                zoom = _props$attributes4.zoom,
                mapTypeControl = _props$attributes4.mapTypeControl,
                zoomControl = _props$attributes4.zoomControl,
                fullscreenControl = _props$attributes4.fullscreenControl,
                streetViewControl = _props$attributes4.streetViewControl,
                scrollwheel = _props$attributes4.scrollwheel,
                centerLat = _props$attributes4.centerLat,
                centerLng = _props$attributes4.centerLng,
                mapMarker = _props$attributes4.mapMarker,
                markerOpen = _props$attributes4.markerOpen,
                markerIconUrl = _props$attributes4.markerIconUrl,
                markerCustom = _props$attributes4.markerCustom,
                maxWidth = _props$attributes4.maxWidth,
                markerTitle = _props$attributes4.markerTitle,
                markerDesc = _props$attributes4.markerDesc,
                titleColor = _props$attributes4.titleColor,
                titleSize = _props$attributes4.titleSize,
                descColor = _props$attributes4.descColor,
                descSize = _props$attributes4.descSize,
                boxAlign = _props$attributes4.boxAlign,
                boxPadding = _props$attributes4.boxPadding,
                gapBetween = _props$attributes4.gapBetween;


            return React.createElement(
                "div",
                {
                    className: className + "__wrap ",
                    id: mapID,
                    style: {
                        height: height + "px"
                    }
                },
                React.createElement(
                    "div",
                    { className: className + "__marker" },
                    React.createElement(
                        "div",
                        {
                            className: className + "__info",
                            style: {
                                textAlign: boxAlign,
                                padding: boxPadding + "px"
                            }
                        },
                        markerTitle && React.createElement(
                            "h3",
                            {
                                className: className + "__title",
                                style: {
                                    color: titleColor,
                                    fontSize: titleSize + "px",
                                    marginBottom: gapBetween + "px"
                                }
                            },
                            markerTitle
                        ),
                        markerDesc && React.createElement(
                            "div",
                            {
                                className: className + "__desc",
                                style: {
                                    color: descColor,
                                    fontSize: descSize + "px"
                                }
                            },
                            markerDesc
                        )
                    )
                ),
                React.createElement(
                    "script",
                    null,
                    "window.addEventListener('load',function(){\n                            if( typeof google === 'undefined' ) return;\n                            let mapElem = document.getElementById('" + mapID + "');\n                            let pin = mapElem.querySelector('." + className + "__marker');\n                            let latlng = new google.maps.LatLng( parseFloat( " + centerLat + " ) , parseFloat( " + centerLng + " ) );\n\n                            let map = new google.maps.Map(mapElem, {\n                                zoom: " + zoom + ",\n                                gestureHandling: 'cooperative',\n                                mapTypeId: '" + mapType + "',\n                                mapTypeControl: " + mapTypeControl + ",\n                                zoomControl: " + zoomControl + ",\n                                fullscreenControl: " + fullscreenControl + ",\n                                streetViewControl: " + streetViewControl + ",\n                                scrollwheel: " + scrollwheel + ",\n                                center: latlng,\n                                styles: " + mapStyle + "\n                            });\n                            if( " + mapMarker + " ) {\n                                let markerIcon = '" + markerIconUrl + "';\n                                let marker = new google.maps.Marker({\n                                    position\t: latlng,\n                                    map\t\t\t: map,\n                                    icon        : " + markerCustom + " ? markerIcon : ''\n                                });\n\n                                let infowindow = new google.maps.InfoWindow({\n                                    maxWidth    : " + maxWidth + ",\n                                    content\t\t: pin.innerHTML\n                                });\n                                if (" + markerOpen + ") {\n                                  infowindow.open( map, marker );\n                                }\n                                google.maps.event.addListener(marker, 'click', function() {\n                                    infowindow.open( map, marker );\n                                });\n                            }\n\n                        });"
                )
            );
        }
    }, {
        attributes: mapAttrs,
        save: function save(props) {
            var _props$attributes5 = props.attributes,
                mapID = _props$attributes5.mapID,
                height = _props$attributes5.height,
                mapStyle = _props$attributes5.mapStyle,
                mapType = _props$attributes5.mapType,
                zoom = _props$attributes5.zoom,
                mapTypeControl = _props$attributes5.mapTypeControl,
                zoomControl = _props$attributes5.zoomControl,
                fullscreenControl = _props$attributes5.fullscreenControl,
                streetViewControl = _props$attributes5.streetViewControl,
                scrollwheel = _props$attributes5.scrollwheel,
                centerLat = _props$attributes5.centerLat,
                centerLng = _props$attributes5.centerLng,
                mapMarker = _props$attributes5.mapMarker,
                markerOpen = _props$attributes5.markerOpen,
                markerIconUrl = _props$attributes5.markerIconUrl,
                markerCustom = _props$attributes5.markerCustom,
                maxWidth = _props$attributes5.maxWidth,
                markerTitle = _props$attributes5.markerTitle,
                markerDesc = _props$attributes5.markerDesc,
                titleColor = _props$attributes5.titleColor,
                titleSize = _props$attributes5.titleSize,
                descColor = _props$attributes5.descColor,
                descSize = _props$attributes5.descSize,
                boxAlign = _props$attributes5.boxAlign,
                boxPadding = _props$attributes5.boxPadding,
                gapBetween = _props$attributes5.gapBetween;


            return React.createElement(
                "div",
                {
                    className: className + "__wrap",
                    id: mapID,
                    style: {
                        height: height + "px"
                    }
                },
                React.createElement(
                    "div",
                    { className: className + "__marker" },
                    React.createElement(
                        "div",
                        {
                            className: className + "__info",
                            style: {
                                textAlign: boxAlign,
                                padding: boxPadding + "px"
                            }
                        },
                        markerTitle && React.createElement(
                            "h3",
                            {
                                className: className + "__title",
                                style: {
                                    color: titleColor,
                                    fontSize: titleSize + "px",
                                    marginBottom: gapBetween + "px"
                                }
                            },
                            markerTitle
                        ),
                        markerDesc && React.createElement(
                            "div",
                            {
                                className: className + "__desc",
                                style: {
                                    color: descColor,
                                    fontSize: descSize + "px"
                                }
                            },
                            markerDesc
                        )
                    )
                ),
                React.createElement(
                    "script",
                    null,
                    "window.addEventListener('load',function(){\n                        if( typeof google === 'undefined' ) return;\n                        let mapElem = document.getElementById('" + mapID + "');\n                        let pin = mapElem.querySelector('." + className + "__marker');\n                        let latlng = new google.maps.LatLng( parseFloat( " + centerLat + " ) , parseFloat( " + centerLng + " ) );\n\n                        let map = new google.maps.Map(mapElem, {\n                            zoom: " + zoom + ",\n                            gestureHandling: 'cooperative',\n                            mapTypeId: '" + mapType + "',\n                            mapTypeControl: " + mapTypeControl + ",\n                            zoomControl: " + zoomControl + ",\n                            fullscreenControl: " + fullscreenControl + ",\n                            streetViewControl: " + streetViewControl + ",\n                            scrollwheel: " + scrollwheel + ",\n                            center: latlng,\n                            styles: " + mapStyle + "\n                        });\n                        if( " + mapMarker + " ) {\n                            let markerIcon = '" + markerIconUrl + "';\n                            let marker = new google.maps.Marker({\n                                position\t: latlng,\n                                map\t\t\t: map,\n                                icon        : " + markerCustom + " ? markerIcon : ''\n                            });\n\n                            let infowindow = new google.maps.InfoWindow({\n                                maxWidth    : " + maxWidth + ",\n                                content\t\t: pin.innerHTML\n                            });\n                            if (" + markerOpen + ") {\n                                infowindow.open( map, marker );\n                            }\n                            google.maps.event.addListener(marker, 'click', function() {\n                                infowindow.open( map, marker );\n                            });\n                        }\n\n                    });"
                )
            );
        }
    }]
});

/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _settings = __webpack_require__(1);

var _icons = __webpack_require__(4);

var _icons2 = _interopRequireDefault(_icons);

var _edit = __webpack_require__(270);

var _edit2 = _interopRequireDefault(_edit);

var _save = __webpack_require__(271);

var _save2 = _interopRequireDefault(_save);

var _deprecated = __webpack_require__(272);

var _deprecated2 = _interopRequireDefault(_deprecated);

var _attributes = __webpack_require__(273);

var _attributes2 = _interopRequireDefault(_attributes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var registerBlockType = wp.blocks.registerBlockType;
var __ = wp.i18n.__;


registerBlockType("premium/pricing-table", {
    title: __("Pricing Table"),
    icon: React.createElement(_icons2.default, { icon: "pricing-table" }),
    category: "premium-blocks",
    attributes: _attributes2.default,
    supports: {
        inserter: _settings.pricingTable
    },
    edit: _edit2.default,
    save: _save2.default,
    deprecated: _deprecated2.default
});

/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _classnames = __webpack_require__(0);

var _classnames2 = _interopRequireDefault(_classnames);

var _premiumBorder = __webpack_require__(6);

var _premiumBorder2 = _interopRequireDefault(_premiumBorder);

var _premiumTypo = __webpack_require__(7);

var _premiumTypo2 = _interopRequireDefault(_premiumTypo);

var _PremiumShadow = __webpack_require__(5);

var _PremiumShadow2 = _interopRequireDefault(_PremiumShadow);

var _premiumResponsiveTabs = __webpack_require__(8);

var _premiumResponsiveTabs2 = _interopRequireDefault(_premiumResponsiveTabs);

var _singleRangeControl = __webpack_require__(3);

var _singleRangeControl2 = _interopRequireDefault(_singleRangeControl);

var _ColorComponent = __webpack_require__(2);

var _ColorComponent2 = _interopRequireDefault(_ColorComponent);

var _radioControl = __webpack_require__(10);

var _radioControl2 = _interopRequireDefault(_radioControl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var withSelect = wp.data.withSelect;
var __ = wp.i18n.__;
var _wp$element = wp.element,
    Component = _wp$element.Component,
    Fragment = _wp$element.Fragment;
var _wp$components = wp.components,
    PanelBody = _wp$components.PanelBody,
    SelectControl = _wp$components.SelectControl,
    TextControl = _wp$components.TextControl,
    ToggleControl = _wp$components.ToggleControl,
    Dropdown = _wp$components.Dropdown,
    Button = _wp$components.Button;
var _wp$blockEditor = wp.blockEditor,
    BlockControls = _wp$blockEditor.BlockControls,
    InspectorControls = _wp$blockEditor.InspectorControls,
    AlignmentToolbar = _wp$blockEditor.AlignmentToolbar,
    RichText = _wp$blockEditor.RichText,
    URLInput = _wp$blockEditor.URLInput;

var PremiumPricingTable = function (_Component) {
    _inherits(PremiumPricingTable, _Component);

    function PremiumPricingTable() {
        _classCallCheck(this, PremiumPricingTable);

        return _possibleConstructorReturn(this, (PremiumPricingTable.__proto__ || Object.getPrototypeOf(PremiumPricingTable)).apply(this, arguments));
    }

    _createClass(PremiumPricingTable, [{
        key: "componentDidMount",
        value: function componentDidMount() {
            var _props = this.props,
                setAttributes = _props.setAttributes,
                clientId = _props.clientId;

            setAttributes({ block_id: clientId });
            setAttributes({ classMigrate: true });
            this.getPreviewSize = this.getPreviewSize.bind(this);
        }
    }, {
        key: "getPreviewSize",
        value: function getPreviewSize(device, desktopSize, tabletSize, mobileSize) {
            if (device === 'Mobile') {
                if (undefined !== mobileSize && '' !== mobileSize) {
                    return mobileSize;
                } else if (undefined !== tabletSize && '' !== tabletSize) {
                    return tabletSize;
                }
            } else if (device === 'Tablet') {
                if (undefined !== tabletSize && '' !== tabletSize) {
                    return tabletSize;
                }
            }
            return desktopSize;
        }
    }, {
        key: "render",
        value: function render() {
            var _props2 = this.props,
                isSelected = _props2.isSelected,
                setAttributes = _props2.setAttributes,
                className = _props2.className;
            var _props$attributes = this.props.attributes,
                borderUpdated = _props$attributes.borderUpdated,
                btnBorderUpdated = _props$attributes.btnBorderUpdated,
                contentAlign = _props$attributes.contentAlign,
                borderColor = _props$attributes.borderColor,
                title = _props$attributes.title,
                desc = _props$attributes.desc,
                titleChecked = _props$attributes.titleChecked,
                descChecked = _props$attributes.descChecked,
                priceChecked = _props$attributes.priceChecked,
                btnChecked = _props$attributes.btnChecked,
                btnText = _props$attributes.btnText,
                btnLink = _props$attributes.btnLink,
                badgeChecked = _props$attributes.badgeChecked,
                listChecked = _props$attributes.listChecked,
                listItems = _props$attributes.listItems,
                block_id = _props$attributes.block_id,
                hideDesktop = _props$attributes.hideDesktop,
                hideTablet = _props$attributes.hideTablet,
                hideMobile = _props$attributes.hideMobile,
                titleStyles = _props$attributes.titleStyles,
                priceStyles = _props$attributes.priceStyles,
                featureStyles = _props$attributes.featureStyles,
                descStyles = _props$attributes.descStyles,
                buttonStyles = _props$attributes.buttonStyles,
                badgeStyles = _props$attributes.badgeStyles,
                tableStyles = _props$attributes.tableStyles,
                btnBorderTop = _props$attributes.btnBorderTop,
                btnBorderRight = _props$attributes.btnBorderRight,
                btnBorderBottom = _props$attributes.btnBorderBottom,
                btnBorderLeft = _props$attributes.btnBorderLeft,
                borderTop = _props$attributes.borderTop,
                borderRight = _props$attributes.borderRight,
                borderBottom = _props$attributes.borderBottom,
                borderLeft = _props$attributes.borderLeft;


            var ALIGNS = [{
                value: "flex-start",
                label: __("Top", 'premium-blocks-for-gutenberg')
            }, {
                value: "center",
                label: __("Middle", 'premium-blocks-for-gutenberg')
            }, {
                value: "flex-end",
                label: __("Bottom", 'premium-blocks-for-gutenberg')
            }];

            var PRICE = [{
                value: "slash",
                label: __("Slashed Price", 'premium-blocks-for-gutenberg')
            }, {
                value: "curr",
                label: __("Currency", 'premium-blocks-for-gutenberg')
            }, {
                value: "price",
                label: __("Price", 'premium-blocks-for-gutenberg')
            }, {
                value: "divider",
                label: __("Divider", 'premium-blocks-for-gutenberg')
            }, {
                value: "duration",
                label: __("Duration", 'premium-blocks-for-gutenberg')
            }];

            var TYPE = [{
                value: "none",
                label: __("None", 'premium-blocks-for-gutenberg')
            }, {
                value: "check",
                label: __("Check Mark", 'premium-blocks-for-gutenberg')
            }, {
                value: "disc",
                label: __("Filled Circle", 'premium-blocks-for-gutenberg')
            }, {
                value: "circle",
                label: __("Outline Circle", 'premium-blocks-for-gutenberg')
            }, {
                value: "square",
                label: __("Square", 'premium-blocks-for-gutenberg')
            }];

            var POSITION = [{
                value: "right",
                label: __("Right", 'premium-blocks-for-gutenberg')
            }, {
                value: "left",
                label: __("Left", 'premium-blocks-for-gutenberg')
            }];

            var saveTitleStyles = function saveTitleStyles(value) {
                var newUpdate = titleStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({
                    titleStyles: newUpdate
                });
            };
            var savePriceStyles = function savePriceStyles(value) {
                var newUpdate = priceStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({ priceStyles: newUpdate });
            };

            var saveFeatureStyle = function saveFeatureStyle(value) {
                var newUpdate = featureStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({ featureStyles: newUpdate });
            };

            var saveButtonStyle = function saveButtonStyle(value) {
                var newUpdate = buttonStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({ buttonStyles: newUpdate });
            };

            var saveBadgeStyles = function saveBadgeStyles(value) {
                var newUpdate = badgeStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({ badgeStyles: newUpdate });
            };

            var saveTableStyles = function saveTableStyles(value) {
                var newUpdate = tableStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({ tableStyles: newUpdate });
            };

            var saveDescriptionStyle = function saveDescriptionStyle(value) {
                var newUpdate = descStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({ descStyles: newUpdate });
            };

            var titleFontSize = this.getPreviewSize(this.props.deviceType, titleStyles[0].titleSize, titleStyles[0].titleSizeTablet, titleStyles[0].titleSizeMobile);
            var slashFontSize = this.getPreviewSize(this.props.deviceType, priceStyles[0].slashSize, priceStyles[0].slashSizeTablet, priceStyles[0].slashSizeMobile);
            var currFontSize = this.getPreviewSize(this.props.deviceType, priceStyles[0].currSize, priceStyles[0].currSizeTablet, priceStyles[0].currSizeMobile);
            var valFontSize = this.getPreviewSize(this.props.deviceType, priceStyles[0].valSize, priceStyles[0].valSizeTablet, priceStyles[0].valSizeMobile);
            var divFontSize = this.getPreviewSize(this.props.deviceType, priceStyles[0].divSize, priceStyles[0].divSizeTablet, priceStyles[0].divSizeMobile);
            var cFontSize = this.getPreviewSize(this.props.deviceType, priceStyles[0].durSize, priceStyles[0].durSizeTablet, priceStyles[0].durSizeMobile);
            var listFontSize = this.getPreviewSize(this.props.deviceType, featureStyles[0].listSize, featureStyles[0].listSizeTablet, featureStyles[0].listSizeMobile);
            var descFontSize = this.getPreviewSize(this.props.deviceType, descStyles[0].descSize, descStyles[0].descSizeTablet, descStyles[0].descSizeMobile);
            var btnFontSize = this.getPreviewSize(this.props.deviceType, buttonStyles[0].btnSize, buttonStyles[0].btnSizeTablet, buttonStyles[0].btnSizeMobile);
            var badgeFontSize = this.getPreviewSize(this.props.deviceType, badgeStyles[0].badgeTextSize, badgeStyles[0].badgeSizeTablet, badgeStyles[0].badgeSizeMobile);

            var mainClasses = (0, _classnames2.default)(className, "premium-pricing-table");

            return [isSelected && React.createElement(
                BlockControls,
                { key: "controls" },
                React.createElement(AlignmentToolbar, {
                    value: contentAlign,
                    onChange: function onChange(newAlign) {
                        return setAttributes({ contentAlign: newAlign });
                    }
                })
            ), isSelected && React.createElement(
                InspectorControls,
                { key: "inspector" },
                React.createElement(
                    PanelBody,
                    {
                        title: __("Display Options", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(ToggleControl, {
                        label: __("Title", 'premium-blocks-for-gutenberg'),
                        checked: titleChecked,
                        onChange: function onChange(newValue) {
                            return setAttributes({ titleChecked: newValue });
                        }
                    }),
                    React.createElement(ToggleControl, {
                        label: __("Price", 'premium-blocks-for-gutenberg'),
                        checked: priceChecked,
                        onChange: function onChange(newValue) {
                            return setAttributes({ priceChecked: newValue });
                        }
                    }),
                    React.createElement(ToggleControl, {
                        label: __("Features", 'premium-blocks-for-gutenberg'),
                        checked: listChecked,
                        onChange: function onChange(newValue) {
                            return setAttributes({ listChecked: newValue });
                        }
                    }),
                    React.createElement(ToggleControl, {
                        label: __("Description", 'premium-blocks-for-gutenberg'),
                        checked: descChecked,
                        onChange: function onChange(newValue) {
                            return setAttributes({ descChecked: newValue });
                        }
                    }),
                    React.createElement(ToggleControl, {
                        label: __("Button", 'premium-blocks-for-gutenberg'),
                        checked: btnChecked,
                        onChange: function onChange(newValue) {
                            return setAttributes({ btnChecked: newValue });
                        }
                    }),
                    React.createElement(ToggleControl, {
                        label: __("Badge", 'premium-blocks-for-gutenberg'),
                        checked: badgeChecked,
                        onChange: function onChange(newValue) {
                            return setAttributes({ badgeChecked: newValue });
                        }
                    })
                ),
                titleChecked && React.createElement(
                    PanelBody,
                    {
                        title: __("Title", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(_radioControl2.default, {
                        label: __("Heading", 'premium-blocks-for-gutenberg'),
                        choices: ['H1', 'H2', 'H3', 'H4', 'H5', 'H6'],
                        value: titleStyles[0].titleTag,
                        onChange: function onChange(newValue) {
                            return saveTitleStyles({ titleTag: newValue });
                        }
                    }),
                    React.createElement(_premiumTypo2.default, {
                        components: ["responsiveSize", "weight", "style", "upper", "spacing", "line"],
                        setAttributes: saveTitleStyles,
                        fontSizeType: {
                            value: titleStyles[0].titleSizeUnit,
                            label: __("titleSizeUnit", 'premium-blocks-for-gutenberg')
                        },
                        fontSize: titleStyles[0].titleSize,
                        fontSizeMobile: titleStyles[0].titleSizeMobile,
                        fontSizeTablet: titleStyles[0].titleSizeTablet,
                        onChangeSize: function onChangeSize(newSize) {
                            return saveTitleStyles({ titleSize: newSize });
                        },
                        onChangeTabletSize: function onChangeTabletSize(newSize) {
                            return saveTitleStyles({ titleSizeTablet: newSize });
                        },
                        onChangeMobileSize: function onChangeMobileSize(newSize) {
                            return saveTitleStyles({ titleSizeMobile: newSize });
                        },
                        weight: titleStyles[0].titleWeight,
                        style: titleStyles[0].titleStyle,
                        spacing: titleStyles[0].titleLetter,
                        line: titleStyles[0].titleLine,
                        upper: titleStyles[0].titleUpper,
                        onChangeWeight: function onChangeWeight(newWeight) {
                            return saveTitleStyles({ titleWeight: newWeight });
                        },
                        onChangeStyle: function onChangeStyle(newStyle) {
                            return saveTitleStyles({ titleStyle: newStyle });
                        },
                        onChangeSpacing: function onChangeSpacing(newValue) {
                            return saveTitleStyles({ titleLetter: newValue });
                        },
                        onChangeLine: function onChangeLine(newValue) {
                            return saveTitleStyles({ titleLine: newValue });
                        },
                        onChangeUpper: function onChangeUpper(check) {
                            return saveTitleStyles({ titleUpper: check });
                        }
                    }),
                    React.createElement(_ColorComponent2.default, {
                        label: __("Text Color", 'premium-blocks-for-gutenberg'),
                        colorValue: titleStyles[0].titleColor,
                        colorDefault: '',
                        onColorChange: function onColorChange(newColor) {
                            return saveTitleStyles({ titleColor: newColor });
                        }
                    }),
                    React.createElement(_ColorComponent2.default, {
                        label: __("Background Color", 'premium-blocks-for-gutenberg'),
                        colorValue: titleStyles[0].titleBack,
                        colorDefault: '',
                        onColorChange: function onColorChange(newColor) {
                            return saveTitleStyles({ titleBack: newColor });
                        }
                    }),
                    React.createElement(_PremiumShadow2.default, {
                        label: __("Text Shadow", 'premium-blocks-for-gutenberg'),
                        color: titleStyles[0].titleShadowColor,
                        blur: titleStyles[0].titleShadowBlur,
                        horizontal: titleStyles[0].titleShadowHorizontal,
                        vertical: titleStyles[0].titleShadowVertical,
                        onChangeColor: function onChangeColor(newColor) {
                            return saveTitleStyles({ titleShadowColor: newColor });
                        },
                        onChangeBlur: function onChangeBlur(newBlur) {
                            return saveTitleStyles({ titleShadowBlur: newBlur });
                        },
                        onChangehHorizontal: function onChangehHorizontal(newValue) {
                            return saveTitleStyles({ titleShadowHorizontal: newValue });
                        },
                        onChangeVertical: function onChangeVertical(newValue) {
                            return saveTitleStyles({ titleShadowVertical: newValue });
                        }
                    }),
                    React.createElement(
                        "div",
                        { className: "premium-control-toggle" },
                        React.createElement(
                            "strong",
                            null,
                            __("Spacings", 'premium-blocks-for-gutenberg')
                        ),
                        React.createElement(Dropdown, {
                            className: "premium-control-toggle-btn",
                            contentClassName: "premium-control-toggle-content",
                            position: "bottom right",
                            renderToggle: function renderToggle(_ref) {
                                var isOpen = _ref.isOpen,
                                    onToggle = _ref.onToggle;
                                return React.createElement(
                                    Button,
                                    { isSmall: true, onClick: onToggle, "aria-expanded": isOpen },
                                    React.createElement("i", { className: "dashicons dashicons-edit" })
                                );
                            },
                            renderContent: function renderContent() {
                                return React.createElement(
                                    Fragment,
                                    null,
                                    React.createElement(_singleRangeControl2.default, {
                                        label: __("Margin Top (PX)", 'premium-blocks-for-gutenberg'),
                                        value: titleStyles[0].titleMarginT,
                                        min: "10",
                                        max: "80",
                                        onChange: function onChange(newSize) {
                                            return saveTitleStyles({ titleMarginT: newSize });
                                        },
                                        showUnit: false,
                                        defaultValue: 10
                                    }),
                                    React.createElement(_singleRangeControl2.default, {
                                        label: __("Margin Bottom (PX)", 'premium-blocks-for-gutenberg'),
                                        value: titleStyles[0].titleMarginB,
                                        min: "0",
                                        max: "100",
                                        onChange: function onChange(newMargin) {
                                            return saveTitleStyles({ titleMarginB: newMargin });
                                        },
                                        showUnit: false,
                                        defaultValue: 0
                                    }),
                                    React.createElement(_singleRangeControl2.default, {
                                        label: __("Padding (PX)", 'premium-blocks-for-gutenberg'),
                                        value: titleStyles[0].titlePadding,
                                        min: "0",
                                        max: "100",
                                        onChange: function onChange(newPadding) {
                                            return saveTitleStyles({ titlePadding: newPadding });
                                        },
                                        showUnit: false,
                                        defaultValue: 0
                                    })
                                );
                            }
                        })
                    )
                ),
                priceChecked && React.createElement(
                    PanelBody,
                    {
                        title: __("Price", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(TextControl, {
                        label: __("Slashed Price", 'premium-blocks-for-gutenberg'),
                        value: priceStyles[0].slashPrice,
                        onChange: function onChange(value) {
                            return savePriceStyles({ slashPrice: value });
                        }
                    }),
                    React.createElement(TextControl, {
                        label: __("Currency", 'premium-blocks-for-gutenberg'),
                        value: priceStyles[0].currPrice,
                        onChange: function onChange(value) {
                            return savePriceStyles({ currPrice: value });
                        }
                    }),
                    React.createElement(TextControl, {
                        label: __("Price", 'premium-blocks-for-gutenberg'),
                        value: priceStyles[0].valPrice,
                        onChange: function onChange(value) {
                            return savePriceStyles({ valPrice: value });
                        }
                    }),
                    React.createElement(TextControl, {
                        label: __("Divider", 'premium-blocks-for-gutenberg'),
                        value: priceStyles[0].divPrice,
                        onChange: function onChange(value) {
                            return savePriceStyles({ divPrice: value });
                        }
                    }),
                    React.createElement(TextControl, {
                        label: __("Duration", 'premium-blocks-for-gutenberg'),
                        value: priceStyles[0].durPrice,
                        onChange: function onChange(value) {
                            return savePriceStyles({ durPrice: value });
                        }
                    }),
                    React.createElement(
                        PanelBody,
                        {
                            title: __("Element to Style", 'premium-blocks-for-gutenberg'),
                            className: "premium-panel-body-inner",
                            initialOpen: false
                        },
                        React.createElement(SelectControl, {
                            label: __("Element", 'premium-blocks-for-gutenberg'),
                            options: PRICE,
                            value: priceStyles[0].selectedStyle,
                            onChange: function onChange(newElem) {
                                return savePriceStyles({ selectedStyle: newElem });
                            }
                        }),
                        "slash" === priceStyles[0].selectedStyle && React.createElement(
                            Fragment,
                            null,
                            React.createElement(_premiumTypo2.default, {
                                components: ["responsiveSize", "weight"],
                                setAttributes: savePriceStyles,
                                fontSizeType: {
                                    value: priceStyles[0].slashSizeUnit,
                                    label: __("slashSizeUnit", 'premium-blocks-for-gutenberg')
                                },
                                fontSize: priceStyles[0].slashSize,
                                fontSizeMobile: priceStyles[0].slashSizeMobile,
                                fontSizeTablet: priceStyles[0].slashSizeTablet,
                                weight: priceStyles[0].slashWeight,
                                onChangeWeight: function onChangeWeight(newWeight) {
                                    return savePriceStyles({ slashWeight: newWeight });
                                },
                                onChangeSize: function onChangeSize(newSize) {
                                    return savePriceStyles({ slashSize: newSize });
                                },
                                onChangeTabletSize: function onChangeTabletSize(newSize) {
                                    return savePriceStyles({ slashSizeTablet: newSize });
                                },
                                onChangeMobileSize: function onChangeMobileSize(newSize) {
                                    return savePriceStyles({ slashSizeMobile: newSize });
                                }
                            }),
                            React.createElement(SelectControl, {
                                label: __("Vertical Align", 'premium-blocks-for-gutenberg'),
                                options: ALIGNS,
                                value: priceStyles[0].slashV,
                                onChange: function onChange(newValue) {
                                    return savePriceStyles({ slashV: newValue });
                                }
                            }),
                            React.createElement(_ColorComponent2.default, {
                                label: __("Text Color", 'premium-blocks-for-gutenberg'),
                                colorValue: priceStyles[0].slashColor,
                                colorDefault: '',
                                onColorChange: function onColorChange(newValue) {
                                    return savePriceStyles({ slashColor: newValue === undefined ? "transparent" : newValue });
                                }
                            })
                        ),
                        "curr" === priceStyles[0].selectedStyle && React.createElement(
                            Fragment,
                            null,
                            React.createElement(_premiumTypo2.default, {
                                components: ["responsiveSize", "weight"],
                                setAttributes: savePriceStyles,
                                fontSizeType: {
                                    value: priceStyles[0].currSizeUnit,
                                    label: __("currSizeUnit", 'premium-blocks-for-gutenberg')
                                },
                                fontSize: priceStyles[0].currSize,
                                fontSizeMobile: priceStyles[0].currSizeMobile,
                                fontSizeTablet: priceStyles[0].currSizeTablet,
                                onChangeSize: function onChangeSize(newSize) {
                                    return savePriceStyles({ currSize: newSize });
                                },
                                onChangeTabletSize: function onChangeTabletSize(newSize) {
                                    return savePriceStyles({ currSizeTablet: newSize });
                                },
                                onChangeMobileSize: function onChangeMobileSize(newSize) {
                                    return savePriceStyles({ currSizeMobile: newSize });
                                },
                                weight: priceStyles[0].currWeight,
                                onChangeWeight: function onChangeWeight(newWeight) {
                                    return savePriceStyles({ currWeight: newWeight });
                                }
                            }),
                            React.createElement(SelectControl, {
                                label: __("Vertical Align", 'premium-blocks-for-gutenberg'),
                                options: ALIGNS,
                                value: priceStyles[0].currV,
                                onChange: function onChange(newValue) {
                                    return savePriceStyles({ currV: newValue });
                                }
                            }),
                            React.createElement(_ColorComponent2.default, {
                                label: __("Text Color", 'premium-blocks-for-gutenberg'),
                                colorValue: priceStyles[0].currColor,
                                colorDefault: '',
                                onColorChange: function onColorChange(newValue) {
                                    return savePriceStyles({
                                        currColor: newValue === undefined ? "transparent" : newValue
                                    });
                                }
                            })
                        ),
                        "price" === priceStyles[0].selectedStyle && React.createElement(
                            Fragment,
                            null,
                            React.createElement(_premiumTypo2.default, {
                                components: ["responsiveSize", "weight"],
                                setAttributes: savePriceStyles,
                                fontSizeType: {
                                    value: priceStyles[0].valSizeUnit,
                                    label: __("valSizeUnit", 'premium-blocks-for-gutenberg')
                                },
                                fontSize: priceStyles[0].valSize,
                                fontSizeMobile: priceStyles[0].valSizeMobile,
                                fontSizeTablet: priceStyles[0].valSizeTablet,
                                size: priceStyles[0].valSize,
                                weight: priceStyles[0].valWeight,
                                onChangeWeight: function onChangeWeight(newWeight) {
                                    return savePriceStyles({ valWeight: newWeight });
                                },
                                onChangeSize: function onChangeSize(newSize) {
                                    return savePriceStyles({ valSize: newSize });
                                },
                                onChangeTabletSize: function onChangeTabletSize(newSize) {
                                    return savePriceStyles({ valSizeTablet: newSize });
                                },
                                onChangeMobileSize: function onChangeMobileSize(newSize) {
                                    return savePriceStyles({ valSizeMobile: newSize });
                                }
                            }),
                            React.createElement(SelectControl, {
                                label: __("Vertical Align", 'premium-blocks-for-gutenberg'),
                                options: ALIGNS,
                                value: priceStyles[0].valV,
                                onChange: function onChange(newValue) {
                                    return savePriceStyles({ valV: newValue });
                                }
                            }),
                            React.createElement(_ColorComponent2.default, {
                                label: __("Text Color", 'premium-blocks-for-gutenberg'),
                                colorValue: priceStyles[0].valColor,
                                colorDefault: '',
                                onColorChange: function onColorChange(newValue) {
                                    return savePriceStyles({
                                        valColor: newValue === undefined ? "transparent" : newValue
                                    });
                                }
                            })
                        ),
                        "divider" === priceStyles[0].selectedStyle && React.createElement(
                            Fragment,
                            null,
                            React.createElement(_premiumTypo2.default, {
                                components: ["responsiveSize", "weight"],
                                setAttributes: savePriceStyles,
                                fontSizeType: {
                                    value: priceStyles[0].divSizeUnit,
                                    label: __("divSizeUnit", 'premium-blocks-for-gutenberg')
                                },
                                fontSize: priceStyles[0].divSize,
                                fontSizeMobile: priceStyles[0].divSizeMobile,
                                fontSizeTablet: priceStyles[0].divSizeTablet,
                                weight: priceStyles[0].divWeight,
                                onChangeWeight: function onChangeWeight(newWeight) {
                                    return savePriceStyles({ divWeight: newWeight });
                                },
                                onChangeSize: function onChangeSize(newSize) {
                                    return savePriceStyles({ divSize: newSize });
                                },
                                onChangeTabletSize: function onChangeTabletSize(newSize) {
                                    return savePriceStyles({ divSizeTablet: newSize });
                                },
                                onChangeMobileSize: function onChangeMobileSize(newSize) {
                                    return savePriceStyles({ divSizeMobile: newSize });
                                }
                            }),
                            React.createElement(SelectControl, {
                                label: __("Vertical Align", 'premium-blocks-for-gutenberg'),
                                options: ALIGNS,
                                value: priceStyles[0].divV,
                                onChange: function onChange(newValue) {
                                    return savePriceStyles({ divV: newValue });
                                }
                            }),
                            React.createElement(_ColorComponent2.default, {
                                label: __("Text Color", 'premium-blocks-for-gutenberg'),
                                colorValue: priceStyles[0].divColor,
                                colorDefault: '',
                                onColorChange: function onColorChange(newValue) {
                                    return savePriceStyles({ divColor: newValue === undefined ? "transparent" : newValue });
                                }
                            })
                        ),
                        "duration" === priceStyles[0].selectedStyle && React.createElement(
                            Fragment,
                            null,
                            React.createElement(_premiumTypo2.default, {
                                components: ["responsiveSize", "weight"],
                                setAttributes: savePriceStyles,
                                fontSizeType: {
                                    value: priceStyles[0].durSizeUnit,
                                    label: __("durSizeUnit", 'premium-blocks-for-gutenberg')
                                },
                                fontSize: priceStyles[0].durSize,
                                fontSizeMobile: priceStyles[0].durSizeMobile,
                                fontSizeTablet: priceStyles[0].durSizeTablet,
                                weight: priceStyles[0].durWeight,
                                onChangeWeight: function onChangeWeight(newWeight) {
                                    return savePriceStyles({ durWeight: newWeight });
                                },
                                onChangeSize: function onChangeSize(newSize) {
                                    return savePriceStyles({ durSize: newSize });
                                },
                                onChangeTabletSize: function onChangeTabletSize(newSize) {
                                    return savePriceStyles({ durSizeTablet: newSize });
                                },
                                onChangeMobileSize: function onChangeMobileSize(newSize) {
                                    return savePriceStyles({ durSizeMobile: newSize });
                                }
                            }),
                            React.createElement(SelectControl, {
                                label: __("Vertical Align", 'premium-blocks-for-gutenberg'),
                                options: ALIGNS,
                                value: priceStyles[0].durV,
                                onChange: function onChange(newValue) {
                                    return savePriceStyles({ durV: newValue });
                                }
                            }),
                            React.createElement(_ColorComponent2.default, {
                                label: __("Text Color", 'premium-blocks-for-gutenberg'),
                                colorValue: priceStyles[0].durColor,
                                colorDefault: '',
                                onColorChange: function onColorChange(newValue) {
                                    return savePriceStyles({ durColor: newValue === undefined ? "transparent" : newValue });
                                }
                            })
                        )
                    ),
                    React.createElement(
                        "div",
                        { className: "premium-control-toggle" },
                        React.createElement(
                            "strong",
                            null,
                            __("Spacings", 'premium-blocks-for-gutenberg')
                        ),
                        React.createElement(Dropdown, {
                            className: "premium-control-toggle-btn",
                            contentClassName: "premium-control-toggle-content",
                            position: "bottom right",
                            renderToggle: function renderToggle(_ref2) {
                                var isOpen = _ref2.isOpen,
                                    onToggle = _ref2.onToggle;
                                return React.createElement(
                                    Button,
                                    { isSmall: true, onClick: onToggle, "aria-expanded": isOpen },
                                    React.createElement("i", { className: "dashicons dashicons-edit" })
                                );
                            },
                            renderContent: function renderContent() {
                                return React.createElement(
                                    Fragment,
                                    null,
                                    React.createElement(_singleRangeControl2.default, {
                                        label: __("Container Margin Top (PX)", 'premium-blocks-for-gutenberg'),
                                        value: priceStyles[0].priceMarginT,
                                        min: "0",
                                        max: "100",
                                        onChange: function onChange(newMargin) {
                                            return savePriceStyles({ priceMarginT: newMargin });
                                        },
                                        showUnit: false,
                                        defaultValue: 0
                                    }),
                                    React.createElement(_singleRangeControl2.default, {
                                        label: __("Container Margin Bottom (PX)", 'premium-blocks-for-gutenberg'),
                                        value: priceStyles[0].priceMarginB,
                                        min: "0",
                                        max: "100",
                                        onChange: function onChange(newPadding) {
                                            return savePriceStyles({ priceMarginB: newPadding });
                                        },
                                        showUnit: false,
                                        defaultValue: 0
                                    }),
                                    React.createElement(_singleRangeControl2.default, {
                                        label: __("Container Padding (PX)", 'premium-blocks-for-gutenberg'),
                                        value: priceStyles[0].pricePadding,
                                        min: "0",
                                        max: "100",
                                        onChange: function onChange(newPadding) {
                                            return savePriceStyles({ pricePadding: newPadding });
                                        },
                                        showUnit: false,
                                        defaultValue: 0
                                    })
                                );
                            }
                        })
                    ),
                    React.createElement(_ColorComponent2.default, {
                        label: __("Background Color"),
                        colorValue: priceStyles[0].priceBack,
                        onColorChange: function onColorChange(newvalue) {
                            return savePriceStyles({ priceBack: newvalue });
                        },
                        colorDefault: ""
                    })
                ),
                listChecked && React.createElement(
                    PanelBody,
                    {
                        title: __("Features", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(_radioControl2.default, {
                        label: __("Align", 'premium-blocks-for-gutenberg'),
                        choices: ["left", "center", "right"],
                        value: featureStyles[0].featsAlign,
                        onChange: function onChange(newValue) {
                            return saveFeatureStyle({ featsAlign: newValue });
                        }
                    }),
                    React.createElement(SelectControl, {
                        label: __("List Style", 'premium-blocks-for-gutenberg'),
                        options: TYPE,
                        value: featureStyles[0].listStyle,
                        onChange: function onChange(newType) {
                            return saveFeatureStyle({ listStyle: newType });
                        }
                    }),
                    React.createElement(_premiumTypo2.default, {
                        components: ["responsiveSize", "weight", "style", "upper", "spacing", "line"],
                        setAttributes: saveFeatureStyle,
                        fontSizeType: {
                            value: featureStyles[0].listSizeUnit,
                            label: __("listSizeUnit", 'premium-blocks-for-gutenberg')
                        },
                        fontSize: featureStyles[0].listSize,
                        fontSizeMobile: featureStyles[0].listSizeMobile,
                        fontSizeTablet: featureStyles[0].listSizeTablet,
                        weight: featureStyles[0].listWeight,
                        style: featureStyles[0].listItemsStyle,
                        spacing: featureStyles[0].listLetter,
                        line: featureStyles[0].listLine,
                        upper: featureStyles[0].listUpper,
                        onChangeWeight: function onChangeWeight(newWeight) {
                            return saveFeatureStyle({ listWeight: newWeight });
                        },
                        onChangeStyle: function onChangeStyle(newStyle) {
                            return saveFeatureStyle({ listItemsStyle: newStyle });
                        },
                        onChangeSpacing: function onChangeSpacing(newValue) {
                            return saveFeatureStyle({ listLetter: newValue });
                        },
                        onChangeLine: function onChangeLine(newValue) {
                            return saveFeatureStyle({ listLine: newValue });
                        },
                        onChangeUpper: function onChangeUpper(check) {
                            return saveFeatureStyle({ listUpper: check });
                        },
                        onChangeSize: function onChangeSize(newSize) {
                            return saveFeatureStyle({ listSize: newSize });
                        },
                        onChangeTabletSize: function onChangeTabletSize(newSize) {
                            return saveFeatureStyle({ listSizeTablet: newSize });
                        },
                        onChangeMobileSize: function onChangeMobileSize(newSize) {
                            return saveFeatureStyle({ listSizeMobile: newSize });
                        }
                    }),
                    React.createElement(_ColorComponent2.default, {
                        label: __("List Items Color", 'premium-blocks-for-gutenberg'),
                        colorValue: featureStyles[0].listColor,
                        colorDefault: '',
                        onColorChange: function onColorChange(newColor) {
                            return saveFeatureStyle({ listColor: newColor });
                        }
                    }),
                    React.createElement(_ColorComponent2.default, {
                        label: __("Background Color", 'premium-blocks-for-gutenberg'),
                        colorValue: featureStyles[0].listBack,
                        colorDefault: '',
                        onColorChange: function onColorChange(newColor) {
                            return saveFeatureStyle({ listBack: newColor });
                        }
                    }),
                    React.createElement(
                        "div",
                        { className: "premium-control-toggle" },
                        React.createElement(
                            "strong",
                            null,
                            __("Spacings", 'premium-blocks-for-gutenberg')
                        ),
                        React.createElement(Dropdown, {
                            className: "premium-control-toggle-btn",
                            contentClassName: "premium-control-toggle-content",
                            position: "bottom right",
                            renderToggle: function renderToggle(_ref3) {
                                var isOpen = _ref3.isOpen,
                                    onToggle = _ref3.onToggle;
                                return React.createElement(
                                    Button,
                                    { isSmall: true, onClick: onToggle, "aria-expanded": isOpen },
                                    React.createElement("i", { className: "dashicons dashicons-edit" })
                                );
                            },
                            renderContent: function renderContent() {
                                return React.createElement(
                                    Fragment,
                                    null,
                                    React.createElement(_singleRangeControl2.default, {
                                        label: __("Margin Top (PX)", 'premium-blocks-for-gutenberg'),
                                        value: featureStyles[0].listMarginT,
                                        onChange: function onChange(newSize) {
                                            return saveFeatureStyle({ listMarginT: newSize });
                                        },
                                        showUnit: false,
                                        defaultValue: 0
                                    }),
                                    React.createElement(_singleRangeControl2.default, {
                                        label: __("Margin Bottom (PX)", 'premium-blocks-for-gutenberg'),
                                        value: featureStyles[0].listMarginB,
                                        onChange: function onChange(newSize) {
                                            return saveFeatureStyle({ listMarginB: newSize });
                                        },
                                        showUnit: false,
                                        defaultValue: 0
                                    }),
                                    React.createElement(_singleRangeControl2.default, {
                                        label: __("Padding (PX)", 'premium-blocks-for-gutenberg'),
                                        value: featureStyles[0].listPadding,
                                        onChange: function onChange(newSize) {
                                            return saveFeatureStyle({ listPadding: newSize });
                                        },
                                        showUnit: false,
                                        defaultValue: 0
                                    })
                                );
                            }
                        })
                    )
                ),
                descChecked && React.createElement(
                    PanelBody,
                    {
                        title: __("Description", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(_premiumTypo2.default, {
                        components: ["responsiveSize", "weight", "style", "spacing", "line"],
                        setAttributes: saveDescriptionStyle,
                        fontSizeType: {
                            value: descStyles[0].descSizeUnit,
                            label: __("descSizeUnit", 'premium-blocks-for-gutenberg')
                        },
                        fontSize: descStyles[0].descSize,
                        fontSizeMobile: descStyles[0].descSizeMobile,
                        fontSizeTablet: descStyles[0].descSizeTablet,
                        size: descStyles[0].descSize,
                        weight: descStyles[0].descWeight,
                        style: descStyles[0].descStyle,
                        spacing: descStyles[0].descLetter,
                        line: descStyles[0].descLine,
                        onChangeWeight: function onChangeWeight(newWeight) {
                            return saveDescriptionStyle({ descWeight: newWeight });
                        },
                        onChangeStyle: function onChangeStyle(newStyle) {
                            return saveDescriptionStyle({ descStyle: newStyle });
                        },
                        onChangeSpacing: function onChangeSpacing(newValue) {
                            return saveDescriptionStyle({ descLetter: newValue });
                        },
                        onChangeLine: function onChangeLine(newValue) {
                            return saveDescriptionStyle({ descLine: newValue });
                        },
                        onChangeSize: function onChangeSize(newSize) {
                            return saveDescriptionStyle({ descSize: newSize });
                        },
                        onChangeTabletSize: function onChangeTabletSize(newSize) {
                            return saveDescriptionStyle({ descSizeTablet: newSize });
                        },
                        onChangeMobileSize: function onChangeMobileSize(newSize) {
                            return saveDescriptionStyle({ descSizeMobile: newSize });
                        }
                    }),
                    React.createElement(_ColorComponent2.default, {
                        label: __("Text Color", 'premium-blocks-for-gutenberg'),
                        colorValue: descStyles[0].descColor,
                        colorDefault: '',
                        onColorChange: function onColorChange(newColor) {
                            return saveDescriptionStyle({ descColor: newColor });
                        }
                    }),
                    React.createElement(_ColorComponent2.default, {
                        label: __("Background Color", 'premium-blocks-for-gutenberg'),
                        colorValue: descStyles[0].descBack,
                        colorDefault: '',
                        onColorChange: function onColorChange(newColor) {
                            return saveDescriptionStyle({ descBack: newColor });
                        }
                    }),
                    React.createElement(
                        "div",
                        { className: "premium-control-toggle" },
                        React.createElement(
                            "strong",
                            null,
                            __("Spacings", 'premium-blocks-for-gutenberg')
                        ),
                        React.createElement(Dropdown, {
                            className: "premium-control-toggle-btn",
                            contentClassName: "premium-control-toggle-content",
                            position: "bottom right",
                            renderToggle: function renderToggle(_ref4) {
                                var isOpen = _ref4.isOpen,
                                    onToggle = _ref4.onToggle;
                                return React.createElement(
                                    Button,
                                    { isSmall: true, onClick: onToggle, "aria-expanded": isOpen },
                                    React.createElement("i", { className: "dashicons dashicons-edit" })
                                );
                            },
                            renderContent: function renderContent() {
                                return React.createElement(
                                    Fragment,
                                    null,
                                    React.createElement(_singleRangeControl2.default, {
                                        label: __("Margin Top (PX)", 'premium-blocks-for-gutenberg'),
                                        value: descStyles[0].descMarginT,
                                        onChange: function onChange(newMargin) {
                                            return saveDescriptionStyle({ descMarginT: newMargin });
                                        },
                                        showUnit: false,
                                        defaultValue: 0
                                    }),
                                    React.createElement(_singleRangeControl2.default, {
                                        label: __("Margin Bottom (PX)", 'premium-blocks-for-gutenberg'),
                                        value: descStyles[0].descMarginB,
                                        onChange: function onChange(newMargin) {
                                            return saveDescriptionStyle({ descMarginB: newMargin });
                                        },
                                        showUnit: false,
                                        defaultValue: 0
                                    }),
                                    React.createElement(_singleRangeControl2.default, {
                                        label: __("Padding (PX)", 'premium-blocks-for-gutenberg'),
                                        value: descStyles[0].descPadding,
                                        onChange: function onChange(newPadding) {
                                            return saveDescriptionStyle({ descPadding: newPadding });
                                        },
                                        showUnit: false,
                                        defaultValue: 0
                                    })
                                );
                            }
                        })
                    )
                ),
                btnChecked && React.createElement(
                    PanelBody,
                    {
                        title: __("Button", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(_premiumTypo2.default, {
                        components: ["responsiveSize", "weight", "style", "upper", "spacing", "line"],
                        setAttributes: saveButtonStyle,
                        fontSizeType: {
                            value: buttonStyles[0].btnSizeUnit,
                            label: __("btnSizeUnit", 'premium-blocks-for-gutenberg')
                        },
                        fontSize: buttonStyles[0].btnSize,
                        fontSizeMobile: buttonStyles[0].btnSizeMobile,
                        fontSizeTablet: buttonStyles[0].btnSizeTablet,
                        weight: buttonStyles[0].btnWeight,
                        style: buttonStyles[0].btnStyle,
                        spacing: buttonStyles[0].btnLetter,
                        line: buttonStyles[0].btnLine,
                        upper: buttonStyles[0].btnUpper,
                        onChangeWeight: function onChangeWeight(newWeight) {
                            return saveButtonStyle({ btnWeight: newWeight });
                        },
                        onChangeStyle: function onChangeStyle(newStyle) {
                            return saveButtonStyle({ btnStyle: newStyle });
                        },
                        onChangeSpacing: function onChangeSpacing(newValue) {
                            return saveButtonStyle({ btnLetter: newValue });
                        },
                        onChangeLine: function onChangeLine(newValue) {
                            return saveButtonStyle({ btnLine: newValue });
                        },
                        onChangeUpper: function onChangeUpper(check) {
                            return saveButtonStyle({ btnUpper: check });
                        },
                        onChangeSize: function onChangeSize(newSize) {
                            return saveButtonStyle({ btnSize: newSize });
                        },
                        onChangeTabletSize: function onChangeTabletSize(newSize) {
                            return saveButtonStyle({ btnSizeTablet: newSize });
                        },
                        onChangeMobileSize: function onChangeMobileSize(newSize) {
                            return saveButtonStyle({ btnSizeMobile: newSize });
                        }
                    }),
                    React.createElement(_ColorComponent2.default, {
                        label: __("Text Color", 'premium-blocks-for-gutenberg'),
                        colorValue: buttonStyles[0].btnColor,
                        colorDefault: '',
                        onColorChange: function onColorChange(newColor) {
                            return saveButtonStyle({ btnColor: newColor });
                        }
                    }),
                    React.createElement(_ColorComponent2.default, {
                        label: __("Text Hover Color", 'premium-blocks-for-gutenberg'),
                        colorValue: buttonStyles[0].btnHoverColor,
                        colorDefault: '',
                        onColorChange: function onColorChange(newColor) {
                            return saveButtonStyle({ btnHoverColor: newColor });
                        }
                    }),
                    React.createElement(_ColorComponent2.default, {
                        label: __("Background Color", 'premium-blocks-for-gutenberg'),
                        colorValue: buttonStyles[0].btnBack,
                        colorDefault: '',
                        onColorChange: function onColorChange(newColor) {
                            return saveButtonStyle({ btnBack: newColor });
                        }
                    }),
                    React.createElement(_ColorComponent2.default, {
                        label: __("Background Hover Color", 'premium-blocks-for-gutenberg'),
                        colorValue: buttonStyles[0].btnHoverBack,
                        colorDefault: '',
                        onColorChange: function onColorChange(newColor) {
                            return saveButtonStyle({ btnHoverBack: newColor });
                        }
                    }),
                    React.createElement(_premiumBorder2.default, {
                        borderType: buttonStyles[0].btnBorderType,
                        borderWidth: buttonStyles[0].btnBorderWidth,
                        top: btnBorderTop,
                        right: btnBorderRight,
                        bottom: btnBorderBottom,
                        left: btnBorderLeft,
                        borderColor: buttonStyles[0].btnBorderColor,
                        borderRadius: buttonStyles[0].btnBorderRadius,
                        onChangeType: function onChangeType(newType) {
                            return saveButtonStyle({ btnBorderType: newType });
                        },
                        onChangeWidth: function onChangeWidth(_ref5) {
                            var top = _ref5.top,
                                right = _ref5.right,
                                bottom = _ref5.bottom,
                                left = _ref5.left;
                            return setAttributes({
                                btnBorderUpdated: true,
                                btnBorderTop: top,
                                btnBorderRight: right,
                                btnBorderBottom: bottom,
                                btnBorderLeft: left
                            });
                        },
                        onChangeColor: function onChangeColor(colorValue) {
                            return saveButtonStyle({ btnBorderColor: colorValue });
                        },
                        onChangeRadius: function onChangeRadius(newrRadius) {
                            return saveButtonStyle({ btnBorderRadius: newrRadius });
                        }
                    }),
                    React.createElement(
                        "div",
                        { className: "premium-control-toggle" },
                        React.createElement(
                            "strong",
                            null,
                            __("Spacings", 'premium-blocks-for-gutenberg')
                        ),
                        React.createElement(Dropdown, {
                            className: "premium-control-toggle-btn",
                            contentClassName: "premium-control-toggle-content",
                            position: "bottom right",
                            renderToggle: function renderToggle(_ref6) {
                                var isOpen = _ref6.isOpen,
                                    onToggle = _ref6.onToggle;
                                return React.createElement(
                                    Button,
                                    { isSmall: true, onClick: onToggle, "aria-expanded": isOpen },
                                    React.createElement("i", { className: "dashicons dashicons-edit" })
                                );
                            },
                            renderContent: function renderContent() {
                                return React.createElement(
                                    Fragment,
                                    null,
                                    React.createElement(_singleRangeControl2.default, {
                                        label: __("Width (%)", 'premium-blocks-for-gutenberg'),
                                        value: buttonStyles[0].btnWidth,
                                        onChange: function onChange(newSize) {
                                            return saveButtonStyle({ btnWidth: newSize });
                                        },
                                        showUnit: false,
                                        defaultValue: 0
                                    }),
                                    React.createElement(_singleRangeControl2.default, {
                                        label: __("Margin Top (PX)", 'premium-blocks-for-gutenberg'),
                                        value: buttonStyles[0].btnMarginT,
                                        onChange: function onChange(newPadding) {
                                            return saveButtonStyle({ btnMarginT: newPadding });
                                        },
                                        showUnit: false,
                                        defaultValue: 0
                                    }),
                                    React.createElement(_singleRangeControl2.default, {
                                        label: __("Margin Bottom (PX)", 'premium-blocks-for-gutenberg'),
                                        value: buttonStyles[0].btnMarginB,
                                        onChange: function onChange(newPadding) {
                                            return saveButtonStyle({ btnMarginB: newPadding });
                                        },
                                        showUnit: false,
                                        defaultValue: 0
                                    }),
                                    React.createElement(_singleRangeControl2.default, {
                                        label: __("Padding", 'premium-blocks-for-gutenberg'),
                                        value: buttonStyles[0].btnPadding,
                                        onChange: function onChange(newPadding) {
                                            return saveButtonStyle({ btnPadding: newPadding });
                                        },
                                        showUnit: true,
                                        defaultValue: 0,
                                        onChangeUnit: function onChangeUnit(newValue) {
                                            return saveButtonStyle({ btnPaddingU: newValue });
                                        },
                                        unit: buttonStyles[0].btnPaddingU
                                    })
                                );
                            }
                        })
                    ),
                    React.createElement(ToggleControl, {
                        label: __("Open Link in a new tab", 'premium-blocks-for-gutenberg'),
                        checked: buttonStyles[0].btnTarget,
                        onChange: function onChange(newValue) {
                            return saveButtonStyle({ btnTarget: newValue });
                        }
                    })
                ),
                badgeChecked && React.createElement(
                    PanelBody,
                    {
                        title: __("Badge", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(TextControl, {
                        label: __("Text", 'premium-blocks-for-gutenberg'),
                        value: badgeStyles[0].badgeText,
                        onChange: function onChange(value) {
                            return saveBadgeStyles({ badgeText: value });
                        }
                    }),
                    React.createElement(SelectControl, {
                        label: __("Position", 'premium-blocks-for-gutenberg'),
                        options: POSITION,
                        value: badgeStyles[0].badgePos,
                        onChange: function onChange(newValue) {
                            return saveBadgeStyles({ badgePos: newValue });
                        }
                    }),
                    React.createElement(_premiumTypo2.default, {
                        components: ["responsiveSize", "weight", "style", "upper", "spacing"],
                        setAttributes: saveBadgeStyles,
                        fontSizeType: {
                            value: badgeStyles[0].badgeTextUnit,
                            label: __("badgeTextUnit", 'premium-blocks-for-gutenberg')
                        },
                        fontSize: badgeStyles[0].badgeTextSize,
                        fontSizeMobile: badgeStyles[0].badgeSizeMobile,
                        fontSizeTablet: badgeStyles[0].badgeSizeTablet,
                        weight: badgeStyles[0].badgeWeight,
                        style: badgeStyles[0].badgeStyle,
                        spacing: badgeStyles[0].badgeLetter,
                        upper: badgeStyles[0].badgeUpper,
                        onChangeWeight: function onChangeWeight(newWeight) {
                            return saveBadgeStyles({ badgeWeight: newWeight });
                        },
                        onChangeStyle: function onChangeStyle(newStyle) {
                            return saveBadgeStyles({ badgeStyle: newStyle });
                        },
                        onChangeSpacing: function onChangeSpacing(newValue) {
                            return saveBadgeStyles({ badgeLetter: newValue });
                        },
                        onChangeUpper: function onChangeUpper(check) {
                            return saveBadgeStyles({ badgeUpper: check });
                        },
                        onChangeSize: function onChangeSize(newSize) {
                            return saveBadgeStyles({ badgeTextSize: newSize });
                        },
                        onChangeTabletSize: function onChangeTabletSize(newSize) {
                            return saveBadgeStyles({ badgeSizeTablet: newSize });
                        },
                        onChangeMobileSize: function onChangeMobileSize(newSize) {
                            return saveBadgeStyles({ badgeSizeMobile: newSize });
                        }
                    }),
                    React.createElement(_ColorComponent2.default, {
                        label: __("Text Color", 'premium-blocks-for-gutenberg'),
                        colorValue: badgeStyles[0].badgeColor,
                        colorDefault: '',
                        onColorChange: function onColorChange(newColor) {
                            return saveBadgeStyles({ badgeColor: newColor });
                        }
                    }),
                    React.createElement(_ColorComponent2.default, {
                        label: __("Background Color", 'premium-blocks-for-gutenberg'),
                        colorValue: badgeStyles[0].badgeBack,
                        colorDefault: '',
                        onColorChange: function onColorChange(newColor) {
                            return saveBadgeStyles({ badgeBack: newColor });
                        }
                    }),
                    React.createElement(_singleRangeControl2.default, {
                        label: __("Vertical Offset", 'premium-blocks-for-gutenberg'),
                        value: badgeStyles[0].badgeTop,
                        onChange: function onChange(newValue) {
                            return saveBadgeStyles({ badgeTop: newValue });
                        },
                        showUnit: false,
                        defaultValue: 0
                    }),
                    React.createElement(_singleRangeControl2.default, {
                        label: __("Horizontal Offset", 'premium-blocks-for-gutenberg'),
                        value: badgeStyles[0].badgeHorizontal,
                        min: "1",
                        max: "150",
                        onChange: function onChange(newValue) {
                            return saveBadgeStyles({ badgeHorizontal: newValue });
                        },
                        showUnit: false,
                        defaultValue: 1
                    }),
                    React.createElement(_singleRangeControl2.default, {
                        label: __("Badge Size", 'premium-blocks-for-gutenberg'),
                        value: badgeStyles[0].badgeSize,
                        min: "0",
                        max: "250",
                        onChange: function onChange(newValue) {
                            return saveBadgeStyles({ badgeSize: newValue });
                        },
                        showUnit: false,
                        defaultValue: 0
                    }),
                    React.createElement(_singleRangeControl2.default, {
                        label: __("Text Width", 'premium-blocks-for-gutenberg'),
                        min: "1",
                        max: "200",
                        value: badgeStyles[0].badgeWidth,
                        onChange: function onChange(newValue) {
                            return saveBadgeStyles({ badgeWidth: newValue });
                        },
                        showUnit: false,
                        defaultValue: 0
                    })
                ),
                React.createElement(
                    PanelBody,
                    {
                        title: __("Table", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(_ColorComponent2.default, {
                        label: __("Background Color"),
                        colorValue: tableStyles[0].tableBack,
                        onColorChange: function onColorChange(newvalue) {
                            return saveTableStyles({ tableBack: newvalue });
                        },
                        colorDefault: ""
                    }),
                    React.createElement(_premiumBorder2.default, {
                        borderType: tableStyles[0].borderType,
                        borderWidth: tableStyles[0].borderWidth,
                        top: borderTop,
                        right: borderRight,
                        bottom: borderBottom,
                        left: borderLeft,
                        borderColor: borderColor,
                        borderRadius: tableStyles[0].borderRadius,
                        onChangeType: function onChangeType(newType) {
                            return saveTableStyles({ borderType: newType });
                        },
                        onChangeWidth: function onChangeWidth(_ref7) {
                            var top = _ref7.top,
                                right = _ref7.right,
                                bottom = _ref7.bottom,
                                left = _ref7.left;
                            return setAttributes({
                                borderUpdated: true,
                                borderTop: top,
                                borderRight: right,
                                borderBottom: bottom,
                                borderLeft: left
                            });
                        },
                        onChangeColor: function onChangeColor(colorValue) {
                            return setAttributes({ borderColor: colorValue });
                        },
                        onChangeRadius: function onChangeRadius(newrRadius) {
                            return saveTableStyles({ borderRadius: newrRadius });
                        }
                    }),
                    React.createElement(_PremiumShadow2.default, {
                        label: __("Box Shadow", 'premium-blocks-for-gutenberg'),
                        boxShadow: true,
                        color: tableStyles[0].tableShadowColor,
                        blur: tableStyles[0].tableShadowBlur,
                        horizontal: tableStyles[0].tableShadowHorizontal,
                        vertical: tableStyles[0].tableShadowVertical,
                        position: tableStyles[0].tableShadowPosition,
                        onChangeColor: function onChangeColor(newColor) {
                            return saveTableStyles({ tableShadowColor: newColor === undefined ? "transparent" : newColor });
                        },
                        onChangeBlur: function onChangeBlur(newBlur) {
                            return saveTableStyles({ tableShadowBlur: newBlur === undefined ? 0 : newBlur });
                        },
                        onChangehHorizontal: function onChangehHorizontal(newValue) {
                            return saveTableStyles({ tableShadowHorizontal: newValue === undefined ? 0 : newValue });
                        },
                        onChangeVertical: function onChangeVertical(newValue) {
                            return saveTableStyles({ tableShadowVertical: newValue === undefined ? 0 : newValue });
                        },
                        onChangePosition: function onChangePosition(newValue) {
                            return saveTableStyles({ tableShadowPosition: newValue === undefined ? 0 : newValue });
                        }
                    }),
                    React.createElement(
                        "div",
                        { className: "premium-control-toggle" },
                        React.createElement(
                            "strong",
                            null,
                            __("Spacings", 'premium-blocks-for-gutenberg')
                        ),
                        React.createElement(Dropdown, {
                            className: "premium-control-toggle-btn",
                            contentClassName: "premium-control-toggle-content",
                            position: "bottom right",
                            renderToggle: function renderToggle(_ref8) {
                                var isOpen = _ref8.isOpen,
                                    onToggle = _ref8.onToggle;
                                return React.createElement(
                                    Button,
                                    { isSmall: true, onClick: onToggle, "aria-expanded": isOpen },
                                    React.createElement("i", { className: "dashicons dashicons-edit" })
                                );
                            },
                            renderContent: function renderContent() {
                                return React.createElement(
                                    Fragment,
                                    null,
                                    React.createElement(_singleRangeControl2.default, {
                                        label: __("Padding", 'premium-blocks-for-gutenberg'),
                                        value: tableStyles[0].tablePadding,
                                        min: "0",
                                        max: "50",
                                        onChange: function onChange(newValue) {
                                            return saveTableStyles({ tablePadding: newValue });
                                        },
                                        showUnit: false,
                                        defaultValue: 0
                                    })
                                );
                            }
                        })
                    )
                ),
                React.createElement(_premiumResponsiveTabs2.default, {
                    Desktop: hideDesktop,
                    Tablet: hideTablet,
                    Mobile: hideMobile,
                    onChangeDesktop: function onChangeDesktop(value) {
                        return setAttributes({ hideDesktop: value ? " premium-desktop-hidden" : "" });
                    },
                    onChangeTablet: function onChangeTablet(value) {
                        return setAttributes({ hideTablet: value ? " premium-tablet-hidden" : "" });
                    },
                    onChangeMobile: function onChangeMobile(value) {
                        return setAttributes({ hideMobile: value ? " premium-mobile-hidden" : "" });
                    }
                })
            ), React.createElement(
                "div",
                {
                    id: "premium-pricing-table-" + block_id,
                    className: mainClasses + " premium-pricing-table-" + block_id + " " + hideDesktop + " " + hideTablet + " " + hideMobile,
                    style: {
                        textAlign: contentAlign,
                        backgroundColor: tableStyles[0].tableBack,
                        borderStyle: tableStyles[0].borderType,
                        borderWidth: borderUpdated ? borderTop + "px " + borderRight + "px " + borderBottom + "px " + borderLeft + "px" : tableStyles[0].borderWidth + "px",
                        borderRadius: tableStyles[0].borderRadius + "px",
                        borderColor: borderColor,
                        padding: tableStyles[0].tablePadding + "px",
                        boxShadow: tableStyles[0].tableShadowHorizontal + "px " + tableStyles[0].tableShadowVertical + "px " + tableStyles[0].tableShadowBlur + "px " + tableStyles[0].tableShadowColor + " " + tableStyles[0].tableShadowPosition
                    }
                },
                badgeChecked && React.createElement(
                    "div",
                    {
                        className: "premium-pricing-table__badge_wrap premium-pricing-table__badge_" + badgeStyles[0].badgePos
                    },
                    React.createElement(
                        "div",
                        {
                            className: "premium-pricing-table__badge",
                            style: {
                                borderRightColor: "right" === badgeStyles[0].badgePos ? badgeStyles[0].badgeBack : "transparent",
                                borderTopColor: "left" === badgeStyles[0].badgePos ? badgeStyles[0].badgeBack : "transparent",
                                borderBottomWidth: badgeStyles[0].badgeSize + "px",
                                borderRightWidth: badgeStyles[0].badgeSize + "px",
                                borderTopWidth: "left" === badgeStyles[0].badgePos ? badgeStyles[0].badgeSize + "px" : "none",
                                borderLeftWidth: "right" === badgeStyles[0].badgePos ? badgeStyles[0].badgeSize + "px" : "none"
                            }
                        },
                        React.createElement(
                            "span",
                            {
                                style: {
                                    fontSize: badgeFontSize + badgeStyles[0].badgeTextUnit, color: badgeStyles[0].badgeColor,
                                    fontWeight: badgeStyles[0].badgeWeight,
                                    textTransform: badgeStyles[0].badgeUpper ? "uppercase" : "none",
                                    letterSpacing: badgeStyles[0].badgeLetter + "px",
                                    fontStyle: badgeStyles[0].badgeStyle,
                                    width: badgeStyles[0].badgeWidth + "px",
                                    top: badgeStyles[0].badgeTop + "px",
                                    left: "left" === badgeStyles[0].badgePos ? badgeStyles[0].badgeHorizontal + "px" : "auto",
                                    right: "right" === badgeStyles[0].badgePos ? badgeStyles[0].badgeHorizontal + "px" : "auto"
                                }
                            },
                            badgeStyles[0].badgeText
                        )
                    )
                ),
                titleChecked && React.createElement(
                    "div",
                    {
                        className: "premium-pricing-table__title_wrap",
                        style: {
                            marginTop: titleStyles[0].titleMarginT + "px",
                            marginBottom: titleStyles[0].titleMarginB + "px",
                            background: titleStyles[0].titleBack
                        }
                    },
                    React.createElement(RichText, {
                        tagName: titleStyles[0].titleTag.toLowerCase(),
                        className: "premium-pricing-table__title",
                        onChange: function onChange(newText) {
                            return setAttributes({ title: newText });
                        },
                        placeholder: __("Awesome Title", 'premium-blocks-for-gutenberg'),
                        value: title,
                        style: {
                            fontSize: "" + titleFontSize + titleStyles[0].titleSizeUnit,
                            color: titleStyles[0].titleColor,
                            letterSpacing: titleStyles[0].titleLetter + "px",
                            textTransform: titleStyles[0].titleUpper ? "uppercase" : "none",
                            fontStyle: titleStyles[0].titleStyle,
                            fontWeight: titleStyles[0].titleWeight,
                            lineHeight: titleStyles[0].titleLine + "px",
                            padding: titleStyles[0].titlePadding + "px",
                            textShadow: titleStyles[0].titleShadowHorizontal + "px " + titleStyles[0].titleShadowVertical + "px " + titleStyles[0].titleShadowBlur + "px " + titleStyles[0].titleShadowColor
                        }
                    })
                ),
                priceChecked && React.createElement(
                    "div",
                    {
                        className: "premium-pricing-table__price_wrap",
                        style: {
                            backgroundColor: priceStyles[0].priceBack,
                            marginTop: priceStyles[0].priceMarginT + "px",
                            marginBottom: priceStyles[0].priceMarginB + "px",
                            padding: priceStyles[0].pricePadding + "px",
                            justifyContent: contentAlign
                        }
                    },
                    priceStyles[0].slashPrice && React.createElement(
                        "strike",
                        {
                            className: "premium-pricing-table__slash",
                            style: {
                                fontSize: "" + slashFontSize + priceStyles[0].slashSizeUnit,
                                color: priceStyles[0].slashColor,
                                fontWeight: priceStyles[0].slashWeight,
                                alignSelf: priceStyles[0].slashV
                            }
                        },
                        priceStyles[0].slashPrice
                    ),
                    priceStyles[0].currPrice && React.createElement(
                        "span",
                        {
                            className: "premium-pricing-table__currency",
                            style: {
                                fontSize: "" + currFontSize + priceStyles[0].currSizeUnit,
                                color: priceStyles[0].currColor,
                                fontWeight: priceStyles[0].currWeight,
                                alignSelf: priceStyles[0].currV
                            }
                        },
                        priceStyles[0].currPrice
                    ),
                    priceStyles[0].valPrice && React.createElement(
                        "span",
                        {
                            className: "premium-pricing-table__val",
                            style: {
                                fontSize: "" + valFontSize + priceStyles[0].valSizeUnit,
                                color: priceStyles[0].valColor,
                                fontWeight: priceStyles[0].valWeight,
                                alignSelf: priceStyles[0].valV
                            }
                        },
                        priceStyles[0].valPrice
                    ),
                    priceStyles[0].divPrice && React.createElement(
                        "span",
                        {
                            className: "premium-pricing-table__divider",
                            style: {
                                fontSize: "" + divFontSize + priceStyles[0].divSizeUnit,
                                color: priceStyles[0].divColor,
                                fontWeight: priceStyles[0].divWeight,
                                alignSelf: priceStyles[0].divV
                            }
                        },
                        priceStyles[0].divPrice
                    ),
                    priceStyles[0].durPrice && React.createElement(
                        "span",
                        {
                            className: "premium-pricing-table__dur",
                            style: {
                                fontSize: "" + cFontSize + priceStyles[0].durSizeUnit,
                                color: priceStyles[0].durColor,
                                fontWeight: priceStyles[0].durWeight,
                                alignSelf: priceStyles[0].durV
                            }
                        },
                        priceStyles[0].durPrice
                    )
                ),
                listChecked && React.createElement(
                    "div",
                    {
                        className: "premium-pricing-table__list_wrap",
                        style: {
                            marginTop: featureStyles[0].listMarginT + "px",
                            marginBottom: featureStyles[0].listMarginB + "px"
                        }
                    },
                    React.createElement(RichText, {
                        tagName: "ul",
                        className: "premium-pricing-table__list list-" + featureStyles[0].listStyle,
                        multiline: "li",
                        placeholder: __("List Item #1"),
                        value: listItems,
                        onChange: function onChange(newText) {
                            return setAttributes({ listItems: newText });
                        },
                        style: {
                            fontSize: "" + listFontSize + featureStyles[0].listSizeUnit,
                            color: featureStyles[0].listColor,
                            background: featureStyles[0].listBack,
                            padding: featureStyles[0].listPadding + "px",
                            listStyle: "check" !== featureStyles[0].listStyle ? featureStyles[0].listStyle : "none",
                            listStylePosition: "inside",
                            fontWeight: featureStyles[0].listWeight,
                            textTransform: featureStyles[0].listUpper ? "uppercase" : "none",
                            letterSpacing: featureStyles[0].listLetter + "px",
                            fontStyle: featureStyles[0].listItemsStyle,
                            lineHeight: featureStyles[0].listLine + "px",
                            textAlign: featureStyles[0].featsAlign ? featureStyles[0].featsAlign : contentAlign
                        }
                    })
                ),
                descChecked && React.createElement(
                    "div",
                    { className: "premium-pricing-table__desc_wrap" },
                    React.createElement(RichText, {
                        tagName: "p",
                        className: "premium-pricing-table__desc",
                        onChange: function onChange(newText) {
                            return setAttributes({ desc: newText });
                        },
                        placeholder: "Lorem ipsum dolor sit amet, consectetur adipiscing elit",
                        value: desc,
                        style: {
                            fontSize: "" + descFontSize + descStyles[0].descSizeUnit,
                            color: descStyles[0].descColor,
                            background: descStyles[0].descBack,
                            fontWeight: descStyles[0].descWeight,
                            letterSpacing: descStyles[0].descLetter + "px",
                            fontStyle: descStyles[0].descStyle,
                            lineHeight: descStyles[0].descLine + "px",
                            marginTop: descStyles[0].descMarginT + "px",
                            marginBottom: descStyles[0].descMarginB + "px",
                            padding: descStyles[0].descPadding + "px"
                        }
                    })
                ),
                btnChecked && React.createElement(
                    "div",
                    {
                        className: "premium-pricing-table__button",
                        style: {
                            width: buttonStyles[0].btnWidth + "%"
                        }
                    },
                    React.createElement(
                        "a",
                        {
                            "class": "premium-pricing-table__button_link",
                            href: "{ attributes.btnUrl }",
                            target: buttonStyles[0].btnTarget ? "_blank" : "_self",
                            style: {
                                fontSize: "" + btnFontSize + buttonStyles[0].btnSizeUnit,
                                color: buttonStyles[0].btnColor,
                                background: buttonStyles[0].btnBack ? buttonStyles[0].btnBack : "transparent",
                                fontWeight: buttonStyles[0].btnWeight,
                                letterSpacing: buttonStyles[0].btnLetter + "px",
                                fontStyle: buttonStyles[0].btnStyle,
                                lineHeight: buttonStyles[0].btnLine + "px",
                                marginTop: buttonStyles[0].btnMarginT,
                                marginBottom: buttonStyles[0].btnMarginB,
                                padding: buttonStyles[0].btnPadding + buttonStyles[0].btnPaddingU,
                                borderStyle: buttonStyles[0].btnBorderType,
                                borderWidth: btnBorderUpdated ? btnBorderTop + "px " + btnBorderRight + "px " + btnBorderBottom + "px " + btnBorderLeft + "px" : buttonStyles[0].btnBorderWidth + "px",
                                borderRadius: buttonStyles[0].btnBorderRadius + "px",
                                borderColor: buttonStyles[0].btnBorderColor
                            }
                        },
                        React.createElement(RichText, {
                            tagName: "span",
                            onChange: function onChange(newText) {
                                return setAttributes({ btnText: newText });
                            },
                            value: btnText,
                            style: {
                                textTransform: buttonStyles[0].btnUpper ? "uppercase" : "none"
                            }
                        })
                    ),
                    React.createElement(URLInput, {
                        value: btnLink,
                        onChange: function onChange(newLink) {
                            return setAttributes({ btnLink: newLink });
                        }
                    }),
                    React.createElement("style", {
                        dangerouslySetInnerHTML: {
                            __html: ["#premium-pricing-table-" + block_id + " .premium-pricing-table__button_link:hover {", "color: " + buttonStyles[0].btnHoverColor + " !important;", "background: " + buttonStyles[0].btnHoverBack + " !important", "}"].join("\n")
                        }
                    })
                )
            )];
        }
    }]);

    return PremiumPricingTable;
}(Component);

exports.default = withSelect(function (select) {
    var _select = select('core/edit-post'),
        _select$__experimenta = _select.__experimentalGetPreviewDeviceType,
        __experimentalGetPreviewDeviceType = _select$__experimenta === undefined ? null : _select$__experimenta;

    var deviceType = __experimentalGetPreviewDeviceType ? __experimentalGetPreviewDeviceType() : null;

    return {
        deviceType: deviceType
    };
})(PremiumPricingTable);

/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classnames = __webpack_require__(0);

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var RichText = wp.blockEditor.RichText;


var save = function save(props) {
    var className = props.className;
    var _props$attributes = props.attributes,
        borderUpdated = _props$attributes.borderUpdated,
        btnBorderUpdated = _props$attributes.btnBorderUpdated,
        contentAlign = _props$attributes.contentAlign,
        borderColor = _props$attributes.borderColor,
        title = _props$attributes.title,
        desc = _props$attributes.desc,
        titleChecked = _props$attributes.titleChecked,
        descChecked = _props$attributes.descChecked,
        priceChecked = _props$attributes.priceChecked,
        selectedStyle = _props$attributes.selectedStyle,
        btnChecked = _props$attributes.btnChecked,
        btnText = _props$attributes.btnText,
        btnLink = _props$attributes.btnLink,
        badgeChecked = _props$attributes.badgeChecked,
        listChecked = _props$attributes.listChecked,
        listItems = _props$attributes.listItems,
        block_id = _props$attributes.block_id,
        classMigrate = _props$attributes.classMigrate,
        hideDesktop = _props$attributes.hideDesktop,
        hideTablet = _props$attributes.hideTablet,
        hideMobile = _props$attributes.hideMobile,
        titleStyles = _props$attributes.titleStyles,
        priceStyles = _props$attributes.priceStyles,
        featureStyles = _props$attributes.featureStyles,
        descStyles = _props$attributes.descStyles,
        buttonStyles = _props$attributes.buttonStyles,
        badgeStyles = _props$attributes.badgeStyles,
        tableStyles = _props$attributes.tableStyles,
        btnBorderTop = _props$attributes.btnBorderTop,
        btnBorderRight = _props$attributes.btnBorderRight,
        btnBorderBottom = _props$attributes.btnBorderBottom,
        btnBorderLeft = _props$attributes.btnBorderLeft,
        borderTop = _props$attributes.borderTop,
        borderRight = _props$attributes.borderRight,
        borderBottom = _props$attributes.borderBottom,
        borderLeft = _props$attributes.borderLeft;


    var mainClasses = (0, _classnames2.default)(className, "premium-pricing-table");

    return React.createElement(
        "div",
        {
            id: mainClasses + "-" + block_id,
            className: mainClasses + " premium-pricing-table-" + block_id + " " + hideDesktop + " " + hideTablet + " " + hideMobile,
            style: {
                textAlign: contentAlign,
                backgroundColor: tableStyles[0].tableBack,
                borderStyle: tableStyles[0].borderType,
                borderWidth: borderUpdated ? borderTop + "px " + borderRight + "px " + borderBottom + "px " + borderLeft + "px" : tableStyles[0].borderWidth + "px",
                borderRadius: tableStyles[0].borderRadius + "px",
                borderColor: borderColor,
                padding: tableStyles[0].tablePadding + "px",
                boxShadow: tableStyles[0].tableShadowHorizontal + "px " + tableStyles[0].tableShadowVertical + "px " + tableStyles[0].tableShadowBlur + "px " + tableStyles[0].tableShadowColor + " " + tableStyles[0].tableShadowPosition
            }
        },
        badgeChecked && React.createElement(
            "div",
            {
                className: "premium-pricing-table__badge_wrap premium-pricing-table__badge_" + badgeStyles[0].badgePos
            },
            React.createElement(
                "div",
                {
                    className: "premium-pricing-table__badge",
                    style: {
                        borderRightColor: "right" === badgeStyles[0].badgePos ? badgeStyles[0].badgeBack : "transparent",
                        borderTopColor: "left" === badgeStyles[0].badgePos ? badgeStyles[0].badgeBack : "transparent",
                        borderBottomWidth: badgeStyles[0].badgeSize + "px",
                        borderRightWidth: badgeStyles[0].badgeSize + "px",
                        borderTopWidth: "left" === badgeStyles[0].badgePos ? badgeStyles[0].badgeSize + "px" : "none",
                        borderLeftWidth: "right" === badgeStyles[0].badgePos ? badgeStyles[0].badgeSize + "px" : "none"
                    }
                },
                React.createElement(
                    "span",
                    {
                        style: {
                            color: badgeStyles[0].badgeColor,
                            fontWeight: badgeStyles[0].badgeWeight,
                            textTransform: badgeStyles[0].badgeUpper ? "uppercase" : "none",
                            letterSpacing: badgeStyles[0].badgeLetter + "px",
                            fontStyle: badgeStyles[0].badgeStyle,
                            width: badgeStyles[0].badgeWidth + "px",
                            top: badgeStyles[0].badgeTop + "px",
                            left: "left" === badgeStyles[0].badgePos ? badgeStyles[0].badgeHorizontal + "px" : "auto",
                            right: "right" === badgeStyles[0].badgePos ? badgeStyles[0].badgeHorizontal + "px" : "auto"
                        }
                    },
                    badgeStyles[0].badgeText,
                    "                       "
                )
            )
        ),
        titleChecked && React.createElement(
            "div",
            {
                className: "premium-pricing-table__title_wrap",
                style: {
                    marginTop: titleStyles[0].titleMarginT + "px",
                    marginBottom: titleStyles[0].titleMarginB + "px",
                    background: titleStyles[0].titleBack
                }
            },
            React.createElement(RichText.Content, {
                tagName: titleStyles[0].titleTag.toLowerCase(),
                className: "premium-pricing-table__title",
                value: title,
                style: {
                    color: titleStyles[0].titleColor,
                    letterSpacing: titleStyles[0].titleLetter + "px",
                    textTransform: titleStyles[0].titleUpper ? "uppercase" : "none",
                    fontStyle: titleStyles[0].titleStyle,
                    fontWeight: titleStyles[0].titleWeight,
                    lineHeight: titleStyles[0].titleLine + "px",
                    padding: titleStyles[0].titlePadding + "px",
                    textShadow: titleStyles[0].titleShadowHorizontal + "px " + titleStyles[0].titleShadowVertical + "px " + titleStyles[0].titleShadowBlur + "px " + titleStyles[0].titleShadowColor
                }
            })
        ),
        priceChecked && React.createElement(
            "div",
            {
                className: "premium-pricing-table__price_wrap",
                style: {
                    backgroundColor: priceStyles[0].priceBack,
                    marginTop: priceStyles[0].priceMarginT + "px",
                    marginBottom: priceStyles[0].priceMarginB + "px",
                    padding: priceStyles[0].pricePadding + "px",
                    justifyContent: contentAlign
                }
            },
            priceStyles[0].slashPrice && React.createElement(
                "strike",
                {
                    className: "premium-pricing-table__slash",
                    style: {
                        color: priceStyles[0].slashColor,
                        fontWeight: priceStyles[0].slashWeight,
                        alignSelf: priceStyles[0].slashV
                    }
                },
                priceStyles[0].slashPrice
            ),
            priceStyles[0].currPrice && React.createElement(
                "span",
                {
                    className: "premium-pricing-table__currency",
                    style: {
                        color: priceStyles[0].currColor,
                        fontWeight: priceStyles[0].currWeight,
                        alignSelf: priceStyles[0].currV
                    }
                },
                priceStyles[0].currPrice
            ),
            priceStyles[0].valPrice && React.createElement(
                "span",
                {
                    className: "premium-pricing-table__val",
                    style: {
                        color: priceStyles[0].valColor,
                        fontWeight: priceStyles[0].valWeight,
                        alignSelf: priceStyles[0].valV
                    }
                },
                priceStyles[0].valPrice
            ),
            priceStyles[0].divPrice && React.createElement(
                "span",
                {
                    className: "premium-pricing-table__divider",
                    style: {
                        color: priceStyles[0].divColor,
                        fontWeight: priceStyles[0].divWeight,
                        alignSelf: priceStyles[0].divV
                    }
                },
                priceStyles[0].divPrice
            ),
            priceStyles[0].durPrice && React.createElement(
                "span",
                {
                    className: "premium-pricing-table__dur",
                    style: {
                        color: priceStyles[0].durColor,
                        fontWeight: priceStyles[0].durWeight,
                        alignSelf: priceStyles[0].durV
                    }
                },
                priceStyles[0].durPrice
            )
        ),
        listChecked && React.createElement(
            "div",
            {
                className: "premium-pricing-table__list_wrap",
                style: {
                    marginTop: featureStyles[0].listMarginT + "px",
                    marginBottom: featureStyles[0].listMarginB + "px"
                }
            },
            React.createElement(
                "ul",
                {
                    className: "premium-pricing-table__list list-" + featureStyles[0].listStyle,
                    style: {
                        color: featureStyles[0].listColor,
                        background: featureStyles[0].listBack,
                        padding: featureStyles[0].listPadding + "px",
                        listStyle: "check" !== featureStyles[0].listStyle ? featureStyles[0].listStyle : "none",
                        listStylePosition: "inside",
                        fontWeight: featureStyles[0].listWeight,
                        textTransform: featureStyles[0].listUpper ? "uppercase" : "none",
                        letterSpacing: featureStyles[0].listLetter + "px",
                        fontStyle: featureStyles[0].listItemsStyle,
                        lineHeight: featureStyles[0].listLine + "px",
                        textAlign: featureStyles[0].featsAlign ? featureStyles[0].featsAlign : contentAlign
                    }
                },
                listItems
            )
        ),
        descChecked && React.createElement(
            "div",
            { className: "premium-pricing-table__desc_wrap" },
            React.createElement(RichText.Content, {
                tagName: "p",
                className: "premium-pricing-table__desc",
                value: desc,
                style: {
                    color: descStyles[0].descColor,
                    background: descStyles[0].descBack,
                    fontWeight: descStyles[0].descWeight,
                    letterSpacing: descStyles[0].descLetter + "px",
                    fontStyle: descStyles[0].descStyle,
                    lineHeight: descStyles[0].descLine + "px",
                    marginTop: descStyles[0].descMarginT + "px",
                    marginBottom: descStyles[0].descMarginB + "px",
                    padding: descStyles[0].descPadding + "px"
                }
            })
        ),
        btnChecked && React.createElement(
            "div",
            {
                className: "premium-pricing-table__button",
                style: {
                    width: buttonStyles[0].btnWidth + "%"
                }
            },
            React.createElement(
                "a",
                {
                    "class": "premium-pricing-table__button_link",
                    href: btnLink,
                    target: buttonStyles[0].btnTarget ? "_blank" : "_self",
                    rel: "noopener noreferrer",
                    style: {
                        color: buttonStyles[0].btnColor,
                        background: buttonStyles[0].btnBack ? buttonStyles[0].btnBack : "transparent",
                        fontWeight: buttonStyles[0].btnWeight,
                        letterSpacing: buttonStyles[0].btnLetter + "px",
                        fontStyle: buttonStyles[0].btnStyle,
                        lineHeight: buttonStyles[0].btnLine + "px",
                        marginTop: buttonStyles[0].btnMarginT,
                        marginBottom: buttonStyles[0].btnMarginB,
                        padding: buttonStyles[0].btnPadding + buttonStyles[0].btnPaddingU,
                        borderStyle: buttonStyles[0].btnBorderType,
                        borderWidth: btnBorderUpdated ? btnBorderTop + "px " + btnBorderRight + "px " + btnBorderBottom + "px " + btnBorderLeft + "px" : buttonStyles[0].btnBorderWidth + "px",
                        borderRadius: buttonStyles[0].btnBorderRadius + "px",
                        borderColor: buttonStyles[0].btnBorderColor
                    }
                },
                React.createElement(RichText.Content, {
                    tagName: "span",
                    onChange: function onChange(newText) {
                        return setAttributes({ btnText: newText });
                    },
                    value: btnText,
                    style: {
                        textTransform: buttonStyles[0].btnUpper ? "uppercase" : "none"
                    }
                })
            ),
            React.createElement("style", {
                dangerouslySetInnerHTML: {
                    __html: ["#premium-pricing-table-" + block_id + " .premium-pricing-table__button_link:hover {", "color: " + buttonStyles[0].btnHoverColor + " !important;", "background: " + buttonStyles[0].btnHoverBack + " !important", "}"].join("\n")
                }
            })
        )
    );
};

exports.default = save;

/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _hexToRgba = __webpack_require__(17);

var _hexToRgba2 = _interopRequireDefault(_hexToRgba);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var className = "premium-pricing-table";
var __ = wp.i18n.__;
var RichText = wp.editor.RichText;

var attributes = {
    borderUpdated: {
        type: "boolean",
        default: false
    },
    btnBorderUpdated: {
        type: "boolean",
        default: false
    },
    contentAlign: {
        type: "string",
        default: "center"
    },
    tableBack: {
        type: "string"
    },
    borderType: {
        type: "string",
        default: "none"
    },
    borderWidth: {
        type: "number",
        default: "1"
    },
    borderRadius: {
        type: "number",
        default: "0"
    },
    borderColor: {
        type: "string"
    },
    tablePadding: {
        type: "number",
        default: "0"
    },
    tableShadowColor: {
        type: "string"
    },
    tableShadowBlur: {
        type: "number",
        default: "0"
    },
    tableShadowHorizontal: {
        type: "number",
        default: "0"
    },
    tableShadowVertical: {
        type: "number",
        default: "0"
    },
    tableShadowPosition: {
        type: "string",
        default: ""
    },
    title: {
        type: "array",
        source: "children",
        selector: ".premium-pricing-table__title",
        default: "Pricing Table"
    },
    titleTag: {
        type: "string",
        default: "H2"
    },
    titleColor: {
        type: "string",
        default: "#6ec1e4"
    },
    titleSizeUnit: {
        type: 'string',
        default: 'px'
    },
    titleSize: {
        type: "number"
    },
    titleSizeMobile: {
        type: 'number'
    },
    titleSizeTablet: {
        type: "number"
    },
    titleLine: {
        type: "number"
    },
    titleLetter: {
        type: "number"
    },
    titleStyle: {
        type: "string"
    },
    titleUpper: {
        type: "boolean"
    },
    titleWeight: {
        type: "number",
        default: 500
    },
    titleShadowColor: {
        type: "string"
    },
    titleShadowBlur: {
        type: "number",
        default: "0"
    },
    titleShadowHorizontal: {
        type: "number",
        default: "0"
    },
    titleShadowVertical: {
        type: "number",
        default: "0"
    },
    titleBack: {
        type: "string"
    },
    titleMarginB: {
        type: "number",
        default: 20
    },
    titleMarginT: {
        type: "number",
        default: 20
    },
    titlePadding: {
        type: "number",
        default: "0"
    },
    desc: {
        type: "array",
        source: "children",
        selector: ".premium-pricing-table__desc"
    },
    descColor: {
        type: "string",
        default: "#000"
    },
    descSize: {
        type: "number"
    },
    descSizeUnit: {
        type: "string",
        default: 'px'
    },
    descSizeTablet: {
        type: 'number'
    },
    descSizeMobile: {
        type: 'number'
    },
    descWeight: {
        type: "number"
    },
    descLetter: {
        type: "number"
    },
    descStyle: {
        type: "string"
    },
    descLine: {
        type: "number"
    },
    descBack: {
        type: "string"
    },
    descMarginT: {
        type: "number",
        default: "0"
    },
    descMarginB: {
        type: "number",
        default: "30"
    },
    descPadding: {
        type: "number",
        default: "0"
    },
    titleChecked: {
        type: "boolean",
        default: true
    },
    descChecked: {
        type: "boolean",
        default: false
    },
    priceChecked: {
        type: "boolean",
        default: true
    },
    priceBack: {
        type: "string"
    },
    priceMarginT: {
        type: "number"
    },
    priceMarginB: {
        type: "number",
        default: 10
    },
    pricePadding: {
        type: "number"
    },
    slashPrice: {
        type: "string"
    },
    slashColor: {
        type: "string"
    },
    slashSizeUnit: {
        type: "string",
        default: 'px'
    },
    slashSize: {
        type: "number",
        default: 20
    },
    slashSizeMobile: {
        type: "number"
    },
    slashSizeTablet: {
        type: "number"
    },
    slashWeight: {
        type: "number"
    },
    currPrice: {
        type: "string",
        default: "$"
    },
    currColor: {
        type: "string"
    },
    currSize: {
        type: "number",
        default: 20
    },
    currSizeUnit: {
        type: "string",
        default: 'px'
    },
    currSizeMobile: {
        type: "number"
    },
    currSizeTablet: {
        type: "number"
    },
    currWeight: {
        type: "number"
    },
    valPrice: {
        type: "string",
        default: "25"
    },
    valColor: {
        type: "string"
    },
    valSizeUnit: {
        type: "string",
        default: "px"
    },
    valSize: {
        type: "number",
        default: 50
    },
    valSizeMobile: {
        type: "number"
    },
    valSizeTablet: {
        type: "number"
    },
    valWeight: {
        type: "number"
    },
    divPrice: {
        type: "string",
        default: "/"
    },
    divColor: {
        type: "string"
    },
    divSize: {
        type: "number",
        default: 20
    },
    divSizeUnit: {
        type: "string",
        default: "px"
    },
    divSizeMobile: {
        type: "number"
    },
    divSizeTablet: {
        type: "number"
    },
    divWeight: {
        type: "number"
    },
    durPrice: {
        type: "string",
        default: "m"
    },
    durColor: {
        type: "string"
    },
    durSizeUnit: {
        type: "string",
        default: 'px'
    },
    durSize: {
        type: "number",
        default: 20
    },
    durSizeMobile: {
        type: "number"
    },
    durSizeTablet: {
        type: "number"
    },
    durWeight: {
        type: "number"
    },
    selectedStyle: {
        type: "string",
        default: "price"
    },
    btnChecked: {
        type: "boolean",
        default: true
    },
    btnText: {
        type: "string",
        default: "Get Started"
    },
    btnLink: {
        type: "string",
        source: "attribute",
        attribute: "href",
        selector: ".premium-pricing-table__button_link"
    },
    btnTarget: {
        type: "boolean",
        default: true
    },
    btnColor: {
        type: "string",
        default: "#fff"
    },
    btnHoverColor: {
        type: "string"
    },
    btnWidth: {
        type: "number"
    },
    btnSize: {
        type: "number"
    },
    btnSizeUnit: {
        type: 'string',
        default: 'px'
    },
    btnSizeTablet: {
        type: 'number'
    },
    btnSizeMobile: {
        type: 'number'
    },
    btnWeight: {
        type: "number",
        default: 900
    },
    btnLine: {
        type: "number"
    },
    btnLetter: {
        type: "number"
    },
    btnStyle: {
        type: "string"
    },
    btnUpper: {
        type: "boolean"
    },
    btnBack: {
        type: "string",
        default: "#6ec1e4"
    },
    btnHoverBack: {
        type: "string"
    },
    btnMarginT: {
        type: "number",
        default: "0"
    },
    btnMarginB: {
        type: "number",
        default: "0"
    },
    btnPadding: {
        type: "number",
        default: 10
    },
    btnPaddingU: {
        type: "string"
    },
    btnBorderType: {
        type: "string",
        default: "none"
    },
    btnBorderWidth: {
        type: "number",
        default: "1"
    },
    btnBorderRadius: {
        type: "number",
        default: "0"
    },
    btnBorderColor: {
        type: "string"
    },
    badgeChecked: {
        type: "boolean"
    },
    badgePos: {
        type: "string",
        default: "right"
    },
    badgeBack: {
        type: "string",
        default: "#6ec1e4"
    },
    badgeColor: {
        type: "string"
    },
    badgeTextSize: {
        type: "number"
    },
    badgeSize: {
        type: "number"
    },
    badgeTextUnit: {
        type: 'string',
        default: 'px'
    },
    badgeTextSizeTablet: {
        type: 'number'
    },
    badgeTextSizeMobile: {
        type: 'number'
    },
    badgeTop: {
        type: "number"
    },
    badgeHorizontal: {
        type: "number"
    },
    badgeWidth: {
        type: "number"
    },
    badgeWeight: {
        type: "number",
        default: 900
    },
    badgeLetter: {
        type: "number"
    },
    badgeStyle: {
        type: "string"
    },
    badgeUpper: {
        type: "boolean"
    },
    badgeText: {
        type: "string",
        default: __("Popular")
    },
    listChecked: {
        type: "boolean",
        default: true
    },
    listColor: {
        type: "string"
    },
    listSize: {
        type: "number"
    },
    listSizeUnit: {
        type: 'string',
        default: 'px'
    },
    listSizeTablet: {
        type: 'number'
    },
    listSizeMobile: {
        type: 'number'
    },
    listWeight: {
        type: "number",
        default: 500
    },
    listItemsStyle: {
        type: "string"
    },
    listLetter: {
        type: "number"
    },
    listLine: {
        type: "number"
    },
    listUpper: {
        type: "boolean"
    },
    listBack: {
        type: "string"
    },
    listItems: {
        type: "array",
        source: "children",
        selector: ".premium-pricing-table__list"
    },
    listMarginB: {
        type: "number",
        default: 20
    },
    listMarginT: {
        type: "number"
    },
    listPadding: {
        type: "number"
    },
    listStyle: {
        type: "string",
        default: "disc"
    },
    featsAlign: {
        type: "string"
    },
    slashV: {
        type: "string",
        default: "center"
    },
    currV: {
        type: "string",
        default: "center"
    },
    valV: {
        type: "string",
        default: "center"
    },
    divV: {
        type: "string",
        default: "center"
    },
    durV: {
        type: "string",
        default: "center"
    },
    block_id: {
        type: "string"
    },
    btnBorderTop: {
        type: "number"
    },
    btnBorderRight: {
        type: "number"
    },
    btnBorderBottom: {
        type: "number"
    },
    btnBorderLeft: {
        type: "number"
    },
    borderTop: {
        type: "number"
    },
    borderRight: {
        type: "number"
    },
    borderBottom: {
        type: "number"
    },
    borderLeft: {
        type: "number"
    },
    classMigrate: {
        type: 'boolean',
        default: false
    },
    tableOpacity: {
        type: "number",
        default: "1"
    },
    priceOpacity: {
        type: "number",
        default: "1"
    },
    hideDesktop: {
        type: "boolean",
        default: false
    },
    hideTablet: {
        type: "boolean",
        default: false
    },
    hideMobile: {
        type: 'boolean',
        default: false
    }
};

var deprecatedContent = [{
    attributes: attributes,
    migrate: function migrate(attributes) {
        var newAttributes = {
            titleStyles: [{
                titleTag: attributes.titleTag,
                titleSizeUnit: attributes.titleSizeUnit,
                titleSize: attributes.titleSize,
                titleSizeMobile: attributes.titleSizeMobile,
                titleSizeTablet: attributes.titleSizeTablet,
                titleLine: attributes.titleLine,
                titleLetter: attributes.titleLetter,
                titleStyle: attributes.titleStyle,
                titleUpper: attributes.titleUpper,
                titleWeight: attributes.titleWeight,
                titleColor: attributes.titleColor,
                titleBack: attributes.titleBack,
                titleShadowColor: attributes.titleShadowColor,
                titleShadowBlur: attributes.titleShadowBlur,
                titleShadowHorizontal: attributes.titleShadowHorizontal,
                titleShadowVertical: attributes.titleShadowVertical,
                titleMarginB: attributes.titleMarginB,
                titleMarginT: attributes.titleMarginT,
                titlePadding: attributes.titlePadding
            }],
            priceStyles: [{
                priceBack: attributes.priceBack,
                priceOpacity: attributes.priceOpacity,
                priceMarginT: attributes.priceMarginT,
                priceMarginB: attributes.priceMarginB,
                pricePadding: attributes.pricePadding,
                slashPrice: attributes.slashPrice,
                slashColor: attributes.slashColor,
                slashSizeUnit: attributes.slashSizeUnit,
                slashSize: attributes.slashSize,
                slashSizeMobile: attributes.slashSizeMobile,
                slashSizeTablet: attributes.slashSizeTablet,
                slashWeight: attributes.slashWeight,
                currPrice: attributes.currPrice,
                currColor: attributes.currColor,
                currSize: attributes.currSize,
                currSizeUnit: attributes.currSizeUnit,
                currSizeMobile: attributes.currSizeMobile,
                currSizeTablet: attributes.currSizeTablet,
                currWeight: attributes.currWeight,
                valPrice: attributes.valPrice,
                valColor: attributes.valColor,
                valSizeUnit: attributes.valSizeUnit,
                valSize: attributes.valSize,
                valSizeMobile: attributes.valSizeMobile,
                valSizeTablet: attributes.valSizeTablet,
                valWeight: attributes.valWeight,
                divPrice: attributes.divPrice,
                divColor: attributes.divColor,
                divSize: attributes.divSize,
                divSizeUnit: attributes.divSizeUnit,
                divSizeMobile: attributes.divSizeMobile,
                divSizeTablet: attributes.divSizeTablet,
                divWeight: attributes.divWeight,
                durPrice: attributes.durPrice,
                durColor: attributes.durColor,
                durSizeUnit: attributes.durSizeUnit,
                durSize: attributes.durSize,
                durSizeMobile: attributes.durSizeMobile,
                durSizeTablet: attributes.durSizeTablet,
                durWeight: attributes.durWeight,
                selectedStyle: attributes.selectedStyle,
                slashV: attributes.slashV,
                currV: attributes.currV,
                valV: attributes.valV,
                divV: attributes.divV,
                durV: attributes.durV
            }],
            featureStyles: [{
                featsAlign: attributes.featsAlign,
                listStyle: attributes.listStyle,
                listColor: attributes.listColor,
                listSize: attributes.listSize,
                listSizeUnit: attributes.listSizeUnit,
                listSizeTablet: attributes.listSizeTablet,
                listSizeMobile: attributes.listSizeMobile,
                listWeight: attributes.listWeight,
                listItemsStyle: attributes.listItemsStyle,
                listLetter: attributes.listLetter,
                listLine: attributes.listLine,
                listUpper: attributes.listUpper,
                listBack: attributes.listBack,
                listMarginB: attributes.listMarginB,
                listMarginT: attributes.listMarginT,
                listPadding: attributes.listPadding
            }],
            descStyles: [{
                descSize: attributes.descSize,
                descSizeUnit: attributes.descSizeUnit,
                descSizeTablet: attributes.descSizeTablet,
                descSizeMobile: attributes.descSizeMobile,
                descWeight: attributes.descWeight,
                descLetter: attributes.descLetter,
                descStyle: attributes.descStyle,
                descLine: attributes.descLine,
                descColor: attributes.descColor,
                descBack: attributes.descBack,
                descMarginT: attributes.descMarginT,
                descMarginB: attributes.descMarginB,
                descPadding: attributes.descPadding
            }],
            buttonStyles: [{
                btnColor: attributes.btnColor,
                btnHoverColor: attributes.btnHoverColor,
                btnWidth: attributes.btnWidth,
                btnSize: attributes.btnSize,
                btnSizeUnit: attributes.btnSizeUnit,
                btnSizeTablet: attributes.btnSizeTablet,
                btnSizeMobile: attributes.btnSizeMobile,
                btnWeight: attributes.btnWeight,
                btnLine: attributes.btnLine,
                btnLetter: attributes.btnLetter,
                btnStyle: attributes.btnStyle,
                btnUpper: attributes.btnUpper,
                btnBack: attributes.btnBack,
                btnHoverBack: attributes.btnHoverBack,
                btnMarginT: attributes.btnMarginT,
                btnMarginB: attributes.btnMarginB,
                btnPadding: attributes.btnPadding,
                btnPaddingU: attributes.btnPaddingU,
                btnBorderType: attributes.btnBorderType,
                btnBorderWidth: attributes.btnBorderWidth,
                btnBorderRadius: attributes.btnBorderRadius,
                btnBorderColor: attributes.btnBorderColor,
                btnTarget: attributes.btnTarget
            }],
            badgeStyles: [{
                badgePos: attributes.badgePos,
                badgeBack: attributes.badgeBack,
                badgeColor: attributes.badgeColor,
                badgeSize: attributes.badgeSize,
                badgeTextUnit: attributes.badgeTextUnit,
                badgeSizeTablet: attributes.badgeSizeTablet,
                badgeSizeMobile: attributes.badgeSizeMobile,
                badgeTop: attributes.badgeTop,
                badgeHorizontal: attributes.badgeHorizontal,
                badgeWidth: attributes.badgeWidth,
                badgeWeight: attributes.badgeWeight,
                badgeLetter: attributes.badgeLetter,
                badgeStyle: attributes.badgeStyle,
                badgeUpper: attributes.badgeUpper,
                badgeText: attributes.badgeText
            }],
            tableStyles: [{
                tableBack: attributes.tableBack,
                tableOpacity: attributes.tableOpacity,
                borderType: attributes.borderType,
                borderWidth: attributes.borderWidth,
                borderRadius: attributes.borderRadius,
                tableShadowColor: attributes.tableShadowColor,
                tableShadowBlur: attributes.tableShadowBlur,
                tableShadowHorizontal: attributes.tableShadowHorizontal,
                tableShadowVertical: attributes.tableShadowVertical,
                tableShadowPosition: attributes.tableShadowPosition,
                tablePadding: attributes.tablePadding
            }]
        };
        return Object.assign(attributes, newAttributes);
    },
    save: function save(props) {
        var _props$attributes = props.attributes,
            borderUpdated = _props$attributes.borderUpdated,
            btnBorderUpdated = _props$attributes.btnBorderUpdated,
            priceOpacity = _props$attributes.priceOpacity,
            tableOpacity = _props$attributes.tableOpacity,
            contentAlign = _props$attributes.contentAlign,
            tableBack = _props$attributes.tableBack,
            borderType = _props$attributes.borderType,
            borderWidth = _props$attributes.borderWidth,
            borderRadius = _props$attributes.borderRadius,
            borderColor = _props$attributes.borderColor,
            tablePadding = _props$attributes.tablePadding,
            tableShadowBlur = _props$attributes.tableShadowBlur,
            tableShadowColor = _props$attributes.tableShadowColor,
            tableShadowHorizontal = _props$attributes.tableShadowHorizontal,
            tableShadowVertical = _props$attributes.tableShadowVertical,
            tableShadowPosition = _props$attributes.tableShadowPosition,
            titleChecked = _props$attributes.titleChecked,
            title = _props$attributes.title,
            titleTag = _props$attributes.titleTag,
            titleColor = _props$attributes.titleColor,
            titleLetter = _props$attributes.titleLetter,
            titleUpper = _props$attributes.titleUpper,
            titleStyle = _props$attributes.titleStyle,
            titleLine = _props$attributes.titleLine,
            titleWeight = _props$attributes.titleWeight,
            titleBack = _props$attributes.titleBack,
            titleShadowBlur = _props$attributes.titleShadowBlur,
            titleShadowColor = _props$attributes.titleShadowColor,
            titleShadowHorizontal = _props$attributes.titleShadowHorizontal,
            titleShadowVertical = _props$attributes.titleShadowVertical,
            titleMarginT = _props$attributes.titleMarginT,
            titleMarginB = _props$attributes.titleMarginB,
            titlePadding = _props$attributes.titlePadding,
            descChecked = _props$attributes.descChecked,
            desc = _props$attributes.desc,
            descColor = _props$attributes.descColor,
            descLine = _props$attributes.descLine,
            descWeight = _props$attributes.descWeight,
            descStyle = _props$attributes.descStyle,
            descLetter = _props$attributes.descLetter,
            descBack = _props$attributes.descBack,
            descMarginT = _props$attributes.descMarginT,
            descMarginB = _props$attributes.descMarginB,
            descPadding = _props$attributes.descPadding,
            priceChecked = _props$attributes.priceChecked,
            priceBack = _props$attributes.priceBack,
            priceMarginT = _props$attributes.priceMarginT,
            priceMarginB = _props$attributes.priceMarginB,
            pricePadding = _props$attributes.pricePadding,
            slashPrice = _props$attributes.slashPrice,
            slashColor = _props$attributes.slashColor,
            slashWeight = _props$attributes.slashWeight,
            slashV = _props$attributes.slashV,
            currPrice = _props$attributes.currPrice,
            currColor = _props$attributes.currColor,
            currWeight = _props$attributes.currWeight,
            currV = _props$attributes.currV,
            valPrice = _props$attributes.valPrice,
            valColor = _props$attributes.valColor,
            valWeight = _props$attributes.valWeight,
            valV = _props$attributes.valV,
            divPrice = _props$attributes.divPrice,
            divColor = _props$attributes.divColor,
            divWeight = _props$attributes.divWeight,
            divV = _props$attributes.divV,
            durPrice = _props$attributes.durPrice,
            durColor = _props$attributes.durColor,
            durWeight = _props$attributes.durWeight,
            durV = _props$attributes.durV,
            btnChecked = _props$attributes.btnChecked,
            btnText = _props$attributes.btnText,
            btnLink = _props$attributes.btnLink,
            btnTarget = _props$attributes.btnTarget,
            btnColor = _props$attributes.btnColor,
            btnHoverColor = _props$attributes.btnHoverColor,
            btnWeight = _props$attributes.btnWeight,
            btnLine = _props$attributes.btnLine,
            btnLetter = _props$attributes.btnLetter,
            btnUpper = _props$attributes.btnUpper,
            btnStyle = _props$attributes.btnStyle,
            btnBack = _props$attributes.btnBack,
            btnHoverBack = _props$attributes.btnHoverBack,
            btnMarginT = _props$attributes.btnMarginT,
            btnMarginB = _props$attributes.btnMarginB,
            btnPadding = _props$attributes.btnPadding,
            btnPaddingU = _props$attributes.btnPaddingU,
            btnWidth = _props$attributes.btnWidth,
            btnBorderTop = _props$attributes.btnBorderTop,
            btnBorderRight = _props$attributes.btnBorderRight,
            btnBorderBottom = _props$attributes.btnBorderBottom,
            btnBorderLeft = _props$attributes.btnBorderLeft,
            borderTop = _props$attributes.borderTop,
            borderRight = _props$attributes.borderRight,
            borderBottom = _props$attributes.borderBottom,
            borderLeft = _props$attributes.borderLeft,
            btnBorderType = _props$attributes.btnBorderType,
            btnBorderWidth = _props$attributes.btnBorderWidth,
            btnBorderRadius = _props$attributes.btnBorderRadius,
            btnBorderColor = _props$attributes.btnBorderColor,
            badgeChecked = _props$attributes.badgeChecked,
            badgePos = _props$attributes.badgePos,
            badgeBack = _props$attributes.badgeBack,
            badgeColor = _props$attributes.badgeColor,
            badgeTop = _props$attributes.badgeTop,
            badgeHorizontal = _props$attributes.badgeHorizontal,
            badgeWidth = _props$attributes.badgeWidth,
            badgeSize = _props$attributes.badgeSize,
            badgeWeight = _props$attributes.badgeWeight,
            badgeLetter = _props$attributes.badgeLetter,
            badgeStyle = _props$attributes.badgeStyle,
            badgeUpper = _props$attributes.badgeUpper,
            badgeText = _props$attributes.badgeText,
            listChecked = _props$attributes.listChecked,
            listColor = _props$attributes.listColor,
            listWeight = _props$attributes.listWeight,
            listItemsStyle = _props$attributes.listItemsStyle,
            listLine = _props$attributes.listLine,
            listUpper = _props$attributes.listUpper,
            listLetter = _props$attributes.listLetter,
            listBack = _props$attributes.listBack,
            listItems = _props$attributes.listItems,
            listMarginB = _props$attributes.listMarginB,
            listMarginT = _props$attributes.listMarginT,
            listPadding = _props$attributes.listPadding,
            listStyle = _props$attributes.listStyle,
            featsAlign = _props$attributes.featsAlign,
            block_id = _props$attributes.block_id,
            hideDesktop = _props$attributes.hideDesktop,
            hideTablet = _props$attributes.hideTablet,
            hideMobile = _props$attributes.hideMobile;


        return React.createElement(
            "div",
            {
                id: className + "-" + block_id,
                className: className + " premium-pricing-table-" + block_id + " " + hideDesktop + " " + hideTablet + " " + hideMobile,
                style: {
                    textAlign: contentAlign,
                    backgroundColor: tableBack ? (0, _hexToRgba2.default)(tableBack, tableOpacity) : "transparent",
                    borderStyle: borderType,
                    borderWidth: borderUpdated ? borderTop + "px " + borderRight + "px " + borderBottom + "px " + borderLeft + "px" : borderWidth + "px",
                    borderRadius: borderRadius + "px",
                    borderColor: borderColor,
                    padding: tablePadding + "px",
                    boxShadow: tableShadowHorizontal + "px " + tableShadowVertical + "px " + tableShadowBlur + "px " + tableShadowColor + " " + tableShadowPosition
                }
            },
            badgeChecked && React.createElement(
                "div",
                {
                    className: "premium-pricing-table__badge_wrap premium-pricing-table__badge_" + badgePos
                },
                React.createElement(
                    "div",
                    {
                        className: "premium-pricing-table__badge",
                        style: {
                            borderRightColor: "right" === badgePos ? badgeBack : "transparent",
                            borderTopColor: "left" === badgePos ? badgeBack : "transparent",
                            borderBottomWidth: badgeSize + "px",
                            borderRightWidth: badgeSize + "px",
                            borderTopWidth: "left" === badgePos ? badgeSize + "px" : "none",
                            borderLeftWidth: "right" === badgePos ? badgeSize + "px" : "none"
                        }
                    },
                    React.createElement(
                        "span",
                        {
                            style: {
                                color: badgeColor,
                                fontWeight: badgeWeight,
                                textTransform: badgeUpper ? "uppercase" : "none",
                                letterSpacing: badgeLetter + "px",
                                fontStyle: badgeStyle,
                                width: badgeWidth + "px",
                                top: badgeTop + "px",
                                left: "left" === badgePos ? badgeHorizontal + "px" : "auto",
                                right: "right" === badgePos ? badgeHorizontal + "px" : "auto"
                            }
                        },
                        badgeText
                    )
                )
            ),
            titleChecked && React.createElement(
                "div",
                {
                    className: "premium-pricing-table__title_wrap",
                    style: {
                        paddingTop: titleMarginT + "px",
                        paddingBottom: titleMarginB + "px"
                    }
                },
                React.createElement(RichText.Content, {
                    tagName: titleTag.toLowerCase(),
                    className: "premium-pricing-table__title",
                    value: title,
                    style: {
                        color: titleColor,
                        background: titleBack,
                        letterSpacing: titleLetter + "px",
                        textTransform: titleUpper ? "uppercase" : "none",
                        fontStyle: titleStyle,
                        fontWeight: titleWeight,
                        lineHeight: titleLine + "px",
                        marginBottom: titleMarginB + "px",
                        padding: titlePadding + "px",
                        textShadow: titleShadowHorizontal + "px " + titleShadowVertical + "px " + titleShadowBlur + "px " + titleShadowColor
                    }
                })
            ),
            priceChecked && React.createElement(
                "div",
                {
                    className: "premium-pricing-table__price_wrap",
                    style: {
                        backgroundColor: priceBack ? (0, _hexToRgba2.default)(priceBack, priceOpacity) : "transparent",
                        marginTop: priceMarginT + "px",
                        marginBottom: priceMarginB + "px",
                        padding: pricePadding + "px",
                        justifyContent: contentAlign
                    }
                },
                slashPrice && React.createElement(
                    "strike",
                    {
                        className: "premium-pricing-table__slash",
                        style: {
                            color: slashColor,
                            fontWeight: slashWeight,
                            alignSelf: slashV
                        }
                    },
                    slashPrice
                ),
                currPrice && React.createElement(
                    "span",
                    {
                        className: "premium-pricing-table__currency",
                        style: {
                            color: currColor,
                            fontWeight: currWeight,
                            alignSelf: currV
                        }
                    },
                    currPrice
                ),
                valPrice && React.createElement(
                    "span",
                    {
                        className: "premium-pricing-table__val",
                        style: {
                            color: valColor,
                            fontWeight: valWeight,
                            alignSelf: valV
                        }
                    },
                    valPrice
                ),
                divPrice && React.createElement(
                    "span",
                    {
                        className: "premium-pricing-table__divider",
                        style: {
                            color: divColor,
                            fontWeight: divWeight,
                            alignSelf: divV
                        }
                    },
                    divPrice
                ),
                durPrice && React.createElement(
                    "span",
                    {
                        className: "premium-pricing-table__dur",
                        style: {
                            color: durColor,
                            fontWeight: durWeight,
                            alignSelf: durV
                        }
                    },
                    durPrice
                )
            ),
            listChecked && React.createElement(
                "div",
                {
                    className: "premium-pricing-table__list_wrap",
                    style: {
                        marginTop: listMarginT + "px",
                        marginBottom: listMarginB + "px"
                    }
                },
                React.createElement(
                    "ul",
                    {
                        className: "premium-pricing-table__list list-" + listStyle,
                        style: {
                            color: listColor,
                            background: listBack,
                            padding: listPadding + "px",
                            listStyle: "check" !== listStyle ? listStyle : "none",
                            listStylePosition: "inside",
                            fontWeight: listWeight,
                            letterSpacing: listLetter + "px",
                            textTransform: listUpper ? "uppercase" : "none",
                            fontStyle: listItemsStyle,
                            lineHeight: listLine + "px",
                            textAlign: featsAlign ? featsAlign : contentAlign
                        }
                    },
                    listItems
                )
            ),
            descChecked && React.createElement(
                "div",
                { className: "premium-pricing-table__desc_wrap" },
                React.createElement(RichText.Content, {
                    tagName: "p",
                    className: "premium-pricing-table__desc",
                    value: desc,
                    style: {
                        color: descColor,
                        background: descBack,
                        fontWeight: descWeight,
                        lineHeight: descLine + "px",
                        letterSpacing: descLetter + "px",
                        fontStyle: descStyle,
                        marginTop: descMarginT + "px",
                        marginBottom: descMarginB + "px",
                        padding: descPadding + "px"
                    }
                })
            ),
            btnChecked && React.createElement(
                "div",
                {
                    className: "premium-pricing-table__button",
                    style: {
                        width: btnWidth + "%"
                    }
                },
                React.createElement(
                    "a",
                    {
                        "class": "premium-pricing-table__button_link",
                        href: btnLink,
                        target: btnTarget ? "_blank" : "_self",
                        rel: "noopener noreferrer",
                        style: {
                            color: btnColor,
                            background: btnBack ? btnBack : "transparent",
                            fontWeight: btnWeight,
                            letterSpacing: btnLetter + "px",
                            fontStyle: btnStyle,
                            lineHeight: btnLine + "px",
                            marginTop: btnMarginT,
                            marginBottom: btnMarginB,
                            padding: btnPadding + btnPaddingU,
                            borderStyle: btnBorderType,
                            borderWidth: btnBorderUpdated ? btnBorderTop + "px " + btnBorderRight + "px " + btnBorderBottom + "px " + btnBorderLeft + "px" : btnBorderWidth + "px",
                            borderRadius: btnBorderRadius + "px",
                            borderColor: btnBorderColor
                        }
                    },
                    React.createElement(RichText.Content, {
                        tagName: "span",
                        onChange: function onChange(newText) {
                            return setAttributes({ btnText: newText });
                        },
                        value: btnText,
                        style: {
                            textTransform: btnUpper ? "uppercase" : "none"
                        }
                    })
                ),
                React.createElement("style", {
                    dangerouslySetInnerHTML: {
                        __html: ["#premium-pricing-table-" + block_id + " .premium-pricing-table__button_link:hover {", "color: " + btnHoverColor + " !important;", "background: " + btnHoverBack + " !important", "}"].join("\n")
                    }
                })
            )
        );
    }
}, {
    attributes: attributes,
    migrate: function migrate(attributes) {
        var _newAttributes;

        var newAttributes = (_newAttributes = {
            borderLeft: "",
            borderTop: ""
        }, _defineProperty(_newAttributes, "borderLeft", ""), _defineProperty(_newAttributes, "borderRight", ""), _defineProperty(_newAttributes, "btnBorderRight", ""), _defineProperty(_newAttributes, "btnBorderTop", ""), _defineProperty(_newAttributes, "btnBorderBottom", ""), _defineProperty(_newAttributes, "btnBorderLeft", ""), _defineProperty(_newAttributes, "borderUpdated", ""), _defineProperty(_newAttributes, "btnBorderUpdated", ""), _defineProperty(_newAttributes, "classMigrate", false), _defineProperty(_newAttributes, "block_id", ''), _defineProperty(_newAttributes, "titleSizeUnit", 'px'), _defineProperty(_newAttributes, "titleSizeMobile", ''), _defineProperty(_newAttributes, "titleSizeTablet", ''), _defineProperty(_newAttributes, "valSizeUnit", "px"), _defineProperty(_newAttributes, "valSizeTablet", ''), _defineProperty(_newAttributes, "valSizeMobile", ''), _defineProperty(_newAttributes, "badgeTextUnit", "px"), _defineProperty(_newAttributes, "badgeTextSizeTablet", ''), _defineProperty(_newAttributes, "badgeTextSizeMobile", ''), _defineProperty(_newAttributes, "btnSizeUnit", 'px'), _defineProperty(_newAttributes, "btnSizeMobile", ''), _defineProperty(_newAttributes, "btnSizeTablet", ''), _defineProperty(_newAttributes, "currSizeUnit", 'px'), _defineProperty(_newAttributes, "currSizeMobile", ''), _defineProperty(_newAttributes, "currSizeTablet", ''), _defineProperty(_newAttributes, "descSizeUnit", 'px'), _defineProperty(_newAttributes, "descSizeMobile", ''), _defineProperty(_newAttributes, "descSizeTablet", ''), _defineProperty(_newAttributes, "divSizeUnit", 'px'), _defineProperty(_newAttributes, "divSizeMobile", ''), _defineProperty(_newAttributes, "divSizeTablet", ''), _defineProperty(_newAttributes, "durSizeUnit", "px"), _defineProperty(_newAttributes, "durSizeTablet", ''), _defineProperty(_newAttributes, "durSizeMobile", ''), _defineProperty(_newAttributes, "listSizeUnit", 'px'), _defineProperty(_newAttributes, "listSizeMobile", ''), _defineProperty(_newAttributes, "listSizeTablet", ''), _defineProperty(_newAttributes, "slashSizeUnit", 'px'), _defineProperty(_newAttributes, "slashSizeMobile", ''), _defineProperty(_newAttributes, "slashSizeTablet", ''), _defineProperty(_newAttributes, "tableOpacity", ""), _defineProperty(_newAttributes, "priceOpacity", ""), _defineProperty(_newAttributes, "hideDesktop", false), _defineProperty(_newAttributes, "hideTablet", false), _defineProperty(_newAttributes, "hideMobile", false), _newAttributes);
        return Object.assign(attributes, newAttributes);
    },
    save: function save(props) {
        var _props$attributes2 = props.attributes,
            contentAlign = _props$attributes2.contentAlign,
            tableBack = _props$attributes2.tableBack,
            borderType = _props$attributes2.borderType,
            borderWidth = _props$attributes2.borderWidth,
            borderRadius = _props$attributes2.borderRadius,
            borderColor = _props$attributes2.borderColor,
            tablePadding = _props$attributes2.tablePadding,
            tableShadowBlur = _props$attributes2.tableShadowBlur,
            tableShadowColor = _props$attributes2.tableShadowColor,
            tableShadowHorizontal = _props$attributes2.tableShadowHorizontal,
            tableShadowVertical = _props$attributes2.tableShadowVertical,
            tableShadowPosition = _props$attributes2.tableShadowPosition,
            titleChecked = _props$attributes2.titleChecked,
            title = _props$attributes2.title,
            titleTag = _props$attributes2.titleTag,
            titleColor = _props$attributes2.titleColor,
            titleSize = _props$attributes2.titleSize,
            titleLetter = _props$attributes2.titleLetter,
            titleUpper = _props$attributes2.titleUpper,
            titleStyle = _props$attributes2.titleStyle,
            titleLine = _props$attributes2.titleLine,
            titleWeight = _props$attributes2.titleWeight,
            titleBack = _props$attributes2.titleBack,
            titleShadowBlur = _props$attributes2.titleShadowBlur,
            titleShadowColor = _props$attributes2.titleShadowColor,
            titleShadowHorizontal = _props$attributes2.titleShadowHorizontal,
            titleShadowVertical = _props$attributes2.titleShadowVertical,
            titleMarginT = _props$attributes2.titleMarginT,
            titleMarginB = _props$attributes2.titleMarginB,
            titlePadding = _props$attributes2.titlePadding,
            descChecked = _props$attributes2.descChecked,
            desc = _props$attributes2.desc,
            descColor = _props$attributes2.descColor,
            descSize = _props$attributes2.descSize,
            descLine = _props$attributes2.descLine,
            descWeight = _props$attributes2.descWeight,
            descStyle = _props$attributes2.descStyle,
            descLetter = _props$attributes2.descLetter,
            descBack = _props$attributes2.descBack,
            descMarginT = _props$attributes2.descMarginT,
            descMarginB = _props$attributes2.descMarginB,
            descPadding = _props$attributes2.descPadding,
            priceChecked = _props$attributes2.priceChecked,
            priceBack = _props$attributes2.priceBack,
            priceMarginT = _props$attributes2.priceMarginT,
            priceMarginB = _props$attributes2.priceMarginB,
            pricePadding = _props$attributes2.pricePadding,
            slashPrice = _props$attributes2.slashPrice,
            slashColor = _props$attributes2.slashColor,
            slashSize = _props$attributes2.slashSize,
            slashWeight = _props$attributes2.slashWeight,
            slashV = _props$attributes2.slashV,
            currPrice = _props$attributes2.currPrice,
            currColor = _props$attributes2.currColor,
            currSize = _props$attributes2.currSize,
            currWeight = _props$attributes2.currWeight,
            currV = _props$attributes2.currV,
            valPrice = _props$attributes2.valPrice,
            valColor = _props$attributes2.valColor,
            valSize = _props$attributes2.valSize,
            valWeight = _props$attributes2.valWeight,
            valV = _props$attributes2.valV,
            divPrice = _props$attributes2.divPrice,
            divColor = _props$attributes2.divColor,
            divSize = _props$attributes2.divSize,
            divWeight = _props$attributes2.divWeight,
            divV = _props$attributes2.divV,
            durPrice = _props$attributes2.durPrice,
            durColor = _props$attributes2.durColor,
            durSize = _props$attributes2.durSize,
            durWeight = _props$attributes2.durWeight,
            durV = _props$attributes2.durV,
            btnChecked = _props$attributes2.btnChecked,
            btnText = _props$attributes2.btnText,
            btnLink = _props$attributes2.btnLink,
            btnTarget = _props$attributes2.btnTarget,
            btnColor = _props$attributes2.btnColor,
            btnHoverColor = _props$attributes2.btnHoverColor,
            btnSize = _props$attributes2.btnSize,
            btnWeight = _props$attributes2.btnWeight,
            btnLine = _props$attributes2.btnLine,
            btnLetter = _props$attributes2.btnLetter,
            btnUpper = _props$attributes2.btnUpper,
            btnStyle = _props$attributes2.btnStyle,
            btnBack = _props$attributes2.btnBack,
            btnHoverBack = _props$attributes2.btnHoverBack,
            btnMarginT = _props$attributes2.btnMarginT,
            btnMarginB = _props$attributes2.btnMarginB,
            btnPadding = _props$attributes2.btnPadding,
            btnPaddingU = _props$attributes2.btnPaddingU,
            btnWidth = _props$attributes2.btnWidth,
            btnBorderType = _props$attributes2.btnBorderType,
            btnBorderWidth = _props$attributes2.btnBorderWidth,
            btnBorderRadius = _props$attributes2.btnBorderRadius,
            btnBorderColor = _props$attributes2.btnBorderColor,
            badgeChecked = _props$attributes2.badgeChecked,
            badgePos = _props$attributes2.badgePos,
            badgeBack = _props$attributes2.badgeBack,
            badgeColor = _props$attributes2.badgeColor,
            badgeTop = _props$attributes2.badgeTop,
            badgeHorizontal = _props$attributes2.badgeHorizontal,
            badgeWidth = _props$attributes2.badgeWidth,
            badgeSize = _props$attributes2.badgeSize,
            badgeTextSize = _props$attributes2.badgeTextSize,
            badgeWeight = _props$attributes2.badgeWeight,
            badgeLetter = _props$attributes2.badgeLetter,
            badgeStyle = _props$attributes2.badgeStyle,
            badgeUpper = _props$attributes2.badgeUpper,
            badgeText = _props$attributes2.badgeText,
            listChecked = _props$attributes2.listChecked,
            listColor = _props$attributes2.listColor,
            listWeight = _props$attributes2.listWeight,
            listSize = _props$attributes2.listSize,
            listItemsStyle = _props$attributes2.listItemsStyle,
            listLine = _props$attributes2.listLine,
            listUpper = _props$attributes2.listUpper,
            listLetter = _props$attributes2.listLetter,
            listBack = _props$attributes2.listBack,
            listItems = _props$attributes2.listItems,
            listMarginB = _props$attributes2.listMarginB,
            listMarginT = _props$attributes2.listMarginT,
            listPadding = _props$attributes2.listPadding,
            listStyle = _props$attributes2.listStyle,
            featsAlign = _props$attributes2.featsAlign,
            id = _props$attributes2.id;

        return React.createElement(
            "div",
            {
                id: className + "-" + id,
                className: "" + className,
                style: {
                    textAlign: contentAlign,
                    background: tableBack,
                    border: borderType,
                    borderWidth: borderWidth + "px",
                    borderRadius: borderRadius + "px",
                    borderColor: borderColor,
                    padding: tablePadding + "px",
                    boxShadow: tableShadowHorizontal + "px " + tableShadowVertical + "px " + tableShadowBlur + "px " + tableShadowColor + " " + tableShadowPosition
                }
            },
            badgeChecked && React.createElement(
                "div",
                {
                    className: "premium-pricing-table__badge_wrap premium-pricing-table__badge_" + badgePos
                },
                React.createElement(
                    "div",
                    {
                        className: "premium-pricing-table__badge",
                        style: {
                            borderRightColor: "right" === badgePos ? badgeBack : "transparent",
                            borderTopColor: "left" === badgePos ? badgeBack : "transparent",
                            borderBottomWidth: badgeSize + "px",
                            borderRightWidth: badgeSize + "px",
                            borderTopWidth: "left" === badgePos ? badgeSize + "px" : "none",
                            borderLeftWidth: "right" === badgePos ? badgeSize + "px" : "none"
                        }
                    },
                    React.createElement(
                        "span",
                        {
                            style: {
                                fontSize: badgeTextSize + "px",
                                color: badgeColor,
                                fontWeight: badgeWeight,
                                textTransform: badgeUpper ? "uppercase" : "none",
                                letterSpacing: badgeLetter + "px",
                                fontStyle: badgeStyle,
                                width: badgeWidth + "px",
                                top: badgeTop + "px",
                                left: "left" === badgePos ? badgeHorizontal + "px" : "auto",
                                right: "right" === badgePos ? badgeHorizontal + "px" : "auto"
                            }
                        },
                        badgeText
                    )
                )
            ),
            titleChecked && React.createElement(
                "div",
                {
                    className: "premium-pricing-table__title_wrap",
                    style: {
                        paddingTop: titleMarginT + "px",
                        paddingBottom: titleMarginB + "px"
                    }
                },
                React.createElement(RichText.Content, {
                    tagName: titleTag.toLowerCase(),
                    className: "premium-pricing-table__title",
                    value: title,
                    style: {
                        color: titleColor,
                        background: titleBack,
                        fontSize: titleSize + "px",
                        letterSpacing: titleLetter + "px",
                        textTransform: titleUpper ? "uppercase" : "none",
                        fontStyle: titleStyle,
                        fontWeight: titleWeight,
                        lineHeight: titleLine + "px",
                        marginBottom: titleMarginB + "px",
                        padding: titlePadding + "px",
                        textShadow: titleShadowHorizontal + "px " + titleShadowVertical + "px " + titleShadowBlur + "px " + titleShadowColor
                    }
                })
            ),
            priceChecked && React.createElement(
                "div",
                {
                    className: "premium-pricing-table__price_wrap",
                    style: {
                        background: priceBack,
                        marginTop: priceMarginT + "px",
                        marginBottom: priceMarginB + "px",
                        padding: pricePadding + "px",
                        justifyContent: contentAlign
                    }
                },
                slashPrice && React.createElement(
                    "strike",
                    {
                        className: "premium-pricing-table__slash",
                        style: {
                            color: slashColor,
                            fontSize: slashSize + "px",
                            fontWeight: slashWeight,
                            alignSelf: slashV
                        }
                    },
                    slashPrice
                ),
                currPrice && React.createElement(
                    "span",
                    {
                        className: "premium-pricing-table__currency",
                        style: {
                            color: currColor,
                            fontSize: currSize + "px",
                            fontWeight: currWeight,
                            alignSelf: currV
                        }
                    },
                    currPrice
                ),
                valPrice && React.createElement(
                    "span",
                    {
                        className: "premium-pricing-table__val",
                        style: {
                            color: valColor,
                            fontSize: valSize + "px",
                            fontWeight: valWeight,
                            alignSelf: valV
                        }
                    },
                    valPrice
                ),
                divPrice && React.createElement(
                    "span",
                    {
                        className: "premium-pricing-table__divider",
                        style: {
                            color: divColor,
                            fontSize: divSize + "px",
                            fontWeight: divWeight,
                            alignSelf: divV
                        }
                    },
                    divPrice
                ),
                durPrice && React.createElement(
                    "span",
                    {
                        className: "premium-pricing-table__dur",
                        style: {
                            color: durColor,
                            fontSize: durSize + "px",
                            fontWeight: durWeight,
                            alignSelf: durV
                        }
                    },
                    durPrice
                )
            ),
            listChecked && React.createElement(
                "div",
                {
                    className: "premium-pricing-table__list_wrap",
                    style: {
                        marginTop: listMarginT + "px",
                        marginBottom: listMarginB + "px"
                    }
                },
                React.createElement(
                    "ul",
                    {
                        className: "premium-pricing-table__list list-" + listStyle,
                        style: {
                            color: listColor,
                            fontSize: listSize + "px",
                            background: listBack,
                            padding: listPadding + "px",
                            listStyle: "check" !== listStyle ? listStyle : "none",
                            listStylePosition: "inside",
                            fontWeight: listWeight,
                            letterSpacing: listLetter + "px",
                            textTransform: listUpper ? "uppercase" : "none",
                            fontStyle: listItemsStyle,
                            lineHeight: listLine + "px",
                            textAlign: featsAlign ? featsAlign : contentAlign
                        }
                    },
                    listItems
                )
            ),
            descChecked && React.createElement(
                "div",
                { className: "premium-pricing-table__desc_wrap" },
                React.createElement(RichText.Content, {
                    tagName: "p",
                    className: "premium-pricing-table__desc",
                    value: desc,
                    style: {
                        color: descColor,
                        background: descBack,
                        fontSize: descSize + "px",
                        fontWeight: descWeight,
                        lineHeight: descLine + "px",
                        letterSpacing: descLetter + "px",
                        fontStyle: descStyle,
                        marginTop: descMarginT + "px",
                        marginBottom: descMarginB + "px",
                        padding: descPadding + "px"
                    }
                })
            ),
            btnChecked && React.createElement(
                "div",
                {
                    className: "premium-pricing-table__button",
                    style: {
                        width: btnWidth + "%"
                    }
                },
                React.createElement(
                    "a",
                    {
                        "class": "premium-pricing-table__button_link",
                        href: btnLink,
                        target: btnTarget ? "_blank" : "_self",
                        rel: "noopener noreferrer",
                        style: {
                            color: btnColor,
                            background: btnBack ? btnBack : "transparent",
                            fontSize: btnSize + "px",
                            fontWeight: btnWeight,
                            letterSpacing: btnLetter + "px",
                            fontStyle: btnStyle,
                            lineHeight: btnLine + "px",
                            marginTop: btnMarginT,
                            marginBottom: btnMarginB,
                            padding: btnPadding + btnPaddingU,
                            border: btnBorderType,
                            borderWidth: btnBorderWidth + "px",
                            borderRadius: btnBorderRadius + "px",
                            borderColor: btnBorderColor
                        }
                    },
                    React.createElement(RichText.Content, {
                        tagName: "span",
                        onChange: function onChange(newText) {
                            return setAttributes({ btnText: newText });
                        },
                        value: btnText,
                        style: {
                            textTransform: btnUpper ? "uppercase" : "none"
                        }
                    })
                ),
                React.createElement("style", {
                    dangerouslySetInnerHTML: {
                        __html: ["#premium-pricing-table-" + id + " .premium-pricing-table__button_link:hover {", "color: " + btnHoverColor + " !important;", "background: " + btnHoverBack + " !important", "}"].join("\n")
                    }
                })
            )
        );
    }
}, {
    attributes: attributes,
    migrate: function migrate(attributes) {
        return Object.assign(attributes, { featsAlign: "" });
    },
    save: function save(props) {
        var _props$attributes3 = props.attributes,
            contentAlign = _props$attributes3.contentAlign,
            tableBack = _props$attributes3.tableBack,
            borderType = _props$attributes3.borderType,
            borderWidth = _props$attributes3.borderWidth,
            borderRadius = _props$attributes3.borderRadius,
            borderColor = _props$attributes3.borderColor,
            tablePadding = _props$attributes3.tablePadding,
            tableShadowBlur = _props$attributes3.tableShadowBlur,
            tableShadowColor = _props$attributes3.tableShadowColor,
            tableShadowHorizontal = _props$attributes3.tableShadowHorizontal,
            tableShadowVertical = _props$attributes3.tableShadowVertical,
            tableShadowPosition = _props$attributes3.tableShadowPosition,
            titleChecked = _props$attributes3.titleChecked,
            title = _props$attributes3.title,
            titleTag = _props$attributes3.titleTag,
            titleColor = _props$attributes3.titleColor,
            titleSize = _props$attributes3.titleSize,
            titleLetter = _props$attributes3.titleLetter,
            titleUpper = _props$attributes3.titleUpper,
            titleStyle = _props$attributes3.titleStyle,
            titleLine = _props$attributes3.titleLine,
            titleWeight = _props$attributes3.titleWeight,
            titleBack = _props$attributes3.titleBack,
            titleShadowBlur = _props$attributes3.titleShadowBlur,
            titleShadowColor = _props$attributes3.titleShadowColor,
            titleShadowHorizontal = _props$attributes3.titleShadowHorizontal,
            titleShadowVertical = _props$attributes3.titleShadowVertical,
            titleMarginT = _props$attributes3.titleMarginT,
            titleMarginB = _props$attributes3.titleMarginB,
            titlePadding = _props$attributes3.titlePadding,
            descChecked = _props$attributes3.descChecked,
            desc = _props$attributes3.desc,
            descColor = _props$attributes3.descColor,
            descSize = _props$attributes3.descSize,
            descLine = _props$attributes3.descLine,
            descWeight = _props$attributes3.descWeight,
            descStyle = _props$attributes3.descStyle,
            descLetter = _props$attributes3.descLetter,
            descBack = _props$attributes3.descBack,
            descMarginT = _props$attributes3.descMarginT,
            descMarginB = _props$attributes3.descMarginB,
            descPadding = _props$attributes3.descPadding,
            priceChecked = _props$attributes3.priceChecked,
            priceBack = _props$attributes3.priceBack,
            priceMarginT = _props$attributes3.priceMarginT,
            priceMarginB = _props$attributes3.priceMarginB,
            pricePadding = _props$attributes3.pricePadding,
            slashPrice = _props$attributes3.slashPrice,
            slashColor = _props$attributes3.slashColor,
            slashSize = _props$attributes3.slashSize,
            slashWeight = _props$attributes3.slashWeight,
            slashV = _props$attributes3.slashV,
            currPrice = _props$attributes3.currPrice,
            currColor = _props$attributes3.currColor,
            currSize = _props$attributes3.currSize,
            currWeight = _props$attributes3.currWeight,
            currV = _props$attributes3.currV,
            valPrice = _props$attributes3.valPrice,
            valColor = _props$attributes3.valColor,
            valSize = _props$attributes3.valSize,
            valWeight = _props$attributes3.valWeight,
            valV = _props$attributes3.valV,
            divPrice = _props$attributes3.divPrice,
            divColor = _props$attributes3.divColor,
            divSize = _props$attributes3.divSize,
            divWeight = _props$attributes3.divWeight,
            divV = _props$attributes3.divV,
            durPrice = _props$attributes3.durPrice,
            durColor = _props$attributes3.durColor,
            durSize = _props$attributes3.durSize,
            durWeight = _props$attributes3.durWeight,
            durV = _props$attributes3.durV,
            btnChecked = _props$attributes3.btnChecked,
            btnText = _props$attributes3.btnText,
            btnLink = _props$attributes3.btnLink,
            btnTarget = _props$attributes3.btnTarget,
            btnColor = _props$attributes3.btnColor,
            btnHoverColor = _props$attributes3.btnHoverColor,
            btnSize = _props$attributes3.btnSize,
            btnWeight = _props$attributes3.btnWeight,
            btnLine = _props$attributes3.btnLine,
            btnLetter = _props$attributes3.btnLetter,
            btnUpper = _props$attributes3.btnUpper,
            btnStyle = _props$attributes3.btnStyle,
            btnBack = _props$attributes3.btnBack,
            btnHoverBack = _props$attributes3.btnHoverBack,
            btnMarginT = _props$attributes3.btnMarginT,
            btnMarginB = _props$attributes3.btnMarginB,
            btnPadding = _props$attributes3.btnPadding,
            btnPaddingU = _props$attributes3.btnPaddingU,
            btnWidth = _props$attributes3.btnWidth,
            btnBorderType = _props$attributes3.btnBorderType,
            btnBorderWidth = _props$attributes3.btnBorderWidth,
            btnBorderRadius = _props$attributes3.btnBorderRadius,
            btnBorderColor = _props$attributes3.btnBorderColor,
            badgeChecked = _props$attributes3.badgeChecked,
            badgePos = _props$attributes3.badgePos,
            badgeBack = _props$attributes3.badgeBack,
            badgeColor = _props$attributes3.badgeColor,
            badgeTop = _props$attributes3.badgeTop,
            badgeHorizontal = _props$attributes3.badgeHorizontal,
            badgeWidth = _props$attributes3.badgeWidth,
            badgeSize = _props$attributes3.badgeSize,
            badgeTextSize = _props$attributes3.badgeTextSize,
            badgeWeight = _props$attributes3.badgeWeight,
            badgeLetter = _props$attributes3.badgeLetter,
            badgeStyle = _props$attributes3.badgeStyle,
            badgeUpper = _props$attributes3.badgeUpper,
            badgeText = _props$attributes3.badgeText,
            listChecked = _props$attributes3.listChecked,
            listColor = _props$attributes3.listColor,
            listWeight = _props$attributes3.listWeight,
            listSize = _props$attributes3.listSize,
            listItemsStyle = _props$attributes3.listItemsStyle,
            listLine = _props$attributes3.listLine,
            listUpper = _props$attributes3.listUpper,
            listLetter = _props$attributes3.listLetter,
            listBack = _props$attributes3.listBack,
            listItems = _props$attributes3.listItems,
            listMarginB = _props$attributes3.listMarginB,
            listMarginT = _props$attributes3.listMarginT,
            listPadding = _props$attributes3.listPadding,
            listStyle = _props$attributes3.listStyle,
            id = _props$attributes3.id;

        return React.createElement(
            "div",
            {
                id: className + "-" + id,
                className: "" + className,
                style: {
                    textAlign: contentAlign,
                    background: tableBack,
                    border: borderType,
                    borderWidth: borderWidth + "px",
                    borderRadius: borderRadius + "px",
                    borderColor: borderColor,
                    padding: tablePadding + "px",
                    boxShadow: tableShadowHorizontal + "px " + tableShadowVertical + "px " + tableShadowBlur + "px " + tableShadowColor + " " + tableShadowPosition
                }
            },
            badgeChecked && React.createElement(
                "div",
                {
                    className: className + "__badge_wrap " + className + "__badge_" + badgePos
                },
                React.createElement(
                    "div",
                    {
                        className: className + "__badge",
                        style: {
                            borderRightColor: "right" === badgePos ? badgeBack : "transparent",
                            borderTopColor: "left" === badgePos ? badgeBack : "transparent",
                            borderBottomWidth: badgeSize + "px",
                            borderRightWidth: badgeSize + "px",
                            borderTopWidth: "left" === badgePos ? badgeSize + "px" : "none",
                            borderLeftWidth: "right" === badgePos ? badgeSize + "px" : "none"
                        }
                    },
                    React.createElement(
                        "span",
                        {
                            style: {
                                fontSize: badgeTextSize + "px",
                                color: badgeColor,
                                fontWeight: badgeWeight,
                                textTransform: badgeUpper ? "uppercase" : "none",
                                letterSpacing: badgeLetter + "px",
                                fontStyle: badgeStyle,
                                width: badgeWidth + "px",
                                top: badgeTop + "px",
                                left: "left" === badgePos ? badgeHorizontal + "px" : "auto",
                                right: "right" === badgePos ? badgeHorizontal + "px" : "auto"
                            }
                        },
                        badgeText
                    )
                )
            ),
            titleChecked && React.createElement(
                "div",
                {
                    className: className + "__title_wrap",
                    style: {
                        paddingTop: titleMarginT + "px",
                        paddingBottom: titleMarginB + "px"
                    }
                },
                React.createElement(RichText.Content, {
                    tagName: titleTag.toLowerCase(),
                    className: className + "__title",
                    value: title,
                    style: {
                        color: titleColor,
                        background: titleBack,
                        fontSize: titleSize + "px",
                        letterSpacing: titleLetter + "px",
                        textTransform: titleUpper ? "uppercase" : "none",
                        fontStyle: titleStyle,
                        fontWeight: titleWeight,
                        lineHeight: titleLine + "px",
                        marginBottom: titleMarginB + "px",
                        padding: titlePadding + "px",
                        textShadow: titleShadowHorizontal + "px " + titleShadowVertical + "px " + titleShadowBlur + "px " + titleShadowColor
                    }
                })
            ),
            priceChecked && React.createElement(
                "div",
                {
                    className: className + "__price_wrap",
                    style: {
                        background: priceBack,
                        marginTop: priceMarginT + "px",
                        marginBottom: priceMarginB + "px",
                        padding: pricePadding + "px",
                        justifyContent: contentAlign
                    }
                },
                slashPrice && React.createElement(
                    "strike",
                    {
                        className: className + "__slash",
                        style: {
                            color: slashColor,
                            fontSize: slashSize + "px",
                            fontWeight: slashWeight,
                            alignSelf: slashV
                        }
                    },
                    slashPrice
                ),
                currPrice && React.createElement(
                    "span",
                    {
                        className: className + "__currency",
                        style: {
                            color: currColor,
                            fontSize: currSize + "px",
                            fontWeight: currWeight,
                            alignSelf: currV
                        }
                    },
                    currPrice
                ),
                valPrice && React.createElement(
                    "span",
                    {
                        className: className + "__val",
                        style: {
                            color: valColor,
                            fontSize: valSize + "px",
                            fontWeight: valWeight,
                            alignSelf: valV
                        }
                    },
                    valPrice
                ),
                divPrice && React.createElement(
                    "span",
                    {
                        className: className + "__divider",
                        style: {
                            color: divColor,
                            fontSize: divSize + "px",
                            fontWeight: divWeight,
                            alignSelf: divV
                        }
                    },
                    divPrice
                ),
                durPrice && React.createElement(
                    "span",
                    {
                        className: className + "__dur",
                        style: {
                            color: durColor,
                            fontSize: durSize + "px",
                            fontWeight: durWeight,
                            alignSelf: durV
                        }
                    },
                    durPrice
                )
            ),
            listChecked && React.createElement(
                "div",
                {
                    className: className + "__list_wrap",
                    style: {
                        marginTop: listMarginT + "px",
                        marginBottom: listMarginB + "px"
                    }
                },
                React.createElement(
                    "ul",
                    {
                        className: className + "__list list-" + listStyle,
                        style: {
                            color: listColor,
                            fontSize: listSize + "px",
                            background: listBack,
                            padding: listPadding + "px",
                            listStyle: "check" !== listStyle ? listStyle : "none",
                            listStylePosition: "inside",
                            fontWeight: listWeight,
                            letterSpacing: listLetter + "px",
                            textTransform: listUpper ? "uppercase" : "none",
                            fontStyle: listItemsStyle,
                            lineHeight: listLine + "px"
                        }
                    },
                    listItems
                )
            ),
            descChecked && React.createElement(
                "div",
                { className: className + "__desc_wrap" },
                React.createElement(RichText.Content, {
                    tagName: "p",
                    className: className + "__desc",
                    value: desc,
                    style: {
                        color: descColor,
                        background: descBack,
                        fontSize: descSize + "px",
                        fontWeight: descWeight,
                        lineHeight: descLine + "px",
                        letterSpacing: descLetter + "px",
                        fontStyle: descStyle,
                        marginTop: descMarginT + "px",
                        marginBottom: descMarginB + "px",
                        padding: descPadding + "px"
                    }
                })
            ),
            btnChecked && React.createElement(
                "div",
                {
                    className: className + "__button",
                    style: {
                        width: btnWidth + "%"
                    }
                },
                React.createElement(
                    "a",
                    {
                        "class": className + "__button_link",
                        href: btnLink,
                        target: btnTarget ? "_blank" : "_self",
                        rel: "noopener noreferrer",
                        style: {
                            color: btnColor,
                            background: btnBack ? btnBack : "transparent",
                            fontSize: btnSize + "px",
                            fontWeight: btnWeight,
                            letterSpacing: btnLetter + "px",
                            fontStyle: btnStyle,
                            lineHeight: btnLine + "px",
                            marginTop: btnMarginT,
                            marginBottom: btnMarginB,
                            padding: btnPadding + btnPaddingU,
                            border: btnBorderType,
                            borderWidth: btnBorderWidth + "px",
                            borderRadius: btnBorderRadius + "px",
                            borderColor: btnBorderColor
                        }
                    },
                    React.createElement(RichText.Content, {
                        tagName: "span",
                        onChange: function onChange(newText) {
                            return setAttributes({ btnText: newText });
                        },
                        value: btnText,
                        style: {
                            textTransform: btnUpper ? "uppercase" : "none"
                        }
                    })
                ),
                React.createElement("style", {
                    dangerouslySetInnerHTML: {
                        __html: ["#premium-pricing-table-" + id + " .premium-pricing-table__button_link:hover {", "color: " + btnHoverColor + " !important;", "background: " + btnHoverBack + " !important", "}"].join("\n")
                    }
                })
            )
        );
    }
}, {
    attributes: attributes,
    migrate: function migrate(attributes) {
        return Object.assign(attributes, { btnPaddingU: "" });
    },
    save: function save(props) {
        var _props$attributes4 = props.attributes,
            contentAlign = _props$attributes4.contentAlign,
            tableBack = _props$attributes4.tableBack,
            borderType = _props$attributes4.borderType,
            borderWidth = _props$attributes4.borderWidth,
            borderRadius = _props$attributes4.borderRadius,
            borderColor = _props$attributes4.borderColor,
            tablePadding = _props$attributes4.tablePadding,
            titleChecked = _props$attributes4.titleChecked,
            title = _props$attributes4.title,
            titleTag = _props$attributes4.titleTag,
            titleColor = _props$attributes4.titleColor,
            titleSize = _props$attributes4.titleSize,
            titleLetter = _props$attributes4.titleLetter,
            titleUpper = _props$attributes4.titleUpper,
            titleStyle = _props$attributes4.titleStyle,
            titleLine = _props$attributes4.titleLine,
            titleWeight = _props$attributes4.titleWeight,
            titleBack = _props$attributes4.titleBack,
            titleShadowBlur = _props$attributes4.titleShadowBlur,
            titleShadowColor = _props$attributes4.titleShadowColor,
            titleShadowHorizontal = _props$attributes4.titleShadowHorizontal,
            titleShadowVertical = _props$attributes4.titleShadowVertical,
            titleMarginT = _props$attributes4.titleMarginT,
            titleMarginB = _props$attributes4.titleMarginB,
            titlePadding = _props$attributes4.titlePadding,
            descChecked = _props$attributes4.descChecked,
            desc = _props$attributes4.desc,
            descColor = _props$attributes4.descColor,
            descSize = _props$attributes4.descSize,
            descLine = _props$attributes4.descLine,
            descWeight = _props$attributes4.descWeight,
            descStyle = _props$attributes4.descStyle,
            descLetter = _props$attributes4.descLetter,
            descBack = _props$attributes4.descBack,
            descMarginT = _props$attributes4.descMarginT,
            descMarginB = _props$attributes4.descMarginB,
            descPadding = _props$attributes4.descPadding,
            priceChecked = _props$attributes4.priceChecked,
            priceBack = _props$attributes4.priceBack,
            priceMarginT = _props$attributes4.priceMarginT,
            priceMarginB = _props$attributes4.priceMarginB,
            pricePadding = _props$attributes4.pricePadding,
            slashPrice = _props$attributes4.slashPrice,
            slashColor = _props$attributes4.slashColor,
            slashSize = _props$attributes4.slashSize,
            slashWeight = _props$attributes4.slashWeight,
            slashV = _props$attributes4.slashV,
            currPrice = _props$attributes4.currPrice,
            currColor = _props$attributes4.currColor,
            currSize = _props$attributes4.currSize,
            currWeight = _props$attributes4.currWeight,
            currV = _props$attributes4.currV,
            valPrice = _props$attributes4.valPrice,
            valColor = _props$attributes4.valColor,
            valSize = _props$attributes4.valSize,
            valWeight = _props$attributes4.valWeight,
            valV = _props$attributes4.valV,
            divPrice = _props$attributes4.divPrice,
            divColor = _props$attributes4.divColor,
            divSize = _props$attributes4.divSize,
            divWeight = _props$attributes4.divWeight,
            divV = _props$attributes4.divV,
            durPrice = _props$attributes4.durPrice,
            durColor = _props$attributes4.durColor,
            durSize = _props$attributes4.durSize,
            durWeight = _props$attributes4.durWeight,
            durV = _props$attributes4.durV,
            btnChecked = _props$attributes4.btnChecked,
            btnText = _props$attributes4.btnText,
            btnLink = _props$attributes4.btnLink,
            btnTarget = _props$attributes4.btnTarget,
            btnColor = _props$attributes4.btnColor,
            btnHoverColor = _props$attributes4.btnHoverColor,
            btnSize = _props$attributes4.btnSize,
            btnWeight = _props$attributes4.btnWeight,
            btnLine = _props$attributes4.btnLine,
            btnLetter = _props$attributes4.btnLetter,
            btnUpper = _props$attributes4.btnUpper,
            btnStyle = _props$attributes4.btnStyle,
            btnBack = _props$attributes4.btnBack,
            btnHoverBack = _props$attributes4.btnHoverBack,
            btnMarginT = _props$attributes4.btnMarginT,
            btnMarginB = _props$attributes4.btnMarginB,
            btnPadding = _props$attributes4.btnPadding,
            btnWidth = _props$attributes4.btnWidth,
            btnBorderType = _props$attributes4.btnBorderType,
            btnBorderWidth = _props$attributes4.btnBorderWidth,
            btnBorderRadius = _props$attributes4.btnBorderRadius,
            btnBorderColor = _props$attributes4.btnBorderColor,
            badgeChecked = _props$attributes4.badgeChecked,
            badgePos = _props$attributes4.badgePos,
            badgeBack = _props$attributes4.badgeBack,
            badgeColor = _props$attributes4.badgeColor,
            badgeTop = _props$attributes4.badgeTop,
            badgeHorizontal = _props$attributes4.badgeHorizontal,
            badgeWidth = _props$attributes4.badgeWidth,
            badgeSize = _props$attributes4.badgeSize,
            badgeTextSize = _props$attributes4.badgeTextSize,
            badgeWeight = _props$attributes4.badgeWeight,
            badgeLetter = _props$attributes4.badgeLetter,
            badgeStyle = _props$attributes4.badgeStyle,
            badgeUpper = _props$attributes4.badgeUpper,
            badgeText = _props$attributes4.badgeText,
            listChecked = _props$attributes4.listChecked,
            listColor = _props$attributes4.listColor,
            listWeight = _props$attributes4.listWeight,
            listSize = _props$attributes4.listSize,
            listItemsStyle = _props$attributes4.listItemsStyle,
            listLine = _props$attributes4.listLine,
            listUpper = _props$attributes4.listUpper,
            listLetter = _props$attributes4.listLetter,
            listBack = _props$attributes4.listBack,
            listItems = _props$attributes4.listItems,
            listMarginB = _props$attributes4.listMarginB,
            listMarginT = _props$attributes4.listMarginT,
            listPadding = _props$attributes4.listPadding,
            listStyle = _props$attributes4.listStyle,
            id = _props$attributes4.id;

        return React.createElement(
            "div",
            {
                id: className + "-" + id,
                className: "" + className,
                style: {
                    textAlign: contentAlign,
                    background: tableBack,
                    border: borderType,
                    borderWidth: borderWidth + "px",
                    borderRadius: borderRadius + "px",
                    borderColor: borderColor,
                    padding: tablePadding + "px"
                }
            },
            badgeChecked && React.createElement(
                "div",
                {
                    className: className + "__badge_wrap " + className + "__badge_" + badgePos
                },
                React.createElement(
                    "div",
                    {
                        className: className + "__badge",
                        style: {
                            borderRightColor: "right" === badgePos ? badgeBack : "transparent",
                            borderTopColor: "left" === badgePos ? badgeBack : "transparent",
                            borderBottomWidth: badgeSize + "px",
                            borderRightWidth: badgeSize + "px",
                            borderTopWidth: "left" === badgePos ? badgeSize + "px" : "none",
                            borderLeftWidth: "right" === badgePos ? badgeSize + "px" : "none"
                        }
                    },
                    React.createElement(
                        "span",
                        {
                            style: {
                                fontSize: badgeTextSize + "px",
                                color: badgeColor,
                                fontWeight: badgeWeight,
                                textTransform: badgeUpper ? "uppercase" : "none",
                                letterSpacing: badgeLetter + "px",
                                fontStyle: badgeStyle,
                                width: badgeWidth + "px",
                                top: badgeTop + "px",
                                left: "left" === badgePos ? badgeHorizontal + "px" : "auto",
                                right: "right" === badgePos ? badgeHorizontal + "px" : "auto"
                            }
                        },
                        badgeText
                    )
                )
            ),
            titleChecked && React.createElement(
                "div",
                {
                    className: className + "__title_wrap",
                    style: {
                        paddingTop: titleMarginT + "px",
                        paddingBottom: titleMarginB + "px"
                    }
                },
                React.createElement(RichText.Content, {
                    tagName: titleTag.toLowerCase(),
                    className: className + "__title",
                    value: title,
                    style: {
                        color: titleColor,
                        background: titleBack,
                        fontSize: titleSize + "px",
                        letterSpacing: titleLetter + "px",
                        textTransform: titleUpper ? "uppercase" : "none",
                        fontStyle: titleStyle,
                        fontWeight: titleWeight,
                        lineHeight: titleLine + "px",
                        marginBottom: titleMarginB + "px",
                        padding: titlePadding + "px",
                        textShadow: titleShadowHorizontal + "px " + titleShadowVertical + "px " + titleShadowBlur + "px " + titleShadowColor
                    }
                })
            ),
            priceChecked && React.createElement(
                "div",
                {
                    className: className + "__price_wrap",
                    style: {
                        background: priceBack,
                        marginTop: priceMarginT + "px",
                        marginBottom: priceMarginB + "px",
                        padding: pricePadding + "px",
                        justifyContent: contentAlign
                    }
                },
                slashPrice && React.createElement(
                    "strike",
                    {
                        className: className + "__slash",
                        style: {
                            color: slashColor,
                            fontSize: slashSize + "px",
                            fontWeight: slashWeight,
                            alignSelf: slashV
                        }
                    },
                    slashPrice
                ),
                currPrice && React.createElement(
                    "span",
                    {
                        className: className + "__currency",
                        style: {
                            color: currColor,
                            fontSize: currSize + "px",
                            fontWeight: currWeight,
                            alignSelf: currV
                        }
                    },
                    currPrice
                ),
                valPrice && React.createElement(
                    "span",
                    {
                        className: className + "__val",
                        style: {
                            color: valColor,
                            fontSize: valSize + "px",
                            fontWeight: valWeight,
                            alignSelf: valV
                        }
                    },
                    valPrice
                ),
                divPrice && React.createElement(
                    "span",
                    {
                        className: className + "__divider",
                        style: {
                            color: divColor,
                            fontSize: divSize + "px",
                            fontWeight: divWeight,
                            alignSelf: divV
                        }
                    },
                    divPrice
                ),
                durPrice && React.createElement(
                    "span",
                    {
                        className: className + "__dur",
                        style: {
                            color: durColor,
                            fontSize: durSize + "px",
                            fontWeight: durWeight,
                            alignSelf: durV
                        }
                    },
                    durPrice
                )
            ),
            listChecked && React.createElement(
                "div",
                {
                    className: className + "__list_wrap",
                    style: {
                        marginTop: listMarginT + "px",
                        marginBottom: listMarginB + "px"
                    }
                },
                React.createElement(
                    "ul",
                    {
                        className: className + "__list list-" + listStyle,
                        style: {
                            color: listColor,
                            fontSize: listSize + "px",
                            background: listBack,
                            padding: listPadding + "px",
                            listStyle: "check" !== listStyle ? listStyle : "none",
                            listStylePosition: "inside",
                            fontWeight: listWeight,
                            letterSpacing: listLetter + "px",
                            textTransform: listUpper ? "uppercase" : "none",
                            fontStyle: listItemsStyle,
                            lineHeight: listLine + "px"
                        }
                    },
                    listItems
                )
            ),
            descChecked && React.createElement(
                "div",
                { className: className + "__desc_wrap" },
                React.createElement(RichText.Content, {
                    tagName: "p",
                    className: className + "__desc",
                    value: desc,
                    style: {
                        color: descColor,
                        background: descBack,
                        fontSize: descSize + "px",
                        fontWeight: descWeight,
                        lineHeight: descLine + "px",
                        letterSpacing: descLetter + "px",
                        fontStyle: descStyle,
                        marginTop: descMarginT + "px",
                        marginBottom: descMarginB + "px",
                        padding: descPadding + "px"
                    }
                })
            ),
            btnChecked && React.createElement(
                "div",
                {
                    className: className + "__button",
                    style: {
                        width: btnWidth + "%"
                    }
                },
                React.createElement(
                    "a",
                    {
                        "class": className + "__button_link",
                        href: btnLink,
                        target: btnTarget ? "_blank" : "_self",
                        style: {
                            color: btnColor,
                            background: btnBack ? btnBack : "transparent",
                            fontSize: btnSize + "px",
                            fontWeight: btnWeight,
                            letterSpacing: btnLetter + "px",
                            fontStyle: btnStyle,
                            lineHeight: btnLine + "px",
                            marginTop: btnMarginT,
                            marginBottom: btnMarginB,
                            padding: btnPadding,
                            border: btnBorderType,
                            borderWidth: btnBorderWidth + "px",
                            borderRadius: btnBorderRadius + "px",
                            borderColor: btnBorderColor
                        }
                    },
                    React.createElement(RichText.Content, {
                        tagName: "span",
                        onChange: function onChange(newText) {
                            return setAttributes({ btnText: newText });
                        },
                        value: btnText,
                        style: {
                            textTransform: btnUpper ? "uppercase" : "none"
                        }
                    })
                ),
                React.createElement("style", {
                    dangerouslySetInnerHTML: {
                        __html: ["#premium-pricing-table-" + id + " .premium-pricing-table__button_link:hover {", "color: " + btnHoverColor + " !important;", "background: " + btnHoverBack + " !important", "}"].join("\n")
                    }
                })
            )
        );
    }
}];

exports.default = deprecatedContent;

/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
var __ = wp.i18n.__;

var attributes = {
    borderUpdated: {
        type: "boolean",
        default: false
    },
    btnBorderUpdated: {
        type: "boolean",
        default: false
    },
    contentAlign: {
        type: "string",
        default: "center"
    },
    borderColor: {
        type: "string"
    },
    title: {
        type: "array",
        source: "children",
        selector: ".premium-pricing-table__title",
        default: "Pricing Table"
    },
    desc: {
        type: "array",
        source: "children",
        selector: ".premium-pricing-table__desc"
    },

    titleChecked: {
        type: "boolean",
        default: true
    },
    descChecked: {
        type: "boolean",
        default: false
    },
    priceChecked: {
        type: "boolean",
        default: true
    },

    btnChecked: {
        type: "boolean",
        default: true
    },
    btnText: {
        type: "string",
        default: "Get Started"
    },
    btnLink: {
        type: "string",
        source: "attribute",
        attribute: "href",
        selector: ".premium-pricing-table__button_link"
    },
    badgeChecked: {
        type: "boolean"
    },

    listChecked: {
        type: "boolean",
        default: true
    },
    listItems: {
        type: "array",
        source: "children",
        selector: ".premium-pricing-table__list"
    },
    block_id: {
        type: "string"
    },
    classMigrate: {
        type: 'boolean',
        default: false
    },
    hideDesktop: {
        type: "boolean",
        default: false
    },
    hideTablet: {
        type: "boolean",
        default: false
    },
    hideMobile: {
        type: 'boolean',
        default: false
    },
    titleStyles: {
        type: "array",
        default: [{
            titleTag: 'H2',
            titleSizeUnit: 'px',
            titleSize: '',
            titleSizeMobile: '',
            titleSizeTablet: '',
            titleLine: '',
            titleLetter: '',
            titleStyle: '',
            titleUpper: false,
            titleWeight: 500,
            titleColor: "#6ec1e4",
            titleBack: '',
            titleShadowColor: '',
            titleShadowBlur: '0',
            titleShadowHorizontal: '0',
            titleShadowVertical: '0',
            titleMarginB: 20,
            titleMarginT: 20,
            titlePadding: 0
        }]
    },
    priceStyles: {
        type: "array",
        default: [{
            priceBack: '',
            priceOpacity: 1,
            priceMarginT: '',
            priceMarginB: 10,
            pricePadding: '',
            slashPrice: '',
            slashColor: '',
            slashSizeUnit: 'px',
            slashSize: 20,
            slashSizeMobile: '',
            slashSizeTablet: '',
            slashWeight: '',
            currPrice: '$',
            currColor: '',
            currSize: 20,
            currSizeUnit: 'px',
            currSizeMobile: '',
            currSizeTablet: '',
            currWeight: '',
            valPrice: '25',
            valColor: '',
            valSizeUnit: 'px',
            valSize: 50,
            valSizeMobile: '',
            valSizeTablet: '',
            valWeight: '',
            divPrice: "/",
            divColor: '',
            divSize: 20,
            divSizeUnit: 'px',
            divSizeMobile: '',
            divSizeTablet: '',
            divWeight: '',
            durPrice: 'm',
            durColor: '',
            durSizeUnit: 'px',
            durSize: 20,
            durSizeMobile: '',
            durSizeTablet: '',
            durWeight: '',
            selectedStyle: "price",
            slashV: 'center',
            currV: 'center',
            valV: "center",
            divV: 'center',
            durV: 'center'
        }]
    },
    featureStyles: {
        type: "array",
        default: [{
            featsAlign: '',
            listStyle: "disc",
            listColor: '',
            listSize: '',
            listSizeUnit: 'px',
            listSizeTablet: '',
            listSizeMobile: '',
            listWeight: 500,
            listItemsStyle: '',
            listLetter: '',
            listLine: '',
            listUpper: false,
            listBack: '',
            listMarginB: 20,
            listMarginT: '',
            listPadding: ''
        }]
    },
    descStyles: {
        type: "array",
        default: [{
            descSize: '',
            descSizeUnit: 'px',
            descSizeTablet: '',
            descSizeMobile: '',
            descWeight: '',
            descLetter: '',
            descStyle: '',
            descLine: '',
            descColor: "#000",
            descBack: '',
            descMarginT: 0,
            descMarginB: 30,
            descPadding: '0'
        }]
    },
    buttonStyles: {
        type: "array",
        default: [{
            btnColor: "#fff",
            btnHoverColor: '',
            btnWidth: '',
            btnSize: '',
            btnSizeUnit: 'px',
            btnSizeTablet: '',
            btnSizeMobile: '',
            btnWeight: 900,
            btnLine: '',
            btnLetter: '',
            btnStyle: '',
            btnUpper: false,
            btnBack: "#6ec1e4",
            btnHoverBack: '',
            btnMarginT: 0,
            btnMarginB: 0,
            btnPadding: 10,
            btnPaddingU: 'px',
            btnBorderType: 'none',
            btnBorderWidth: 1,
            btnBorderRadius: 0,
            btnBorderColor: '',
            btnTarget: true
        }]
    },
    badgeStyles: {
        type: "array",
        default: [{
            badgePos: "right",
            badgeBack: "#6ec1e4",
            badgeColor: '',
            badgeSize: '',
            badgeTextSize: '',
            badgeTextUnit: 'px',
            badgeSizeTablet: '',
            badgeSizeMobile: '',
            badgeTop: '',
            badgeHorizontal: '',
            badgeWidth: '',
            badgeWeight: 900,
            badgeLetter: '',
            badgeStyle: '',
            badgeUpper: false,
            badgeText: __("Popular")
        }]
    },
    tableStyles: {
        type: "array",
        default: [{
            tableBack: '',
            tableOpacity: 1,
            borderType: 'none',
            borderWidth: 1,
            borderRadius: 0,
            tableShadowColor: '',
            tableShadowBlur: '0',
            tableShadowHorizontal: '0',
            tableShadowVertical: '0',
            tableShadowPosition: '',
            tablePadding: "0"
        }]
    },
    btnBorderTop: {
        type: 'number'
    },
    btnBorderRight: {
        type: 'number'
    },
    btnBorderBottom: {
        type: 'number'
    },
    btnBorderLeft: {
        type: 'number'
    },
    borderTop: {
        type: 'number'
    },
    borderRight: {
        type: 'number'
    },
    borderBottom: {
        type: 'number'
    },
    borderLeft: {
        type: 'number'
    }
};
exports.default = attributes;

/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _settings = __webpack_require__(1);

var _edit = __webpack_require__(275);

var _edit2 = _interopRequireDefault(_edit);

var _save = __webpack_require__(277);

var _save2 = _interopRequireDefault(_save);

var _deprecated = __webpack_require__(278);

var _deprecated2 = _interopRequireDefault(_deprecated);

var _icons = __webpack_require__(4);

var _icons2 = _interopRequireDefault(_icons);

var _attributes = __webpack_require__(279);

var _attributes2 = _interopRequireDefault(_attributes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var __ = wp.i18n.__;
var registerBlockType = wp.blocks.registerBlockType;


registerBlockType("premium/container", {
    title: __("Section"),
    icon: React.createElement(_icons2.default, { icon: "section" }),
    category: "premium-blocks",
    attributes: _attributes2.default,
    supports: _defineProperty({
        inserter: _settings.container,
        align: true
    }, "align", ["center", "wide", "full"]),
    example: {
        attributes: {
            minHeight: 200
        }
    },
    edit: _edit2.default,
    save: _save2.default,
    deprecated: _deprecated2.default
});

/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _classnames = __webpack_require__(0);

var _classnames2 = _interopRequireDefault(_classnames);

var _premiumBorder = __webpack_require__(6);

var _premiumBorder2 = _interopRequireDefault(_premiumBorder);

var _PremiumShadow = __webpack_require__(5);

var _PremiumShadow2 = _interopRequireDefault(_PremiumShadow);

var _premiumResponsiveTabs = __webpack_require__(8);

var _premiumResponsiveTabs2 = _interopRequireDefault(_premiumResponsiveTabs);

var _singleRangeControl = __webpack_require__(3);

var _singleRangeControl2 = _interopRequireDefault(_singleRangeControl);

var _PremiumBackgroundControl = __webpack_require__(23);

var _PremiumBackgroundControl2 = _interopRequireDefault(_PremiumBackgroundControl);

var _PremiumResponsivePadding = __webpack_require__(16);

var _PremiumResponsivePadding2 = _interopRequireDefault(_PremiumResponsivePadding);

var _PremiumResponsiveMargin = __webpack_require__(52);

var _PremiumResponsiveMargin2 = _interopRequireDefault(_PremiumResponsiveMargin);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __ = wp.i18n.__;
var _wp$components = wp.components,
    PanelBody = _wp$components.PanelBody,
    ToggleControl = _wp$components.ToggleControl,
    SelectControl = _wp$components.SelectControl,
    Button = _wp$components.Button,
    ButtonGroup = _wp$components.ButtonGroup;
var Fragment = wp.element.Fragment;
var withSelect = wp.data.withSelect;
var _wp$blockEditor = wp.blockEditor,
    BlockControls = _wp$blockEditor.BlockControls,
    AlignmentToolbar = _wp$blockEditor.AlignmentToolbar,
    InnerBlocks = _wp$blockEditor.InnerBlocks,
    InspectorControls = _wp$blockEditor.InspectorControls;


var CONTENT = [["core/paragraph", { content: __("Insert your text or select a block ", 'premium-blocks-for-gutenberg') }]];
function getPreviewSize(device, desktopSize, tabletSize, mobileSize) {
    if (device === 'Mobile') {
        if (undefined !== mobileSize && '' !== mobileSize) {
            return mobileSize;
        } else if (undefined !== tabletSize && '' !== tabletSize) {
            return tabletSize;
        }
    } else if (device === 'Tablet') {
        if (undefined !== tabletSize && '' !== tabletSize) {
            return tabletSize;
        }
    }
    return desktopSize;
}
var edit = function edit(props) {
    var isSelected = props.isSelected,
        className = props.className,
        setAttributes = props.setAttributes;
    var _props$attributes = props.attributes,
        stretchSection = _props$attributes.stretchSection,
        innerWidthType = _props$attributes.innerWidthType,
        isUpdated = _props$attributes.isUpdated,
        horAlign = _props$attributes.horAlign,
        height = _props$attributes.height,
        innerWidth = _props$attributes.innerWidth,
        minHeight = _props$attributes.minHeight,
        minHeightUnit = _props$attributes.minHeightUnit,
        vPos = _props$attributes.vPos,
        block_id = _props$attributes.block_id,
        hideDesktop = _props$attributes.hideDesktop,
        hideTablet = _props$attributes.hideTablet,
        hideMobile = _props$attributes.hideMobile,
        containerStyles = _props$attributes.containerStyles,
        borderTop = _props$attributes.borderTop,
        borderRight = _props$attributes.borderRight,
        borderBottom = _props$attributes.borderBottom,
        borderLeft = _props$attributes.borderLeft,
        marginTop = _props$attributes.marginTop,
        marginBottom = _props$attributes.marginBottom,
        marginLeft = _props$attributes.marginLeft,
        marginRight = _props$attributes.marginRight,
        paddingTop = _props$attributes.paddingTop,
        paddingRight = _props$attributes.paddingRight,
        paddingBottom = _props$attributes.paddingBottom,
        paddingLeft = _props$attributes.paddingLeft,
        backgroundType = _props$attributes.backgroundType,
        marginTTablet = _props$attributes.marginTTablet,
        marginRTablet = _props$attributes.marginRTablet,
        marginBTablet = _props$attributes.marginBTablet,
        marginLTablet = _props$attributes.marginLTablet,
        marginTMobile = _props$attributes.marginTMobile,
        marginRMobile = _props$attributes.marginRMobile,
        marginBMobile = _props$attributes.marginBMobile,
        marginLMobile = _props$attributes.marginLMobile,
        paddingTTablet = _props$attributes.paddingTTablet,
        paddingRTablet = _props$attributes.paddingRTablet,
        paddingBTablet = _props$attributes.paddingBTablet,
        paddingLTablet = _props$attributes.paddingLTablet,
        paddingTMobile = _props$attributes.paddingTMobile,
        paddingRMobile = _props$attributes.paddingRMobile,
        paddingLMobile = _props$attributes.paddingLMobile,
        paddingBMobile = _props$attributes.paddingBMobile;


    var WIDTH = [{
        value: "boxed",
        label: __("Boxed", 'premium-blocks-for-gutenberg')
    }, {
        value: "full",
        label: __("Full Width", 'premium-blocks-for-gutenberg')
    }];
    var HEIGHT = [{
        value: "fit",
        label: __("Fit to Screen", 'premium-blocks-for-gutenberg')
    }, {
        value: "min",
        label: __("Min Height", 'premium-blocks-for-gutenberg')
    }];
    var VPOSITION = [{
        value: "top",
        label: __("Top", 'premium-blocks-for-gutenberg')
    }, {
        value: "middle",
        label: __("Middle", 'premium-blocks-for-gutenberg')
    }, {
        value: "bottom",
        label: __("Bottom", 'premium-blocks-for-gutenberg')
    }];

    var mainClasses = (0, _classnames2.default)(className, "premium-container");

    var saveContainerStyle = function saveContainerStyle(value) {
        var newUpdate = containerStyles.map(function (item, index) {
            if (0 === index) {
                item = _extends({}, item, value);
            }
            return item;
        });
        setAttributes({
            containerStyles: newUpdate
        });
    };
    var btnGrad = void 0,
        btnGrad2 = void 0,
        btnbg = void 0;
    if (undefined !== backgroundType && 'gradient' === backgroundType) {
        btnGrad = 'transparent' === containerStyles[0].containerBack || undefined === containerStyles[0].containerBack ? 'rgba(255,255,255,0)' : containerStyles[0].containerBack;
        btnGrad2 = undefined !== containerStyles[0].gradientColorTwo && undefined !== containerStyles[0].gradientColorTwo && '' !== containerStyles[0].gradientColorTwo ? containerStyles[0].gradientColorTwo : '#777';
        if ('radial' === containerStyles[0].gradientType) {
            btnbg = "radial-gradient(at " + containerStyles[0].gradientPosition + ", " + btnGrad + " " + containerStyles[0].gradientLocationOne + "%, " + btnGrad2 + " " + containerStyles[0].gradientLocationTwo + "%)";
        } else if ('radial' !== containerStyles[0].gradientType) {
            btnbg = "linear-gradient(" + containerStyles[0].gradientAngle + "deg, " + btnGrad + " " + containerStyles[0].gradientLocationOne + "%, " + btnGrad2 + " " + containerStyles[0].gradientLocationTwo + "%)";
        }
    } else {
        btnbg = containerStyles[0].backgroundImageURL ? "url('" + containerStyles[0].backgroundImageURL + "')" : '';
    }

    var containerPaddingTop = getPreviewSize(props.deviceType, paddingTop, paddingTTablet, paddingTMobile);
    var containerPaddingRight = getPreviewSize(props.deviceType, paddingRight, paddingRTablet, paddingRMobile);
    var containerPaddingBottom = getPreviewSize(props.deviceType, paddingBottom, paddingBTablet, paddingBMobile);
    var containerPaddingLeft = getPreviewSize(props.deviceType, paddingLeft, paddingLTablet, paddingLMobile);
    var containerMarginTop = getPreviewSize(props.deviceType, marginTop, marginTTablet, marginTMobile);
    var containerMarginRight = getPreviewSize(props.deviceType, marginRight, marginRTablet, marginRMobile);
    var containerMarginBottom = getPreviewSize(props.deviceType, marginBottom, marginBTablet, marginBMobile);
    var containerMarginLeft = getPreviewSize(props.deviceType, marginLeft, marginLTablet, marginLMobile);

    return [isSelected && React.createElement(
        BlockControls,
        { key: "controls" },
        React.createElement(AlignmentToolbar, {
            value: horAlign,
            onChange: function onChange(newAlign) {
                return setAttributes({ horAlign: newAlign });
            }
        })
    ), isSelected && React.createElement(
        InspectorControls,
        { key: "inspector" },
        React.createElement(
            PanelBody,
            {
                title: __("General Settings", 'premium-blocks-for-gutenberg'),
                className: "premium-panel-body premium-stretch-section",
                initialOpen: true
            },
            React.createElement(ToggleControl, {
                label: __("Stretch Section", 'premium-blocks-for-gutenberg'),
                checked: stretchSection,
                onChange: function onChange(check) {
                    return setAttributes({ stretchSection: check });
                },
                help: __("This option stretches the section to the full width of the page using JS. You will need to reload the page after you enable this option for the first time.", 'premium-blocks-for-gutenberg')
            }),
            stretchSection && React.createElement(SelectControl, {
                label: __("Content Width", 'premium-blocks-for-gutenberg'),
                options: WIDTH,
                value: innerWidthType,
                onChange: function onChange(newValue) {
                    return setAttributes({ innerWidthType: newValue });
                }
            }),
            "boxed" === innerWidthType && stretchSection && React.createElement(_singleRangeControl2.default, {
                label: __("Max Width", 'premium-blocks-for-gutenberg'),
                value: innerWidth,
                min: "1",
                max: "1600",
                onChange: function onChange(newValue) {
                    return setAttributes({ innerWidth: newValue });
                },
                defaultValue: 0,
                showUnit: false
            }),
            React.createElement(SelectControl, {
                label: __("Height", 'premium-blocks-for-gutenberg'),
                options: HEIGHT,
                value: height,
                onChange: function onChange(newValue) {
                    return setAttributes({ height: newValue });
                }
            }),
            "min" === height && React.createElement(
                Fragment,
                null,
                React.createElement(_singleRangeControl2.default, {
                    label: __("Min Height", 'premium-blocks-for-gutenberg'),
                    value: minHeight,
                    min: "1",
                    max: "800",
                    onChange: function onChange(newValue) {
                        return setAttributes({ minHeight: newValue });
                    },
                    units: ["px", "vh", "vw"],
                    defaultValue: 0,
                    onChangeUnit: function onChangeUnit(newValue) {
                        return setAttributes({ minHeightUnit: newValue });
                    },
                    showUnit: true,
                    unit: minHeightUnit
                })
            ),
            React.createElement(SelectControl, {
                label: __("Content Position", 'premium-blocks-for-gutenberg'),
                help: __("If you have two or more inner columns then this option will work only on the preview page", 'premium-blocks-for-gutenberg'),
                options: VPOSITION,
                value: vPos,
                onChange: function onChange(newValue) {
                    return setAttributes({ vPos: newValue });
                }
            })
        ),
        React.createElement(
            PanelBody,
            {
                title: __("Background", 'premium-blocks-for-gutenberg'),
                className: "premium-panel-body",
                initialOpen: false
            },
            React.createElement(_PremiumBackgroundControl2.default, {
                setAttributes: setAttributes,
                saveContainerStyle: saveContainerStyle,
                backgroundType: backgroundType,
                backgroundColor: containerStyles[0].containerBack,
                backgroundImageID: containerStyles[0].backgroundImageID,
                backgroundImageURL: containerStyles[0].backgroundImageURL,
                backgroundPosition: containerStyles[0].backgroundPosition,
                backgroundRepeat: containerStyles[0].backgroundRepeat,
                backgroundSize: containerStyles[0].backgroundSize,
                fixed: containerStyles[0].fixed,
                gradientLocationOne: containerStyles[0].gradientLocationOne,
                gradientColorTwo: containerStyles[0].gradientColorTwo,
                gradientLocationTwo: containerStyles[0].gradientLocationTwo,
                gradientAngle: containerStyles[0].gradientAngle,
                gradientPosition: containerStyles[0].gradientPosition,
                gradientType: containerStyles[0].gradientType
            })
        ),
        React.createElement(
            PanelBody,
            {
                title: __("Border", 'premium-blocks-for-gutenberg'),
                className: "premium-panel-body",
                initialOpen: false
            },
            React.createElement(_premiumBorder2.default, {
                borderType: containerStyles[0].borderType,
                borderWidth: containerStyles[0].borderWidth,
                top: borderTop,
                right: borderRight,
                bottom: borderBottom,
                left: borderLeft,
                borderColor: containerStyles[0].borderColor,
                borderRadius: containerStyles[0].borderRadius,
                onChangeType: function onChangeType(newType) {
                    return saveContainerStyle({ borderType: newType });
                },
                onChangeWidth: function onChangeWidth(_ref) {
                    var top = _ref.top,
                        right = _ref.right,
                        bottom = _ref.bottom,
                        left = _ref.left;
                    return setAttributes({
                        borderTop: top,
                        borderRight: right,
                        borderBottom: bottom,
                        borderLeft: left,
                        isUpdated: true
                    });
                },
                onChangeColor: function onChangeColor(colorValue) {
                    return saveContainerStyle({ borderColor: colorValue });
                },
                onChangeRadius: function onChangeRadius(newrRadius) {
                    return saveContainerStyle({ borderRadius: newrRadius });
                }
            }),
            React.createElement(_PremiumShadow2.default, {
                boxShadow: true,
                color: containerStyles[0].shadowColor,
                blur: containerStyles[0].shadowBlur,
                horizontal: containerStyles[0].shadowHorizontal,
                vertical: containerStyles[0].shadowVertical,
                position: containerStyles[0].shadowPosition,
                onChangeColor: function onChangeColor(newColor) {
                    return saveContainerStyle({
                        shadowColor: newColor === undefined ? "transparent" : newColor
                    });
                },
                onChangeBlur: function onChangeBlur(newBlur) {
                    return saveContainerStyle({ shadowBlur: newBlur === undefined ? 0 : newBlur });
                },
                onChangehHorizontal: function onChangehHorizontal(newValue) {
                    return saveContainerStyle({ shadowHorizontal: newValue === undefined ? 0 : newValue });
                },
                onChangeVertical: function onChangeVertical(newValue) {
                    return saveContainerStyle({ shadowVertical: newValue === undefined ? 0 : newValue });
                },
                onChangePosition: function onChangePosition(newValue) {
                    return saveContainerStyle({ shadowPosition: newValue === undefined ? 0 : newValue });
                }
            })
        ),
        React.createElement(
            PanelBody,
            {
                title: __("Spacings", 'premium-blocks-for-gutenberg'),
                className: "premium-panel-body",
                initialOpen: false
            },
            React.createElement(_PremiumResponsiveMargin2.default, {
                directions: ["all"],
                marginTop: marginTop,
                marginRight: marginRight,
                marginBottom: marginBottom,
                marginLeft: marginLeft,
                marginTopTablet: marginTTablet,
                marginRightTablet: marginRTablet,
                marginBottomTablet: marginBTablet,
                marginLeftTablet: marginLTablet,
                marginTopMobile: marginTMobile,
                marginRightMobile: marginRMobile,
                marginBottomMobile: marginBMobile,
                marginLeftMobile: marginLMobile,
                onChangeMarginTop: function onChangeMarginTop(device, newValue) {
                    if (device === "desktop") {
                        setAttributes({ marginTop: newValue });
                    } else if (device === "tablet") {
                        setAttributes({ marginTTablet: newValue });
                    } else {
                        setAttributes({ marginTMobile: newValue });
                    }
                },
                onChangeMarginRight: function onChangeMarginRight(device, newValue) {
                    if (device === "desktop") {
                        setAttributes({ marginRight: newValue });
                    } else if (device === "tablet") {
                        setAttributes({ marginRTablet: newValue });
                    } else {
                        setAttributes({ marginRMobile: newValue });
                    }
                },
                onChangeMarginBottom: function onChangeMarginBottom(device, newValue) {
                    if (device === "desktop") {
                        setAttributes({ marginBottom: newValue });
                    } else if (device === "tablet") {
                        setAttributes({ marginBTablet: newValue });
                    } else {
                        setAttributes({ marginBMobile: newValue });
                    }
                },
                onChangeMarginLeft: function onChangeMarginLeft(device, newValue) {
                    if (device === "desktop") {
                        setAttributes({ marginLeft: newValue });
                    } else if (device === "tablet") {
                        setAttributes({ marginLTablet: newValue });
                    } else {
                        setAttributes({ marginLMobile: newValue });
                    }
                },
                showUnits: true,
                onChangeMarSizeUnit: function onChangeMarSizeUnit(newvalue) {
                    return saveContainerStyle({ marginUnit: newvalue });
                },
                selectedUnit: containerStyles[0].marginUnit
            }),
            React.createElement(_PremiumResponsivePadding2.default, {
                paddingTop: paddingTop,
                paddingRight: paddingRight,
                paddingBottom: paddingBottom,
                paddingLeft: paddingLeft,
                paddingTopTablet: paddingTTablet,
                paddingRightTablet: paddingRTablet,
                paddingBottomTablet: paddingBTablet,
                paddingLeftTablet: paddingLTablet,
                paddingTopMobile: paddingTMobile,
                paddingRightMobile: paddingRMobile,
                paddingBottomMobile: paddingBMobile,
                paddingLeftMobile: paddingLMobile,
                showUnits: true,
                selectedUnit: containerStyles[0].paddingUnit,
                onChangePadSizeUnit: function onChangePadSizeUnit(newvalue) {
                    return saveContainerStyle({ paddingUnit: newvalue });
                },
                onChangePaddingTop: function onChangePaddingTop(device, newValue) {
                    if (device === "desktop") {
                        setAttributes({ paddingTop: newValue });
                    } else if (device === "tablet") {
                        setAttributes({ paddingTTablet: newValue });
                    } else {
                        setAttributes({ paddingTMobile: newValue });
                    }
                },
                onChangePaddingRight: function onChangePaddingRight(device, newValue) {
                    if (device === "desktop") {
                        setAttributes({ paddingRight: newValue });
                    } else if (device === "tablet") {
                        setAttributes({ paddingRTablet: newValue });
                    } else {
                        setAttributes({ paddingRMobile: newValue });
                    }
                },
                onChangePaddingBottom: function onChangePaddingBottom(device, newValue) {
                    if (device === "desktop") {
                        setAttributes({ paddingBottom: newValue });
                    } else if (device === "tablet") {
                        setAttributes({ paddingBTablet: newValue });
                    } else {
                        setAttributes({ paddingBMobile: newValue });
                    }
                },
                onChangePaddingLeft: function onChangePaddingLeft(device, newValue) {
                    if (device === "desktop") {
                        setAttributes({ paddingLeft: newValue });
                    } else if (device === "tablet") {
                        setAttributes({ paddingLTablet: newValue });
                    } else {
                        setAttributes({ paddingLMobile: newValue });
                    }
                }
            })
        ),
        React.createElement(_premiumResponsiveTabs2.default, {
            Desktop: hideDesktop,
            Tablet: hideTablet,
            Mobile: hideMobile,
            onChangeDesktop: function onChangeDesktop(value) {
                return setAttributes({ hideDesktop: value ? " premium-desktop-hidden" : "" });
            },
            onChangeTablet: function onChangeTablet(value) {
                return setAttributes({ hideTablet: value ? " premium-tablet-hidden" : "" });
            },
            onChangeMobile: function onChangeMobile(value) {
                return setAttributes({ hideMobile: value ? " premium-mobile-hidden" : "" });
            }
        })
    ), React.createElement(
        "div",
        {
            className: mainClasses + " premium-container__stretch_" + stretchSection + " premium-container__" + innerWidthType + " " + hideDesktop + " " + hideTablet + " " + hideMobile,
            style: {
                textAlign: horAlign,
                minHeight: "fit" === height ? "100vh" : minHeight + minHeightUnit,
                backgroundColor: backgroundType === "solid" ? containerStyles[0].containerBack : "transparent",
                borderStyle: containerStyles[0].borderType,
                borderWidth: isUpdated ? borderTop + "px " + borderRight + "px " + borderBottom + "px " + borderLeft + "px" : containerStyles[0].borderWidth + "px",
                borderRadius: containerStyles[0].borderRadius + "px",
                borderColor: containerStyles[0].borderColor,
                backgroundImage: btnbg,
                backgroundRepeat: containerStyles[0].backgroundRepeat,
                backgroundPosition: containerStyles[0].backgroundPosition,
                backgroundSize: containerStyles[0].backgroundSize,
                backgroundAttachment: containerStyles[0].fixed ? "fixed" : "unset",
                marginTop: containerMarginTop + containerStyles[0].marginUnit,
                marginBottom: containerMarginBottom + containerStyles[0].marginUnit,
                marginLeft: containerMarginLeft + containerStyles[0].marginUnit,
                marginRight: containerMarginRight + containerStyles[0].marginUnit,
                paddingTop: containerPaddingTop + containerStyles[0].paddingUnit,
                paddingBottom: containerPaddingBottom + containerStyles[0].paddingUnit,
                paddingLeft: containerPaddingLeft + containerStyles[0].paddingUnit,
                paddingRight: containerPaddingRight + containerStyles[0].paddingUnit,
                boxShadow: containerStyles[0].shadowHorizontal + "px " + containerStyles[0].shadowVertical + "px " + containerStyles[0].shadowBlur + "px " + containerStyles[0].shadowColor + " " + containerStyles[0].shadowPosition
            }
        },
        React.createElement(
            "div",
            {
                className: "premium-container__content_wrap premium-container__" + vPos,
                style: {
                    maxWidth: "boxed" == innerWidthType && stretchSection ? innerWidth ? innerWidth + "px" : "1140px" : "100%",
                    minHeight: "fit" === height ? "100vh" : minHeight + minHeightUnit
                }
            },
            React.createElement(
                "div",
                { className: "premium-container__content_inner" },
                React.createElement(InnerBlocks, { template: CONTENT })
            )
        )
    )];
};

exports.default = withSelect(function (select, props) {
    var _select = select('core/edit-post'),
        _select$__experimenta = _select.__experimentalGetPreviewDeviceType,
        __experimentalGetPreviewDeviceType = _select$__experimenta === undefined ? null : _select$__experimenta;

    var deviceType = __experimentalGetPreviewDeviceType ? __experimentalGetPreviewDeviceType() : null;
    return {
        deviceType: deviceType
    };
})(edit);

/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(9);

var _react2 = _interopRequireDefault(_react);

var _premiumSizeUnits = __webpack_require__(21);

var _premiumSizeUnits2 = _interopRequireDefault(_premiumSizeUnits);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var __ = wp.i18n.__;

var PremiumMargin = function (_Component) {
    _inherits(PremiumMargin, _Component);

    function PremiumMargin(props) {
        _classCallCheck(this, PremiumMargin);

        var _this = _possibleConstructorReturn(this, (PremiumMargin.__proto__ || Object.getPrototypeOf(PremiumMargin)).call(this, props));

        _this.state = {
            isLinked: false,
            top: _this.props.marginTop || '',
            right: _this.props.marginRight || '',
            bottom: _this.props.marginBottom || '',
            left: _this.props.marginLeft || '',
            directions: _this.props.directions,
            showUnits: _this.props.showUnits || false

        };
        _this.defaultValue = {
            isLinked: false,
            top: '',
            right: '',
            bottom: '',
            left: '',
            directions: _this.props.directions,
            showUnits: _this.props.showUnits || false
        };
        _this.onInputChange = _this.onInputChange.bind(_this);
        _this.onButtonClick = _this.onButtonClick.bind(_this);
        _this.changeFunction = _this.changeFunction.bind(_this);
        return _this;
    }

    _createClass(PremiumMargin, [{
        key: "onButtonClick",
        value: function onButtonClick() {
            this.setState({ isLinked: !this.state.isLinked });
        }
    }, {
        key: "changeFunction",
        value: function changeFunction(value) {
            var top = value.top,
                right = value.right,
                bottom = value.bottom,
                left = value.left,
                directions = value.directions;

            if (directions.includes("all") || directions.includes("top")) {
                this.props.onChangeMarTop(top);
            }
            if (directions.includes("all") || directions.includes("right")) {
                this.props.onChangeMarRight(right);
            }
            if (directions.includes("all") || directions.includes("bottom")) {
                this.props.onChangeMarBottom(bottom);
            }
            if (directions.includes("all") || directions.includes("left")) {
                this.props.onChangeMarLeft(left);
            }
        }
    }, {
        key: "onInputChange",
        value: function onInputChange(event) {
            var _this2 = this;

            var _state = this.state,
                isLinked = _state.isLinked,
                top = _state.top,
                right = _state.right,
                bottom = _state.bottom,
                left = _state.left;
            var _event$target = event.target,
                name = _event$target.name,
                value = _event$target.value;

            if (isLinked) {
                top = right = bottom = left = parseInt(value) || 0;
                this.setState({ top: top, right: right, bottom: bottom, left: left }, function () {
                    _this2.changeFunction(_this2.state);
                });
            } else {
                this.setState(_defineProperty({}, name, parseInt(value) || 0), function () {
                    _this2.changeFunction(_this2.state);
                });
            }
        }
    }, {
        key: "render",
        value: function render() {
            var _this3 = this;

            var _state2 = this.state,
                top = _state2.top,
                right = _state2.right,
                bottom = _state2.bottom,
                left = _state2.left,
                directions = _state2.directions,
                showUnits = _state2.showUnits,
                isLinked = _state2.isLinked,
                unit = _state2.unit,
                label = _state2.label;
            var _props = this.props,
                _props$onChangeMarSiz = _props.onChangeMarSizeUnit,
                onChangeMarSizeUnit = _props$onChangeMarSiz === undefined ? function () {} : _props$onChangeMarSiz,
                selectedUnit = _props.selectedUnit;


            return _react2.default.createElement(
                "div",
                { className: "premium-spacing-responsive" },
                this.props.label && _react2.default.createElement(
                    "header",
                    { className: "premium-control-label-container" },
                    _react2.default.createElement(
                        "div",
                        { className: "premium-slider-title-wrap" },
                        __("Margin", 'premium-blocks-for-gutenberg')
                    ),
                    showUnits && _react2.default.createElement(_premiumSizeUnits2.default, {
                        activeUnit: selectedUnit,
                        onChangeSizeUnit: function onChangeSizeUnit(newValue) {
                            return onChangeMarSizeUnit(newValue);
                        }
                    })
                ),
                _react2.default.createElement(
                    "div",
                    { className: "premium-spacing-responsive-outer-wrapper" },
                    _react2.default.createElement(
                        "div",
                        { className: "input-wrapper premium-spacing-responsive-wrapper" },
                        _react2.default.createElement(
                            "ul",
                            { className: "premium-spacing-wrapper" },
                            (directions.includes("all") || directions.includes("top")) && _react2.default.createElement(
                                "li",
                                { className: "premium-spacing-input-item" },
                                _react2.default.createElement("input", {
                                    type: "number",
                                    name: "top",
                                    value: top,
                                    onChange: this.onInputChange,
                                    className: "premium-spacing-input"
                                }),
                                _react2.default.createElement(
                                    "span",
                                    { className: "premium-spacing-title" },
                                    "Top"
                                )
                            ),
                            (directions.includes("all") || directions.includes("right")) && _react2.default.createElement(
                                "li",
                                { className: "premium-spacing-input-item" },
                                _react2.default.createElement("input", {
                                    type: "number",
                                    name: "right",
                                    value: right,
                                    onChange: this.onInputChange,
                                    className: "premium-spacing-input"
                                }),
                                _react2.default.createElement(
                                    "span",
                                    { className: "premium-spacing-title" },
                                    "Right"
                                )
                            ),
                            (directions.includes("all") || directions.includes("bottom")) && _react2.default.createElement(
                                "li",
                                { className: "premium-spacing-input-item" },
                                _react2.default.createElement("input", {
                                    type: "number",
                                    name: "bottom",
                                    value: bottom,
                                    onChange: this.onInputChange,
                                    className: "premium-spacing-input"
                                }),
                                _react2.default.createElement(
                                    "span",
                                    { className: "premium-spacing-title" },
                                    "Bottom"
                                )
                            ),
                            (directions.includes("all") || directions.includes("left")) && _react2.default.createElement(
                                "li",
                                { className: "premium-spacing-input-item" },
                                _react2.default.createElement("input", {
                                    type: "number",
                                    name: "left",
                                    value: left,
                                    onChange: this.onInputChange,
                                    className: "premium-spacing-input"
                                }),
                                _react2.default.createElement(
                                    "span",
                                    { className: "premium-spacing-title" },
                                    "Left"
                                )
                            ),
                            (directions.length > 1 || directions.includes("all")) && _react2.default.createElement(
                                "li",
                                null,
                                _react2.default.createElement("button", {
                                    className: "linked-btn  is-button dashicons dashicons-" + (isLinked ? "admin-links" : "editor-unlink"),
                                    onClick: this.onButtonClick
                                })
                            )
                        )
                    ),
                    _react2.default.createElement(
                        "div",
                        { className: "premium-spacing-btn-reset-wrap" },
                        _react2.default.createElement("button", {
                            className: "premium-reset-btn ",
                            disabled: JSON.stringify(this.state) == JSON.stringify(this.defaultValue),
                            onClick: function onClick(e) {
                                e.preventDefault();
                                _this3.setState(_extends({}, _this3.defaultValue));
                                _this3.changeFunction(_this3.defaultValue);
                            }
                        })
                    )
                )
            );
        }
    }]);

    return PremiumMargin;
}(_react.Component);

exports.default = PremiumMargin;

/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classnames = __webpack_require__(0);

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var InnerBlocks = wp.blockEditor.InnerBlocks;


var save = function save(props) {
    var className = props.className;
    var _props$attributes = props.attributes,
        stretchSection = _props$attributes.stretchSection,
        innerWidthType = _props$attributes.innerWidthType,
        isUpdated = _props$attributes.isUpdated,
        horAlign = _props$attributes.horAlign,
        height = _props$attributes.height,
        innerWidth = _props$attributes.innerWidth,
        minHeight = _props$attributes.minHeight,
        minHeightUnit = _props$attributes.minHeightUnit,
        vPos = _props$attributes.vPos,
        block_id = _props$attributes.block_id,
        hideDesktop = _props$attributes.hideDesktop,
        hideTablet = _props$attributes.hideTablet,
        hideMobile = _props$attributes.hideMobile,
        containerStyles = _props$attributes.containerStyles,
        borderTop = _props$attributes.borderTop,
        borderRight = _props$attributes.borderRight,
        borderBottom = _props$attributes.borderBottom,
        borderLeft = _props$attributes.borderLeft,
        backgroundType = _props$attributes.backgroundType;


    var mainClasses = (0, _classnames2.default)(className, 'premium-container');

    var btnGrad = void 0,
        btnGrad2 = void 0,
        btnbg = void 0;
    if (undefined !== backgroundType && 'gradient' === backgroundType) {
        btnGrad = 'transparent' === containerStyles[0].containerBack || undefined === containerStyles[0].containerBack ? 'rgba(255,255,255,0)' : containerStyles[0].containerBack;
        btnGrad2 = undefined !== containerStyles[0].gradientColorTwo && undefined !== containerStyles[0].gradientColorTwo && '' !== containerStyles[0].gradientColorTwo ? containerStyles[0].gradientColorTwo : '#777';
        if ('radial' === containerStyles[0].gradientType) {
            btnbg = 'radial-gradient(at ' + containerStyles[0].gradientPosition + ', ' + btnGrad + ' ' + containerStyles[0].gradientLocationOne + '%, ' + btnGrad2 + ' ' + containerStyles[0].gradientLocationTwo + '%)';
        } else if ('radial' !== containerStyles[0].gradientType) {
            btnbg = 'linear-gradient(' + containerStyles[0].gradientAngle + 'deg, ' + btnGrad + ' ' + containerStyles[0].gradientLocationOne + '%, ' + btnGrad2 + ' ' + containerStyles[0].gradientLocationTwo + '%)';
        }
    } else {
        btnbg = containerStyles[0].backgroundImageURL ? 'url(\'' + containerStyles[0].backgroundImageURL + '\')' : '';
    }

    return React.createElement(
        'div',
        {
            className: mainClasses + ' premium-container__stretch_' + stretchSection + ' premium-container__' + innerWidthType + ' ' + hideDesktop + ' ' + hideTablet + ' ' + hideMobile,
            style: {
                textAlign: horAlign,
                minHeight: "fit" === height ? "100vh" : minHeight + minHeightUnit,
                backgroundColor: backgroundType === "solid" ? containerStyles[0].containerBack : "transparent",
                borderStyle: containerStyles[0].borderType,
                borderWidth: isUpdated ? borderTop + 'px ' + borderRight + 'px ' + borderBottom + 'px ' + borderLeft + 'px' : containerStyles[0].borderWidth + "px",
                borderRadius: containerStyles[0].borderRadius + "px",
                borderColor: containerStyles[0].borderColor,
                backgroundImage: btnbg,
                backgroundRepeat: containerStyles[0].backgroundRepeat,
                backgroundPosition: containerStyles[0].backgroundPosition,
                backgroundSize: containerStyles[0].backgroundSize,
                backgroundAttachment: containerStyles[0].fixed ? "fixed" : "unset",
                boxShadow: containerStyles[0].shadowHorizontal + 'px ' + containerStyles[0].shadowVertical + 'px ' + containerStyles[0].shadowBlur + 'px ' + containerStyles[0].shadowColor + ' ' + containerStyles[0].shadowPosition
            }
        },
        React.createElement(
            'div',
            {
                className: 'premium-container__content_wrap premium-container__' + vPos,
                style: {
                    maxWidth: "boxed" == innerWidthType && stretchSection ? innerWidth ? innerWidth + "px" : "1140px" : "100%",
                    minHeight: "fit" === height ? "100vh" : minHeight + minHeightUnit
                }
            },
            React.createElement(
                'div',
                { className: 'premium-container__content_inner' },
                React.createElement(InnerBlocks.Content, null)
            )
        )
    );
};

exports.default = save;

/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _hexToRgba = __webpack_require__(17);

var _hexToRgba2 = _interopRequireDefault(_hexToRgba);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var InnerBlocks = wp.editor.InnerBlocks;

var className = "premium-container";


var attributes = {
    stretchSection: {
        type: "boolean",
        default: false
    },
    innerWidthType: {
        type: "string",
        default: "boxed"
    },
    isUpdated: {
        type: "boolean",
        default: false
    },
    horAlign: {
        type: "string",
        default: "center"
    },
    height: {
        type: "string",
        default: "min"
    },
    innerWidth: {
        type: "number"
    },
    minHeight: {
        type: "number"
    },
    minHeightUnit: {
        type: "string"
    },
    vPos: {
        type: "string",
        default: "top"
    },
    color: {
        type: "string"
    },
    opacity: {
        type: "number",
        default: "1"
    },
    imageID: {
        type: "string"
    },
    imageURL: {
        type: "string"
    },
    backgroundRepeat: {
        type: "string",
        default: "no-repeat"
    },
    backgroundPosition: {
        type: "string",
        default: "top center"
    },
    backgroundSize: {
        type: "string",
        default: "auto"
    },
    fixed: {
        type: "boolean",
        default: false
    },
    borderType: {
        type: "string",
        default: "none"
    },
    borderWidth: {
        type: "number",
        default: "1"
    },
    borderTop: {
        type: "number"
    },
    borderRight: {
        type: "number"
    },
    borderBottom: {
        type: "number"
    },
    borderLeft: {
        type: "number"
    },
    borderRadius: {
        type: "number"
    },
    borderColor: {
        type: "string"
    },
    marginTop: {
        type: "number"
    },
    marginBottom: {
        type: "number"
    },
    marginLeft: {
        type: "number"
    },
    marginRight: {
        type: "number"
    },
    marginUnit: {
        type: "string"
    },
    paddingTop: {
        type: "number"
    },
    paddingRight: {
        type: "number"
    },
    paddingBottom: {
        type: "number"
    },
    paddingLeft: {
        type: "number"
    },
    paddingUnit: {
        type: "string"
    },
    shadowColor: {
        type: "string"
    },
    shadowBlur: {
        type: "number",
        default: "0"
    },
    shadowHorizontal: {
        type: "number",
        default: "0"
    },
    shadowVertical: {
        type: "number",
        default: "0"
    },
    shadowPosition: {
        type: "string",
        default: ""
    },
    block_id: {
        type: "string"
    },
    hideDesktop: {
        type: "boolean",
        default: false
    },
    hideTablet: {
        type: 'boolean',
        default: false
    },
    hideMobile: {
        type: 'boolean',
        default: false
    }
};
var new_Attributes = {
    containerStyles: {
        type: "array",
        default: [{
            containerBack: '',
            opacity: 1,
            backgroundImageID: '',
            backgroundImageURL: '',
            backgroundRepeat: 'no-reapet',
            backgroundPosition: 'top center',
            backgroundSize: 'auto',
            fixed: false,
            borderType: "none",
            borderWidth: 1,
            borderRadius: '',
            borderColor: '',
            shadowColor: '',
            shadowBlur: '0',
            shadowHorizontal: '0',
            shadowVertical: '0',
            shadowPosition: '',
            marginUnit: 'px',
            paddingUnit: 'px',
            gradientColorOne: '',
            gradientLocationOne: '0',
            gradientColorTwo: '',
            gradientLocationTwo: '100',
            gradientType: 'linear',
            gradientAngle: '180',
            gradientPosition: 'center center'
        }]
    }
};
var deprecated_Attributes = Object.assign(attributes, new_Attributes);

var deprecatedContent = [{
    attributes: deprecated_Attributes,
    save: function save(props) {
        var _props$attributes = props.attributes,
            stretchSection = _props$attributes.stretchSection,
            innerWidthType = _props$attributes.innerWidthType,
            isUpdated = _props$attributes.isUpdated,
            horAlign = _props$attributes.horAlign,
            height = _props$attributes.height,
            innerWidth = _props$attributes.innerWidth,
            minHeight = _props$attributes.minHeight,
            minHeightUnit = _props$attributes.minHeightUnit,
            vPos = _props$attributes.vPos,
            block_id = _props$attributes.block_id,
            hideDesktop = _props$attributes.hideDesktop,
            hideTablet = _props$attributes.hideTablet,
            hideMobile = _props$attributes.hideMobile,
            containerStyles = _props$attributes.containerStyles,
            borderTop = _props$attributes.borderTop,
            borderRight = _props$attributes.borderRight,
            borderBottom = _props$attributes.borderBottom,
            borderLeft = _props$attributes.borderLeft,
            marginTop = _props$attributes.marginTop,
            marginBottom = _props$attributes.marginBottom,
            marginLeft = _props$attributes.marginLeft,
            marginRight = _props$attributes.marginRight,
            paddingTop = _props$attributes.paddingTop,
            paddingRight = _props$attributes.paddingRight,
            paddingBottom = _props$attributes.paddingBottom,
            paddingLeft = _props$attributes.paddingLeft,
            backgroundType = _props$attributes.backgroundType;


        var btnGrad = void 0,
            btnGrad2 = void 0,
            btnbg = void 0;
        if (undefined !== backgroundType && 'gradient' === backgroundType) {
            btnGrad = 'transparent' === containerStyles[0].containerBack || undefined === containerStyles[0].containerBack ? 'rgba(255,255,255,0)' : containerStyles[0].containerBack;
            btnGrad2 = undefined !== containerStyles[0].gradientColorTwo && undefined !== containerStyles[0].gradientColorTwo && '' !== containerStyles[0].gradientColorTwo ? containerStyles[0].gradientColorTwo : '#777';
            if ('radial' === containerStyles[0].gradientType) {
                btnbg = "radial-gradient(at " + containerStyles[0].gradientPosition + ", " + btnGrad + " " + containerStyles[0].gradientLocationOne + "%, " + btnGrad2 + " " + containerStyles[0].gradientLocationTwo + "%)";
            } else if ('radial' !== containerStyles[0].gradientType) {
                btnbg = "linear-gradient(" + containerStyles[0].gradientAngle + "deg, " + btnGrad + " " + containerStyles[0].gradientLocationOne + "%, " + btnGrad2 + " " + containerStyles[0].gradientLocationTwo + "%)";
            }
        } else {
            btnbg = containerStyles[0].backgroundImageURL ? "url('" + containerStyles[0].backgroundImageURL + "')" : '';
        }

        return React.createElement(
            "div",
            {
                className: className + " premium-container__stretch_" + stretchSection + " premium-container__" + innerWidthType + " " + hideDesktop + " " + hideTablet + " " + hideMobile,
                style: {
                    textAlign: horAlign,
                    minHeight: "fit" === height ? "100vh" : minHeight + minHeightUnit,
                    backgroundColor: backgroundType === "solid" ? containerStyles[0].containerBack : "transparent",
                    borderStyle: containerStyles[0].borderType,
                    borderWidth: isUpdated ? borderTop + "px " + borderRight + "px " + borderBottom + "px " + borderLeft + "px" : containerStyles[0].borderWidth + "px",
                    borderRadius: containerStyles[0].borderRadius + "px",
                    borderColor: containerStyles[0].borderColor,
                    backgroundImage: btnbg,
                    backgroundRepeat: containerStyles[0].backgroundRepeat,
                    backgroundPosition: containerStyles[0].backgroundPosition,
                    backgroundSize: containerStyles[0].backgroundSize,
                    backgroundAttachment: containerStyles[0].fixed ? "fixed" : "unset",
                    boxShadow: containerStyles[0].shadowHorizontal + "px " + containerStyles[0].shadowVertical + "px " + containerStyles[0].shadowBlur + "px " + containerStyles[0].shadowColor + " " + containerStyles[0].shadowPosition
                }
            },
            React.createElement(
                "div",
                {
                    className: "premium-container__content_wrap premium-container__" + vPos,
                    style: {
                        maxWidth: "boxed" == innerWidthType && stretchSection ? innerWidth ? innerWidth + "px" : "1140px" : "100%"
                    }
                },
                React.createElement(
                    "div",
                    { className: "premium-container__content_inner" },
                    React.createElement(InnerBlocks.Content, null)
                )
            )
        );
    }
}, {
    attributes: attributes,
    migrate: function migrate(attributes) {
        var newAttributes = {
            containerStyles: [{
                containerBack: attributes.color,
                opacity: attributes.opacity,
                backgroundImageID: attributes.imageID,
                backgroundImageURL: attributes.imageURL,
                backgroundRepeat: attributes.backgroundRepeat,
                backgroundPosition: attributes.backgroundPosition,
                backgroundSize: attributes.backgroundSize,
                fixed: attributes.fixed,
                borderType: attributes.borderType,
                borderWidth: attributes.borderWidth,
                borderRadius: attributes.borderRadius,
                borderColor: attributes.borderColor,
                shadowColor: attributes.shadowColor,
                shadowBlur: attributes.shadowBlur,
                shadowHorizontal: attributes.shadowHorizontal,
                shadowVertical: attributes.shadowVertical,
                shadowPosition: attributes.shadowPosition,
                marginUnit: attributes.marginUnit,
                paddingUnit: attributes.paddingUnit,
                gradientColorOne: '',
                gradientLocationOne: '0',
                gradientColorTwo: '',
                gradientLocationTwo: '100',
                gradientType: 'linear',
                gradientAngle: '180',
                gradientPosition: 'center center'
            }],
            backgroundType: 'solid',
            marginTTablet: '',
            marginRTablet: '',
            marginBTablet: '',
            marginLTablet: '',
            marginTMobile: '',
            marginRMobile: '',
            marginBMobile: '',
            marginLMobile: '',
            paddingTTablet: '',
            paddingRTablet: '',
            paddingBTablet: '',
            paddingLTablet: '',
            paddingTMobile: '',
            paddingRMobile: '',
            paddingLMobile: '',
            paddingBMobile: ''
        };
        return Object.assign(attributes, newAttributes);
    },
    save: function save(props) {
        var _props$attributes2 = props.attributes,
            block_id = _props$attributes2.block_id,
            isUpdated = _props$attributes2.isUpdated,
            stretchSection = _props$attributes2.stretchSection,
            horAlign = _props$attributes2.horAlign,
            innerWidthType = _props$attributes2.innerWidthType,
            innerWidth = _props$attributes2.innerWidth,
            height = _props$attributes2.height,
            vPos = _props$attributes2.vPos,
            minHeight = _props$attributes2.minHeight,
            minHeightUnit = _props$attributes2.minHeightUnit,
            color = _props$attributes2.color,
            opacity = _props$attributes2.opacity,
            imageURL = _props$attributes2.imageURL,
            fixed = _props$attributes2.fixed,
            backgroundRepeat = _props$attributes2.backgroundRepeat,
            backgroundPosition = _props$attributes2.backgroundPosition,
            backgroundSize = _props$attributes2.backgroundSize,
            borderType = _props$attributes2.borderType,
            borderWidth = _props$attributes2.borderWidth,
            borderTop = _props$attributes2.borderTop,
            borderRight = _props$attributes2.borderRight,
            borderBottom = _props$attributes2.borderBottom,
            borderLeft = _props$attributes2.borderLeft,
            borderColor = _props$attributes2.borderColor,
            borderRadius = _props$attributes2.borderRadius,
            marginTop = _props$attributes2.marginTop,
            marginBottom = _props$attributes2.marginBottom,
            marginLeft = _props$attributes2.marginLeft,
            marginRight = _props$attributes2.marginRight,
            marginUnit = _props$attributes2.marginUnit,
            paddingTop = _props$attributes2.paddingTop,
            paddingRight = _props$attributes2.paddingRight,
            paddingBottom = _props$attributes2.paddingBottom,
            paddingLeft = _props$attributes2.paddingLeft,
            paddingUnit = _props$attributes2.paddingUnit,
            shadowBlur = _props$attributes2.shadowBlur,
            shadowColor = _props$attributes2.shadowColor,
            shadowHorizontal = _props$attributes2.shadowHorizontal,
            shadowVertical = _props$attributes2.shadowVertical,
            shadowPosition = _props$attributes2.shadowPosition,
            hideDesktop = _props$attributes2.hideDesktop,
            hideTablet = _props$attributes2.hideTablet,
            hideMobile = _props$attributes2.hideMobile;


        return React.createElement(
            "div",
            {
                className: className + " premium-container__stretch_" + stretchSection + " premium-container__" + innerWidthType + " " + hideDesktop + " " + hideTablet + " " + hideMobile,
                style: {
                    textAlign: horAlign,
                    minHeight: "fit" === height ? "100vh" : minHeight + minHeightUnit,
                    backgroundColor: color ? (0, _hexToRgba2.default)(color, opacity) : "transparent",
                    borderStyle: borderType,
                    borderWidth: isUpdated ? borderTop + "px " + borderRight + "px " + borderBottom + "px " + borderLeft + "px" : borderWidth + "px",
                    borderRadius: borderRadius + "px",
                    borderColor: borderColor,
                    backgroundImage: "url('" + imageURL + "')",
                    backgroundRepeat: backgroundRepeat,
                    backgroundPosition: backgroundPosition,
                    backgroundSize: backgroundSize,
                    backgroundAttachment: fixed ? "fixed" : "unset",
                    marginTop: marginTop + marginUnit,
                    marginBottom: marginBottom + marginUnit,
                    marginLeft: marginLeft + marginUnit,
                    marginRight: marginRight + marginUnit,
                    paddingTop: paddingTop + paddingUnit,
                    paddingBottom: paddingBottom + paddingUnit,
                    paddingLeft: paddingLeft + paddingUnit,
                    paddingRight: paddingRight + paddingUnit,
                    boxShadow: shadowHorizontal + "px " + shadowVertical + "px " + shadowBlur + "px " + shadowColor + " " + shadowPosition
                }
            },
            React.createElement(
                "div",
                {
                    className: "premium-container__content_wrap premium-container__" + vPos,
                    style: {
                        maxWidth: "boxed" == innerWidthType && stretchSection ? innerWidth ? innerWidth + "px" : "1140px" : "100%"
                    }
                },
                React.createElement(
                    "div",
                    { className: "premium-container__content_inner" },
                    React.createElement(InnerBlocks.Content, null)
                )
            )
        );
    }
}, {
    attributes: attributes,

    save: function save(props) {
        var _props$attributes3 = props.attributes,
            stretchSection = _props$attributes3.stretchSection,
            horAlign = _props$attributes3.horAlign,
            innerWidthType = _props$attributes3.innerWidthType,
            innerWidth = _props$attributes3.innerWidth,
            height = _props$attributes3.height,
            vPos = _props$attributes3.vPos,
            minHeight = _props$attributes3.minHeight,
            color = _props$attributes3.color,
            imageURL = _props$attributes3.imageURL,
            fixed = _props$attributes3.fixed,
            backgroundRepeat = _props$attributes3.backgroundRepeat,
            backgroundPosition = _props$attributes3.backgroundPosition,
            backgroundSize = _props$attributes3.backgroundSize,
            borderType = _props$attributes3.borderType,
            borderWidth = _props$attributes3.borderWidth,
            borderColor = _props$attributes3.borderColor,
            borderRadius = _props$attributes3.borderRadius,
            marginTop = _props$attributes3.marginTop,
            marginBottom = _props$attributes3.marginBottom,
            marginLeft = _props$attributes3.marginLeft,
            marginRight = _props$attributes3.marginRight,
            marginUnit = _props$attributes3.marginUnit,
            paddingTop = _props$attributes3.paddingTop,
            paddingRight = _props$attributes3.paddingRight,
            paddingBottom = _props$attributes3.paddingBottom,
            paddingLeft = _props$attributes3.paddingLeft,
            paddingUnit = _props$attributes3.paddingUnit,
            shadowBlur = _props$attributes3.shadowBlur,
            shadowColor = _props$attributes3.shadowColor,
            shadowHorizontal = _props$attributes3.shadowHorizontal,
            shadowVertical = _props$attributes3.shadowVertical,
            shadowPosition = _props$attributes3.shadowPosition;

        return React.createElement(
            "div",
            {
                className: className + " " + className + "__stretch_" + stretchSection + " " + className + "__" + innerWidthType,
                style: {
                    textAlign: horAlign,
                    minHeight: "fit" === height ? "100vh" : minHeight,
                    backgroundColor: color,
                    border: borderType,
                    borderWidth: borderWidth + "px",
                    borderRadius: borderRadius + "px",
                    borderColor: borderColor,
                    backgroundImage: "url('" + imageURL + "')",
                    backgroundRepeat: backgroundRepeat,
                    backgroundPosition: backgroundPosition,
                    backgroundSize: backgroundSize,
                    backgroundAttachment: fixed ? "fixed" : "unset",
                    marginTop: marginTop + marginUnit,
                    marginBottom: marginBottom + marginUnit,
                    marginLeft: marginLeft + marginUnit,
                    marginRight: marginRight + marginUnit,
                    paddingTop: paddingTop + paddingUnit,
                    paddingBottom: paddingBottom + paddingUnit,
                    paddingLeft: paddingLeft + paddingUnit,
                    paddingRight: paddingRight + paddingUnit,
                    boxShadow: shadowHorizontal + "px " + shadowVertical + "px " + shadowBlur + "px " + shadowColor + " " + shadowPosition
                }
            },
            React.createElement(
                "div",
                {
                    className: className + "__content_wrap " + className + "__" + vPos,
                    style: {
                        maxWidth: "boxed" == innerWidthType && stretchSection ? innerWidth ? innerWidth + "px" : "1140px" : "100%"
                    }
                },
                React.createElement(
                    "div",
                    { className: className + "__content_inner" },
                    React.createElement(InnerBlocks.Content, null)
                )
            )
        );
    }
}, {
    attributes: attributes,
    migrate: function migrate(attributes) {
        var newAttributes = {
            marginUnit: ""
        };
        return Object.assign(attributes, newAttributes);
    },
    save: function save(props) {
        var _props$attributes4 = props.attributes,
            stretchSection = _props$attributes4.stretchSection,
            horAlign = _props$attributes4.horAlign,
            innerWidthType = _props$attributes4.innerWidthType,
            innerWidth = _props$attributes4.innerWidth,
            height = _props$attributes4.height,
            vPos = _props$attributes4.vPos,
            minHeight = _props$attributes4.minHeight,
            color = _props$attributes4.color,
            imageURL = _props$attributes4.imageURL,
            fixed = _props$attributes4.fixed,
            backgroundRepeat = _props$attributes4.backgroundRepeat,
            backgroundPosition = _props$attributes4.backgroundPosition,
            backgroundSize = _props$attributes4.backgroundSize,
            borderType = _props$attributes4.borderType,
            borderWidth = _props$attributes4.borderWidth,
            borderColor = _props$attributes4.borderColor,
            borderRadius = _props$attributes4.borderRadius,
            marginTop = _props$attributes4.marginTop,
            marginBottom = _props$attributes4.marginBottom,
            marginLeft = _props$attributes4.marginLeft,
            marginRight = _props$attributes4.marginRight,
            paddingTop = _props$attributes4.paddingTop,
            paddingRight = _props$attributes4.paddingRight,
            paddingBottom = _props$attributes4.paddingBottom,
            paddingLeft = _props$attributes4.paddingLeft,
            paddingUnit = _props$attributes4.paddingUnit,
            shadowBlur = _props$attributes4.shadowBlur,
            shadowColor = _props$attributes4.shadowColor,
            shadowHorizontal = _props$attributes4.shadowHorizontal,
            shadowVertical = _props$attributes4.shadowVertical,
            shadowPosition = _props$attributes4.shadowPosition;

        return React.createElement(
            "div",
            {
                className: className + " " + className + "__stretch_" + stretchSection + " " + className + "__" + innerWidthType,
                style: {
                    textAlign: horAlign,
                    minHeight: "fit" === height ? "100vh" : minHeight,
                    backgroundColor: color,
                    border: borderType,
                    borderWidth: borderWidth + "px",
                    borderRadius: borderRadius + "px",
                    borderColor: borderColor,
                    backgroundImage: "url('" + imageURL + "')",
                    backgroundRepeat: backgroundRepeat,
                    backgroundPosition: backgroundPosition,
                    backgroundSize: backgroundSize,
                    backgroundAttachment: fixed ? "fixed" : "unset",
                    marginTop: marginTop + "px",
                    marginBottom: marginBottom + "px",
                    marginLeft: marginLeft + "px",
                    marginRight: marginRight + "px",
                    paddingTop: paddingTop + paddingUnit,
                    paddingBottom: paddingBottom + paddingUnit,
                    paddingLeft: paddingLeft + paddingUnit,
                    paddingRight: paddingRight + paddingUnit,
                    boxShadow: shadowHorizontal + "px " + shadowVertical + "px " + shadowBlur + "px " + shadowColor + " " + shadowPosition
                }
            },
            React.createElement(
                "div",
                {
                    className: className + "__content_wrap " + className + "__" + vPos,
                    style: {
                        maxWidth: "boxed" == innerWidthType && stretchSection ? innerWidth ? innerWidth + "px" : "1140px" : "100%"
                    }
                },
                React.createElement(
                    "div",
                    { className: className + "__content_inner" },
                    React.createElement(InnerBlocks.Content, null)
                )
            )
        );
    }
}, {
    attributes: attributes,
    migrate: function migrate(attributes) {
        var newAttributes = {
            paddingUnit: ""
        };
        return Object.assign(attributes, newAttributes);
    },
    save: function save(props) {
        var _props$attributes5 = props.attributes,
            stretchSection = _props$attributes5.stretchSection,
            horAlign = _props$attributes5.horAlign,
            innerWidthType = _props$attributes5.innerWidthType,
            innerWidth = _props$attributes5.innerWidth,
            height = _props$attributes5.height,
            vPos = _props$attributes5.vPos,
            minHeight = _props$attributes5.minHeight,
            color = _props$attributes5.color,
            imageURL = _props$attributes5.imageURL,
            fixed = _props$attributes5.fixed,
            backgroundRepeat = _props$attributes5.backgroundRepeat,
            backgroundPosition = _props$attributes5.backgroundPosition,
            backgroundSize = _props$attributes5.backgroundSize,
            borderType = _props$attributes5.borderType,
            borderWidth = _props$attributes5.borderWidth,
            borderColor = _props$attributes5.borderColor,
            borderRadius = _props$attributes5.borderRadius,
            marginTop = _props$attributes5.marginTop,
            marginBottom = _props$attributes5.marginBottom,
            marginLeft = _props$attributes5.marginLeft,
            marginRight = _props$attributes5.marginRight,
            paddingTop = _props$attributes5.paddingTop,
            paddingRight = _props$attributes5.paddingRight,
            paddingBottom = _props$attributes5.paddingBottom,
            paddingLeft = _props$attributes5.paddingLeft,
            shadowBlur = _props$attributes5.shadowBlur,
            shadowColor = _props$attributes5.shadowColor,
            shadowHorizontal = _props$attributes5.shadowHorizontal,
            shadowVertical = _props$attributes5.shadowVertical,
            shadowPosition = _props$attributes5.shadowPosition;

        return React.createElement(
            "div",
            {
                className: className + " " + className + "__stretch_" + stretchSection + " " + className + "__" + innerWidthType,
                style: {
                    textAlign: horAlign,
                    minHeight: "fit" === height ? "100vh" : minHeight,
                    backgroundColor: color,
                    border: borderType,
                    borderWidth: borderWidth + "px",
                    borderRadius: borderRadius + "px",
                    borderColor: borderColor,
                    backgroundImage: "url('" + imageURL + "')",
                    backgroundRepeat: backgroundRepeat,
                    backgroundPosition: backgroundPosition,
                    backgroundSize: backgroundSize,
                    backgroundAttachment: fixed ? "fixed" : "unset",
                    marginTop: marginTop + "px",
                    marginBottom: marginBottom + "px",
                    paddingTop: paddingTop + "px",
                    marginLeft: marginLeft + "px",
                    marginRight: marginRight + "px",
                    paddingBottom: paddingBottom + "px",
                    paddingLeft: paddingLeft + "px",
                    paddingRight: paddingRight + "px",
                    boxShadow: shadowHorizontal + "px " + shadowVertical + "px " + shadowBlur + "px " + shadowColor + " " + shadowPosition
                }
            },
            React.createElement(
                "div",
                {
                    className: className + "__content_wrap " + className + "__" + vPos,
                    style: {
                        maxWidth: "boxed" == innerWidthType && stretchSection ? innerWidth ? innerWidth + "px" : "1140px" : "100%"
                    }
                },
                React.createElement(
                    "div",
                    { className: className + "__content_inner" },
                    React.createElement(InnerBlocks.Content, null)
                )
            )
        );
    }
}, {
    attributes: attributes,
    save: function save(props) {
        var _props$attributes6 = props.attributes,
            horAlign = _props$attributes6.horAlign,
            innerWidth = _props$attributes6.innerWidth,
            height = _props$attributes6.height,
            vPos = _props$attributes6.vPos,
            minHeight = _props$attributes6.minHeight,
            color = _props$attributes6.color,
            imageURL = _props$attributes6.imageURL,
            fixed = _props$attributes6.fixed,
            backgroundRepeat = _props$attributes6.backgroundRepeat,
            backgroundPosition = _props$attributes6.backgroundPosition,
            backgroundSize = _props$attributes6.backgroundSize,
            borderType = _props$attributes6.borderType,
            borderWidth = _props$attributes6.borderWidth,
            borderColor = _props$attributes6.borderColor,
            borderRadius = _props$attributes6.borderRadius,
            marginTop = _props$attributes6.marginTop,
            marginBottom = _props$attributes6.marginBottom,
            marginLeft = _props$attributes6.marginLeft,
            marginRight = _props$attributes6.marginRight,
            paddingTop = _props$attributes6.paddingTop,
            paddingRight = _props$attributes6.paddingRight,
            paddingBottom = _props$attributes6.paddingBottom,
            paddingLeft = _props$attributes6.paddingLeft,
            shadowBlur = _props$attributes6.shadowBlur,
            shadowColor = _props$attributes6.shadowColor,
            shadowHorizontal = _props$attributes6.shadowHorizontal,
            shadowVertical = _props$attributes6.shadowVertical,
            shadowPosition = _props$attributes6.shadowPosition;

        return React.createElement(
            "div",
            {
                className: className,
                style: {
                    textAlign: horAlign,
                    height: "fit" === height ? "100vh" : minHeight,
                    backgroundColor: color,
                    border: borderType,
                    borderWidth: borderWidth + "px",
                    borderRadius: borderRadius + "px",
                    borderColor: borderColor,
                    backgroundImage: "url('" + imageURL + "')",
                    backgroundRepeat: backgroundRepeat,
                    backgroundPosition: backgroundPosition,
                    backgroundSize: backgroundSize,
                    backgroundAttachment: fixed ? "fixed" : "unset",
                    marginTop: marginTop + "px",
                    marginBottom: marginBottom + "px",
                    paddingTop: paddingTop + "px",
                    marginLeft: marginLeft + "px",
                    marginRight: marginRight + "px",
                    paddingBottom: paddingBottom + "px",
                    paddingLeft: paddingLeft + "px",
                    paddingRight: paddingRight + "px",
                    boxShadow: shadowHorizontal + "px " + shadowVertical + "px " + shadowBlur + "px " + shadowColor + " " + shadowPosition
                }
            },
            React.createElement(
                "div",
                {
                    className: className + "__content_wrap " + className + "__" + vPos,
                    style: { width: innerWidth ? innerWidth + "%" : "100%" }
                },
                React.createElement(
                    "div",
                    { className: className + "__content_inner" },
                    React.createElement(InnerBlocks.Content, null)
                )
            )
        );
    }
}];

exports.default = deprecatedContent;

/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
var attributes = {
    stretchSection: {
        type: "boolean",
        default: false
    },
    innerWidthType: {
        type: "string",
        default: "boxed"
    },
    isUpdated: {
        type: "boolean",
        default: false
    },
    horAlign: {
        type: "string",
        default: "center"
    },
    height: {
        type: "string",
        default: "min"
    },
    innerWidth: {
        type: "number"
    },
    minHeight: {
        type: "number"
    },
    minHeightUnit: {
        type: "string"
    },
    vPos: {
        type: "string",
        default: "top"
    },
    block_id: {
        type: "string"
    },
    hideDesktop: {
        type: "boolean",
        default: false
    },
    hideTablet: {
        type: 'boolean',
        default: false
    },
    hideMobile: {
        type: 'boolean',
        default: false
    },
    borderTop: {
        type: "number"
    },
    borderRight: {
        type: "number"
    },
    borderBottom: {
        type: "number"
    },
    borderLeft: {
        type: "number"
    },
    marginTop: {
        type: "number"
    },
    marginBottom: {
        type: "number"
    },
    marginLeft: {
        type: "number"
    },
    marginRight: {
        type: "number"
    },
    paddingTop: {
        type: "number"
    },
    paddingRight: {
        type: "number"
    },
    paddingBottom: {
        type: "number"
    },
    paddingLeft: {
        type: "number"
    },
    containerStyles: {
        type: "array",
        default: [{
            containerBack: '',
            opacity: 1,
            backgroundImageID: '',
            backgroundImageURL: '',
            backgroundRepeat: 'no-reapet',
            backgroundPosition: 'top center',
            backgroundSize: 'auto',
            fixed: false,
            borderType: "none",
            borderWidth: 1,
            borderRadius: '',
            borderColor: '',
            shadowColor: '',
            shadowBlur: '0',
            shadowHorizontal: '0',
            shadowVertical: '0',
            shadowPosition: '',
            marginUnit: 'px',
            paddingUnit: 'px',
            gradientColorOne: '',
            gradientLocationOne: '0',
            gradientColorTwo: '',
            gradientLocationTwo: '100',
            gradientType: 'linear',
            gradientAngle: '180',
            gradientPosition: 'center center'
        }]
    },
    backgroundType: {
        type: "string",
        default: ""
    },
    marginTTablet: {
        type: "number"
    },
    marginRTablet: {
        type: "number"
    },
    marginBTablet: {
        type: "number"
    },
    marginLTablet: {
        type: "number"
    },
    marginTMobile: {
        type: "number"
    },
    marginRMobile: {
        type: "number"
    },
    marginBMobile: {
        type: "number"
    },
    marginLMobile: {
        type: "number"
    },
    paddingTTablet: {
        type: "number"
    },
    paddingRTablet: {
        type: "number"
    },
    paddingBTablet: {
        type: "number"
    },
    paddingLTablet: {
        type: "number"
    },
    paddingTMobile: {
        type: "number"
    },
    paddingRMobile: {
        type: "number"
    },
    paddingLMobile: {
        type: "number"
    },
    paddingBMobile: {
        type: "number"
    }
};
exports.default = attributes;

/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _settings = __webpack_require__(1);

var _edit = __webpack_require__(281);

var _edit2 = _interopRequireDefault(_edit);

var _save = __webpack_require__(282);

var _save2 = _interopRequireDefault(_save);

var _deprecated = __webpack_require__(283);

var _deprecated2 = _interopRequireDefault(_deprecated);

var _icons = __webpack_require__(4);

var _icons2 = _interopRequireDefault(_icons);

var _attributes = __webpack_require__(284);

var _attributes2 = _interopRequireDefault(_attributes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __ = wp.i18n.__;
var registerBlockType = wp.blocks.registerBlockType;


registerBlockType("premium/testimonial", {
    title: __("Testimonial"),
    icon: React.createElement(_icons2.default, { icon: "testimonials" }),
    category: "premium-blocks",
    attributes: _attributes2.default,
    supports: {
        inserter: _settings.testimonial
    },
    example: {},
    edit: _edit2.default,
    save: _save2.default,
    deprecated: _deprecated2.default
});

/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _classnames = __webpack_require__(0);

var _classnames2 = _interopRequireDefault(_classnames);

var _premiumTypo = __webpack_require__(7);

var _premiumTypo2 = _interopRequireDefault(_premiumTypo);

var _defaultImage = __webpack_require__(32);

var _defaultImage2 = _interopRequireDefault(_defaultImage);

var _upperQuote = __webpack_require__(68);

var _upperQuote2 = _interopRequireDefault(_upperQuote);

var _lowerQuote = __webpack_require__(69);

var _lowerQuote2 = _interopRequireDefault(_lowerQuote);

var _PremiumResponsivePadding = __webpack_require__(16);

var _PremiumResponsivePadding2 = _interopRequireDefault(_PremiumResponsivePadding);

var _premiumMediaUpload = __webpack_require__(12);

var _premiumMediaUpload2 = _interopRequireDefault(_premiumMediaUpload);

var _premiumResponsiveTabs = __webpack_require__(8);

var _premiumResponsiveTabs2 = _interopRequireDefault(_premiumResponsiveTabs);

var _singleRangeControl = __webpack_require__(3);

var _singleRangeControl2 = _interopRequireDefault(_singleRangeControl);

var _ColorComponent = __webpack_require__(2);

var _ColorComponent2 = _interopRequireDefault(_ColorComponent);

var _PremiumBackgroundControl = __webpack_require__(23);

var _PremiumBackgroundControl2 = _interopRequireDefault(_PremiumBackgroundControl);

var _radioControl = __webpack_require__(10);

var _radioControl2 = _interopRequireDefault(_radioControl);

var _responsiveRangeControl = __webpack_require__(19);

var _responsiveRangeControl2 = _interopRequireDefault(_responsiveRangeControl);

var _PremiumShadow = __webpack_require__(5);

var _PremiumShadow2 = _interopRequireDefault(_PremiumShadow);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var __ = wp.i18n.__;
var _wp$components = wp.components,
    PanelBody = _wp$components.PanelBody,
    SelectControl = _wp$components.SelectControl,
    TextControl = _wp$components.TextControl,
    ToggleControl = _wp$components.ToggleControl;
var _wp$blockEditor = wp.blockEditor,
    BlockControls = _wp$blockEditor.BlockControls,
    InspectorControls = _wp$blockEditor.InspectorControls,
    AlignmentToolbar = _wp$blockEditor.AlignmentToolbar,
    RichText = _wp$blockEditor.RichText;
var Component = wp.element.Component;
var withSelect = wp.data.withSelect;

var edit = function (_Component) {
    _inherits(edit, _Component);

    function edit() {
        _classCallCheck(this, edit);

        var _this = _possibleConstructorReturn(this, (edit.__proto__ || Object.getPrototypeOf(edit)).apply(this, arguments));

        _this.getPreviewSize = _this.getPreviewSize.bind(_this);
        return _this;
    }

    _createClass(edit, [{
        key: "componentDidMount",
        value: function componentDidMount() {
            var _props = this.props,
                setAttributes = _props.setAttributes,
                clientId = _props.clientId;

            setAttributes({ block_id: clientId.substr(0, 6) });
            this.props.setAttributes({ classMigrate: true });
        }
    }, {
        key: "getPreviewSize",
        value: function getPreviewSize(device, desktopSize, tabletSize, mobileSize) {
            if (device === 'Mobile') {
                if (undefined !== mobileSize && '' !== mobileSize) {
                    return mobileSize;
                } else if (undefined !== tabletSize && '' !== tabletSize) {
                    return tabletSize;
                }
            } else if (device === 'Tablet') {
                if (undefined !== tabletSize && '' !== tabletSize) {
                    return tabletSize;
                }
            }
            return desktopSize;
        }
    }, {
        key: "render",
        value: function render() {
            var _props2 = this.props,
                isSelected = _props2.isSelected,
                className = _props2.className,
                setAttributes = _props2.setAttributes;
            var _props$attributes = this.props.attributes,
                block_id = _props$attributes.block_id,
                align = _props$attributes.align,
                authorImgId = _props$attributes.authorImgId,
                authorImgUrl = _props$attributes.authorImgUrl,
                imgRadius = _props$attributes.imgRadius,
                imgSize = _props$attributes.imgSize,
                imgBorder = _props$attributes.imgBorder,
                imgBorderColor = _props$attributes.imgBorderColor,
                author = _props$attributes.author,
                authorStyles = _props$attributes.authorStyles,
                text = _props$attributes.text,
                authorCom = _props$attributes.authorCom,
                hideDesktop = _props$attributes.hideDesktop,
                hideTablet = _props$attributes.hideTablet,
                hideMobile = _props$attributes.hideMobile,
                contentStyle = _props$attributes.contentStyle,
                companyStyles = _props$attributes.companyStyles,
                quoteStyles = _props$attributes.quoteStyles,
                containerStyles = _props$attributes.containerStyles,
                paddingTop = _props$attributes.paddingTop,
                paddingRight = _props$attributes.paddingRight,
                paddingBottom = _props$attributes.paddingBottom,
                paddingLeft = _props$attributes.paddingLeft,
                backgroundType = _props$attributes.backgroundType,
                paddingTTablet = _props$attributes.paddingTTablet,
                paddingRTablet = _props$attributes.paddingRTablet,
                paddingBTablet = _props$attributes.paddingBTablet,
                paddingLTablet = _props$attributes.paddingLTablet,
                paddingTMobile = _props$attributes.paddingTMobile,
                paddingRMobile = _props$attributes.paddingRMobile,
                paddingBMobile = _props$attributes.paddingBMobile,
                paddingLMobile = _props$attributes.paddingLMobile;


            var RADIUS = [{
                value: "0",
                label: __("Square", 'premium-blocks-for-gutenberg')
            }, {
                value: "50%",
                label: __("Circle", 'premium-blocks-for-gutenberg')
            }, {
                value: "15px",
                label: __("Rounded", 'premium-blocks-for-gutenberg')
            }];

            var saveAuthorStyle = function saveAuthorStyle(value) {
                var newUpdate = authorStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({
                    authorStyles: newUpdate
                });
            };

            var saveContentStyle = function saveContentStyle(value) {
                var newUpdate = contentStyle.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({
                    contentStyle: newUpdate
                });
            };

            var saveContainerStyle = function saveContainerStyle(value) {
                var newUpdate = containerStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({
                    containerStyles: newUpdate
                });
            };

            var saveCompanyStyle = function saveCompanyStyle(value) {
                var newUpdate = companyStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({ companyStyles: newUpdate });
            };

            var saveQuoteStyles = function saveQuoteStyles(value) {
                var newUpdate = quoteStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({ quoteStyles: newUpdate });
            };
            var btnGrad = void 0,
                btnGrad2 = void 0,
                btnbg = void 0;
            if (undefined !== backgroundType && 'gradient' === backgroundType) {
                btnGrad = 'transparent' === containerStyles[0].containerBack || undefined === containerStyles[0].containerBack ? 'rgba(255,255,255,0)' : containerStyles[0].containerBack;
                btnGrad2 = undefined !== containerStyles[0].gradientColorTwo && undefined !== containerStyles[0].gradientColorTwo && '' !== containerStyles[0].gradientColorTwo ? containerStyles[0].gradientColorTwo : '#777';
                if ('radial' === containerStyles[0].gradientType) {
                    btnbg = "radial-gradient(at " + containerStyles[0].gradientPosition + ", " + btnGrad + " " + containerStyles[0].gradientLocationOne + "%, " + btnGrad2 + " " + containerStyles[0].gradientLocationTwo + "%)";
                } else if ('radial' !== containerStyles[0].gradientType) {
                    btnbg = "linear-gradient(" + containerStyles[0].gradientAngle + "deg, " + btnGrad + " " + containerStyles[0].gradientLocationOne + "%, " + btnGrad2 + " " + containerStyles[0].gradientLocationTwo + "%)";
                }
            } else {
                btnbg = containerStyles[0].backgroundImageURL ? "url('" + containerStyles[0].backgroundImageURL + "')" : 'none';
            }

            var mainClasses = (0, _classnames2.default)(className, "premium-testimonial");
            var authorFontSize = this.getPreviewSize(this.props.deviceType, authorStyles[0].authorSize, authorStyles[0].authorSizeTablet, authorStyles[0].authorSizeMobile);
            var authorComFontSize = this.getPreviewSize(this.props.deviceType, companyStyles[0].authorComSize, companyStyles[0].authorComSizeTablet, companyStyles[0].authorComSizeMobile);
            var testimonalFontSize = this.getPreviewSize(this.props.deviceType, contentStyle[0].bodySize, contentStyle[0].bodySizeTablet, contentStyle[0].bodySizeMobile);
            var containerPaddingTop = this.getPreviewSize(this.props.deviceType, paddingTop, paddingTTablet, paddingTMobile);
            var containerPaddingRight = this.getPreviewSize(this.props.deviceType, paddingRight, paddingRTablet, paddingRMobile);
            var containerPaddingBottom = this.getPreviewSize(this.props.deviceType, paddingLeft, paddingLTablet, paddingLMobile);
            var containerPaddingLeft = this.getPreviewSize(this.props.deviceType, paddingLeft, paddingLTablet, paddingLMobile);
            return [isSelected && React.createElement(
                BlockControls,
                { key: "controls" },
                React.createElement(AlignmentToolbar, {
                    value: align,
                    onChange: function onChange(newAlign) {
                        return setAttributes({ align: newAlign });
                    }
                })
            ), isSelected && React.createElement(
                InspectorControls,
                { key: "inspector" },
                React.createElement(
                    PanelBody,
                    {
                        title: __("Author", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: true
                    },
                    React.createElement(
                        PanelBody,
                        {
                            title: __("Image", 'premium-blocks-for-gutenberg'),
                            className: "premium-panel-body-inner",
                            initialOpen: false
                        },
                        React.createElement(
                            "p",
                            null,
                            __("Author Image", 'premium-blocks-for-gutenberg')
                        ),
                        !authorImgUrl && React.createElement(_defaultImage2.default, null),
                        React.createElement(_premiumMediaUpload2.default, {
                            type: "image",
                            imageID: authorImgId,
                            imageURL: authorImgUrl,
                            onSelectMedia: function onSelectMedia(media) {
                                setAttributes({
                                    authorImgId: media.id,
                                    authorImgUrl: media.url
                                });
                            },
                            onRemoveImage: function onRemoveImage() {
                                setAttributes({
                                    authorImgId: "",
                                    authorImgUrl: ""
                                });
                            }
                        }),
                        authorImgUrl && React.createElement(SelectControl, {
                            label: __("Image Style", 'premium-blocks-for-gutenberg'),
                            options: RADIUS,
                            value: imgRadius,
                            onChange: function onChange(newWeight) {
                                return setAttributes({ imgRadius: newWeight });
                            }
                        }),
                        authorImgUrl && React.createElement(_singleRangeControl2.default, {
                            label: __("Size", 'premium-blocks-for-gutenberg'),
                            value: imgSize,
                            max: "200",
                            onChange: function onChange(newSize) {
                                return setAttributes({ imgSize: newSize });
                            },
                            showUnit: false,
                            defaultValue: 0
                        }),
                        authorImgUrl && React.createElement(_singleRangeControl2.default, {
                            label: __("Border Width (PX)", 'premium-blocks-for-gutenberg'),
                            value: imgBorder,
                            onChange: function onChange(newSize) {
                                return setAttributes({ imgBorder: newSize });
                            },
                            showUnit: false,
                            defaultValue: 0
                        }),
                        authorImgUrl && React.createElement(_ColorComponent2.default, {
                            label: __("Border Color", 'premium-blocks-for-gutenberg'),
                            colorValue: imgBorderColor,
                            colorDefault: '',
                            onColorChange: function onColorChange(newValue) {
                                return setAttributes({ imgBorderColor: newValue });
                            }
                        })
                    ),
                    React.createElement(_radioControl2.default, {
                        choices: ['H1', 'H2', 'H3', 'H4', 'H5', 'H6'],
                        value: authorStyles[0].authorTag,
                        onChange: function onChange(newValue) {
                            return saveAuthorStyle({ authorTag: newValue });
                        },
                        label: __("Author HTML Tag", 'premium-blocks-for-gutenberg')
                    }),
                    React.createElement(_premiumTypo2.default, {
                        components: ["responsiveSize", "weight", "style", "upper", "spacing"],
                        setAttributes: saveAuthorStyle,
                        fontSizeType: {
                            value: authorStyles[0].authorSizeUnit,
                            label: __("authorSizeUnit", 'premium-blocks-for-gutenberg')
                        },
                        fontSize: authorStyles[0].authorSize,
                        fontSizeMobile: authorStyles[0].authorSizeMobile,
                        fontSizeTablet: authorStyles[0].authorSizeTablet,
                        onChangeSize: function onChangeSize(newSize) {
                            return saveAuthorStyle({ authorSize: newSize });
                        },
                        onChangeTabletSize: function onChangeTabletSize(newSize) {
                            return saveAuthorStyle({ authorSizeTablet: newSize });
                        },
                        onChangeMobileSize: function onChangeMobileSize(newSize) {
                            return saveAuthorStyle({ authorSizeMobile: newSize });
                        },
                        weight: authorStyles[0].authorWeight,
                        style: authorStyles[0].authorStyle,
                        spacing: authorStyles[0].authorLetter,
                        upper: authorStyles[0].authorUpper,
                        onChangeWeight: function onChangeWeight(newWeight) {
                            return saveAuthorStyle({ authorWeight: newWeight });
                        },
                        onChangeStyle: function onChangeStyle(newStyle) {
                            return saveAuthorStyle({ authorStyle: newStyle });
                        },
                        onChangeSpacing: function onChangeSpacing(newValue) {
                            return saveAuthorStyle({ authorLetter: newValue });
                        },
                        onChangeUpper: function onChangeUpper(check) {
                            return saveAuthorStyle({ authorUpper: check });
                        }
                    }),
                    React.createElement(_ColorComponent2.default, {
                        label: __("Color", 'premium-blocks-for-gutenberg'),
                        colorValue: authorStyles[0].authorColor,
                        colorDefault: '',
                        onColorChange: function onColorChange(newValue) {
                            return saveAuthorStyle({ authorColor: newValue });
                        }
                    })
                ),
                React.createElement(
                    PanelBody,
                    {
                        title: __("Content", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(_responsiveRangeControl2.default, {
                        label: __("Font Size", 'premium-blocks-for-gutenberg'),
                        value: contentStyle[0].bodySize,
                        onChange: function onChange(value) {
                            return saveContentStyle({ bodySize: value });
                        },
                        tabletValue: contentStyle[0].bodySizeTablet,
                        onChangeTablet: function onChangeTablet(value) {
                            return saveContentStyle({ bodySizeTablet: value });
                        },
                        mobileValue: contentStyle[0].bodySizeMobile,
                        onChangeMobile: function onChangeMobile(value) {
                            return saveContentStyle({ bodySizeMobile: value });
                        },
                        onChangeUnit: function onChangeUnit(key) {
                            return saveContentStyle({ bodySizeUnit: key });
                        },
                        unit: contentStyle[0].bodySizeUnit,
                        showUnit: true,
                        defaultValue: 20,
                        units: ["px", "em"]
                    }),
                    React.createElement(_singleRangeControl2.default, {
                        label: __("Line Height (PX)", 'premium-blocks-for-gutenberg'),
                        value: contentStyle[0].bodyLine,
                        onChange: function onChange(value) {
                            return saveContentStyle({ bodyLine: value });
                        },
                        defaultValue: 1,
                        showUnit: false,
                        min: 0,
                        max: 100
                    }),
                    React.createElement(_ColorComponent2.default, {
                        label: __("Color", 'premium-blocks-for-gutenberg'),
                        colorValue: contentStyle[0].bodyColor,
                        colorDefault: '',
                        onColorChange: function onColorChange(newValue) {
                            return saveContentStyle({ bodyColor: newValue });
                        }
                    }),
                    React.createElement(_singleRangeControl2.default, {
                        label: __("Margin Top (PX)", 'premium-blocks-for-gutenberg'),
                        value: contentStyle[0].bodyTop,
                        onChange: function onChange(newSize) {
                            return saveContentStyle({ bodyTop: newSize });
                        },
                        showUnit: false,
                        defaultValue: 0
                    }),
                    React.createElement(_singleRangeControl2.default, {
                        label: __("Margin Bottom (PX)", 'premium-blocks-for-gutenberg'),
                        value: contentStyle[0].bodyBottom,
                        onChange: function onChange(newSize) {
                            return saveContentStyle({ bodyBottom: newSize });
                        },
                        showUnit: false,
                        defaultValue: 0
                    })
                ),
                React.createElement(
                    PanelBody,
                    {
                        title: __("Company", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(_radioControl2.default, {
                        choices: ['H1', 'H2', 'H3', 'H4', 'H5', 'H6'],
                        value: authorStyles[0].authorComTag,
                        onChange: function onChange(newValue) {
                            return saveAuthorStyle({ authorComTag: newValue });
                        },
                        label: __("HTML Tag", 'premium-blocks-for-gutenberg')
                    }),
                    React.createElement(_responsiveRangeControl2.default, {
                        label: __("Font Size", 'premium-blocks-for-gutenberg'),
                        value: companyStyles[0].authorComSize,
                        onChange: function onChange(value) {
                            return saveCompanyStyle({ authorComSize: value });
                        },
                        tabletValue: companyStyles[0].authorComSizeTablet,
                        onChangeTablet: function onChangeTablet(value) {
                            return saveCompanyStyle({ authorComSizeTablet: value });
                        },
                        mobileValue: companyStyles[0].authorComSizeMobile,
                        onChangeMobile: function onChangeMobile(value) {
                            return saveCompanyStyle({ authorComSizeMobile: value });
                        },
                        onChangeUnit: function onChangeUnit(key) {
                            return saveCompanyStyle({ authorComSizeUnit: key });
                        },
                        unit: companyStyles[0].authorComSizeUnit,
                        showUnit: true,
                        defaultValue: 20,
                        units: ["px", "em"]
                    }),
                    React.createElement(_ColorComponent2.default, {
                        label: __("Text Color", 'premium-blocks-for-gutenberg'),
                        colorValue: companyStyles[0].authorComColor,
                        colorDefault: '',
                        onColorChange: function onColorChange(newValue) {
                            return saveCompanyStyle({ authorComColor: newValue });
                        }
                    }),
                    React.createElement(_ColorComponent2.default, {
                        label: __("Dash Color", 'premium-blocks-for-gutenberg'),
                        colorValue: companyStyles[0].dashColor,
                        colorDefault: '',
                        onColorChange: function onColorChange(newValue) {
                            return saveCompanyStyle({ dashColor: newValue });
                        }
                    }),
                    React.createElement(ToggleControl, {
                        label: __("URL", 'premium-blocks-for-gutenberg'),
                        checked: companyStyles[0].urlCheck,
                        onChange: function onChange(newCheck) {
                            return saveCompanyStyle({ urlCheck: newCheck });
                        }
                    }),
                    companyStyles[0].urlCheck && React.createElement(TextControl, {
                        label: __("URL", 'premium-blocks-for-gutenberg'),
                        value: companyStyles[0].urlText,
                        onChange: function onChange(newURL) {
                            return saveCompanyStyle({ urlText: newURL });
                        }
                    }),
                    companyStyles[0].urlCheck && React.createElement(ToggleControl, {
                        label: __("Open Link in a New Tab", 'premium-blocks-for-gutenberg'),
                        checked: companyStyles[0].urlTarget,
                        onChange: function onChange(newCheck) {
                            return saveCompanyStyle({ urlTarget: newCheck });
                        }
                    })
                ),
                React.createElement(
                    PanelBody,
                    {
                        title: __("Quotations", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(_singleRangeControl2.default, {
                        label: __("Size (EM)", 'premium-blocks-for-gutenberg'),
                        value: quoteStyles[0].quotSize,
                        min: "1",
                        max: "12",
                        onChange: function onChange(newSize) {
                            return saveQuoteStyles({ quotSize: newSize });
                        },
                        showUnit: false,
                        defaultValue: 0
                    }),
                    React.createElement(_ColorComponent2.default, {
                        label: __("Quotations Color", 'premium-blocks-for-gutenberg'),
                        colorValue: quoteStyles[0].quotColor,
                        colorDefault: '',
                        onColorChange: function onColorChange(newValue) {
                            return saveQuoteStyles({ quotColor: newValue });
                        }
                    }),
                    React.createElement(_singleRangeControl2.default, {
                        label: __("Opacity", 'premium-blocks-for-gutenberg'),
                        value: quoteStyles[0].quotOpacity,
                        onChange: function onChange(newValue) {
                            return saveQuoteStyles({ quotOpacity: newValue });
                        },
                        showUnit: false,
                        defaultValue: 0
                    })
                ),
                React.createElement(
                    PanelBody,
                    {
                        title: __("Container", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(_PremiumBackgroundControl2.default, {
                        setAttributes: setAttributes,
                        saveContainerStyle: saveContainerStyle,
                        backgroundType: backgroundType,
                        backgroundColor: containerStyles[0].containerBack,
                        backgroundImageID: containerStyles[0].backgroundImageID,
                        backgroundImageURL: containerStyles[0].backgroundImageURL,
                        backgroundPosition: containerStyles[0].backgroundPosition,
                        backgroundRepeat: containerStyles[0].backgroundRepeat,
                        backgroundSize: containerStyles[0].backgroundSize,
                        fixed: containerStyles[0].fixed,
                        gradientLocationOne: containerStyles[0].gradientLocationOne,
                        gradientColorTwo: containerStyles[0].gradientColorTwo,
                        gradientLocationTwo: containerStyles[0].gradientLocationTwo,
                        gradientAngle: containerStyles[0].gradientAngle,
                        gradientPosition: containerStyles[0].gradientPosition,
                        gradientType: containerStyles[0].gradientType
                    }),
                    React.createElement(_PremiumShadow2.default, {
                        boxShadow: true,
                        color: containerStyles[0].shadowColor,
                        blur: containerStyles[0].shadowBlur,
                        horizontal: containerStyles[0].shadowHorizontal,
                        vertical: containerStyles[0].shadowVertical,
                        position: containerStyles[0].shadowPosition,
                        onChangeColor: function onChangeColor(newColor) {
                            return saveContainerStyle({ shadowColor: newColor });
                        },
                        onChangeBlur: function onChangeBlur(newBlur) {
                            return saveContainerStyle({ shadowBlur: newBlur });
                        },
                        onChangehHorizontal: function onChangehHorizontal(newValue) {
                            return saveContainerStyle({ shadowHorizontal: newValue });
                        },
                        onChangeVertical: function onChangeVertical(newValue) {
                            return saveContainerStyle({ shadowVertical: newValue });
                        },
                        onChangePosition: function onChangePosition(newValue) {
                            return saveContainerStyle({ shadowPosition: newValue });
                        }
                    }),
                    React.createElement(_PremiumResponsivePadding2.default, {
                        paddingTop: paddingTop,
                        paddingRight: paddingRight,
                        paddingBottom: paddingBottom,
                        paddingLeft: paddingLeft,
                        paddingTopTablet: paddingTTablet,
                        paddingRightTablet: paddingRTablet,
                        paddingBottomTablet: paddingBTablet,
                        paddingLeftTablet: paddingLTablet,
                        paddingTopMobile: paddingTMobile,
                        paddingRightMobile: paddingRMobile,
                        paddingBottomMobile: paddingBMobile,
                        paddingLeftMobile: paddingLMobile,
                        showUnits: true,
                        selectedUnit: containerStyles[0].paddingUnit,
                        onChangePadSizeUnit: function onChangePadSizeUnit(newvalue) {
                            return saveContainerStyle({ paddingUnit: newvalue });
                        },
                        onChangePaddingTop: function onChangePaddingTop(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ paddingTop: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ paddingTTablet: newValue });
                            } else {
                                setAttributes({ paddingTMobile: newValue });
                            }
                        },
                        onChangePaddingRight: function onChangePaddingRight(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ paddingRight: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ paddingRTablet: newValue });
                            } else {
                                setAttributes({ paddingRMobile: newValue });
                            }
                        },
                        onChangePaddingBottom: function onChangePaddingBottom(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ paddingBottom: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ paddingBTablet: newValue });
                            } else {
                                setAttributes({ paddingBMobile: newValue });
                            }
                        },
                        onChangePaddingLeft: function onChangePaddingLeft(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ paddingLeft: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ paddingLTablet: newValue });
                            } else {
                                setAttributes({ paddingLMobile: newValue });
                            }
                        }
                    })
                ),
                React.createElement(_premiumResponsiveTabs2.default, {
                    Desktop: hideDesktop,
                    Tablet: hideTablet,
                    Mobile: hideMobile,
                    onChangeDesktop: function onChangeDesktop(value) {
                        return setAttributes({ hideDesktop: value ? " premium-desktop-hidden" : "" });
                    },
                    onChangeTablet: function onChangeTablet(value) {
                        return setAttributes({ hideTablet: value ? " premium-tablet-hidden" : "" });
                    },
                    onChangeMobile: function onChangeMobile(value) {
                        return setAttributes({ hideMobile: value ? " premium-mobile-hidden" : "" });
                    }
                })
            ), React.createElement(
                "div",
                {
                    id: "premium-testimonial-" + block_id,
                    className: mainClasses + "__wrap premium-testimonial-" + block_id,
                    style: {
                        boxShadow: containerStyles[0].shadowHorizontal + "px " + containerStyles[0].shadowVertical + "px " + containerStyles[0].shadowBlur + "px " + containerStyles[0].shadowColor + " " + containerStyles[0].shadowPosition,
                        backgroundColor: backgroundType === "solid" ? containerStyles[0].containerBack : 'transparent',
                        backgroundImage: btnbg,
                        backgroundRepeat: containerStyles[0].backgroundRepeat,
                        backgroundPosition: containerStyles[0].backgroundPosition,
                        backgroundSize: containerStyles[0].backgroundSize,
                        backgroundAttachment: containerStyles[0].fixed ? "fixed" : "unset",
                        paddingTop: containerPaddingTop + containerStyles[0].paddingUnit,
                        paddingBottom: containerPaddingBottom + containerStyles[0].paddingUnit,
                        paddingLeft: containerPaddingLeft + containerStyles[0].paddingUnit,
                        paddingRight: containerPaddingRight + containerStyles[0].paddingUnit
                    }
                },
                React.createElement(
                    "div",
                    { className: "premium-testimonial__container" },
                    React.createElement(
                        "span",
                        { className: "premium-testimonial__upper" },
                        React.createElement(_upperQuote2.default, {
                            size: quoteStyles[0].quotSize,
                            color: quoteStyles[0].quotColor,
                            opacity: quoteStyles[0].quotOpacity
                        })
                    ),
                    React.createElement(
                        "div",
                        {
                            className: "premium-testimonial__content",
                            style: {
                                textAlign: align
                            }
                        },
                        React.createElement(
                            "div",
                            { className: "premium-testimonial__img_wrap" },
                            authorImgUrl && React.createElement("img", {
                                className: "premium-testimonial__img",
                                src: "" + authorImgUrl,
                                alt: "Author",
                                style: {
                                    borderWidth: imgBorder + "px",
                                    borderRadius: imgRadius,
                                    borderColor: imgBorderColor,
                                    width: imgSize + "px",
                                    height: imgSize + "px"
                                }
                            }),
                            !authorImgUrl && React.createElement(_defaultImage2.default, { className: className })
                        ),
                        React.createElement(
                            "div",
                            { className: "premium-testimonial__text_wrap" },
                            React.createElement(
                                "div",
                                null,
                                React.createElement(RichText, {
                                    tagName: "p",
                                    className: "premium-testimonial__text",
                                    value: text,
                                    isSelected: false,
                                    placeholder: "Donec id elit non mi porta gravida at eget metus. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Cras mattis consectetur purus sit amet fermentum. Nullam id dolor id nibh ultricies vehicula ut id elit. Donec id elit non mi porta gravida at eget metus.",
                                    onChange: function onChange(newText) {
                                        return setAttributes({ text: newText });
                                    },
                                    style: {
                                        fontSize: "" + testimonalFontSize + contentStyle[0].bodySizeUnit,
                                        color: contentStyle[0].bodyColor,
                                        lineHeight: contentStyle[0].bodyLine + "px",
                                        marginTop: contentStyle[0].bodyTop + "px",
                                        marginBottom: contentStyle[0].bodyBottom + "px"
                                    },
                                    keepPlaceholderOnFocus: true
                                })
                            )
                        ),
                        React.createElement(
                            "div",
                            {
                                className: "premium-testimonial__info",
                                style: { justifyContent: align }
                            },
                            React.createElement(RichText, {
                                tagName: authorStyles[0].authorTag.toLowerCase(),
                                className: "premium-testimonial__author",
                                value: author,
                                isSelected: false,
                                onChange: function onChange(newText) {
                                    return setAttributes({ author: newText });
                                },
                                style: {
                                    fontSize: "" + authorFontSize + authorStyles[0].authorSizeUnit + " ",
                                    color: authorStyles[0].authorColor,
                                    letterSpacing: authorStyles[0].authorLetter + "px",
                                    textTransform: authorStyles[0].authorUpper ? "uppercase" : "none",
                                    fontStyle: authorStyles[0].authorStyle,
                                    fontWeight: authorStyles[0].authorWeight
                                }
                            }),
                            React.createElement(
                                "span",
                                {
                                    className: "premium-testimonial__sep",
                                    style: {
                                        color: companyStyles[0].dashColor
                                    }
                                },
                                "\xA0-\xA0"
                            ),
                            React.createElement(RichText, {
                                tagName: authorStyles[0].authorComTag.toLowerCase(),
                                className: "premium-testimonial__author_comp",
                                onChange: function onChange(newText) {
                                    return setAttributes({ authorCom: newText });
                                },
                                value: authorCom,
                                isSelected: false,
                                style: {
                                    color: companyStyles[0].authorComColor,
                                    fontSize: "" + authorComFontSize + companyStyles[0].authorComSizeUnit
                                }
                            })
                        )
                    ),
                    React.createElement(
                        "span",
                        { className: "premium-testimonial__lower" },
                        React.createElement(_lowerQuote2.default, {
                            size: quoteStyles[0].quotSize,
                            color: quoteStyles[0].quotColor,
                            opacity: quoteStyles[0].quotOpacity
                        })
                    )
                )
            )];
        }
    }]);

    return edit;
}(Component);

;

exports.default = withSelect(function (select, props) {
    var _select = select('core/edit-post'),
        _select$__experimenta = _select.__experimentalGetPreviewDeviceType,
        __experimentalGetPreviewDeviceType = _select$__experimenta === undefined ? null : _select$__experimenta;

    var deviceType = __experimentalGetPreviewDeviceType ? __experimentalGetPreviewDeviceType() : null;

    return {
        deviceType: deviceType
    };
})(edit);

/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classnames = __webpack_require__(0);

var _classnames2 = _interopRequireDefault(_classnames);

var _defaultImage = __webpack_require__(32);

var _defaultImage2 = _interopRequireDefault(_defaultImage);

var _upperQuote = __webpack_require__(68);

var _upperQuote2 = _interopRequireDefault(_upperQuote);

var _lowerQuote = __webpack_require__(69);

var _lowerQuote2 = _interopRequireDefault(_lowerQuote);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var RichText = wp.blockEditor.RichText;


var save = function save(props) {
    var className = props.className;
    var _props$attributes = props.attributes,
        block_id = _props$attributes.block_id,
        align = _props$attributes.align,
        authorImgId = _props$attributes.authorImgId,
        authorImgUrl = _props$attributes.authorImgUrl,
        imgRadius = _props$attributes.imgRadius,
        imgSize = _props$attributes.imgSize,
        imgBorder = _props$attributes.imgBorder,
        imgBorderColor = _props$attributes.imgBorderColor,
        author = _props$attributes.author,
        authorStyles = _props$attributes.authorStyles,
        text = _props$attributes.text,
        authorCom = _props$attributes.authorCom,
        hideDesktop = _props$attributes.hideDesktop,
        hideTablet = _props$attributes.hideTablet,
        hideMobile = _props$attributes.hideMobile,
        contentStyle = _props$attributes.contentStyle,
        companyStyles = _props$attributes.companyStyles,
        quoteStyles = _props$attributes.quoteStyles,
        containerStyles = _props$attributes.containerStyles,
        backgroundType = _props$attributes.backgroundType;


    var mainClasses = (0, _classnames2.default)(className, 'premium-testimonial');

    var btnGrad = void 0,
        btnGrad2 = void 0,
        btnbg = void 0;
    if (undefined !== backgroundType && 'gradient' === backgroundType) {
        btnGrad = 'transparent' === containerStyles[0].containerBack || undefined === containerStyles[0].containerBack ? 'rgba(255,255,255,0)' : containerStyles[0].containerBack;
        btnGrad2 = undefined !== containerStyles[0].gradientColorTwo && undefined !== containerStyles[0].gradientColorTwo && '' !== containerStyles[0].gradientColorTwo ? containerStyles[0].gradientColorTwo : '#777';
        if ('radial' === containerStyles[0].gradientType) {
            btnbg = "radial-gradient(at " + containerStyles[0].gradientPosition + ", " + btnGrad + " " + containerStyles[0].gradientLocationOne + "%, " + btnGrad2 + " " + containerStyles[0].gradientLocationTwo + "%)";
        } else if ('radial' !== containerStyles[0].gradientType) {
            btnbg = "linear-gradient(" + containerStyles[0].gradientAngle + "deg, " + btnGrad + " " + containerStyles[0].gradientLocationOne + "%, " + btnGrad2 + " " + containerStyles[0].gradientLocationTwo + "%)";
        }
    } else {
        btnbg = containerStyles[0].backgroundImageURL ? "url('" + containerStyles[0].backgroundImageURL + "')" : 'none';
    }

    return React.createElement(
        "div",
        {
            id: "premium-testimonial-" + block_id,
            className: mainClasses + "__wrap premium-testimonial-" + block_id + " " + hideDesktop + " " + hideTablet + " " + hideMobile,
            style: {
                boxShadow: containerStyles[0].shadowHorizontal + "px " + containerStyles[0].shadowVertical + "px " + containerStyles[0].shadowBlur + "px " + containerStyles[0].shadowColor + " " + containerStyles[0].shadowPosition,
                backgroundColor: backgroundType === "solid" ? containerStyles[0].containerBack : "transparent",
                backgroundImage: btnbg,
                backgroundRepeat: containerStyles[0].backgroundRepeat,
                backgroundPosition: containerStyles[0].backgroundPosition,
                backgroundSize: containerStyles[0].backgroundSize,
                backgroundAttachment: containerStyles[0].fixed ? "fixed" : "unset"
            }
        },
        React.createElement(
            "div",
            { className: "premium-testimonial__container" },
            React.createElement(
                "span",
                { className: "premium-testimonial__upper" },
                React.createElement(_upperQuote2.default, {
                    size: quoteStyles[0].quotSize,
                    color: quoteStyles[0].quotColor,
                    opacity: quoteStyles[0].quotOpacity
                })
            ),
            React.createElement(
                "div",
                {
                    className: "premium-testimonial__content",
                    style: {
                        textAlign: align
                    }
                },
                React.createElement(
                    "div",
                    { className: "premium-testimonial__img_wrap" },
                    authorImgUrl && React.createElement("img", {
                        className: "premium-testimonial__img",
                        src: "" + authorImgUrl,
                        alt: "Author",
                        style: {
                            borderWidth: imgBorder + "px",
                            borderRadius: imgRadius,
                            borderColor: imgBorderColor,
                            width: imgSize + "px",
                            height: imgSize + "px"
                        }
                    }),
                    !authorImgUrl && React.createElement(_defaultImage2.default, { className: className })
                ),
                React.createElement(
                    "div",
                    { className: "premium-testimonial__text_wrap" },
                    React.createElement(
                        "div",
                        null,
                        React.createElement(RichText.Content, {
                            tagName: "p",
                            className: "premium-testimonial__text",
                            value: text,
                            style: {
                                color: contentStyle[0].bodyColor,
                                lineHeight: contentStyle[0].bodyLine + "px",
                                marginTop: contentStyle[0].bodyTop + "px",
                                marginBottom: contentStyle[0].bodyBottom + "px"
                            }
                        })
                    )
                ),
                React.createElement(
                    "div",
                    { className: "premium-testimonial__info",
                        style: { justifyContent: align }
                    },
                    React.createElement(RichText.Content, {
                        tagName: authorStyles[0].authorTag.toLowerCase(),
                        className: "premium-testimonial__author",
                        value: author,
                        style: {
                            color: authorStyles[0].authorColor,
                            letterSpacing: authorStyles[0].authorLetter + "px",
                            textTransform: authorStyles[0].authorUpper ? "uppercase" : "none",
                            fontStyle: authorStyles[0].authorStyle,
                            fontWeight: authorStyles[0].authorWeight
                        }
                    }),
                    React.createElement(
                        "span",
                        {
                            className: "premium-testimonial__sep",
                            style: {
                                color: companyStyles[0].dashColor
                            }
                        },
                        "\xA0-\xA0"
                    ),
                    React.createElement(
                        "div",
                        { className: "premium-testimonial__link_wrap" },
                        React.createElement(RichText.Content, {
                            tagName: authorStyles[0].authorComTag.toLowerCase(),
                            className: "premium-testimonial__author_comp",
                            value: authorCom,
                            style: {
                                color: companyStyles[0].authorComColor
                            }
                        }),
                        companyStyles[0].urlCheck && React.createElement("a", {
                            rel: "noopener noreferrer",
                            href: companyStyles[0].urlText,
                            target: companyStyles[0].urlTarget ? "_blank" : ""
                        })
                    )
                )
            ),
            React.createElement(
                "span",
                { className: "premium-testimonial__lower" },
                React.createElement(_lowerQuote2.default, {
                    size: quoteStyles[0].quotSize,
                    color: quoteStyles[0].quotColor,
                    opacity: quoteStyles[0].quotOpacity
                })
            )
        )
    );
};

exports.default = save;

/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _defaultImage = __webpack_require__(32);

var _defaultImage2 = _interopRequireDefault(_defaultImage);

var _upperQuote = __webpack_require__(68);

var _upperQuote2 = _interopRequireDefault(_upperQuote);

var _lowerQuote = __webpack_require__(69);

var _lowerQuote2 = _interopRequireDefault(_lowerQuote);

var _hexToRgba = __webpack_require__(17);

var _hexToRgba2 = _interopRequireDefault(_hexToRgba);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var className = "premium-testimonial";

var RichText = wp.editor.RichText;


var attributes = {
    block_id: {
        type: "string"
    },
    classMigrate: {
        type: "boolean",
        default: false
    },
    align: {
        type: "string",
        default: "center"
    },
    authorImgId: {
        type: "string"
    },
    authorImgUrl: {
        type: "string"
    },
    imgRadius: {
        type: "string",
        default: "50%"
    },
    imgSize: {
        type: "number"
    },
    imgBorder: {
        type: "number",
        default: "1"
    },
    imgBorderColor: {
        type: "string"
    },
    author: {
        type: "array",
        source: "children",
        selector: ".premium-testimonial__author",
        default: "John Doe"
    },
    authorTag: {
        type: "string",
        default: "H3"
    },
    authorColor: {
        type: "string"
    },
    authorSize: {
        type: "number"
    },
    authorSizeUnit: {
        type: 'string',
        default: 'px'
    },
    authorSizeMobile: {
        type: "number"
    },
    authorSizeTablet: {
        type: "number"
    },
    authorLetter: {
        type: "number"
    },
    authorStyle: {
        type: "string"
    },
    authorUpper: {
        type: "boolean"
    },
    authorWeight: {
        type: "number",
        default: 500
    },
    authorComTag: {
        type: "string",
        default: "H4"
    },
    text: {
        type: "array",
        source: "children",
        selector: ".premium-testimonial__text"
    },
    authorCom: {
        type: "array",
        source: "children",
        selector: ".premium-testimonial__author_comp",
        default: "Leap13"
    },
    authorComColor: {
        type: "string"
    },
    authorComSize: {
        type: "number"
    },
    authorComSizeUnit: {
        type: "string",
        default: 'px'
    },
    authorComSizeMobile: {
        type: 'number'
    },
    authorComSizeTablet: {
        type: 'number'
    },
    urlCheck: {
        type: "boolean",
        default: false
    },
    urlText: {
        type: "string"
    },
    urlTarget: {
        type: "boolean",
        default: false
    },
    quotSize: {
        type: "number"
    },
    quotColor: {
        type: "string"
    },
    quotOpacity: {
        type: "number"
    },
    bodyColor: {
        type: "string"
    },
    bodySize: {
        type: "number"
    },
    bodySizeUnit: {
        type: "string",
        default: 'px'
    },
    bodySizeMobile: {
        type: "number"
    },
    bodySizeTablet: {
        type: "string"
    },
    bodyLine: {
        type: "number"
    },
    bodyTop: {
        type: "number"
    },
    bodyBottom: {
        type: "number"
    },
    dashColor: {
        type: "string"
    },
    shadowColor: {
        type: "string"
    },
    shadowBlur: {
        type: "number"
    },
    shadowHorizontal: {
        type: "number"
    },
    shadowVertical: {
        type: "number"
    },
    shadowPosition: {
        type: "string"
    },
    backColor: {
        type: "string"
    },
    backOpacity: {
        type: "number",
        default: "1"
    },
    imageID: {
        type: "string"
    },
    imageURL: {
        type: "string"
    },
    backgroundRepeat: {
        type: "string",
        default: "no-repeat"
    },
    backgroundPosition: {
        type: "string",
        default: "top center"
    },
    backgroundSize: {
        type: "string",
        default: "auto"
    },
    fixed: {
        type: "boolean",
        default: false
    },
    paddingTop: {
        type: "number"
    },
    paddingRight: {
        type: "number"
    },
    paddingBottom: {
        type: "number"
    },
    paddingLeft: {
        type: "number"
    },
    paddingUnit: {
        type: "string",
        default: "px"
    },
    hideDesktop: {
        type: 'boolean',
        default: false
    },
    hideTablet: {
        type: 'boolean',
        default: false
    },
    hideMobile: {
        type: 'boolean',
        default: false
    }
};

var deprecatedContent = [{
    attributes: attributes,
    migrate: function migrate(attributes) {
        var newAttributes = {
            authorStyles: [{
                authorTag: attributes.authorTag,
                authorColor: attributes.authorColor,
                authorSize: attributes.authorSize,
                authorSizeUnit: attributes.authorSizeUnit,
                authorSizeMobile: attributes.authorSizeMobile,
                authorSizeTablet: attributes.authorSizeTablet,
                authorLetter: attributes.authorLetter,
                authorStyle: attributes.authorStyle,
                authorUpper: attributes.authorUpper,
                authorWeight: attributes.authorWeight,
                authorComTag: attributes.authorComTag
            }],
            contentStyle: [{
                bodySizeUnit: attributes.bodySizeUnit,
                bodySize: attributes.bodySize,
                bodySizeMobile: attributes.bodySizeMobile,
                bodySizeTablet: attributes.bodySizeTablet,
                bodyColor: attributes.bodyColor,
                bodyLine: attributes.bodyLine,
                bodyTop: attributes.bodyTop,
                bodyBottom: attributes.bodyBottom
            }],
            companyStyles: [{
                authorComTag: attributes.authorComTag,
                authorComSizeUnit: attributes.authorComSizeUnit,
                authorComColor: attributes.authorComColor,
                authorComSize: attributes.authorComSize,
                authorComSizeMobile: attributes.authorComSizeMobile,
                authorComSizeTablet: attributes.authorComSizeTablet,
                dashColor: attributes.dashColor,
                urlCheck: attributes.urlCheck,
                urlText: attributes.urlText,
                urlTarget: attributes.urlTarget
            }],
            quoteStyles: [{
                quotSize: attributes.quotSize,
                quotColor: attributes.quotColor,
                quotOpacity: attributes.quotOpacity

            }],
            containerStyles: [{
                backOpacity: attributes.backOpacity,
                containerBack: attributes.backColor,
                backgroundImageID: attributes.imageID,
                backgroundImageURL: attributes.imageURL,
                backgroundRepeat: attributes.backgroundRepeat,
                backgroundPosition: attributes.backgroundPosition,
                backgroundSize: attributes.backgroundSize,
                fixed: attributes.fixed,
                shadowColor: attributes.shadowColor,
                shadowBlur: attributes.shadowBlur,
                shadowHorizontal: attributes.shadowHorizontal,
                shadowVertical: attributes.shadowVertical,
                shadowPosition: attributes.shadowPosition,
                paddingUnit: attributes.paddingUnit,
                gradientColorOne: '',
                gradientLocationOne: '0',
                gradientColorTwo: '',
                gradientLocationTwo: '100',
                gradientType: 'linear',
                gradientAngle: '180',
                gradientPosition: 'center center'
            }],
            backgroundType: 'solid',
            paddingTTablet: '',
            paddingRTablet: '',
            paddingBTablet: '',
            paddingLTablet: '',
            paddingTMobile: '',
            paddingRMobile: '',
            paddingBMobile: '',
            paddingLMobile: ''
        };
        return Object.assign(attributes, newAttributes);
    },
    save: function save(props) {
        var _props$attributes = props.attributes,
            block_id = _props$attributes.block_id,
            align = _props$attributes.align,
            authorImgUrl = _props$attributes.authorImgUrl,
            imgRadius = _props$attributes.imgRadius,
            imgBorder = _props$attributes.imgBorder,
            imgBorderColor = _props$attributes.imgBorderColor,
            imgSize = _props$attributes.imgSize,
            text = _props$attributes.text,
            authorTag = _props$attributes.authorTag,
            authorColor = _props$attributes.authorColor,
            authorLetter = _props$attributes.authorLetter,
            authorStyle = _props$attributes.authorStyle,
            authorUpper = _props$attributes.authorUpper,
            authorWeight = _props$attributes.authorWeight,
            author = _props$attributes.author,
            authorComTag = _props$attributes.authorComTag,
            authorComColor = _props$attributes.authorComColor,
            authorCom = _props$attributes.authorCom,
            quotSize = _props$attributes.quotSize,
            quotColor = _props$attributes.quotColor,
            quotOpacity = _props$attributes.quotOpacity,
            bodyColor = _props$attributes.bodyColor,
            bodyLine = _props$attributes.bodyLine,
            bodyTop = _props$attributes.bodyTop,
            bodyBottom = _props$attributes.bodyBottom,
            dashColor = _props$attributes.dashColor,
            urlCheck = _props$attributes.urlCheck,
            urlText = _props$attributes.urlText,
            urlTarget = _props$attributes.urlTarget,
            shadowBlur = _props$attributes.shadowBlur,
            shadowColor = _props$attributes.shadowColor,
            shadowHorizontal = _props$attributes.shadowHorizontal,
            shadowVertical = _props$attributes.shadowVertical,
            shadowPosition = _props$attributes.shadowPosition,
            backColor = _props$attributes.backColor,
            backOpacity = _props$attributes.backOpacity,
            imageURL = _props$attributes.imageURL,
            fixed = _props$attributes.fixed,
            backgroundRepeat = _props$attributes.backgroundRepeat,
            backgroundPosition = _props$attributes.backgroundPosition,
            backgroundSize = _props$attributes.backgroundSize,
            paddingTop = _props$attributes.paddingTop,
            paddingRight = _props$attributes.paddingRight,
            paddingBottom = _props$attributes.paddingBottom,
            paddingLeft = _props$attributes.paddingLeft,
            paddingUnit = _props$attributes.paddingUnit,
            hideDesktop = _props$attributes.hideDesktop,
            hideTablet = _props$attributes.hideTablet,
            hideMobile = _props$attributes.hideMobile;


        return React.createElement(
            "div",
            {
                id: "premium-testimonial-" + block_id,
                className: className + "__wrap premium-testimonial-" + block_id + " " + hideDesktop + " " + hideTablet + " " + hideMobile,
                style: {
                    boxShadow: shadowHorizontal + "px " + shadowVertical + "px " + shadowBlur + "px " + shadowColor + " " + shadowPosition,
                    backgroundColor: backColor ? (0, _hexToRgba2.default)(backColor, backOpacity) : "transparent",
                    backgroundImage: "url('" + imageURL + "')",
                    backgroundRepeat: backgroundRepeat,
                    backgroundPosition: backgroundPosition,
                    backgroundSize: backgroundSize,
                    backgroundAttachment: fixed ? "fixed" : "unset",
                    paddingTop: paddingTop + paddingUnit,
                    paddingBottom: paddingBottom + paddingUnit,
                    paddingLeft: paddingLeft + paddingUnit,
                    paddingRight: paddingRight + paddingUnit
                }
            },
            React.createElement(
                "div",
                { className: "premium-testimonial__container" },
                React.createElement(
                    "span",
                    { className: "premium-testimonial__upper" },
                    React.createElement(_upperQuote2.default, {
                        size: quotSize,
                        color: quotColor,
                        opacity: quotOpacity
                    })
                ),
                React.createElement(
                    "div",
                    {
                        className: "premium-testimonial__content",
                        style: {
                            textAlign: align
                        }
                    },
                    React.createElement(
                        "div",
                        { className: "premium-testimonial__img_wrap" },
                        authorImgUrl && React.createElement("img", {
                            className: "premium-testimonial__img",
                            src: "" + authorImgUrl,
                            alt: "Author",
                            style: {
                                borderWidth: imgBorder + "px",
                                borderRadius: imgRadius,
                                borderColor: imgBorderColor,
                                width: imgSize + "px",
                                height: imgSize + "px"
                            }
                        }),
                        !authorImgUrl && React.createElement(_defaultImage2.default, { className: className })
                    ),
                    React.createElement(
                        "div",
                        { className: "premium-testimonial__text_wrap" },
                        React.createElement(
                            "div",
                            null,
                            React.createElement(RichText.Content, {
                                tagName: "p",
                                className: "premium-testimonial__text",
                                value: text,
                                style: {
                                    color: bodyColor,
                                    lineHeight: bodyLine + "px",
                                    marginTop: bodyTop + "px",
                                    marginBottom: bodyBottom + "px"
                                }
                            })
                        )
                    ),
                    React.createElement(
                        "div",
                        { className: "premium-testimonial__info" },
                        React.createElement(RichText.Content, {
                            tagName: authorTag.toLowerCase(),
                            className: "premium-testimonial__author",
                            value: author,
                            style: {
                                color: authorColor,
                                letterSpacing: authorLetter + "px",
                                textTransform: authorUpper ? "uppercase" : "none",
                                fontStyle: authorStyle,
                                fontWeight: authorWeight
                            }
                        }),
                        React.createElement(
                            "span",
                            {
                                className: "premium-testimonial__sep",
                                style: {
                                    color: dashColor
                                }
                            },
                            "\xA0-\xA0"
                        ),
                        React.createElement(
                            "div",
                            { className: "premium-testimonial__link_wrap" },
                            React.createElement(RichText.Content, {
                                tagName: authorComTag.toLowerCase(),
                                className: "premium-testimonial__author_comp",
                                value: authorCom,
                                style: {
                                    color: authorComColor
                                }
                            }),
                            urlCheck && React.createElement("a", {
                                rel: "noopener noreferrer",
                                href: urlText,
                                target: urlTarget ? "_blank" : ""
                            })
                        )
                    )
                ),
                React.createElement(
                    "span",
                    { className: "premium-testimonial__lower" },
                    React.createElement(_lowerQuote2.default, {
                        color: quotColor,
                        size: quotSize,
                        opacity: quotOpacity
                    })
                )
            )
        );
    }
}, {
    attributes: attributes,
    migrate: function migrate(attributes) {
        var newAttributes = {
            classMigrate: false,
            block_id: '',
            bodySizeUnit: 'px',
            bodySizeTablet: '',
            bodySizeMobile: '',
            authorSizeUnit: 'px',
            authorComSizeTablet: '',
            authorSizeTablet: '',
            authorSizeMobile: '',
            authorComSizeMobile: '',
            authorComSizeUnit: 'px',
            backOpacity: ""
        };
        return Object.assign(attributes, newAttributes);
    },
    save: function save(props) {
        var _props$attributes2 = props.attributes,
            align = _props$attributes2.align,
            authorImgUrl = _props$attributes2.authorImgUrl,
            imgRadius = _props$attributes2.imgRadius,
            imgBorder = _props$attributes2.imgBorder,
            imgBorderColor = _props$attributes2.imgBorderColor,
            imgSize = _props$attributes2.imgSize,
            text = _props$attributes2.text,
            authorTag = _props$attributes2.authorTag,
            authorColor = _props$attributes2.authorColor,
            authorSize = _props$attributes2.authorSize,
            authorLetter = _props$attributes2.authorLetter,
            authorStyle = _props$attributes2.authorStyle,
            authorUpper = _props$attributes2.authorUpper,
            authorWeight = _props$attributes2.authorWeight,
            author = _props$attributes2.author,
            authorComTag = _props$attributes2.authorComTag,
            authorComColor = _props$attributes2.authorComColor,
            authorComSize = _props$attributes2.authorComSize,
            authorCom = _props$attributes2.authorCom,
            quotSize = _props$attributes2.quotSize,
            quotColor = _props$attributes2.quotColor,
            quotOpacity = _props$attributes2.quotOpacity,
            bodyColor = _props$attributes2.bodyColor,
            bodySize = _props$attributes2.bodySize,
            bodyLine = _props$attributes2.bodyLine,
            bodyTop = _props$attributes2.bodyTop,
            bodyBottom = _props$attributes2.bodyBottom,
            dashColor = _props$attributes2.dashColor,
            urlCheck = _props$attributes2.urlCheck,
            urlText = _props$attributes2.urlText,
            urlTarget = _props$attributes2.urlTarget,
            shadowBlur = _props$attributes2.shadowBlur,
            shadowColor = _props$attributes2.shadowColor,
            shadowHorizontal = _props$attributes2.shadowHorizontal,
            shadowVertical = _props$attributes2.shadowVertical,
            shadowPosition = _props$attributes2.shadowPosition,
            backColor = _props$attributes2.backColor,
            imageURL = _props$attributes2.imageURL,
            fixed = _props$attributes2.fixed,
            backgroundRepeat = _props$attributes2.backgroundRepeat,
            backgroundPosition = _props$attributes2.backgroundPosition,
            backgroundSize = _props$attributes2.backgroundSize,
            paddingTop = _props$attributes2.paddingTop,
            paddingRight = _props$attributes2.paddingRight,
            paddingBottom = _props$attributes2.paddingBottom,
            paddingLeft = _props$attributes2.paddingLeft,
            paddingUnit = _props$attributes2.paddingUnit;


        return React.createElement(
            "div",
            {
                className: className + "__wrap",
                style: {
                    boxShadow: shadowHorizontal + "px " + shadowVertical + "px " + shadowBlur + "px " + shadowColor + " " + shadowPosition,
                    backgroundColor: backColor,
                    backgroundImage: "url('" + imageURL + "')",
                    backgroundRepeat: backgroundRepeat,
                    backgroundPosition: backgroundPosition,
                    backgroundSize: backgroundSize,
                    backgroundAttachment: fixed ? "fixed" : "unset",
                    paddingTop: paddingTop + paddingUnit,
                    paddingBottom: paddingBottom + paddingUnit,
                    paddingLeft: paddingLeft + paddingUnit,
                    paddingRight: paddingRight + paddingUnit
                }
            },
            React.createElement(
                "div",
                { className: "premium-testimonial__container" },
                React.createElement(
                    "span",
                    { className: "premium-testimonial__upper" },
                    React.createElement(_upperQuote2.default, {
                        size: quotSize,
                        color: quotColor,
                        opacity: quotOpacity
                    })
                ),
                React.createElement(
                    "div",
                    {
                        className: "premium-testimonial__content",
                        style: {
                            textAlign: align
                        }
                    },
                    React.createElement(
                        "div",
                        { className: "premium-testimonial__img_wrap" },
                        authorImgUrl && React.createElement("img", {
                            className: "premium-testimonial__img",
                            src: "" + authorImgUrl,
                            alt: "Author",
                            style: {
                                borderWidth: imgBorder + "px",
                                borderRadius: imgRadius,
                                borderColor: imgBorderColor,
                                width: imgSize + "px",
                                height: imgSize + "px"
                            }
                        }),
                        !authorImgUrl && React.createElement(_defaultImage2.default, { className: className })
                    ),
                    React.createElement(
                        "div",
                        { className: "premium-testimonial__text_wrap" },
                        React.createElement(
                            "div",
                            null,
                            React.createElement(RichText.Content, {
                                tagName: "p",
                                className: "premium-testimonial__text",
                                value: text,
                                style: {
                                    color: bodyColor,
                                    fontSize: bodySize + "px",
                                    lineHeight: bodyLine + "px",
                                    marginTop: bodyTop + "px",
                                    marginBottom: bodyBottom + "px"
                                }
                            })
                        )
                    ),
                    React.createElement(
                        "div",
                        { className: "premium-testimonial__info" },
                        React.createElement(RichText.Content, {
                            tagName: authorTag.toLowerCase(),
                            className: "premium-testimonial__author",
                            value: author,
                            style: {
                                color: authorColor,
                                fontSize: authorSize + "px",
                                letterSpacing: authorLetter + "px",
                                textTransform: authorUpper ? "uppercase" : "none",
                                fontStyle: authorStyle,
                                fontWeight: authorWeight
                            }
                        }),
                        React.createElement(
                            "span",
                            {
                                className: "premium-testimonial__sep",
                                style: {
                                    color: dashColor
                                }
                            },
                            "\xA0-\xA0"
                        ),
                        React.createElement(
                            "div",
                            {
                                className: "premium-testimonial__link_wrap"
                            },
                            React.createElement(RichText.Content, {
                                tagName: authorComTag.toLowerCase(),
                                className: "premium-testimonial__author_comp",
                                value: authorCom,
                                style: {
                                    color: authorComColor,
                                    fontSize: authorComSize + "px"
                                }
                            }),
                            urlCheck && React.createElement("a", {
                                rel: "noopener noreferrer",
                                href: urlText,
                                target: urlTarget ? "_blank" : ""
                            })
                        )
                    )
                ),
                React.createElement(
                    "span",
                    { className: "premium-testimonial__lower" },
                    React.createElement(_lowerQuote2.default, {
                        color: quotColor,
                        size: quotSize,
                        opacity: quotOpacity
                    })
                )
            )
        );
    }
}, {
    attributes: attributes,
    migrate: function migrate(attributes) {
        var newAttributes = {
            paddingTop: "",
            paddingRight: "",
            paddingBottom: "",
            paddingLeft: "",
            paddingUnit: "px"
        };
        return Object.assign(attributes, newAttributes);
    },
    save: function save(props) {
        var _props$attributes3 = props.attributes,
            align = _props$attributes3.align,
            authorImgUrl = _props$attributes3.authorImgUrl,
            imgRadius = _props$attributes3.imgRadius,
            imgBorder = _props$attributes3.imgBorder,
            imgBorderColor = _props$attributes3.imgBorderColor,
            imgSize = _props$attributes3.imgSize,
            text = _props$attributes3.text,
            authorTag = _props$attributes3.authorTag,
            authorColor = _props$attributes3.authorColor,
            authorSize = _props$attributes3.authorSize,
            authorLetter = _props$attributes3.authorLetter,
            authorStyle = _props$attributes3.authorStyle,
            authorUpper = _props$attributes3.authorUpper,
            authorWeight = _props$attributes3.authorWeight,
            author = _props$attributes3.author,
            authorComTag = _props$attributes3.authorComTag,
            authorComColor = _props$attributes3.authorComColor,
            authorComSize = _props$attributes3.authorComSize,
            authorCom = _props$attributes3.authorCom,
            quotSize = _props$attributes3.quotSize,
            quotColor = _props$attributes3.quotColor,
            quotOpacity = _props$attributes3.quotOpacity,
            bodyColor = _props$attributes3.bodyColor,
            bodySize = _props$attributes3.bodySize,
            bodyLine = _props$attributes3.bodyLine,
            bodyTop = _props$attributes3.bodyTop,
            bodyBottom = _props$attributes3.bodyBottom,
            dashColor = _props$attributes3.dashColor,
            urlCheck = _props$attributes3.urlCheck,
            urlText = _props$attributes3.urlText,
            urlTarget = _props$attributes3.urlTarget,
            shadowBlur = _props$attributes3.shadowBlur,
            shadowColor = _props$attributes3.shadowColor,
            shadowHorizontal = _props$attributes3.shadowHorizontal,
            shadowVertical = _props$attributes3.shadowVertical,
            shadowPosition = _props$attributes3.shadowPosition,
            backColor = _props$attributes3.backColor,
            imageURL = _props$attributes3.imageURL,
            fixed = _props$attributes3.fixed,
            backgroundRepeat = _props$attributes3.backgroundRepeat,
            backgroundPosition = _props$attributes3.backgroundPosition,
            backgroundSize = _props$attributes3.backgroundSize;


        return React.createElement(
            "div",
            {
                className: className + "__wrap",
                style: {
                    boxShadow: shadowHorizontal + "px " + shadowVertical + "px " + shadowBlur + "px " + shadowColor + " " + shadowPosition,
                    backgroundColor: backColor,
                    backgroundImage: "url('" + imageURL + "')",
                    backgroundRepeat: backgroundRepeat,
                    backgroundPosition: backgroundPosition,
                    backgroundSize: backgroundSize,
                    backgroundAttachment: fixed ? "fixed" : "unset"
                }
            },
            React.createElement(
                "div",
                { className: className + "__container" },
                React.createElement(
                    "span",
                    { className: className + "__upper" },
                    React.createElement(_upperQuote2.default, {
                        size: quotSize,
                        color: quotColor,
                        opacity: quotOpacity
                    })
                ),
                React.createElement(
                    "div",
                    {
                        className: className + "__content",
                        style: {
                            textAlign: align
                        }
                    },
                    React.createElement(
                        "div",
                        { className: className + "__img_wrap" },
                        authorImgUrl && React.createElement("img", {
                            className: className + "__img",
                            src: "" + authorImgUrl,
                            alt: "Author",
                            style: {
                                borderWidth: imgBorder + "px",
                                borderRadius: imgRadius,
                                borderColor: imgBorderColor,
                                width: imgSize + "px",
                                height: imgSize + "px"
                            }
                        }),
                        !authorImgUrl && React.createElement(_defaultImage2.default, { className: className })
                    ),
                    React.createElement(
                        "div",
                        { className: className + "__text_wrap" },
                        React.createElement(
                            "div",
                            null,
                            React.createElement(RichText.Content, {
                                tagName: "p",
                                className: className + "__text",
                                value: text,
                                style: {
                                    color: bodyColor,
                                    fontSize: bodySize + "px",
                                    lineHeight: bodyLine + "px",
                                    marginTop: bodyTop + "px",
                                    marginBottom: bodyBottom + "px"
                                }
                            })
                        )
                    ),
                    React.createElement(
                        "div",
                        { className: className + "__info" },
                        React.createElement(RichText.Content, {
                            tagName: authorTag.toLowerCase(),
                            className: className + "__author",
                            value: author,
                            style: {
                                color: authorColor,
                                fontSize: authorSize + "px",
                                letterSpacing: authorLetter + "px",
                                textTransform: authorUpper ? "uppercase" : "none",
                                fontStyle: authorStyle,
                                fontWeight: authorWeight
                            }
                        }),
                        React.createElement(
                            "span",
                            {
                                className: className + "__sep",
                                style: {
                                    color: dashColor
                                }
                            },
                            "\xA0-\xA0"
                        ),
                        React.createElement(
                            "div",
                            { className: className + "__link_wrap" },
                            React.createElement(RichText.Content, {
                                tagName: authorComTag.toLowerCase(),
                                className: className + "__author_comp",
                                value: authorCom,
                                style: {
                                    color: authorComColor,
                                    fontSize: authorComSize + "px"
                                }
                            }),
                            urlCheck && React.createElement("a", {
                                rel: "noopener noreferrer",
                                href: urlText,
                                target: urlTarget ? "_blank" : ""
                            })
                        )
                    )
                ),
                React.createElement(
                    "span",
                    { className: className + "__lower" },
                    React.createElement(_lowerQuote2.default, {
                        color: quotColor,
                        size: quotSize,
                        opacity: quotOpacity
                    })
                )
            )
        );
    }
}, {
    attributes: attributes,
    migrate: function migrate(attributes) {
        var newAttributes = {
            backColor: "",
            imageID: "",
            imageURL: "",
            fixed: false,
            backgroundRepeat: "no-repeat",
            backgroundPosition: "top center",
            backgroundSize: "auto"
        };
        return Object.assign(attributes, newAttributes);
    },
    save: function save(props) {
        var _props$attributes4 = props.attributes,
            align = _props$attributes4.align,
            authorImgUrl = _props$attributes4.authorImgUrl,
            imgRadius = _props$attributes4.imgRadius,
            imgBorder = _props$attributes4.imgBorder,
            imgBorderColor = _props$attributes4.imgBorderColor,
            imgSize = _props$attributes4.imgSize,
            text = _props$attributes4.text,
            authorTag = _props$attributes4.authorTag,
            authorColor = _props$attributes4.authorColor,
            authorSize = _props$attributes4.authorSize,
            authorLetter = _props$attributes4.authorLetter,
            authorStyle = _props$attributes4.authorStyle,
            authorUpper = _props$attributes4.authorUpper,
            authorWeight = _props$attributes4.authorWeight,
            author = _props$attributes4.author,
            authorComTag = _props$attributes4.authorComTag,
            authorComColor = _props$attributes4.authorComColor,
            authorComSize = _props$attributes4.authorComSize,
            authorCom = _props$attributes4.authorCom,
            quotSize = _props$attributes4.quotSize,
            quotColor = _props$attributes4.quotColor,
            quotOpacity = _props$attributes4.quotOpacity,
            bodyColor = _props$attributes4.bodyColor,
            bodySize = _props$attributes4.bodySize,
            bodyLine = _props$attributes4.bodyLine,
            bodyTop = _props$attributes4.bodyTop,
            bodyBottom = _props$attributes4.bodyBottom,
            dashColor = _props$attributes4.dashColor,
            urlCheck = _props$attributes4.urlCheck,
            urlText = _props$attributes4.urlText,
            urlTarget = _props$attributes4.urlTarget,
            shadowBlur = _props$attributes4.shadowBlur,
            shadowColor = _props$attributes4.shadowColor,
            shadowHorizontal = _props$attributes4.shadowHorizontal,
            shadowVertical = _props$attributes4.shadowVertical,
            shadowPosition = _props$attributes4.shadowPosition;


        return React.createElement(
            "div",
            {
                className: className + "__wrap",
                style: {
                    boxShadow: shadowHorizontal + "px " + shadowVertical + "px " + shadowBlur + "px " + shadowColor + " " + shadowPosition
                }
            },
            React.createElement(
                "div",
                { className: className + "__container" },
                React.createElement(
                    "span",
                    { className: className + "__upper" },
                    React.createElement(_upperQuote2.default, {
                        size: quotSize,
                        color: quotColor,
                        opacity: quotOpacity
                    })
                ),
                React.createElement(
                    "div",
                    {
                        className: className + "__content",
                        style: {
                            textAlign: align
                        }
                    },
                    React.createElement(
                        "div",
                        { className: className + "__img_wrap" },
                        authorImgUrl && React.createElement("img", {
                            className: className + "__img",
                            src: "" + authorImgUrl,
                            alt: "Author",
                            style: {
                                borderWidth: imgBorder + "px",
                                borderRadius: imgRadius,
                                borderColor: imgBorderColor,
                                width: imgSize + "px",
                                height: imgSize + "px"
                            }
                        }),
                        !authorImgUrl && React.createElement(_defaultImage2.default, { className: className })
                    ),
                    React.createElement(
                        "div",
                        { className: className + "__text_wrap" },
                        React.createElement(
                            "div",
                            null,
                            React.createElement(RichText.Content, {
                                tagName: "p",
                                className: className + "__text",
                                value: text,
                                style: {
                                    color: bodyColor,
                                    fontSize: bodySize + "px",
                                    lineHeight: bodyLine + "px",
                                    marginTop: bodyTop + "px",
                                    marginBottom: bodyBottom + "px"
                                }
                            })
                        )
                    ),
                    React.createElement(
                        "div",
                        { className: className + "__info" },
                        React.createElement(RichText.Content, {
                            tagName: authorTag.toLowerCase(),
                            className: className + "__author",
                            value: author,
                            style: {
                                color: authorColor,
                                fontSize: authorSize + "px",
                                letterSpacing: authorLetter + "px",
                                textTransform: authorUpper ? "uppercase" : "none",
                                fontStyle: authorStyle,
                                fontWeight: authorWeight
                            }
                        }),
                        React.createElement(
                            "span",
                            {
                                className: className + "__sep",
                                style: {
                                    color: dashColor
                                }
                            },
                            "\xA0-\xA0"
                        ),
                        React.createElement(
                            "div",
                            { className: className + "__link_wrap" },
                            React.createElement(RichText.Content, {
                                tagName: authorComTag.toLowerCase(),
                                className: className + "__author_comp",
                                value: authorCom,
                                style: {
                                    color: authorComColor,
                                    fontSize: authorComSize + "px"
                                }
                            }),
                            urlCheck && React.createElement("a", {
                                href: urlText,
                                target: urlTarget ? "_blank" : ""
                            })
                        )
                    )
                ),
                React.createElement(
                    "span",
                    { className: className + "__lower" },
                    React.createElement(_lowerQuote2.default, {
                        color: quotColor,
                        size: quotSize,
                        opacity: quotOpacity
                    })
                )
            )
        );
    }
}, {
    attributes: attributes,
    migrate: function migrate(attributes) {
        var newAttributes = {
            shadowColor: "",
            shadowBlur: "",
            shadowHorizontal: "",
            shadowVertical: "",
            shadowPosition: ""
        };
        return Object.assign(attributes, newAttributes);
    },
    save: function save(props) {
        var _props$attributes5 = props.attributes,
            align = _props$attributes5.align,
            authorImgUrl = _props$attributes5.authorImgUrl,
            imgRadius = _props$attributes5.imgRadius,
            imgBorder = _props$attributes5.imgBorder,
            imgBorderColor = _props$attributes5.imgBorderColor,
            imgSize = _props$attributes5.imgSize,
            text = _props$attributes5.text,
            authorTag = _props$attributes5.authorTag,
            authorColor = _props$attributes5.authorColor,
            authorSize = _props$attributes5.authorSize,
            authorLetter = _props$attributes5.authorLetter,
            authorStyle = _props$attributes5.authorStyle,
            authorUpper = _props$attributes5.authorUpper,
            authorWeight = _props$attributes5.authorWeight,
            author = _props$attributes5.author,
            authorComTag = _props$attributes5.authorComTag,
            authorComColor = _props$attributes5.authorComColor,
            authorComSize = _props$attributes5.authorComSize,
            authorCom = _props$attributes5.authorCom,
            quotSize = _props$attributes5.quotSize,
            quotColor = _props$attributes5.quotColor,
            quotOpacity = _props$attributes5.quotOpacity,
            bodyColor = _props$attributes5.bodyColor,
            bodySize = _props$attributes5.bodySize,
            bodyLine = _props$attributes5.bodyLine,
            bodyTop = _props$attributes5.bodyTop,
            bodyBottom = _props$attributes5.bodyBottom,
            dashColor = _props$attributes5.dashColor,
            urlCheck = _props$attributes5.urlCheck,
            urlText = _props$attributes5.urlText,
            urlTarget = _props$attributes5.urlTarget;


        return React.createElement(
            "div",
            { className: className + "__wrap" },
            React.createElement(
                "div",
                { className: className + "__container" },
                React.createElement(
                    "span",
                    { className: className + "__upper" },
                    React.createElement(_upperQuote2.default, {
                        size: quotSize,
                        color: quotColor,
                        opacity: quotOpacity
                    })
                ),
                React.createElement(
                    "div",
                    {
                        className: className + "__content",
                        style: {
                            textAlign: align
                        }
                    },
                    React.createElement(
                        "div",
                        { className: className + "__img_wrap" },
                        authorImgUrl && React.createElement("img", {
                            className: className + "__img",
                            src: "" + authorImgUrl,
                            alt: "Author",
                            style: {
                                borderWidth: imgBorder + "px",
                                borderRadius: imgRadius,
                                borderColor: imgBorderColor,
                                width: imgSize + "px",
                                height: imgSize + "px"
                            }
                        }),
                        !authorImgUrl && React.createElement(_defaultImage2.default, { className: className })
                    ),
                    React.createElement(
                        "div",
                        { className: className + "__text_wrap" },
                        React.createElement(
                            "div",
                            null,
                            React.createElement(RichText.Content, {
                                tagName: "p",
                                className: className + "__text",
                                value: text,
                                style: {
                                    color: bodyColor,
                                    fontSize: bodySize + "px",
                                    lineHeight: bodyLine + "px",
                                    marginTop: bodyTop + "px",
                                    marginBottom: bodyBottom + "px"
                                }
                            })
                        )
                    ),
                    React.createElement(
                        "div",
                        { className: className + "__info" },
                        React.createElement(RichText.Content, {
                            tagName: authorTag.toLowerCase(),
                            className: className + "__author",
                            value: author,
                            style: {
                                color: authorColor,
                                fontSize: authorSize + "px",
                                letterSpacing: authorLetter + "px",
                                textTransform: authorUpper ? "uppercase" : "none",
                                fontStyle: authorStyle,
                                fontWeight: authorWeight
                            }
                        }),
                        React.createElement(
                            "span",
                            {
                                className: className + "__sep",
                                style: {
                                    color: dashColor
                                }
                            },
                            "\xA0-\xA0"
                        ),
                        React.createElement(
                            "div",
                            { className: className + "__link_wrap" },
                            React.createElement(RichText.Content, {
                                tagName: authorComTag.toLowerCase(),
                                className: className + "__author_comp",
                                value: authorCom,
                                style: {
                                    color: authorComColor,
                                    fontSize: authorComSize + "px"
                                }
                            }),
                            urlCheck && React.createElement("a", {
                                href: urlText,
                                target: urlTarget ? "_blank" : ""
                            })
                        )
                    )
                ),
                React.createElement(
                    "span",
                    { className: className + "__lower" },
                    React.createElement(_lowerQuote2.default, {
                        color: quotColor,
                        size: quotSize,
                        opacity: quotOpacity
                    })
                )
            )
        );
    }
}, {
    attributes: attributes,
    save: function save(props) {
        var _props$attributes6 = props.attributes,
            align = _props$attributes6.align,
            authorImgUrl = _props$attributes6.authorImgUrl,
            imgRadius = _props$attributes6.imgRadius,
            imgBorder = _props$attributes6.imgBorder,
            imgBorderColor = _props$attributes6.imgBorderColor,
            imgSize = _props$attributes6.imgSize,
            text = _props$attributes6.text,
            authorTag = _props$attributes6.authorTag,
            authorColor = _props$attributes6.authorColor,
            authorSize = _props$attributes6.authorSize,
            author = _props$attributes6.author,
            authorComTag = _props$attributes6.authorComTag,
            authorComColor = _props$attributes6.authorComColor,
            authorComSize = _props$attributes6.authorComSize,
            authorCom = _props$attributes6.authorCom,
            quotSize = _props$attributes6.quotSize,
            quotColor = _props$attributes6.quotColor,
            quotOpacity = _props$attributes6.quotOpacity,
            bodyColor = _props$attributes6.bodyColor,
            bodySize = _props$attributes6.bodySize,
            bodyLine = _props$attributes6.bodyLine,
            bodyTop = _props$attributes6.bodyTop,
            bodyBottom = _props$attributes6.bodyBottom,
            dashColor = _props$attributes6.dashColor,
            urlCheck = _props$attributes6.urlCheck,
            urlText = _props$attributes6.urlText,
            urlTarget = _props$attributes6.urlTarget;


        return React.createElement(
            "div",
            { className: className + "__wrap" },
            React.createElement(
                "div",
                { className: className + "__container" },
                React.createElement(
                    "span",
                    { className: className + "__upper" },
                    React.createElement(_upperQuote2.default, {
                        size: quotSize,
                        color: quotColor,
                        opacity: quotOpacity
                    })
                ),
                React.createElement(
                    "div",
                    {
                        className: className + "__content",
                        style: {
                            textAlign: align
                        }
                    },
                    React.createElement(
                        "div",
                        { className: className + "__img_wrap" },
                        authorImgUrl && React.createElement("img", {
                            className: className + "__img",
                            src: "" + authorImgUrl,
                            alt: "Author",
                            style: {
                                borderWidth: imgBorder + "px",
                                borderRadius: imgRadius,
                                borderColor: imgBorderColor,
                                width: imgSize + "px",
                                height: imgSize + "px"
                            }
                        }),
                        !authorImgUrl && React.createElement(_defaultImage2.default, { className: className })
                    ),
                    React.createElement(
                        "div",
                        { className: className + "__text_wrap" },
                        React.createElement(
                            "div",
                            null,
                            React.createElement(RichText.Content, {
                                tagName: "p",
                                className: className + "__text",
                                value: text,
                                style: {
                                    color: bodyColor,
                                    fontSize: bodySize + "px",
                                    lineHeight: bodyLine + "px",
                                    marginTop: bodyTop + "px",
                                    marginBottom: bodyBottom + "px"
                                }
                            })
                        )
                    ),
                    React.createElement(
                        "div",
                        { className: className + "__info" },
                        React.createElement(RichText.Content, {
                            tagName: authorTag.toLowerCase(),
                            className: className + "__author",
                            value: author,
                            style: {
                                color: authorColor,
                                fontSize: authorSize + "px"
                            }
                        }),
                        React.createElement(
                            "span",
                            {
                                className: className + "__sep",
                                style: {
                                    color: dashColor
                                }
                            },
                            "\xA0-\xA0"
                        ),
                        React.createElement(
                            "div",
                            { className: className + "__link_wrap" },
                            React.createElement(RichText.Content, {
                                tagName: authorComTag.toLowerCase(),
                                className: className + "__author_comp",
                                value: authorCom,
                                style: {
                                    color: authorComColor,
                                    fontSize: authorComSize + "px"
                                }
                            }),
                            urlCheck && React.createElement("a", {
                                href: urlText,
                                target: urlTarget ? "_blank" : ""
                            })
                        )
                    )
                ),
                React.createElement(
                    "span",
                    { className: className + "__lower" },
                    React.createElement(_lowerQuote2.default, {
                        color: quotColor,
                        size: quotSize,
                        opacity: quotOpacity
                    })
                )
            )
        );
    }
}];

exports.default = deprecatedContent;

/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
var testimonialsAttrs = {
    block_id: {
        type: "string"
    },
    classMigrate: {
        type: "boolean",
        default: false
    },
    align: {
        type: "string",
        default: "center"
    },
    authorImgId: {
        type: "string"
    },
    authorImgUrl: {
        type: "string"
    },
    imgRadius: {
        type: "string",
        default: "50%"
    },
    imgSize: {
        type: "number"
    },
    imgBorder: {
        type: "number",
        default: "1"
    },
    imgBorderColor: {
        type: "string"
    },
    author: {
        type: "array",
        source: "children",
        selector: ".premium-testimonial__author",
        default: "John Doe"
    },
    authorStyles: {
        type: 'array',
        default: [{
            authorTag: "H3",
            authorColor: '',
            authorSize: '',
            authorSizeUnit: 'px',
            authorSizeMobile: '',
            authorSizeTablet: '',
            authorLetter: '',
            authorStyle: '',
            authorUpper: false,
            authorWeight: 500,
            authorComTag: "H4"
        }]
    },

    paddingTop: {
        type: "number"
    },
    paddingRight: {
        type: "number"
    },
    paddingBottom: {
        type: "number"
    },
    paddingLeft: {
        type: "number"
    },
    text: {
        type: "array",
        source: "children",
        selector: ".premium-testimonial__text"
    },
    authorCom: {
        type: "array",
        source: "children",
        selector: ".premium-testimonial__author_comp",
        default: "Leap13"
    },
    hideDesktop: {
        type: 'boolean',
        default: false
    },
    hideTablet: {
        type: 'boolean',
        default: false
    },
    hideMobile: {
        type: 'boolean',
        default: false
    },
    contentStyle: {
        type: "array",
        default: [{
            bodySizeUnit: 'px',
            bodySize: '',
            bodySizeMobile: '',
            bodySizeTablet: '',
            bodyColor: '',
            bodyLine: '',
            bodyTop: '',
            bodyBottom: ''
        }]

    },
    companyStyles: {
        type: "array",
        default: [{
            authorComTag: 'H4',
            authorComSizeUnit: 'px',
            authorComColor: '',
            authorComSize: '',
            authorComSizeMobile: '',
            authorComSizeTablet: '',
            dashColor: '',
            urlCheck: false,
            urlText: '',
            urlTarget: false

        }]
    },
    quoteStyles: {
        type: "array",
        default: [{
            quotSize: 2,
            quotColor: '',
            quotOpacity: 50

        }]
    },
    containerStyles: {
        type: "array",
        default: [{
            backOpacity: 1,
            containerBack: '',
            backgroundImageID: '',
            backgroundImageURL: '',
            backgroundRepeat: 'no-reapet',
            backgroundPosition: 'top center',
            backgroundSize: 'auto',
            fixed: false,
            shadowColor: '',
            shadowBlur: '',
            shadowHorizontal: '',
            shadowVertical: '',
            shadowPosition: '',
            paddingUnit: 'px',
            gradientColorOne: '',
            gradientLocationOne: '0',
            gradientColorTwo: '',
            gradientLocationTwo: '100',
            gradientType: 'linear',
            gradientAngle: '180',
            gradientPosition: 'center center'
        }]
    },
    backgroundType: {
        type: "string",
        default: ""
    },
    paddingTTablet: {
        type: "number"
    },
    paddingRTablet: {
        type: "number"
    },
    paddingBTablet: {
        type: "number"
    },
    paddingLTablet: {
        type: "number"
    },
    paddingTMobile: {
        type: "number"
    },
    paddingRMobile: {
        type: "number"
    },
    paddingBMobile: {
        type: "number"
    },
    paddingLMobile: {
        type: "number"
    }
};
exports.default = testimonialsAttrs;

/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _classnames = __webpack_require__(0);

var _classnames2 = _interopRequireDefault(_classnames);

var _premiumTypo = __webpack_require__(7);

var _premiumTypo2 = _interopRequireDefault(_premiumTypo);

var _premiumBorder = __webpack_require__(6);

var _premiumBorder2 = _interopRequireDefault(_premiumBorder);

var _premiumFilters = __webpack_require__(30);

var _premiumFilters2 = _interopRequireDefault(_premiumFilters);

var _index = __webpack_require__(53);

var _index2 = _interopRequireDefault(_index);

var _premiumMediaUpload = __webpack_require__(12);

var _premiumMediaUpload2 = _interopRequireDefault(_premiumMediaUpload);

var _premiumResponsiveTabs = __webpack_require__(8);

var _premiumResponsiveTabs2 = _interopRequireDefault(_premiumResponsiveTabs);

var _singleRangeControl = __webpack_require__(3);

var _singleRangeControl2 = _interopRequireDefault(_singleRangeControl);

var _ColorComponent = __webpack_require__(2);

var _ColorComponent2 = _interopRequireDefault(_ColorComponent);

var _fontLoader = __webpack_require__(22);

var _fontLoader2 = _interopRequireDefault(_fontLoader);

var _PremiumShadow = __webpack_require__(5);

var _PremiumShadow2 = _interopRequireDefault(_PremiumShadow);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var withSelect = wp.data.withSelect;
var _wp$components = wp.components,
    PanelBody = _wp$components.PanelBody,
    SelectControl = _wp$components.SelectControl,
    TextareaControl = _wp$components.TextareaControl,
    ToggleControl = _wp$components.ToggleControl,
    TabPanel = _wp$components.TabPanel,
    Placeholder = _wp$components.Placeholder,
    Button = _wp$components.Button;
var _wp$element = wp.element,
    Component = _wp$element.Component,
    Fragment = _wp$element.Fragment;
var InspectorControls = wp.blockEditor.InspectorControls;
var __ = wp.i18n.__;


var isBoxUpdated = null;

var edit = function (_Component) {
    _inherits(edit, _Component);

    function edit() {
        _classCallCheck(this, edit);

        var _this = _possibleConstructorReturn(this, (edit.__proto__ || Object.getPrototypeOf(edit)).apply(this, arguments));

        _this.initVideoBox = _this.initVideoBox.bind(_this);
        _this.getPreviewSize = _this.getPreviewSize.bind(_this);
        _this.videoboxRef = React.createRef();
        _this.state = {
            url: ''
        };
        return _this;
    }

    _createClass(edit, [{
        key: "componentDidMount",
        value: function componentDidMount() {
            var _props = this.props,
                attributes = _props.attributes,
                setAttributes = _props.setAttributes,
                clientId = _props.clientId;

            setAttributes({ block_id: clientId });
            if (!attributes.videoBoxId) {
                setAttributes({ videoBoxId: "premium-video-box-" + clientId });
            }
            this.props.setAttributes({ classMigrate: true });
            this.initVideoBox();
        }
    }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
            clearTimeout(isBoxUpdated);
            isBoxUpdated = setTimeout(this.initVideoBox, 500);
        }
    }, {
        key: "initVideoBox",
        value: function initVideoBox() {
            var _props$attributes = this.props.attributes,
                videoBoxId = _props$attributes.videoBoxId,
                videoURL = _props$attributes.videoURL;

            if (!videoBoxId && !videoURL) return null;
            var videoBox = this.videoboxRef.current,
                video = void 0,
                src = void 0;
            if (videoBox) {
                videoBox.addEventListener("click", function () {
                    videoBox.classList.add("video-overlay-false");
                    var type = videoBox.getAttribute("data-type");
                    if ("self" !== type) {
                        video = videoBox.getElementsByTagName("iframe")[0];
                        src = video.getAttribute("src");
                    } else {
                        video = videoBox.getElementsByTagName("video")[0];
                    }
                    setTimeout(function () {
                        if ("self" !== type) {
                            video.setAttribute("src", src.replace("autoplay=0", "autoplay=1"));
                        } else {
                            videoBox.getElementsByClassName("premium-video-box__overlay")[0].remove();
                            video.play();
                        }
                    }, 300);
                });
            }
        }
    }, {
        key: "getPreviewSize",
        value: function getPreviewSize(device, desktopSize, tabletSize, mobileSize) {
            if (device === 'Mobile') {
                if (undefined !== mobileSize && '' !== mobileSize) {
                    return mobileSize;
                } else if (undefined !== tabletSize && '' !== tabletSize) {
                    return tabletSize;
                }
            } else if (device === 'Tablet') {
                if (undefined !== tabletSize && '' !== tabletSize) {
                    return tabletSize;
                }
            }
            return desktopSize;
        }
    }, {
        key: "render",
        value: function render() {
            var _this2 = this;

            var _props2 = this.props,
                isSelected = _props2.isSelected,
                setAttributes = _props2.setAttributes,
                className = _props2.className,
                clientId = _props2.clientId;
            var _props$attributes2 = this.props.attributes,
                block_id = _props$attributes2.block_id,
                videoBoxId = _props$attributes2.videoBoxId,
                videoType = _props$attributes2.videoType,
                videoURL = _props$attributes2.videoURL,
                videoID = _props$attributes2.videoID,
                autoPlay = _props$attributes2.autoPlay,
                loop = _props$attributes2.loop,
                controls = _props$attributes2.controls,
                relatedVideos = _props$attributes2.relatedVideos,
                mute = _props$attributes2.mute,
                overlay = _props$attributes2.overlay,
                videoDesc = _props$attributes2.videoDesc,
                playIcon = _props$attributes2.playIcon,
                playLeft = _props$attributes2.playLeft,
                hideDesktop = _props$attributes2.hideDesktop,
                hideTablet = _props$attributes2.hideTablet,
                hideMobile = _props$attributes2.hideMobile,
                ratioValue = _props$attributes2.ratioValue,
                boxStyles = _props$attributes2.boxStyles,
                overlayStyles = _props$attributes2.overlayStyles,
                playStyles = _props$attributes2.playStyles,
                descStyles = _props$attributes2.descStyles;


            var TYPE = [{
                value: "youtube",
                label: __("Youtube", 'premium-blocks-for-gutenberg')
            }, {
                value: "vimeo",
                label: __("Vimeo", 'premium-blocks-for-gutenberg')
            }, {
                value: "daily",
                label: __("Daily Motion", 'premium-blocks-for-gutenberg')
            }, {
                value: "self",
                label: __("Self Hosted", 'premium-blocks-for-gutenberg')
            }];

            var loopVideo = function loopVideo() {
                if (videoURL && "youtube" === videoType) {
                    if (videoURL.startsWith("http")) {
                        return loop ? "1&playlist=" + videoURL.replace("https://www.youtube.com/embed/", "") : "0";
                    } else {
                        return loop ? "1&playlist=" + videoURL : "0";
                    }
                } else {
                    return loop ? "1" : "0";
                }
            };

            var mainClasses = (0, _classnames2.default)(className, "premium-video-box");

            var changeVideoType = function changeVideoType(newvalue) {
                if (newvalue === "self") {
                    setAttributes({ videoURL: "" });
                }
                setAttributes({ videoType: newvalue });
            };
            var textSize = this.getPreviewSize(this.props.deviceType, descStyles[0].videoDescSize, descStyles[0].videoDescSizeTablet, descStyles[0].videoDescSizeMobile);

            var saveBoxStyle = function saveBoxStyle(value) {
                var newUpdate = boxStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({ boxStyles: newUpdate });
            };

            var saveOverlayStyles = function saveOverlayStyles(value) {
                var newUpdate = overlayStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({ overlayStyles: newUpdate });
            };

            var savePlayStyles = function savePlayStyles(value) {
                var newUpdate = playStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({ playStyles: newUpdate });
            };

            var saveDescritionStyle = function saveDescritionStyle(value) {
                var newUpdate = descStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({ descStyles: newUpdate });
            };

            var loadDescriptionGoogleFonts = void 0;
            if (descStyles[0].videoDescFamily !== "Default") {
                var descriptionConfig = {
                    google: {
                        families: [descStyles[0].videoDescFamily]
                    }
                };
                loadDescriptionGoogleFonts = React.createElement(_fontLoader2.default, { config: descriptionConfig });
            }

            return [isSelected && React.createElement(
                InspectorControls,
                { key: "inspector" },
                React.createElement(
                    PanelBody,
                    {
                        title: __("Video", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: true
                    },
                    React.createElement(SelectControl, {
                        label: __("Video Type", 'premium-blocks-for-gutenberg'),
                        options: TYPE,
                        value: videoType,
                        onChange: changeVideoType
                    }),
                    videoURL && React.createElement(
                        "button",
                        { className: "lottie-remove", onClick: function onClick(e) {
                                e.preventDefault();
                                setAttributes({ videoURL: '' });
                            } },
                        __('Remove Video')
                    ),
                    "self" === videoType && React.createElement(_premiumMediaUpload2.default, {
                        type: "video",
                        imageID: videoID,
                        imageURL: videoURL,
                        onSelectMedia: function onSelectMedia(media) {
                            setAttributes({
                                videoURL: media.url,
                                videoID: media.id
                            });
                        },
                        onRemoveImage: function onRemoveImage() {
                            setAttributes({
                                videoURL: "",
                                videoID: ""
                            });
                        }
                    }),
                    React.createElement(ToggleControl, {
                        label: __("Autoplay", 'premium-blocks-for-gutenberg'),
                        checked: autoPlay,
                        onChange: function onChange(newCheck) {
                            return setAttributes({ autoPlay: newCheck });
                        },
                        help: __("This option effect works when Overlay Image option is disabled", 'premium-blocks-for-gutenberg')
                    }),
                    "daily" !== videoType && React.createElement(ToggleControl, {
                        label: __("Loop", 'premium-blocks-for-gutenberg'),
                        checked: loop,
                        onChange: function onChange(newCheck) {
                            return setAttributes({ loop: newCheck });
                        }
                    }),
                    React.createElement(ToggleControl, {
                        label: __("Mute", 'premium-blocks-for-gutenberg'),
                        checked: mute,
                        onChange: function onChange(newCheck) {
                            return setAttributes({ mute: newCheck });
                        }
                    }),
                    "vimeo" !== videoType && React.createElement(ToggleControl, {
                        label: __("Player Controls", 'premium-blocks-for-gutenberg'),
                        checked: controls,
                        onChange: function onChange(newCheck) {
                            return setAttributes({ controls: newCheck });
                        }
                    }),
                    "youtube" === videoType && React.createElement(ToggleControl, {
                        label: __("Show Related Videos", 'premium-blocks-for-gutenberg'),
                        checked: relatedVideos,
                        onChange: function onChange(newCheck) {
                            return setAttributes({ relatedVideos: newCheck });
                        }
                    }),
                    React.createElement(ToggleControl, {
                        label: __("Overlay Image", 'premium-blocks-for-gutenberg'),
                        checked: overlay,
                        onChange: function onChange(newCheck) {
                            return setAttributes({ overlay: newCheck });
                        }
                    }),
                    React.createElement(SelectControl, {
                        label: __('Aspect Ratio', 'premium-blocks-for-gutenberg'),
                        value: ratioValue,
                        options: [{ label: '1:1', value: '11' }, { label: '16:9', value: '169' }, { label: '4:3', value: '43' }, { label: '3:2', value: '32' }, { label: '21:9', value: '219' }, { label: '9:16', value: '916' }],
                        onChange: function onChange(newValue) {
                            return setAttributes({ ratioValue: newValue });
                        }
                    })
                ),
                overlay && React.createElement(
                    PanelBody,
                    {
                        title: __("Overlay", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(_premiumMediaUpload2.default, {
                        type: "image",
                        imageID: overlayStyles[0].overlayImgID,
                        imageURL: overlayStyles[0].overlayImgURL,
                        onSelectMedia: function onSelectMedia(media) {
                            saveOverlayStyles({
                                overlayImgID: media.id,
                                overlayImgURL: media.url
                            });
                        },
                        onRemoveImage: function onRemoveImage() {
                            return saveOverlayStyles({
                                overlayImgID: "",
                                overlayImgURL: ""
                            });
                        }
                    }),
                    React.createElement(_premiumFilters2.default, {
                        blur: blur,
                        bright: overlayStyles[0].bright,
                        contrast: overlayStyles[0].contrast,
                        saturation: overlayStyles[0].saturation,
                        hue: overlayStyles[0].hue,
                        onChangeBlur: function onChangeBlur(value) {
                            return saveOverlayStyles({ blur: value === undefined ? 0 : value });
                        },
                        onChangeBright: function onChangeBright(value) {
                            return saveOverlayStyles({ bright: value === undefined ? 100 : value });
                        },
                        onChangeContrast: function onChangeContrast(value) {
                            return saveOverlayStyles({ contrast: value === undefined ? 100 : value });
                        },
                        onChangeSat: function onChangeSat(value) {
                            return saveOverlayStyles({ saturation: value === undefined ? 100 : value });
                        },
                        onChangeHue: function onChangeHue(value) {
                            return saveOverlayStyles({ hue: value === undefined ? 100 : value });
                        }
                    })
                ),
                overlay && React.createElement(
                    Fragment,
                    null,
                    React.createElement(
                        PanelBody,
                        {
                            title: __("Play Icon", 'premium-blocks-for-gutenberg'),
                            className: "premium-panel-body",
                            initialOpen: false
                        },
                        React.createElement(ToggleControl, {
                            label: __("Enable Play Icon", 'premium-blocks-for-gutenberg'),
                            checked: playIcon,
                            onChange: function onChange(newCheck) {
                                return setAttributes({ playIcon: newCheck });
                            }
                        }),
                        playIcon && React.createElement(
                            Fragment,
                            null,
                            React.createElement(_singleRangeControl2.default, {
                                label: __("Size (PX)", 'premium-blocks-for-gutenberg'),
                                value: playStyles[0].playSize,
                                onChange: function onChange(newValue) {
                                    return savePlayStyles({ playSize: newValue === undefined ? 20 : newValue });
                                },
                                showUnit: false,
                                defaultValue: 0
                            }),
                            React.createElement(_singleRangeControl2.default, {
                                label: __("Vertical Offset (%)", 'premium-blocks-for-gutenberg'),
                                value: playStyles[0].playTop,
                                onChange: function onChange(newValue) {
                                    return savePlayStyles({ playTop: newValue === undefined ? 50 : newValue });
                                },
                                showUnit: false,
                                defaultValue: 0
                            }),
                            React.createElement(_premiumBorder2.default, {
                                borderType: playStyles[0].playBorderType,
                                borderWidth: playStyles[0].playBorderWidth,
                                top: playStyles[0].playBorderTop,
                                right: playStyles[0].playBorderRight,
                                bottom: playStyles[0].playBorderBottom,
                                left: playStyles[0].playBorderLeft,
                                borderColor: playStyles[0].playBorderColor,
                                borderRadius: playStyles[0].playBorderRadius,
                                onChangeType: function onChangeType(newType) {
                                    return savePlayStyles({ playBorderType: newType });
                                },
                                onChangeWidth: function onChangeWidth(_ref) {
                                    var top = _ref.top,
                                        right = _ref.right,
                                        bottom = _ref.bottom,
                                        left = _ref.left;
                                    return savePlayStyles({
                                        borderPlayUpdated: true,
                                        playBorderTop: top,
                                        playBorderRight: right,
                                        playBorderBottom: bottom,
                                        playBorderLeft: left
                                    });
                                },
                                onChangeColor: function onChangeColor(colorValue) {
                                    return savePlayStyles({ playBorderColor: colorValue });
                                },
                                onChangeRadius: function onChangeRadius(newrRadius) {
                                    return savePlayStyles({ playBorderRadius: newrRadius });
                                }
                            }),
                            React.createElement(_singleRangeControl2.default, {
                                label: __("Padding (PX)"),
                                value: playStyles[0].playPadding,
                                onChange: function onChange(newValue) {
                                    return savePlayStyles({ playPadding: newValue === undefined ? 20 : newValue });
                                },
                                showUnit: false,
                                defaultValue: 0
                            })
                        )
                    ),
                    React.createElement(
                        PanelBody,
                        {
                            title: __("Video Description", 'premium-blocks-for-gutenberg'),
                            className: "premium-panel-body",
                            initialOpen: false
                        },
                        React.createElement(ToggleControl, {
                            label: __("Enable Video Description", 'premium-blocks-for-gutenberg'),
                            checked: videoDesc,
                            onChange: function onChange(newCheck) {
                                return setAttributes({ videoDesc: newCheck });
                            }
                        }),
                        videoDesc && React.createElement(
                            Fragment,
                            null,
                            React.createElement(TextareaControl, {
                                label: __("Description Text", 'premium-blocks-for-gutenberg'),
                                value: descStyles[0].videoDescText,
                                onChange: function onChange(newText) {
                                    return saveDescritionStyle({ videoDescText: newText });
                                }
                            }),
                            React.createElement(_premiumTypo2.default, {
                                components: ["responsiveSize", "weight", "style", "upper", "spacing", "family"],
                                setAttributes: saveDescritionStyle,
                                fontSizeType: {
                                    value: descStyles[0].videoDescSizeUnit,
                                    label: __("videoDescSizeUnit", 'premium-blocks-for-gutenberg')
                                },
                                fontSize: descStyles[0].videoDescSize,
                                fontSizeMobile: descStyles[0].videoDescSizeMobile,
                                fontSizeTablet: descStyles[0].videoDescSizeTablet,
                                onChangeSize: function onChangeSize(newSize) {
                                    return saveDescritionStyle({ videoDescSize: newSize });
                                },
                                onChangeTabletSize: function onChangeTabletSize(newSize) {
                                    return saveDescritionStyle({ videoDescSizeTablet: newSize });
                                },
                                onChangeMobileSize: function onChangeMobileSize(newSize) {
                                    return saveDescritionStyle({ videoDescSizeMobile: newSize });
                                },
                                fontFamily: descStyles[0].videoDescFamily,
                                weight: descStyles[0].videoDescWeight,
                                onChangeWeight: function onChangeWeight(newWeight) {
                                    return saveDescritionStyle({ videoDescWeight: newWeight });
                                },
                                style: descStyles[0].videoDescStyle,
                                spacing: descStyles[0].videoDescLetter,
                                upper: descStyles[0].videoDescUpper,
                                onChangeStyle: function onChangeStyle(newStyle) {
                                    return saveDescritionStyle({ videoDescStyle: newStyle });
                                },
                                onChangeSpacing: function onChangeSpacing(newValue) {
                                    return saveDescritionStyle({ videoDescLetter: newValue });
                                },
                                onChangeUpper: function onChangeUpper(check) {
                                    return saveDescritionStyle({ videoDescUpper: check });
                                },
                                onChangeFamily: function onChangeFamily(fontFamily) {
                                    return saveDescritionStyle({ videoDescFamily: fontFamily });
                                }
                            }),
                            React.createElement(_singleRangeControl2.default, {
                                label: __("Vertical Offset (%)", 'premium-blocks-for-gutenberg'),
                                value: descStyles[0].descTop,
                                onChange: function onChange(newValue) {
                                    return saveDescritionStyle({ descTop: newValue === undefined ? 50 : newValue });
                                },
                                showUnit: false,
                                defaultValue: 0
                            }),
                            React.createElement(_singleRangeControl2.default, {
                                label: __("Border Radius (px)", 'premium-blocks-for-gutenberg'),
                                value: descStyles[0].videoDescBorderRadius,
                                onChange: function onChange(newValue) {
                                    return saveDescritionStyle({ videoDescBorderRadius: newValue === undefined ? 0 : newValue });
                                },
                                showUnit: false,
                                defaultValue: 0
                            }),
                            React.createElement(_PremiumShadow2.default, {
                                label: __("Text Shadow", 'premium-blocks-for-gutenberg'),
                                color: descStyles[0].descShadowColor,
                                blur: descStyles[0].descShadowBlur,
                                horizontal: descStyles[0].descShadowHorizontal,
                                vertical: descStyles[0].descShadowVertical,
                                onChangeColor: function onChangeColor(newColor) {
                                    return saveDescritionStyle({ descShadowColor: newColor || "transparent" });
                                },
                                onChangeBlur: function onChangeBlur(newBlur) {
                                    return saveDescritionStyle({ descShadowBlur: newBlur || "0" });
                                },
                                onChangehHorizontal: function onChangehHorizontal(newValue) {
                                    return saveDescritionStyle({ descShadowHorizontal: newValue || "0" });
                                },
                                onChangeVertical: function onChangeVertical(newValue) {
                                    return saveDescritionStyle({ descShadowVertical: newValue || "0" });
                                }
                            }),
                            React.createElement(_singleRangeControl2.default, {
                                label: __("Padding (PX)", 'premium-blocks-for-gutenberg'),
                                value: descStyles[0].videoDescPadding,
                                onChange: function onChange(newValue) {
                                    return saveDescritionStyle({ videoDescPadding: newValue === undefined ? 20 : newValue });
                                },
                                showUnit: false,
                                defaultValue: 0
                            })
                        )
                    )
                ),
                React.createElement(
                    PanelBody,
                    {
                        title: __("Colors", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(
                        TabPanel,
                        {
                            className: "Premium-color-tabpanel",
                            activeClass: "active-tab",
                            tabs: [{
                                name: "normal",
                                title: "Normal",
                                className: "premium-tab"
                            }, {
                                name: "hover",
                                title: "Hover",
                                className: "premium-tab"
                            }]
                        },
                        function (tab) {
                            var tabout = void 0;
                            if ("normal" === tab.name) {
                                tabout = React.createElement(
                                    Fragment,
                                    null,
                                    React.createElement(_ColorComponent2.default, {
                                        label: __("Icon Color", ''),
                                        colorValue: playStyles[0].playColor,
                                        colorDefault: '',
                                        onColorChange: function onColorChange(newValue) {
                                            return savePlayStyles({ playColor: newValue });
                                        }
                                    }),
                                    React.createElement(_ColorComponent2.default, {
                                        label: __("Background Color"),
                                        colorValue: playStyles[0].playBack,
                                        onColorChange: function onColorChange(newvalue) {
                                            savePlayStyles({ playBack: newvalue });
                                        },
                                        colorDefault: ""
                                    }),
                                    videoDesc && React.createElement(
                                        Fragment,
                                        null,
                                        React.createElement(_ColorComponent2.default, {
                                            label: __("Description Color", ''),
                                            colorValue: descStyles[0].videoDescColor,
                                            colorDefault: '',
                                            onColorChange: function onColorChange(newValue) {
                                                return setAttributes({ videoDescColor: newValue });
                                            }
                                        }),
                                        React.createElement(_ColorComponent2.default, {
                                            label: __("Background Color"),
                                            colorValue: descStyles[0].videoDescBack,
                                            onColorChange: function onColorChange(newvalue) {
                                                saveDescritionStyle({ videoDescBack: newvalue });
                                            },
                                            colorDefault: ""
                                        })
                                    )
                                );
                            }
                            if ("hover" === tab.name) {
                                tabout = React.createElement(
                                    Fragment,
                                    null,
                                    React.createElement(_ColorComponent2.default, {
                                        label: __("Icon Hover Color", 'premium-blocks-for-gutenberg'),
                                        colorValue: playStyles[0].playHoverColor,
                                        colorDefault: '',
                                        onColorChange: function onColorChange(newValue) {
                                            return savePlayStyles({ playHoverColor: newValue });
                                        }
                                    }),
                                    React.createElement(_ColorComponent2.default, {
                                        label: __("Icon Hover Background Color", 'premium-blocks-for-gutenberg'),
                                        colorValue: playStyles[0].playHoverBackColor,
                                        colorDefault: '',
                                        onColorChange: function onColorChange(newValue) {
                                            return savePlayStyles({ playHoverBackColor: newValue });
                                        }
                                    })
                                );
                            }
                            return React.createElement(
                                "div",
                                null,
                                tabout,
                                React.createElement("hr", null)
                            );
                        }
                    )
                ),
                React.createElement(
                    PanelBody,
                    {
                        title: __("Box Style", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(_premiumBorder2.default, {
                        borderType: boxStyles[0].boxBorderType,
                        borderWidth: boxStyles[0].boxBorderWidth,
                        top: boxStyles[0].boxBorderTop,
                        right: boxStyles[0].boxBorderRight,
                        bottom: boxStyles[0].boxBorderBottom,
                        left: boxStyles[0].boxBorderLeft,
                        borderColor: boxStyles[0].boxBorderColor,
                        borderRadius: boxStyles[0].boxBorderRadius,
                        onChangeType: function onChangeType(newType) {
                            return saveBoxStyle({ boxBorderType: newType });
                        },
                        onChangeWidth: function onChangeWidth(_ref2) {
                            var top = _ref2.top,
                                right = _ref2.right,
                                bottom = _ref2.bottom,
                                left = _ref2.left;
                            return saveBoxStyle({
                                borderBoxUpdated: true,
                                boxBorderTop: top,
                                boxBorderRight: right,
                                boxBorderBottom: bottom,
                                boxBorderLeft: left
                            });
                        },
                        onChangeColor: function onChangeColor(colorValue) {
                            return saveBoxStyle({ boxBorderColor: colorValue });
                        },
                        onChangeRadius: function onChangeRadius(newrRadius) {
                            return saveBoxStyle({ boxBorderRadius: newrRadius });
                        }
                    }),
                    React.createElement(_PremiumShadow2.default, {
                        boxShadow: true,
                        color: boxStyles[0].shadowColor,
                        blur: boxStyles[0].shadowBlur,
                        horizontal: boxStyles[0].shadowHorizontal,
                        vertical: boxStyles[0].shadowVertical,
                        position: boxStyles[0].shadowPosition,
                        onChangeColor: function onChangeColor(newColor) {
                            return saveBoxStyle({ shadowColor: newColor === undefined ? "transparent" : newColor });
                        },
                        onChangeBlur: function onChangeBlur(newBlur) {
                            return saveBoxStyle({ shadowBlur: newBlur === undefined ? 0 : newBlur });
                        },
                        onChangehHorizontal: function onChangehHorizontal(newValue) {
                            return saveBoxStyle({ shadowHorizontal: newValue === undefined ? 0 : newValue });
                        },
                        onChangeVertical: function onChangeVertical(newValue) {
                            return saveBoxStyle({ shadowVertical: newValue === undefined ? 0 : newValue });
                        },
                        onChangePosition: function onChangePosition(newValue) {
                            return saveBoxStyle({ shadowPosition: newValue === undefined ? 0 : newValue });
                        }
                    })
                ),
                React.createElement(_premiumResponsiveTabs2.default, {
                    Desktop: hideDesktop,
                    Tablet: hideTablet,
                    Mobile: hideMobile,
                    onChangeDesktop: function onChangeDesktop(value) {
                        return setAttributes({ hideDesktop: value ? " premium-desktop-hidden" : "" });
                    },
                    onChangeTablet: function onChangeTablet(value) {
                        return setAttributes({ hideTablet: value ? " premium-tablet-hidden" : "" });
                    },
                    onChangeMobile: function onChangeMobile(value) {
                        return setAttributes({ hideMobile: value ? " premium-mobile-hidden" : "" });
                    }
                })
            ), React.createElement(
                Fragment,
                null,
                !videoURL && "self" !== videoType && React.createElement(
                    Placeholder,
                    {
                        label: __('Video Box ', 'premium-blocks-for-gutenberg'),
                        instructions: __("Enter video ID, for example: z1hQgVpfTKU or Embed URL"),
                        className: className
                    },
                    React.createElement(
                        "form",
                        { onSubmit: function onSubmit() {
                                return setAttributes({ videoURL: _this2.state.url });
                            } },
                        React.createElement("input", {
                            type: "url",
                            value: this.state.url,
                            className: "components-placeholder__input",
                            "aria-label": __('Video Box', 'premium-blocks-for-gutenberg'),
                            placeholder: __('Enter URL to embed here…', 'premium-blocks-for-gutenberg'),
                            onChange: function onChange(e) {
                                return _this2.setState({ url: e.target.value });
                            }
                        }),
                        React.createElement(
                            Button,
                            {
                                isPrimary: true,
                                disabled: !this.state.url,
                                type: "submit"
                            },
                            __('Embed', 'premium-blocks-for-gutenberg')
                        )
                    )
                ),
                !videoURL && "self" === videoType && React.createElement(
                    "p",
                    null,
                    __('Please Click Insert to Select Video ', "premium-blocks-for-gutenberg")
                ),
                videoURL && React.createElement(
                    "div",
                    {
                        ref: this.videoboxRef,
                        id: videoBoxId,
                        className: mainClasses + " video-overlay-" + overlay + " premium-video-box-" + block_id + " " + hideDesktop + " " + hideTablet + " " + hideMobile + " premium-aspect-ratio-" + ratioValue,
                        "data-type": videoType,
                        style: {
                            borderStyle: boxStyles[0].boxBorderType,
                            borderWidth: boxStyles[0].borderBoxUpdated ? boxStyles[0].boxBorderTop + "px " + boxStyles[0].boxBorderRight + "px " + boxStyles[0].boxBorderBottom + "px " + boxStyles[0].boxBorderLeft + "px" : boxStyles[0].boxBorderWidth + "px",
                            borderRadius: boxStyles[0].boxBorderRadius + "px",
                            borderColor: boxStyles[0].boxBorderColor,
                            boxShadow: boxStyles[0].shadowHorizontal + "px " + boxStyles[0].shadowVertical + "px " + boxStyles[0].shadowBlur + "px " + boxStyles[0].shadowColor + " " + boxStyles[0].shadowPosition
                        }
                    },
                    React.createElement("style", {
                        dangerouslySetInnerHTML: {
                            __html: ["#" + videoBoxId + " .premium-video-box__play:hover {", "color: " + playStyles[0].playHoverColor + " !important;", "background-color: " + playStyles[0].playHoverBackColor + " !important;", "}"].join("\n")
                        }
                    }),
                    React.createElement(
                        "div",
                        { className: "premium-video-box__container" },
                        React.createElement(
                            "div",
                            null,
                            React.createElement(
                                "div",
                                { className: "premium-video-box-inner-wrap" },
                                React.createElement(
                                    "div",
                                    { className: "premium-video-box-video-container" },
                                    "self" !== videoType && React.createElement("iframe", {
                                        src: (0, _index2.default)(videoType, videoURL) + "?autoplay=" + (overlay ? 0 : autoPlay) + "&loop=" + loopVideo() + "&mute" + ("vimeo" == videoType ? "d" : "") + "=" + mute + "&rel=" + (relatedVideos ? "1" : "0") + "&controls=" + (controls ? "1" : "0"),
                                        frameborder: "0",
                                        gesture: "media",
                                        allow: "encrypted-media",
                                        allowfullscreen: true
                                    }),
                                    "self" === videoType && React.createElement("video", {
                                        src: videoURL,
                                        loop: loop ? true : false,
                                        muted: mute ? true : false,
                                        autoplay: overlay ? false : autoPlay,
                                        controls: controls ? true : false
                                    })
                                )
                            )
                        )
                    ),
                    overlay && overlayStyles[0].overlayImgURL && React.createElement("div", {
                        className: "premium-video-box__overlay",
                        style: {
                            backgroundImage: "url('" + overlayStyles[0].overlayImgURL + "')",
                            filter: "brightness( " + overlayStyles[0].bright + "% ) contrast( " + overlayStyles[0].contrast + "% ) saturate( " + overlayStyles[0].saturation + "% ) blur( " + overlayStyles[0].blur + "px ) hue-rotate( " + overlayStyles[0].hue + "deg )"
                        }
                    }),
                    overlay && playIcon && React.createElement(
                        "div",
                        {
                            className: "premium-video-box__play",
                            style: {
                                top: playStyles[0].playTop + "%",
                                left: playLeft + "%",
                                color: playStyles[0].playColor,
                                backgroundColor: playStyles[0].playBack,
                                borderStyle: playStyles[0].playBorderType,
                                borderWidth: playStyles[0].borderPlayUpdated ? playStyles[0].playBorderTop + "px " + playStyles[0].playBorderRight + "px " + playStyles[0].playBorderBottom + "px " + playStyles[0].playBorderLeft + "px" : playStyles[0].playBorderWidth + "px",
                                borderRadius: playStyles[0].playBorderRadius + "px",
                                borderColor: playStyles[0].playBorderColor,
                                padding: playStyles[0].playPadding + "px"
                            }
                        },
                        React.createElement("i", {
                            className: "premium-video-box__play_icon dashicons dashicons-controls-play",
                            style: {
                                fontSize: playStyles[0].playSize + "px"
                            }
                        })
                    ),
                    overlay && videoDesc && React.createElement(
                        "div",
                        {
                            className: "premium-video-box__desc",
                            style: {
                                color: descStyles[0].videoDescColor,
                                backgroundColor: descStyles[0].videoDescBack,
                                padding: descStyles[0].videoDescPadding,
                                borderRadius: descStyles[0].videoDescBorderRadius,
                                top: descStyles[0].descTop + "%",
                                left: descStyles[0].descLeft + "%"
                            }
                        },
                        React.createElement(
                            "p",
                            {
                                className: "premium-video-box__desc_text",
                                style: {
                                    fontFamily: descStyles[0].videoDescFamily,
                                    fontWeight: descStyles[0].videoDescWeight,
                                    letterSpacing: descStyles[0].videoDescLetter + "px",
                                    textTransform: descStyles[0].videoDescUpper ? "uppercase" : "none",
                                    textShadow: descStyles[0].descShadowHorizontal + "px " + descStyles[0].descShadowVertical + "px " + descStyles[0].descShadowBlur + "px " + descStyles[0].descShadowColor,
                                    fontStyle: descStyles[0].videoDescStyle,
                                    fontSize: "" + textSize + descStyles[0].videoDescSizeUnit
                                }
                            },
                            React.createElement(
                                "span",
                                null,
                                descStyles[0].videoDescText
                            )
                        )
                    )
                ),
                loadDescriptionGoogleFonts
            )];
        }
    }]);

    return edit;
}(Component);

exports.default = withSelect(function (select, props) {
    var _select = select('core/edit-post'),
        _select$__experimenta = _select.__experimentalGetPreviewDeviceType,
        __experimentalGetPreviewDeviceType = _select$__experimenta === undefined ? null : _select$__experimenta;

    var deviceType = __experimentalGetPreviewDeviceType ? __experimentalGetPreviewDeviceType() : null;

    return {
        deviceType: deviceType
    };
})(edit);

/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classnames = __webpack_require__(0);

var _classnames2 = _interopRequireDefault(_classnames);

var _index = __webpack_require__(53);

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var save = function save(props) {
    var className = props.className;
    var _props$attributes = props.attributes,
        block_id = _props$attributes.block_id,
        videoBoxId = _props$attributes.videoBoxId,
        videoType = _props$attributes.videoType,
        videoURL = _props$attributes.videoURL,
        videoID = _props$attributes.videoID,
        autoPlay = _props$attributes.autoPlay,
        loop = _props$attributes.loop,
        controls = _props$attributes.controls,
        relatedVideos = _props$attributes.relatedVideos,
        mute = _props$attributes.mute,
        overlay = _props$attributes.overlay,
        videoDesc = _props$attributes.videoDesc,
        playIcon = _props$attributes.playIcon,
        playLeft = _props$attributes.playLeft,
        classMigrate = _props$attributes.classMigrate,
        hideDesktop = _props$attributes.hideDesktop,
        hideTablet = _props$attributes.hideTablet,
        hideMobile = _props$attributes.hideMobile,
        boxStyles = _props$attributes.boxStyles,
        overlayStyles = _props$attributes.overlayStyles,
        playStyles = _props$attributes.playStyles,
        descStyles = _props$attributes.descStyles,
        ratioValue = _props$attributes.ratioValue;


    var loopVideo = function loopVideo() {
        if (videoURL && "youtube" === videoType) {
            if (videoURL.startsWith("http")) {
                return loop ? "1&playlist=" + videoURL.replace("https://www.youtube.com/embed/", "") : "0";
            } else {
                return loop ? "1&playlist=" + videoURL : "0";
            }
        } else {
            return loop ? "1" : "0";
        }
    };

    var mainClasses = (0, _classnames2.default)(className, 'premium-video-box');

    return videoURL && React.createElement(
        "div",
        {
            id: videoBoxId,
            className: mainClasses + " video-overlay-" + overlay + " premium-video-box-" + block_id + " " + hideDesktop + " " + hideTablet + " " + hideMobile + " premium-aspect-ratio-" + ratioValue,
            "data-type": videoType,
            style: {
                borderStyle: boxStyles[0].boxBorderType,
                borderWidth: boxStyles[0].borderBoxUpdated ? boxStyles[0].boxBorderTop + "px " + boxStyles[0].boxBorderRight + "px " + boxStyles[0].boxBorderBottom + "px " + boxStyles[0].boxBorderLeft + "px" : boxStyles[0].boxBorderWidth + "px",
                borderRadius: boxStyles[0].boxBorderRadius + "px",
                borderColor: boxStyles[0].boxBorderColor,
                boxShadow: boxStyles[0].shadowHorizontal + "px " + boxStyles[0].shadowVertical + "px " + boxStyles[0].shadowBlur + "px " + boxStyles[0].shadowColor + " " + boxStyles[0].shadowPosition
            }
        },
        React.createElement("style", {
            dangerouslySetInnerHTML: {
                __html: ["#" + videoBoxId + " .premium-video-box__play:hover {", "color: " + playStyles[0].playHoverColor + " !important;", "background-color: " + playStyles[0].playHoverBackColor + " !important;", "}"].join("\n")
            }
        }),
        React.createElement(
            "div",
            { className: "premium-video-box__container" },
            React.createElement(
                "div",
                null,
                React.createElement(
                    "div",
                    { className: "premium-video-box-inner-wrap" },
                    React.createElement(
                        "div",
                        { className: "premium-video-box-video-container" },
                        "self" !== videoType && React.createElement("iframe", {
                            src: (0, _index2.default)(videoType, videoURL) + "?autoplay=" + (overlay ? 0 : autoPlay) + "&loop=" + loopVideo() + "&mute" + ("vimeo" == videoType ? "d" : "") + "=" + mute + "&rel=" + (relatedVideos ? "1" : "0") + "&controls=" + (controls ? "1" : "0"),
                            frameborder: "0",
                            gesture: "media",
                            allow: "encrypted-media",
                            allowfullscreen: true
                        }),
                        "self" === videoType && React.createElement("video", {
                            src: videoURL,
                            loop: loop ? true : false,
                            muted: mute ? true : false,
                            autoplay: overlay ? false : autoPlay,
                            controls: controls ? true : false
                        })
                    )
                )
            )
        ),
        overlay && overlayStyles[0].overlayImgURL && React.createElement("div", {
            className: "premium-video-box__overlay",
            style: {
                backgroundImage: "url('" + overlayStyles[0].overlayImgURL + "')",
                filter: "brightness( " + overlayStyles[0].bright + "% ) contrast( " + overlayStyles[0].contrast + "% ) saturate( " + overlayStyles[0].saturation + "% ) blur( " + overlayStyles[0].blur + "px ) hue-rotate( " + overlayStyles[0].hue + "deg )"
            }
        }),
        overlay && playIcon && React.createElement(
            "div",
            {
                className: "premium-video-box__play",
                style: {
                    top: playStyles[0].playTop + "%",
                    left: playLeft + "%",
                    color: playStyles[0].playColor,
                    backgroundColor: playStyles[0].playBack,
                    borderStyle: playStyles[0].playBorderType,
                    borderWidth: playStyles[0].borderPlayUpdated ? playStyles[0].playBorderTop + "px " + playStyles[0].playBorderRight + "px " + playStyles[0].playBorderBottom + "px " + playStyles[0].playBorderLeft + "px" : playStyles[0].playBorderWidth + "px",
                    borderRadius: playStyles[0].playBorderRadius + "px",
                    borderColor: playStyles[0].playBorderColor,
                    padding: playStyles[0].playPadding + "px"
                }
            },
            React.createElement("i", {
                className: "premium-video-box__play_icon dashicons dashicons-controls-play",
                style: {
                    fontSize: playStyles[0].playSize + "px"
                }
            })
        ),
        overlay && videoDesc && React.createElement(
            "div",
            {
                className: "premium-video-box__desc",
                style: {
                    color: descStyles[0].videoDescColor,
                    backgroundColor: descStyles[0].videoDescBack,
                    padding: descStyles[0].videoDescPadding,
                    borderRadius: descStyles[0].videoDescBorderRadius,
                    top: descStyles[0].descTop + "%",
                    left: descStyles[0].descLeft + "%"
                }
            },
            React.createElement(
                "p",
                {
                    className: "premium-video-box__desc_text",
                    style: {
                        fontFamily: descStyles[0].videoDescFamily,
                        fontWeight: descStyles[0].videoDescWeight,
                        letterSpacing: descStyles[0].videoDescLetter + "px",
                        textTransform: descStyles[0].videoDescUpper ? "uppercase" : "none",
                        textShadow: descStyles[0].descShadowHorizontal + "px " + descStyles[0].descShadowVertical + "px " + descStyles[0].descShadowBlur + "px " + descStyles[0].descShadowColor,
                        fontStyle: descStyles[0].videoDescStyle
                    }
                },
                React.createElement(
                    "span",
                    null,
                    descStyles[0].videoDescText
                )
            )
        )
    );
};

exports.default = save;

/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _attributes = __webpack_require__(112);

var _attributes2 = _interopRequireDefault(_attributes);

var _index = __webpack_require__(53);

var _index2 = _interopRequireDefault(_index);

var _hexToRgba = __webpack_require__(17);

var _hexToRgba2 = _interopRequireDefault(_hexToRgba);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var className = "premium-video-box";
var __ = wp.i18n.__;


var attributes = {
    block_id: {
        type: 'string'
    },
    borderPlayUpdated: {
        type: "boolean",
        default: false
    },
    borderBoxUpdated: {
        type: "boolean",
        default: false
    },
    videoBoxId: {
        type: "string"
    },
    videoType: {
        type: "string",
        default: "youtube"
    },
    videoURL: {
        type: "string",
        default: "07d2dXHYb94"
    },
    videoID: {
        type: "string"
    },
    autoPlay: {
        type: "boolean",
        default: false
    },
    loop: {
        type: "boolean",
        default: false
    },
    controls: {
        type: "boolean",
        default: true
    },
    relatedVideos: {
        type: "boolean",
        default: false
    },
    mute: {
        type: "boolean",
        default: false
    },
    overlay: {
        type: "boolean",
        default: false
    },
    overlayImgID: {
        type: "string"
    },
    overlayImgURL: {
        type: "string"
    },
    blur: {
        type: "number",
        default: 0
    },
    bright: {
        type: "number",
        default: 100
    },
    contrast: {
        type: "number",
        default: 100
    },
    saturation: {
        type: "number",
        default: 100
    },
    hue: {
        type: "number",
        default: 0
    },
    playTop: {
        type: "number"
    },
    playIcon: {
        type: "boolean",
        default: true
    },
    playSize: {
        type: "number"
    },
    playColor: {
        type: "string"
    },
    playBack: {
        type: "string"
    },
    playOpacity: {
        type: "number",
        default: "1"
    },
    playHoverColor: {
        type: "string"
    },
    playHoverBackColor: {
        type: "string"
    },
    playPadding: {
        type: "number"
    },
    playBorderType: {
        type: "string",
        default: "none"
    },
    playBorderWidth: {
        type: "number",
        default: "1"
    },
    playBorderRadius: {
        type: "number"
    },
    playBorderColor: {
        type: "string"
    },
    videoDescText: {
        type: "string"
    },
    videoDesc: {
        type: "boolean"
    },
    descLeft: {
        type: "number"
    },
    descTop: {
        type: "number"
    },
    videoDescSize: {
        type: "number"
    },
    videoDescSizeUnit: {
        type: "string",
        default: 'px'
    },
    videoDescSizeMobile: {
        type: 'number'
    },
    videoDescSizeTablet: {
        type: 'number'
    },
    videoDescFamily: {
        type: "string"
    },
    videoDescWeight: {
        type: "number"
    },
    videoDescLetter: {
        type: "number"
    },
    videoDescStyle: {
        type: "string"
    },
    videoDescUpper: {
        type: "boolean"
    },
    videoDescColor: {
        type: "string"
    },
    videoDescBack: {
        type: "string"
    },
    videoDescOpacity: {
        type: "number",
        default: "1"
    },
    videoDescPadding: {
        type: "number"
    },
    videoDescBorderRadius: {
        type: "number"
    },
    descShadowColor: {
        type: "string"
    },
    descShadowBlur: {
        type: "number",
        default: "0"
    },
    descShadowHorizontal: {
        type: "number",
        default: "0"
    },
    descShadowVertical: {
        type: "number",
        default: "0"
    },
    boxBorderType: {
        type: "string",
        default: "none"
    },
    boxBorderWidth: {
        type: "number",
        default: "1"
    },
    boxBorderTop: {
        type: "number"
    },
    boxBorderRight: {
        type: "number"
    },
    boxBorderBottom: {
        type: "number"
    },
    boxBorderLeft: {
        type: "number"
    },
    playBorderTop: {
        type: "number"
    },
    playBorderRight: {
        type: "number"
    },
    playBorderBottom: {
        type: "number"
    },
    playBorderLeft: {
        type: "number"
    },
    boxBorderRadius: {
        type: "number"
    },
    boxBorderColor: {
        type: "string"
    },
    shadowColor: {
        type: "string"
    },
    shadowBlur: {
        type: "number",
        default: "0"
    },
    shadowHorizontal: {
        type: "number",
        default: "0"
    },
    shadowVertical: {
        type: "number",
        default: "0"
    },
    shadowPosition: {
        type: "string",
        default: ""
    },

    // Old props
    playLeft: {
        type: "number"
    },
    classMigrate: {
        type: 'boolean',
        default: false
    },
    hideDesktop: {
        type: 'boolean',
        default: false
    },
    hideTablet: {
        type: 'boolean',
        default: false
    },
    hideMobile: {
        type: 'boolean',
        default: false
    }
};
var new_Attributes = {
    boxStyles: {
        type: 'array',
        default: [{
            boxBorderType: 'none',
            boxBorderWidth: 1,
            boxBorderTop: '',
            boxBorderRight: '',
            boxBorderBottom: '',
            boxBorderLeft: '',
            boxBorderRadius: '',
            boxBorderColor: '',
            shadowColor: '',
            shadowBlur: '',
            shadowHorizontal: '',
            shadowVertical: '',
            shadowPosition: '',
            borderBoxUpdated: false
        }]
    },
    overlayStyles: {
        type: 'array',
        default: [{
            overlayImgID: '',
            overlayImgURL: '',
            blur: 0,
            bright: 100,
            contrast: 100,
            saturation: 100,
            hue: 0
        }]
    },
    playStyles: {
        type: 'array',
        default: [{
            playTop: '',
            playSize: '',
            playPadding: '',
            playBorderType: 'none',
            playBorderWidth: 1,
            playBorderRadius: '',
            playBorderColor: '',
            playBorderTop: '',
            playBorderRight: '',
            playBorderBottom: '',
            playBorderLeft: '',
            playColor: '',
            playBack: '',
            playOpacity: 1,
            playHoverColor: '',
            playHoverBackColor: '',
            borderPlayUpdated: false

        }]

    },
    descStyles: {
        type: 'array',
        default: [{
            videoDescText: '',
            videoDescFamily: __('Default'),
            videoDescSize: '',
            videoDescSizeUnit: 'px',
            videoDescSizeMobile: '',
            videoDescSizeTablet: '',
            videoDescWeight: '',
            videoDescLetter: '',
            videoDescStyle: '',
            videoDescUpper: false,
            videoDescPadding: '',
            videoDescBorderRadius: '',
            descShadowColor: '',
            descShadowBlur: 0,
            descShadowHorizontal: 0,
            descShadowVertical: 0,
            descLeft: '',
            descTop: '',
            videoDescColor: '',
            videoDescBack: '',
            videoDescOpacity: 1
        }]
    }
};
var new_deprecated_Attributes = {
    ratioValue: {
        type: "string",
        default: '169'
    }
};
var deprecated_attributes = Object.assign(attributes, new_Attributes);
var deprecated_attributes_1_2 = Object.assign(deprecated_attributes, new_deprecated_Attributes);
var deprecatedContent = [{
    attributes: deprecated_attributes_1_2,
    save: function save(props) {
        var _props$attributes = props.attributes,
            block_id = _props$attributes.block_id,
            videoBoxId = _props$attributes.videoBoxId,
            videoType = _props$attributes.videoType,
            videoURL = _props$attributes.videoURL,
            videoID = _props$attributes.videoID,
            autoPlay = _props$attributes.autoPlay,
            loop = _props$attributes.loop,
            controls = _props$attributes.controls,
            relatedVideos = _props$attributes.relatedVideos,
            mute = _props$attributes.mute,
            overlay = _props$attributes.overlay,
            videoDesc = _props$attributes.videoDesc,
            playIcon = _props$attributes.playIcon,
            playLeft = _props$attributes.playLeft,
            classMigrate = _props$attributes.classMigrate,
            hideDesktop = _props$attributes.hideDesktop,
            hideTablet = _props$attributes.hideTablet,
            hideMobile = _props$attributes.hideMobile,
            boxStyles = _props$attributes.boxStyles,
            overlayStyles = _props$attributes.overlayStyles,
            playStyles = _props$attributes.playStyles,
            descStyles = _props$attributes.descStyles;


        var loopVideo = function loopVideo() {
            if (videoURL && "youtube" === videoType) {
                if (videoURL.startsWith("http")) {
                    return loop ? "1&playlist=" + videoURL.replace("https://www.youtube.com/embed/", "") : "0";
                } else {
                    return loop ? "1&playlist=" + videoURL : "0";
                }
            } else {
                return loop ? "1" : "0";
            }
        };

        return videoURL && React.createElement(
            "div",
            {
                id: videoBoxId,
                className: className + " video-overlay-" + overlay + " premium-video-box-" + block_id + " " + hideDesktop + " " + hideTablet + " " + hideMobile,
                "data-type": videoType,
                style: {
                    borderStyle: boxStyles[0].boxBorderType,
                    borderWidth: boxStyles[0].borderBoxUpdated ? boxStyles[0].boxBorderTop + "px " + boxStyles[0].boxBorderRight + "px " + boxStyles[0].boxBorderBottom + "px " + boxStyles[0].boxBorderLeft + "px" : boxStyles[0].boxBorderWidth + "px",
                    borderRadius: boxStyles[0].boxBorderRadius + "px",
                    borderColor: boxStyles[0].boxBorderColor,
                    boxShadow: boxStyles[0].shadowHorizontal + "px " + boxStyles[0].shadowVertical + "px " + boxStyles[0].shadowBlur + "px " + boxStyles[0].shadowColor + " " + boxStyles[0].shadowPosition
                }
            },
            React.createElement("style", {
                dangerouslySetInnerHTML: {
                    __html: ["#" + videoBoxId + " .premium-video-box__play:hover {", "color: " + playStyles[0].playHoverColor + " !important;", "background-color: " + playStyles[0].playHoverBackColor + " !important;", "}"].join("\n")
                }
            }),
            React.createElement(
                "div",
                { className: "premium-video-box__container" },
                "self" !== videoType && React.createElement("iframe", {
                    src: (0, _index2.default)(videoType, videoURL) + "?autoplay=" + (overlay ? 0 : autoPlay) + "&loop=" + loopVideo() + "&mute" + ("vimeo" == videoType ? "d" : "") + "=" + mute + "&rel=" + (relatedVideos ? "1" : "0") + "&controls=" + (controls ? "1" : "0"),
                    frameborder: "0",
                    gesture: "media",
                    allow: "encrypted-media",
                    allowfullscreen: true
                }),
                "self" === videoType && React.createElement("video", {
                    src: videoURL,
                    loop: loop ? true : false,
                    muted: mute ? true : false,
                    autoplay: overlay ? false : autoPlay,
                    controls: controls ? true : false
                })
            ),
            overlay && overlayStyles[0].overlayImgURL && React.createElement("div", {
                className: "premium-video-box__overlay",
                style: {
                    backgroundImage: "url('" + overlayStyles[0].overlayImgURL + "')",
                    filter: "brightness( " + overlayStyles[0].bright + "% ) contrast( " + overlayStyles[0].contrast + "% ) saturate( " + overlayStyles[0].saturation + "% ) blur( " + overlayStyles[0].blur + "px ) hue-rotate( " + overlayStyles[0].hue + "deg )"
                }
            }),
            overlay && playIcon && React.createElement(
                "div",
                {
                    className: "premium-video-box__play",
                    style: {
                        top: playStyles[0].playTop + "%",
                        left: playLeft + "%",
                        color: playStyles[0].playColor,
                        backgroundColor: playStyles[0].playBack,
                        borderStyle: playStyles[0].playBorderType,
                        borderWidth: playStyles[0].borderPlayUpdated ? playStyles[0].playBorderTop + "px " + playStyles[0].playBorderRight + "px " + playStyles[0].playBorderBottom + "px " + playStyles[0].playBorderLeft + "px" : playStyles[0].playBorderWidth + "px",
                        borderRadius: playStyles[0].playBorderRadius + "px",
                        borderColor: playStyles[0].playBorderColor,
                        padding: playStyles[0].playPadding + "px"
                    }
                },
                React.createElement("i", {
                    className: "premium-video-box__play_icon dashicons dashicons-controls-play",
                    style: {
                        fontSize: playStyles[0].playSize + "px"
                    }
                })
            ),
            overlay && videoDesc && React.createElement(
                "div",
                {
                    className: "premium-video-box__desc",
                    style: {
                        color: descStyles[0].videoDescColor,
                        backgroundColor: descStyles[0].videoDescBack,
                        padding: descStyles[0].videoDescPadding,
                        borderRadius: descStyles[0].videoDescBorderRadius,
                        top: descStyles[0].descTop + "%",
                        left: descStyles[0].descLeft + "%"
                    }
                },
                React.createElement(
                    "p",
                    {
                        className: "premium-video-box__desc_text",
                        style: {
                            fontFamily: descStyles[0].videoDescFamily,
                            fontWeight: descStyles[0].videoDescWeight,
                            letterSpacing: descStyles[0].videoDescLetter + "px",
                            textTransform: descStyles[0].videoDescUpper ? "uppercase" : "none",
                            textShadow: descStyles[0].descShadowHorizontal + "px " + descStyles[0].descShadowVertical + "px " + descStyles[0].descShadowBlur + "px " + descStyles[0].descShadowColor,
                            fontStyle: descStyles[0].videoDescStyle
                        }
                    },
                    React.createElement(
                        "span",
                        null,
                        descStyles[0].videoDescText
                    )
                )
            )
        );
    }
}, {
    attributes: deprecated_attributes,
    save: function save(props) {
        var _props$attributes2 = props.attributes,
            block_id = _props$attributes2.block_id,
            videoBoxId = _props$attributes2.videoBoxId,
            videoType = _props$attributes2.videoType,
            videoURL = _props$attributes2.videoURL,
            videoID = _props$attributes2.videoID,
            autoPlay = _props$attributes2.autoPlay,
            loop = _props$attributes2.loop,
            controls = _props$attributes2.controls,
            relatedVideos = _props$attributes2.relatedVideos,
            mute = _props$attributes2.mute,
            overlay = _props$attributes2.overlay,
            videoDesc = _props$attributes2.videoDesc,
            playIcon = _props$attributes2.playIcon,
            playLeft = _props$attributes2.playLeft,
            classMigrate = _props$attributes2.classMigrate,
            hideDesktop = _props$attributes2.hideDesktop,
            hideTablet = _props$attributes2.hideTablet,
            hideMobile = _props$attributes2.hideMobile,
            boxStyles = _props$attributes2.boxStyles,
            overlayStyles = _props$attributes2.overlayStyles,
            playStyles = _props$attributes2.playStyles,
            descStyles = _props$attributes2.descStyles;

        var loopVideo = function loopVideo() {
            if (videoURL && "youtube" === videoType) {
                if (videoURL.startsWith("http")) {
                    return loop ? "1&playlist=" + videoURL.replace("https://www.youtube.com/embed/", "") : "0";
                } else {
                    return loop ? "1&playlist=" + videoURL : "0";
                }
            } else {
                return loop ? "1" : "0";
            }
        };

        return React.createElement(
            "div",
            {
                id: videoBoxId,
                className: className + " video-overlay-" + overlay + " premium-video-box-" + block_id + " " + hideDesktop + " " + hideTablet + " " + hideMobile,
                "data-type": videoType,
                style: {
                    borderStyle: boxStyles[0].boxBorderType,
                    borderWidth: boxStyles[0].borderBoxUpdated ? boxStyles[0].boxBorderTop + "px " + boxStyles[0].boxBorderRight + "px " + boxStyles[0].boxBorderBottom + "px " + boxStyles[0].boxBorderLeft + "px" : boxStyles[0].boxBorderWidth + "px",
                    borderRadius: boxStyles[0].boxBorderRadius + "px",
                    borderColor: boxStyles[0].boxBorderColor,
                    boxShadow: boxStyles[0].shadowHorizontal + "px " + boxStyles[0].shadowVertical + "px " + boxStyles[0].shadowBlur + "px " + boxStyles[0].shadowColor + " " + boxStyles[0].shadowPosition
                }
            },
            React.createElement("style", {
                dangerouslySetInnerHTML: {
                    __html: ["#" + videoBoxId + " .premium-video-box__play:hover {", "color: " + playStyles[0].playHoverColor + " !important;", "background-color: " + playStyles[0].playHoverBackColor + " !important;", "}"].join("\n")
                }
            }),
            React.createElement(
                "div",
                { className: "premium-video-box__container" },
                "self" !== videoType && React.createElement("iframe", {
                    src: (0, _index2.default)(videoType, videoURL) + "?autoplay=" + (overlay ? 0 : autoPlay) + "&loop=" + loopVideo() + "&mute" + ("vimeo" == videoType ? "d" : "") + "=" + mute + "&rel=" + (relatedVideos ? "1" : "0") + "&controls=" + (controls ? "1" : "0"),
                    frameborder: "0",
                    gesture: "media",
                    allow: "encrypted-media",
                    allowfullscreen: true
                }),
                "self" === videoType && React.createElement("video", {
                    src: videoURL,
                    loop: loop ? true : false,
                    muted: mute ? true : false,
                    autoplay: overlay ? false : autoPlay,
                    controls: controls ? true : false
                })
            ),
            overlay && overlayStyles[0].overlayImgURL && React.createElement("div", {
                className: "premium-video-box__overlay",
                style: {
                    backgroundImage: "url('" + overlayStyles[0].overlayImgURL + "')",
                    filter: "brightness( " + overlayStyles[0].bright + "% ) contrast( " + overlayStyles[0].contrast + "% ) saturate( " + overlayStyles[0].saturation + "% ) blur( " + overlayStyles[0].blur + "px ) hue-rotate( " + overlayStyles[0].hue + "deg )"
                }
            }),
            overlay && playIcon && React.createElement(
                "div",
                {
                    className: "premium-video-box__play",
                    style: {
                        top: playStyles[0].playTop + "%",
                        left: playLeft + "%",
                        color: playStyles[0].playColor,
                        backgroundColor: playStyles[0].playBack,
                        borderStyle: playStyles[0].playBorderType,
                        borderWidth: playStyles[0].borderPlayUpdated ? playStyles[0].playBorderTop + "px " + playStyles[0].playBorderRight + "px " + playStyles[0].playBorderBottom + "px " + playStyles[0].playBorderLeft + "px" : playStyles[0].playBorderWidth + "px",
                        borderRadius: playStyles[0].playBorderRadius + "px",
                        borderColor: playStyles[0].playBorderColor,
                        padding: playStyles[0].playPadding + "px"
                    }
                },
                React.createElement("i", {
                    className: "premium-video-box__play_icon dashicons dashicons-controls-play",
                    style: {
                        fontSize: playStyles[0].playSize + "px"
                    }
                })
            ),
            overlay && videoDesc && React.createElement(
                "div",
                {
                    className: "premium-video-box__desc",
                    style: {
                        color: descStyles[0].videoDescColor,
                        backgroundColor: descStyles[0].videoDescBack,
                        padding: descStyles[0].videoDescPadding,
                        borderRadius: descStyles[0].videoDescBorderRadius,
                        top: descStyles[0].descTop + "%",
                        left: descStyles[0].descLeft + "%"
                    }
                },
                React.createElement(
                    "p",
                    {
                        className: "premium-video-box__desc_text",
                        style: {
                            fontFamily: descStyles[0].videoDescFamily,
                            fontWeight: descStyles[0].videoDescWeight,
                            letterSpacing: descStyles[0].videoDescLetter + "px",
                            textTransform: descStyles[0].videoDescUpper ? "uppercase" : "none",
                            textShadow: descStyles[0].descShadowHorizontal + "px " + descStyles[0].descShadowVertical + "px " + descStyles[0].descShadowBlur + "px " + descStyles[0].descShadowColor,
                            fontStyle: descStyles[0].videoDescStyle
                        }
                    },
                    React.createElement(
                        "span",
                        null,
                        descStyles[0].videoDescText
                    )
                )
            )
        );
    }
}, {
    attributes: deprecated_attributes,
    migrate: function migrate(attributes) {
        var newAttributes = {
            boxStyles: [{
                boxBorderType: attributes.boxBorderType,
                boxBorderWidth: attributes.boxBorderWidth,
                boxBorderTop: attributes.boxBorderTop,
                boxBorderRight: attributes.boxBorderRight,
                boxBorderBottom: attributes.boxBorderBottom,
                boxBorderLeft: attributes.boxBorderLeft,
                boxBorderRadius: attributes.boxBorderRadius,
                boxBorderColor: attributes.boxBorderColor,
                shadowColor: attributes.shadowColor,
                shadowBlur: attributes.shadowBlur,
                shadowHorizontal: attributes.shadowHorizontal,
                shadowVertical: attributes.shadowVertical,
                shadowPosition: attributes.shadowPosition,
                borderBoxUpdated: attributes.borderBoxUpdated
            }],
            overlayStyles: [{
                overlayImgID: attributes.overlayImgID,
                overlayImgURL: attributes.overlayImgURL,
                blur: attributes.blur,
                bright: attributes.bright,
                contrast: attributes.contrast,
                saturation: attributes.saturation,
                hue: attributes.hue
            }],
            playStyles: [{
                playTop: attributes.playTop,
                playSize: attributes.playSize,
                playPadding: attributes.playPadding,
                playBorderType: attributes.playBorderType,
                playBorderWidth: attributes.playBorderWidth,
                playBorderRadius: attributes.playBorderRadius,
                playBorderColor: attributes.playBorderColor,
                playBorderTop: attributes.playBorderTop,
                playBorderRight: attributes.playBorderRight,
                playBorderBottom: attributes.playBorderBottom,
                playBorderLeft: attributes.playBorderLeft,
                playColor: attributes.playColor,
                playBack: attributes.playBack,
                playOpacity: attributes.playOpacity,
                playHoverColor: attributes.playHoverColor,
                playHoverBackColor: attributes.playHoverBackColor,
                borderPlayUpdated: attributes.borderPlayUpdated
            }],
            descStyles: [{
                videoDescText: attributes.videoDescText,
                videoDescFamily: attributes.videoDescFamily,
                videoDescSize: attributes.videoDescSize,
                videoDescSizeUnit: attributes.videoDescSizeUnit,
                videoDescSizeMobile: attributes.videoSizeMobile,
                videoDescSizeTablet: attributes.videoDescSizeTablet,
                videoDescWeight: attributes.videoDescWeight,
                videoDescLetter: attributes.videoDescLetter,
                videoDescStyle: attributes.videoDescStyle,
                videoDescUpper: attributes.videoDescUpper,
                videoDescPadding: attributes.videoDescPadding,
                videoDescBorderRadius: attributes.videoDescBorderRadius,
                descShadowColor: attributes.descShadowColor,
                descShadowBlur: attributes.descShadowBlur,
                descShadowHorizontal: attributes.descShadowHorizontal,
                descShadowVertical: attributes.descShadowVertical,
                descLeft: attributes.descLeft,
                descTop: attributes.descTop,
                videoDescColor: attributes.videoDescColor,
                videoDescBack: attributes.videoDescBack,
                videoDescOpacity: attributes.videoDescOpacity
            }]
        };
        return Object.assign(attributes, newAttributes);
    },
    save: function save(props) {
        var _props$attributes3 = props.attributes,
            block_id = _props$attributes3.block_id,
            borderPlayUpdated = _props$attributes3.borderPlayUpdated,
            borderBoxUpdated = _props$attributes3.borderBoxUpdated,
            videoBoxId = _props$attributes3.videoBoxId,
            videoType = _props$attributes3.videoType,
            videoURL = _props$attributes3.videoURL,
            autoPlay = _props$attributes3.autoPlay,
            loop = _props$attributes3.loop,
            mute = _props$attributes3.mute,
            relatedVideos = _props$attributes3.relatedVideos,
            controls = _props$attributes3.controls,
            overlay = _props$attributes3.overlay,
            overlayImgURL = _props$attributes3.overlayImgURL,
            blur = _props$attributes3.blur,
            contrast = _props$attributes3.contrast,
            saturation = _props$attributes3.saturation,
            bright = _props$attributes3.bright,
            hue = _props$attributes3.hue,
            playTop = _props$attributes3.playTop,
            playLeft = _props$attributes3.playLeft,
            playIcon = _props$attributes3.playIcon,
            playColor = _props$attributes3.playColor,
            playHoverColor = _props$attributes3.playHoverColor,
            playHoverBackColor = _props$attributes3.playHoverBackColor,
            playSize = _props$attributes3.playSize,
            playPadding = _props$attributes3.playPadding,
            playBack = _props$attributes3.playBack,
            playOpacity = _props$attributes3.playOpacity,
            playBorderColor = _props$attributes3.playBorderColor,
            playBorderWidth = _props$attributes3.playBorderWidth,
            playBorderRadius = _props$attributes3.playBorderRadius,
            playBorderType = _props$attributes3.playBorderType,
            videoDesc = _props$attributes3.videoDesc,
            descTop = _props$attributes3.descTop,
            descLeft = _props$attributes3.descLeft,
            videoDescText = _props$attributes3.videoDescText,
            videoDescColor = _props$attributes3.videoDescColor,
            videoDescBack = _props$attributes3.videoDescBack,
            videoDescOpacity = _props$attributes3.videoDescOpacity,
            videoDescPadding = _props$attributes3.videoDescPadding,
            videoDescFamily = _props$attributes3.videoDescFamily,
            videoDescWeight = _props$attributes3.videoDescWeight,
            videoDescLetter = _props$attributes3.videoDescLetter,
            videoDescStyle = _props$attributes3.videoDescStyle,
            videoDescUpper = _props$attributes3.videoDescUpper,
            videoDescBorderRadius = _props$attributes3.videoDescBorderRadius,
            descShadowBlur = _props$attributes3.descShadowBlur,
            descShadowColor = _props$attributes3.descShadowColor,
            descShadowHorizontal = _props$attributes3.descShadowHorizontal,
            descShadowVertical = _props$attributes3.descShadowVertical,
            boxBorderColor = _props$attributes3.boxBorderColor,
            boxBorderWidth = _props$attributes3.boxBorderWidth,
            boxBorderTop = _props$attributes3.boxBorderTop,
            boxBorderRight = _props$attributes3.boxBorderRight,
            boxBorderBottom = _props$attributes3.boxBorderBottom,
            boxBorderLeft = _props$attributes3.boxBorderLeft,
            playBorderTop = _props$attributes3.playBorderTop,
            playBorderRight = _props$attributes3.playBorderRight,
            playBorderBottom = _props$attributes3.playBorderBottom,
            playBorderLeft = _props$attributes3.playBorderLeft,
            boxBorderRadius = _props$attributes3.boxBorderRadius,
            boxBorderType = _props$attributes3.boxBorderType,
            shadowBlur = _props$attributes3.shadowBlur,
            shadowColor = _props$attributes3.shadowColor,
            shadowHorizontal = _props$attributes3.shadowHorizontal,
            shadowVertical = _props$attributes3.shadowVertical,
            shadowPosition = _props$attributes3.shadowPosition,
            hideDesktop = _props$attributes3.hideDesktop,
            hideTablet = _props$attributes3.hideTablet,
            hideMobile = _props$attributes3.hideMobile;


        var loopVideo = function loopVideo() {
            if (videoURL && "youtube" === videoType) {
                if (videoURL.startsWith("http")) {
                    return loop ? "1&playlist=" + videoURL.replace("https://www.youtube.com/embed/", "") : "0";
                } else {
                    return loop ? "1&playlist=" + videoURL : "0";
                }
            } else {
                return loop ? "1" : "0";
            }
        };

        return React.createElement(
            "div",
            {
                id: videoBoxId,
                className: className + " video-overlay-" + overlay + "  premium-video-box-" + block_id + " " + hideDesktop + " " + hideTablet + " " + hideMobile,
                "data-type": videoType,
                style: {
                    borderStyle: boxBorderType,
                    borderWidth: borderBoxUpdated ? boxBorderTop + "px " + boxBorderRight + "px " + boxBorderBottom + "px " + boxBorderLeft + "px" : boxBorderWidth + "px",
                    borderRadius: boxBorderRadius + "px",
                    borderColor: boxBorderColor,
                    boxShadow: shadowHorizontal + "px " + shadowVertical + "px " + shadowBlur + "px " + shadowColor + " " + shadowPosition
                }
            },
            React.createElement("style", {
                dangerouslySetInnerHTML: {
                    __html: ["#" + videoBoxId + " .premium-video-box__play:hover {", "color: " + playHoverColor + " !important;", "background-color: " + playHoverBackColor + " !important;", "}"].join("\n")
                }
            }),
            React.createElement(
                "div",
                { className: "premium-video-box__container" },
                "self" !== videoType && React.createElement("iframe", {
                    src: (0, _index2.default)(videoType, videoURL) + "?autoplay=" + (overlay ? 0 : autoPlay) + "&loop=" + loopVideo() + "&mute" + ("vimeo" == videoType ? "d" : "") + "=" + mute + "&rel=" + (relatedVideos ? "1" : "0") + "&controls=" + (controls ? "1" : "0"),
                    frameborder: "0",
                    gesture: "media",
                    allow: "encrypted-media",
                    allowfullscreen: true
                }),
                "self" === videoType && React.createElement("video", {
                    src: videoURL,
                    loop: loop ? true : false,
                    muted: mute ? true : false,
                    controls: controls ? true : false,
                    autoplay: overlay ? false : autoPlay
                })
            ),
            overlay && overlayImgURL && React.createElement("div", {
                className: "premium-video-box__overlay",
                style: {
                    backgroundImage: "url('" + overlayImgURL + "')",
                    filter: "brightness( " + bright + "% ) contrast( " + contrast + "% ) saturate( " + saturation + "% ) blur( " + blur + "px ) hue-rotate( " + hue + "deg )"
                }
            }),
            overlay && playIcon && React.createElement(
                "div",
                {
                    className: "premium-video-box__play",
                    style: {
                        top: playTop + "%",
                        left: playLeft + "%",
                        color: playColor,
                        backgroundColor: playBack ? (0, _hexToRgba2.default)(playBack, playOpacity) : 'transparent',
                        borderStyle: playBorderType,
                        borderWidth: borderPlayUpdated ? playBorderTop + "px " + playBorderRight + "px " + playBorderBottom + "px " + playBorderLeft + "px" : playBorderWidth + "px",
                        borderRadius: playBorderRadius + "px",
                        borderColor: playBorderColor,
                        padding: playPadding + "px"
                    }
                },
                React.createElement("i", {
                    className: "premium-video-box__play_icon dashicons dashicons-controls-play",
                    style: {
                        fontSize: playSize + "px"
                    }
                })
            ),
            overlay && videoDesc && React.createElement(
                "div",
                {
                    className: "premium-video-box__desc",
                    style: {
                        color: videoDescColor,
                        backgroundColor: videoDescBack ? (0, _hexToRgba2.default)(videoDescBack, videoDescOpacity) : "transparent",
                        padding: videoDescPadding,
                        borderRadius: videoDescBorderRadius,
                        top: descTop + "%",
                        left: descLeft + "%"
                    }
                },
                React.createElement(
                    "p",
                    {
                        className: "premium-video-box__desc_text",
                        style: {
                            fontFamily: videoDescFamily,
                            fontWeight: videoDescWeight,
                            letterSpacing: videoDescLetter + "px",
                            textShadow: descShadowHorizontal + "px " + descShadowVertical + "px " + descShadowBlur + "px " + descShadowColor,
                            textTransform: videoDescUpper ? "uppercase" : "none",
                            fontStyle: videoDescStyle
                        }
                    },
                    React.createElement(
                        "span",
                        null,
                        videoDescText
                    )
                )
            )
        );
    }
}, {
    attributes: _attributes2.default,
    save: function save(props) {
        var _props$attributes4 = props.attributes,
            videoBoxId = _props$attributes4.videoBoxId,
            videoType = _props$attributes4.videoType,
            videoURL = _props$attributes4.videoURL,
            autoPlay = _props$attributes4.autoPlay,
            loop = _props$attributes4.loop,
            mute = _props$attributes4.mute,
            relatedVideos = _props$attributes4.relatedVideos,
            controls = _props$attributes4.controls,
            overlay = _props$attributes4.overlay,
            overlayImgURL = _props$attributes4.overlayImgURL,
            blur = _props$attributes4.blur,
            contrast = _props$attributes4.contrast,
            saturation = _props$attributes4.saturation,
            bright = _props$attributes4.bright,
            hue = _props$attributes4.hue,
            playTop = _props$attributes4.playTop,
            playLeft = _props$attributes4.playLeft,
            playIcon = _props$attributes4.playIcon,
            playColor = _props$attributes4.playColor,
            playHoverColor = _props$attributes4.playHoverColor,
            playHoverBackColor = _props$attributes4.playHoverBackColor,
            playSize = _props$attributes4.playSize,
            playPadding = _props$attributes4.playPadding,
            playBack = _props$attributes4.playBack,
            playBorderColor = _props$attributes4.playBorderColor,
            playBorderWidth = _props$attributes4.playBorderWidth,
            playBorderRadius = _props$attributes4.playBorderRadius,
            playBorderType = _props$attributes4.playBorderType,
            videoDesc = _props$attributes4.videoDesc,
            descTop = _props$attributes4.descTop,
            descLeft = _props$attributes4.descLeft,
            videoDescText = _props$attributes4.videoDescText,
            videoDescColor = _props$attributes4.videoDescColor,
            videoDescBack = _props$attributes4.videoDescBack,
            videoDescPadding = _props$attributes4.videoDescPadding,
            videoDescSize = _props$attributes4.videoDescSize,
            videoDescFamily = _props$attributes4.videoDescFamily,
            videoDescWeight = _props$attributes4.videoDescWeight,
            videoDescLetter = _props$attributes4.videoDescLetter,
            videoDescStyle = _props$attributes4.videoDescStyle,
            videoDescUpper = _props$attributes4.videoDescUpper,
            videoDescBorderRadius = _props$attributes4.videoDescBorderRadius,
            boxBorderColor = _props$attributes4.boxBorderColor,
            boxBorderWidth = _props$attributes4.boxBorderWidth,
            boxBorderRadius = _props$attributes4.boxBorderRadius,
            boxBorderType = _props$attributes4.boxBorderType,
            shadowBlur = _props$attributes4.shadowBlur,
            shadowColor = _props$attributes4.shadowColor,
            shadowHorizontal = _props$attributes4.shadowHorizontal,
            shadowVertical = _props$attributes4.shadowVertical,
            shadowPosition = _props$attributes4.shadowPosition;

        var loopVideo = function loopVideo() {
            if (videoURL && "youtube" === videoType) {
                if (videoURL.startsWith("http")) {
                    return loop ? "1&playlist=" + videoURL.replace("https://www.youtube.com/embed/", "") : "0";
                } else {
                    return loop ? "1&playlist=" + videoURL : "0";
                }
            } else {
                return loop ? "1" : "0";
            }
        };
        return React.createElement(
            "div",
            {
                id: videoBoxId,
                className: className + " video-overlay-" + overlay,
                "data-type": videoType,
                style: {
                    border: boxBorderType,
                    borderWidth: boxBorderWidth + "px",
                    borderRadius: boxBorderRadius + "px",
                    borderColor: boxBorderColor,
                    boxShadow: shadowHorizontal + "px " + shadowVertical + "px " + shadowBlur + "px " + shadowColor + " " + shadowPosition
                }
            },
            React.createElement("style", {
                dangerouslySetInnerHTML: {
                    __html: ["#" + videoBoxId + " ." + className + "__play:hover {", "color: " + playHoverColor + " !important;", "background-color: " + playHoverBackColor + " !important;", "}"].join("\n")
                }
            }),
            React.createElement(
                "div",
                { className: className + "__container" },
                "self" !== videoType && React.createElement("iframe", {
                    src: (0, _index2.default)(videoType, videoURL) + "?autoplay=" + (overlay ? 0 : autoPlay) + "&loop=" + loopVideo() + "&mute" + ("vimeo" == videoType ? "d" : "") + "=" + mute + "&rel=" + (relatedVideos ? "1" : "0") + "&controls=" + (controls ? "1" : "0"),
                    frameborder: "0",
                    gesture: "media",
                    allow: "encrypted-media",
                    allowfullscreen: true
                }),
                "self" === videoType && React.createElement("video", {
                    src: videoURL,
                    loop: loop ? true : false,
                    muted: mute ? true : false,
                    controls: controls ? true : false,
                    autoplay: overlay ? false : autoPlay
                })
            ),
            overlay && overlayImgURL && React.createElement("div", {
                className: className + "__overlay",
                style: {
                    backgroundImage: "url('" + overlayImgURL + "')",
                    filter: "brightness( " + bright + "% ) contrast( " + contrast + "% ) saturate( " + saturation + "% ) blur( " + blur + "px ) hue-rotate( " + hue + "deg )"
                }
            }),
            overlay && playIcon && React.createElement(
                "div",
                {
                    className: className + "__play",
                    style: {
                        top: playTop + "%",
                        left: playLeft + "%",
                        color: playColor,
                        backgroundColor: playBack,
                        border: playBorderType,
                        borderWidth: playBorderWidth + "px",
                        borderRadius: playBorderRadius + "px",
                        borderColor: playBorderColor,
                        padding: playPadding + "px"
                    }
                },
                React.createElement("i", {
                    className: className + "__play_icon dashicons dashicons-controls-play",
                    style: {
                        fontSize: playSize + "px"
                    }
                })
            ),
            overlay && videoDesc && React.createElement(
                "div",
                {
                    className: className + "__desc",
                    style: {
                        color: videoDescColor,
                        backgroundColor: videoDescBack,
                        padding: videoDescPadding,
                        borderRadius: videoDescBorderRadius,
                        top: descTop + "%",
                        left: descLeft + "%"
                    }
                },
                React.createElement(
                    "p",
                    {
                        className: className + "__desc_text",
                        style: {
                            fontSize: videoDescSize + "px",
                            fontFamily: videoDescFamily,
                            fontWeight: videoDescWeight,
                            letterSpacing: videoDescLetter + "px",
                            textTransform: videoDescUpper ? "uppercase" : "none",
                            fontStyle: videoDescStyle
                        }
                    },
                    React.createElement(
                        "span",
                        null,
                        videoDescText
                    )
                )
            )
        );
    }
}, {
    attributes: _attributes2.default,
    migrate: function migrate(attributes) {
        var newAttributes = {
            videoDescFamily: ""
        };
        return Object.assign(attributes, newAttributes);
    },
    save: function save(props) {
        var _props$attributes5 = props.attributes,
            videoBoxId = _props$attributes5.videoBoxId,
            videoType = _props$attributes5.videoType,
            videoURL = _props$attributes5.videoURL,
            autoPlay = _props$attributes5.autoPlay,
            loop = _props$attributes5.loop,
            mute = _props$attributes5.mute,
            relatedVideos = _props$attributes5.relatedVideos,
            controls = _props$attributes5.controls,
            overlay = _props$attributes5.overlay,
            overlayImgURL = _props$attributes5.overlayImgURL,
            blur = _props$attributes5.blur,
            contrast = _props$attributes5.contrast,
            saturation = _props$attributes5.saturation,
            bright = _props$attributes5.bright,
            hue = _props$attributes5.hue,
            playTop = _props$attributes5.playTop,
            playLeft = _props$attributes5.playLeft,
            playIcon = _props$attributes5.playIcon,
            playColor = _props$attributes5.playColor,
            playHoverColor = _props$attributes5.playHoverColor,
            playHoverBackColor = _props$attributes5.playHoverBackColor,
            playSize = _props$attributes5.playSize,
            playPadding = _props$attributes5.playPadding,
            playBack = _props$attributes5.playBack,
            playBorderColor = _props$attributes5.playBorderColor,
            playBorderWidth = _props$attributes5.playBorderWidth,
            playBorderRadius = _props$attributes5.playBorderRadius,
            playBorderType = _props$attributes5.playBorderType,
            videoDesc = _props$attributes5.videoDesc,
            descTop = _props$attributes5.descTop,
            descLeft = _props$attributes5.descLeft,
            videoDescText = _props$attributes5.videoDescText,
            videoDescColor = _props$attributes5.videoDescColor,
            videoDescBack = _props$attributes5.videoDescBack,
            videoDescPadding = _props$attributes5.videoDescPadding,
            videoDescSize = _props$attributes5.videoDescSize,
            videoDescWeight = _props$attributes5.videoDescWeight,
            videoDescLetter = _props$attributes5.videoDescLetter,
            videoDescStyle = _props$attributes5.videoDescStyle,
            videoDescUpper = _props$attributes5.videoDescUpper,
            videoDescBorderRadius = _props$attributes5.videoDescBorderRadius,
            boxBorderColor = _props$attributes5.boxBorderColor,
            boxBorderWidth = _props$attributes5.boxBorderWidth,
            boxBorderRadius = _props$attributes5.boxBorderRadius,
            boxBorderType = _props$attributes5.boxBorderType,
            shadowBlur = _props$attributes5.shadowBlur,
            shadowColor = _props$attributes5.shadowColor,
            shadowHorizontal = _props$attributes5.shadowHorizontal,
            shadowVertical = _props$attributes5.shadowVertical,
            shadowPosition = _props$attributes5.shadowPosition;

        var loopVideo = function loopVideo() {
            if (videoURL && "youtube" === videoType) {
                if (videoURL.startsWith("http")) {
                    return loop ? "1&playlist=" + videoURL.replace("https://www.youtube.com/embed/", "") : "0";
                } else {
                    return loop ? "1&playlist=" + videoURL : "0";
                }
            } else {
                return loop ? "1" : "0";
            }
        };
        return React.createElement(
            "div",
            {
                id: videoBoxId,
                className: className + " video-overlay-" + overlay,
                "data-type": videoType,
                style: {
                    border: boxBorderType,
                    borderWidth: boxBorderWidth + "px",
                    borderRadius: boxBorderRadius + "px",
                    borderColor: boxBorderColor,
                    boxShadow: shadowHorizontal + "px " + shadowVertical + "px " + shadowBlur + "px " + shadowColor + " " + shadowPosition
                }
            },
            React.createElement("style", {
                dangerouslySetInnerHTML: {
                    __html: ["#" + videoBoxId + " ." + className + "__play:hover {", "color: " + playHoverColor + " !important;", "background-color: " + playHoverBackColor + " !important;", "}"].join("\n")
                }
            }),
            React.createElement(
                "div",
                { className: className + "__container" },
                "self" !== videoType && React.createElement("iframe", {
                    src: (0, _index2.default)(videoType, videoURL) + "?autoplay=" + (overlay ? 0 : autoPlay) + "&loop=" + loopVideo() + "&mute" + ("vimeo" == videoType ? "d" : "") + "=" + mute + "&rel=" + (relatedVideos ? "1" : "0") + "&controls=" + (controls ? "1" : "0"),
                    frameborder: "0",
                    gesture: "media",
                    allow: "encrypted-media",
                    allowfullscreen: true
                }),
                "self" === videoType && React.createElement("video", {
                    src: videoURL,
                    loop: loop ? true : false,
                    muted: mute ? true : false,
                    controls: controls ? true : false,
                    autoplay: overlay ? false : autoPlay
                })
            ),
            overlay && overlayImgURL && React.createElement("div", {
                className: className + "__overlay",
                style: {
                    backgroundImage: "url('" + overlayImgURL + "')",
                    filter: "brightness( " + bright + "% ) contrast( " + contrast + "% ) saturate( " + saturation + "% ) blur( " + blur + "px ) hue-rotate( " + hue + "deg )"
                }
            }),
            overlay && playIcon && React.createElement(
                "div",
                {
                    className: className + "__play",
                    style: {
                        top: playTop + "%",
                        left: playLeft + "%",
                        color: playColor,
                        backgroundColor: playBack,
                        border: playBorderType,
                        borderWidth: playBorderWidth + "px",
                        borderRadius: playBorderRadius + "px",
                        borderColor: playBorderColor,
                        padding: playPadding + "px"
                    }
                },
                React.createElement("i", {
                    className: className + "__play_icon dashicons dashicons-controls-play",
                    style: {
                        fontSize: playSize + "px"
                    }
                })
            ),
            overlay && videoDesc && React.createElement(
                "div",
                {
                    className: className + "__desc",
                    style: {
                        color: videoDescColor,
                        backgroundColor: videoDescBack,
                        padding: videoDescPadding,
                        borderRadius: videoDescBorderRadius,
                        top: descTop + "%",
                        left: descLeft + "%"
                    }
                },
                React.createElement(
                    "p",
                    {
                        className: className + "__desc_text",
                        style: {
                            fontSize: videoDescSize + "px",
                            fontWeight: videoDescWeight,
                            letterSpacing: videoDescLetter + "px",
                            textTransform: videoDescUpper ? "uppercase" : "none",
                            fontStyle: videoDescStyle
                        }
                    },
                    React.createElement(
                        "span",
                        null,
                        videoDescText
                    )
                )
            )
        );
    }
}, {
    attributes: _attributes2.default,
    save: function save(props) {
        var _props$attributes6 = props.attributes,
            videoBoxId = _props$attributes6.videoBoxId,
            videoType = _props$attributes6.videoType,
            videoURL = _props$attributes6.videoURL,
            autoPlay = _props$attributes6.autoPlay,
            loop = _props$attributes6.loop,
            mute = _props$attributes6.mute,
            controls = _props$attributes6.controls,
            overlay = _props$attributes6.overlay,
            overlayImgURL = _props$attributes6.overlayImgURL,
            blur = _props$attributes6.blur,
            contrast = _props$attributes6.contrast,
            saturation = _props$attributes6.saturation,
            bright = _props$attributes6.bright,
            hue = _props$attributes6.hue,
            playTop = _props$attributes6.playTop,
            playLeft = _props$attributes6.playLeft,
            playIcon = _props$attributes6.playIcon,
            playColor = _props$attributes6.playColor,
            playHoverColor = _props$attributes6.playHoverColor,
            playHoverBackColor = _props$attributes6.playHoverBackColor,
            playSize = _props$attributes6.playSize,
            playPadding = _props$attributes6.playPadding,
            playBack = _props$attributes6.playBack,
            playBorderColor = _props$attributes6.playBorderColor,
            playBorderWidth = _props$attributes6.playBorderWidth,
            playBorderRadius = _props$attributes6.playBorderRadius,
            playBorderType = _props$attributes6.playBorderType,
            videoDesc = _props$attributes6.videoDesc,
            descTop = _props$attributes6.descTop,
            descLeft = _props$attributes6.descLeft,
            videoDescText = _props$attributes6.videoDescText,
            videoDescColor = _props$attributes6.videoDescColor,
            videoDescBack = _props$attributes6.videoDescBack,
            videoDescPadding = _props$attributes6.videoDescPadding,
            videoDescSize = _props$attributes6.videoDescSize,
            videoDescWeight = _props$attributes6.videoDescWeight,
            videoDescLetter = _props$attributes6.videoDescLetter,
            videoDescStyle = _props$attributes6.videoDescStyle,
            videoDescUpper = _props$attributes6.videoDescUpper,
            videoDescBorderRadius = _props$attributes6.videoDescBorderRadius,
            boxBorderColor = _props$attributes6.boxBorderColor,
            boxBorderWidth = _props$attributes6.boxBorderWidth,
            boxBorderRadius = _props$attributes6.boxBorderRadius,
            boxBorderType = _props$attributes6.boxBorderType,
            shadowBlur = _props$attributes6.shadowBlur,
            shadowColor = _props$attributes6.shadowColor,
            shadowHorizontal = _props$attributes6.shadowHorizontal,
            shadowVertical = _props$attributes6.shadowVertical,
            shadowPosition = _props$attributes6.shadowPosition;

        var loopVideo = function loopVideo() {
            if ("youtube" === videoType) {
                if (videoURL && videoURL.startsWith("http")) {
                    return loop ? "1&playlist=" + videoURL.replace("https://www.youtube.com/embed/", "") : "0";
                } else {
                    return loop ? "1&playlist=" + videoURL : "0";
                }
            } else {
                return loop ? "1" : "0";
            }
        };
        return React.createElement(
            "div",
            {
                id: videoBoxId,
                className: className + " video-overlay-" + overlay,
                "data-type": videoType,
                style: {
                    border: boxBorderType,
                    borderWidth: boxBorderWidth + "px",
                    borderRadius: boxBorderRadius + "px",
                    borderColor: boxBorderColor,
                    boxShadow: shadowHorizontal + "px " + shadowVertical + "px " + shadowBlur + "px " + shadowColor + " " + shadowPosition
                }
            },
            React.createElement("style", {
                dangerouslySetInnerHTML: {
                    __html: ["#" + videoBoxId + " ." + className + "__play:hover {", "color: " + playHoverColor + " !important;", "background-color: " + playHoverBackColor + " !important;", "}"].join("\n")
                }
            }),
            React.createElement(
                "div",
                { className: className + "__container" },
                "self" !== videoType && React.createElement("iframe", {
                    src: (0, _index2.default)(videoType, videoURL) + "?autoplay=" + (overlay ? 0 : autoPlay) + "&loop=" + loopVideo() + "&mute" + ("vimeo" == videoType ? "d" : "") + "=" + mute + "&controls=" + (controls ? "1" : "0"),
                    frameborder: "0",
                    gesture: "media",
                    allow: "encrypted-media",
                    allowfullscreen: true
                }),
                "self" === videoType && React.createElement("video", {
                    src: videoURL,
                    loop: loop ? true : false,
                    muted: mute ? true : false,
                    controls: controls ? true : false,
                    autoplay: overlay ? false : autoPlay
                })
            ),
            overlay && overlayImgURL && React.createElement("div", {
                className: className + "__overlay",
                style: {
                    backgroundImage: "url('" + overlayImgURL + "')",
                    filter: "brightness( " + bright + "% ) contrast( " + contrast + "% ) saturate( " + saturation + "% ) blur( " + blur + "px ) hue-rotate( " + hue + "deg )"
                }
            }),
            overlay && playIcon && React.createElement(
                "div",
                {
                    className: className + "__play",
                    style: {
                        top: playTop + "%",
                        left: playLeft + "%",
                        color: playColor,
                        backgroundColor: playBack,
                        border: playBorderType,
                        borderWidth: playBorderWidth + "px",
                        borderRadius: playBorderRadius + "px",
                        borderColor: playBorderColor,
                        padding: playPadding + "px"
                    }
                },
                React.createElement("i", {
                    className: className + "__play_icon dashicons dashicons-controls-play",
                    style: {
                        fontSize: playSize + "px"
                    }
                })
            ),
            overlay && videoDesc && React.createElement(
                "div",
                {
                    className: className + "__desc",
                    style: {
                        color: videoDescColor,
                        backgroundColor: videoDescBack,
                        padding: videoDescPadding,
                        borderRadius: videoDescBorderRadius,
                        top: descTop + "%",
                        left: descLeft + "%"
                    }
                },
                React.createElement(
                    "p",
                    {
                        className: className + "__desc_text",
                        style: {
                            fontSize: videoDescSize + "px",
                            fontWeight: videoDescWeight,
                            letterSpacing: videoDescLetter + "px",
                            textTransform: videoDescUpper ? "uppercase" : "none",
                            fontStyle: videoDescStyle
                        }
                    },
                    React.createElement(
                        "span",
                        null,
                        videoDescText
                    )
                )
            )
        );
    }
}];

exports.default = deprecatedContent;

/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _settings = __webpack_require__(1);

var _save = __webpack_require__(289);

var _save2 = _interopRequireDefault(_save);

var _edit = __webpack_require__(290);

var _edit2 = _interopRequireDefault(_edit);

var _deprecated = __webpack_require__(310);

var _deprecated2 = _interopRequireDefault(_deprecated);

var _icons = __webpack_require__(4);

var _icons2 = _interopRequireDefault(_icons);

var _attributes = __webpack_require__(311);

var _attributes2 = _interopRequireDefault(_attributes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __ = wp.i18n.__;
var registerBlockType = wp.blocks.registerBlockType;


registerBlockType("premium/fancy-text", {
    title: __("Fancy Text"),
    icon: React.createElement(_icons2.default, { icon: "fancy-text" }),
    category: "premium-blocks",
    attributes: _attributes2.default,
    supports: { inserter: _settings.fancyText },
    example: {},
    edit: _edit2.default,
    save: _save2.default,
    deprecated: _deprecated2.default
});

/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = save;

var _classnames = __webpack_require__(0);

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function save(props) {
    var _this = this;

    var attributes = props.attributes,
        className = props.className;
    var block_id = attributes.block_id,
        align = attributes.align,
        prefix = attributes.prefix,
        suffix = attributes.suffix,
        repeaterFancyText = attributes.repeaterFancyText,
        effect = attributes.effect,
        loop = attributes.loop,
        cursorShow = attributes.cursorShow,
        cursorMark = attributes.cursorMark,
        typeSpeed = attributes.typeSpeed,
        backdelay = attributes.backdelay,
        startdelay = attributes.startdelay,
        backSpeed = attributes.backSpeed,
        animationSpeed = attributes.animationSpeed,
        pauseTime = attributes.pauseTime,
        hoverPause = attributes.hoverPause,
        fancyalign = attributes.fancyalign,
        hideDesktop = attributes.hideDesktop,
        hideTablet = attributes.hideTablet,
        hideMobile = attributes.hideMobile,
        fancyStyles = attributes.fancyStyles,
        PreStyles = attributes.PreStyles;


    return React.createElement(
        "div",
        {
            className: (0, _classnames2.default)(className, "premium-block-" + block_id + " " + hideDesktop + " " + hideTablet + " " + hideMobile),
            style: {
                textAlign: align
            }
        },
        effect === "typing" ? React.createElement(
            "div",
            {
                id: "premium-fancy-text-" + block_id,
                className: "premium-fancy-text",
                style: {
                    textAlign: align
                },
                "data-effect": "" + effect,
                "data-strings": "" + repeaterFancyText.map(function (item, index) {
                    return item.title;
                }),
                "data-typespeed": "" + typeSpeed,
                "data-backspeed": "" + backSpeed,
                "data-startdelay": "" + startdelay,
                "data-backdelay": "" + backdelay,
                "data-loop": "" + loop,
                "data-cursorshow": "" + cursorShow,
                "data-cursormark": "" + cursorMark
            },
            React.createElement(
                "span",
                { className: "premium-fancy-text-prefix-text",
                    style: {
                        color: PreStyles[0].textColor,
                        fontWeight: PreStyles[0].textWeight,
                        letterSpacing: PreStyles[0].textLetter + "px",
                        textTransform: "" + (PreStyles[0].textUpper ? "uppercase" : "none"),
                        fontStyle: PreStyles[0].textStyle,
                        backgroundColor: PreStyles[0].textBGColor
                    }
                },
                prefix,
                " "
            ),
            React.createElement(
                "span",
                {
                    className: "premium-fancy-text-title",
                    style: {
                        color: fancyStyles[0].fancyTextColor,
                        fontWeight: fancyStyles[0].fancyTextWeight,
                        letterSpacing: fancyStyles[0].fancyTextLetter + "px",
                        textTransform: "" + (fancyStyles[0].fancyTextUpper ? "uppercase" : "none"),
                        fontStyle: "" + fancyStyles[0].fancyTextStyle,
                        backgroundColor: "" + fancyStyles[0].fancyTextBGColor,
                        textShadow: fancyStyles[0].shadowHorizontal + "px " + fancyStyles[0].shadowVertical + "px " + fancyStyles[0].shadowBlur + "px " + fancyStyles[0].shadowColor
                    },
                    ref: function ref(el) {
                        _this.el = el;
                    }
                },
                " "
            ),
            React.createElement(
                "span",
                { className: "premium-fancy-text-suffix-text",
                    style: {
                        color: PreStyles[0].textColor,
                        fontWeight: PreStyles[0].textWeight,
                        letterSpacing: PreStyles[0].textLetter + "px",
                        textTransform: "" + (PreStyles[0].textUpper ? "uppercase" : "none"),
                        fontStyle: PreStyles[0].textStyle,
                        backgroundColor: PreStyles[0].textBGColor
                    }
                },
                " ",
                suffix
            )
        ) : React.createElement(
            "div",
            {
                id: "premium-fancy-text-" + block_id,
                className: "premium-fancy-text premium-fancy-slide",
                style: {
                    textAlign: align

                },
                "data-effect": "" + effect,
                "data-strings": "" + repeaterFancyText.map(function (item, index) {
                    return item.title;
                }),
                "data-animationspeed": "" + animationSpeed,
                "data-pausetime": "" + pauseTime,
                "data-hoverpause": "" + hoverPause
            },
            React.createElement(
                "span",
                { className: "premium-fancy-text-prefix-text",
                    style: {
                        color: PreStyles[0].textColor,
                        fontWeight: PreStyles[0].textWeight,
                        letterSpacing: PreStyles[0].textLetter + "px",
                        textTransform: "" + (PreStyles[0].textUpper ? "uppercase" : "none"),
                        fontStyle: PreStyles[0].textStyle,
                        backgroundColor: PreStyles[0].textBGColor
                    }
                },
                prefix,
                " "
            ),
            React.createElement(
                "div",
                {
                    className: "premium-fancy-text-title-slide",
                    style: {
                        textAlign: fancyalign,
                        color: fancyStyles[0].fancyTextColor,
                        fontWeight: fancyStyles[0].fancyTextWeight,
                        letterSpacing: fancyStyles[0].fancyTextLetter + "px",
                        textTransform: "" + (fancyStyles[0].fancyTextUpper ? "uppercase" : "none"),
                        fontStyle: "" + fancyStyles[0].fancyTextStyle,
                        backgroundColor: "" + fancyStyles[0].fancyTextBGColor,
                        textShadow: fancyStyles[0].shadowHorizontal + "px " + fancyStyles[0].shadowVertical + "px " + fancyStyles[0].shadowBlur + "px " + fancyStyles[0].shadowColor
                    }
                },
                React.createElement(
                    "ul",
                    {
                        className: "premium-fancy-text-title-slide-list"
                    },
                    repeaterFancyText.map(function (item, index) {
                        return React.createElement(
                            "li",
                            null,
                            item.title
                        );
                    })
                )
            ),
            React.createElement(
                "span",
                { className: "premium-fancy-text-suffix-text",
                    style: {
                        color: PreStyles[0].textColor,
                        fontWeight: PreStyles[0].textWeight,
                        letterSpacing: PreStyles[0].textLetter + "px",
                        textTransform: "" + (PreStyles[0].textUpper ? "uppercase" : "none"),
                        fontStyle: PreStyles[0].textStyle,
                        backgroundColor: PreStyles[0].textBGColor
                    }
                },
                " ",
                suffix
            )
        )
    );
}

/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _classnames = __webpack_require__(0);

var _classnames2 = _interopRequireDefault(_classnames);

var _premiumTypo = __webpack_require__(7);

var _premiumTypo2 = _interopRequireDefault(_premiumTypo);

var _typed = __webpack_require__(291);

var _typed2 = _interopRequireDefault(_typed);

var _premiumResponsiveTabs = __webpack_require__(8);

var _premiumResponsiveTabs2 = _interopRequireDefault(_premiumResponsiveTabs);

var _ColorComponent = __webpack_require__(2);

var _ColorComponent2 = _interopRequireDefault(_ColorComponent);

var _radioControl = __webpack_require__(10);

var _radioControl2 = _interopRequireDefault(_radioControl);

var _reactSortableHoc = __webpack_require__(70);

var _PremiumShadow = __webpack_require__(5);

var _PremiumShadow2 = _interopRequireDefault(_PremiumShadow);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var __ = wp.i18n.__;
var withSelect = wp.data.withSelect;
var _wp$element = wp.element,
    Component = _wp$element.Component,
    Fragment = _wp$element.Fragment;
var _wp$blockEditor = wp.blockEditor,
    BlockControls = _wp$blockEditor.BlockControls,
    AlignmentToolbar = _wp$blockEditor.AlignmentToolbar,
    InspectorControls = _wp$blockEditor.InspectorControls;
var _wp$components = wp.components,
    PanelBody = _wp$components.PanelBody,
    SelectControl = _wp$components.SelectControl,
    TextControl = _wp$components.TextControl,
    ToggleControl = _wp$components.ToggleControl;


var SortableItem = (0, _reactSortableHoc.SortableElement)(function (_ref) {
    var edit = _ref.edit,
        removeItem = _ref.removeItem,
        newIndex = _ref.newIndex,
        value = _ref.value,
        changeFancyValue = _ref.changeFancyValue,
        items = _ref.items;
    return React.createElement(
        "div",
        { className: "premium-repeater-item" },
        React.createElement(
            "div",
            { className: "premium-repeater-item__container " + newIndex },
            React.createElement("span", { className: "premium-repeater-item__dragHandle" }),
            React.createElement(
                "div",
                {
                    className: "premium-repeater-item__content",
                    onClick: function onClick() {
                        return edit(newIndex);
                    }
                },
                value.title,
                " "
            ),
            items.length != 1 ? React.createElement("button", {
                className: "premium-repeater-item__trashicon fa fa-trash",
                onClick: function onClick() {
                    return removeItem(newIndex, value);
                }
            }) : ""
        ),
        React.createElement(
            "div",
            {
                className: "premium-repeater-item-controls " + (value.edit ? "editable" : "")
            },
            React.createElement(TextControl, {
                label: __("Fancy String"),
                value: value.title,
                onChange: function onChange(newText) {
                    return changeFancyValue(newText, newIndex);
                }
            })
        )
    );
});

var SortableList = (0, _reactSortableHoc.SortableContainer)(function (_ref2) {
    var items = _ref2.items,
        removeItem = _ref2.removeItem,
        edit = _ref2.edit,
        changeFancyValue = _ref2.changeFancyValue;

    return React.createElement(
        "div",
        null,
        " ",
        items.map(function (value, index) {
            return React.createElement(SortableItem, {
                key: "item-" + value,
                index: index,
                newIndex: index,
                value: value,
                removeItem: removeItem,
                edit: edit,
                changeFancyValue: changeFancyValue,
                items: items
            });
        }),
        " "
    );
});

var edit = function (_Component) {
    _inherits(edit, _Component);

    function edit() {
        _classCallCheck(this, edit);

        var _this = _possibleConstructorReturn(this, (edit.__proto__ || Object.getPrototypeOf(edit)).apply(this, arguments));

        _this.renderFancyText = _this.renderFancyText.bind(_this);
        _this.getPreviewSize = _this.getPreviewSize.bind(_this);
        return _this;
    }

    _createClass(edit, [{
        key: "getPreviewSize",
        value: function getPreviewSize(device, desktopSize, tabletSize, mobileSize) {
            if (device === 'Mobile') {
                if (undefined !== mobileSize && '' !== mobileSize) {
                    return mobileSize;
                } else if (undefined !== tabletSize && '' !== tabletSize) {
                    return tabletSize;
                }
            } else if (device === 'Tablet') {
                if (undefined !== tabletSize && '' !== tabletSize) {
                    return tabletSize;
                }
            }
            return desktopSize;
        }
    }, {
        key: "componentDidMount",
        value: function componentDidMount() {
            this.props.setAttributes({ block_id: this.props.clientId.substr(0, 6) });
            this.props.setAttributes({ classMigrate: true });
            this.renderFancyText();
        }
    }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
            var effect = this.props.attributes.effect;

            if (effect == "typing" && this.typed != undefined) {
                this.typed.destroy();
            }
            this.renderFancyText();
        }
    }, {
        key: "renderFancyText",
        value: function renderFancyText() {
            var _props$attributes = this.props.attributes,
                repeaterFancyText = _props$attributes.repeaterFancyText,
                loop = _props$attributes.loop,
                cursorShow = _props$attributes.cursorShow,
                cursorMark = _props$attributes.cursorMark,
                typeSpeed = _props$attributes.typeSpeed,
                backSpeed = _props$attributes.backSpeed,
                startdelay = _props$attributes.startdelay,
                backdelay = _props$attributes.backdelay,
                effect = _props$attributes.effect;


            if (!repeaterFancyText) return null;

            var txt = repeaterFancyText.map(function (item) {
                return item.title;
            });

            if (effect === "typing") {
                var options = {
                    strings: txt,
                    typeSpeed: typeSpeed,
                    backSpeed: backSpeed,
                    backDelay: backdelay,
                    startDelay: startdelay,
                    loop: loop,
                    showCursor: cursorShow,
                    cursorChar: cursorMark
                };
                this.typed = new _typed2.default(this.el, options);
            }
        }
    }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
            var effect = this.props.attributes.effect;

            effect === "typing" ? this.typed.destroy() : "";
        }
    }, {
        key: "render",
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                attributes = _props.attributes,
                setAttributes = _props.setAttributes,
                isSelected = _props.isSelected,
                className = _props.className;
            var block_id = attributes.block_id,
                align = attributes.align,
                prefix = attributes.prefix,
                suffix = attributes.suffix,
                repeaterFancyText = attributes.repeaterFancyText,
                effect = attributes.effect,
                loop = attributes.loop,
                cursorShow = attributes.cursorShow,
                cursorMark = attributes.cursorMark,
                typeSpeed = attributes.typeSpeed,
                backdelay = attributes.backdelay,
                startdelay = attributes.startdelay,
                backSpeed = attributes.backSpeed,
                animationSpeed = attributes.animationSpeed,
                pauseTime = attributes.pauseTime,
                hoverPause = attributes.hoverPause,
                fancyalign = attributes.fancyalign,
                hideDesktop = attributes.hideDesktop,
                hideTablet = attributes.hideTablet,
                hideMobile = attributes.hideMobile,
                fancyStyles = attributes.fancyStyles,
                PreStyles = attributes.PreStyles;


            var EFFECT = [{
                label: __("Typing", 'premium-blocks-for-gutenberg'),
                value: "typing"
            }, {
                label: __("Slide", 'premium-blocks-for-gutenberg'),
                value: "slide"
            }];

            var changeFancyValue = function changeFancyValue(newText, newIndex) {
                setAttributes({
                    repeaterFancyText: onRepeaterChange("title", newText, newIndex)
                });
            };

            var onSortEndSingle = function onSortEndSingle(_ref3) {
                var oldIndex = _ref3.oldIndex,
                    newIndex = _ref3.newIndex;

                var arrayItem = repeaterFancyText.map(function (cont) {
                    return cont;
                });
                var sortedArray = (0, _reactSortableHoc.arrayMove)(arrayItem, oldIndex, newIndex);
                setAttributes({ repeaterFancyText: sortedArray });
            };

            var shouldCancelStart = function shouldCancelStart(e) {
                // Prevent sorting from being triggered if target is input or button
                if (["button", "div", "input", "textarea", "i"].indexOf(e.target.tagName.toLowerCase()) !== -1) {
                    return true; // Return true to cancel sorting
                }
            };

            var onRepeaterChange = function onRepeaterChange(attr, value, index) {
                return repeaterFancyText.map(function (item, currIndex) {
                    if (index == currIndex) {
                        item[attr] = value;
                    }
                    return item;
                });
            };

            var _edit = function _edit(index) {
                return repeaterFancyText.map(function (item, i) {
                    if (index == i) {
                        setAttributes({
                            repeaterFancyText: onRepeaterChange("edit", item.edit ? false : true, index)
                        });
                    } else {
                        setAttributes({
                            repeaterFancyText: onRepeaterChange("edit", false, i)
                        });
                    }
                });
            };

            var _removeItem = function _removeItem(index, item) {
                var array = repeaterFancyText.map(function (cont, currIndex) {
                    return cont;
                }).filter(function (f, i) {
                    return i != index;
                });
                setAttributes({ repeaterFancyText: array });
            };

            var addNewFancyText = function addNewFancyText() {
                setAttributes({
                    repeaterFancyText: repeaterFancyText.concat([{
                        title: __("Title", 'premium-blocks-for-gutenberg'),
                        edit: true
                    }])
                });
            };

            var saveFancyStyle = function saveFancyStyle(value) {
                var newUpdate = fancyStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({ fancyStyles: newUpdate });
            };

            var savePrefixStyle = function savePrefixStyle(value) {
                var newUpdate = PreStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({ PreStyles: newUpdate });
            };

            var fancyTextFontSize = this.getPreviewSize(this.props.deviceType, fancyStyles[0].fancyTextfontSize, fancyStyles[0].fancyTextfontSizeTablet, fancyStyles[0].fancyTextfontSizeMobile);;
            var PrefixFontSize = this.getPreviewSize(this.props.deviceType, PreStyles[0].textfontSize, PreStyles[0].textfontSizeTablet, PreStyles[0].textfontSizeMobile);

            var renderCss = React.createElement(
                "style",
                null,
                "\n           #premium-fancy-text-" + block_id + " .premium-fancy-text-title {\n            font-size:" + fancyTextFontSize + fancyStyles[0].fancyTextfontSizeUnit + ";\n            color: " + fancyStyles[0].fancyTextColor + ";\n            font-weight: " + fancyStyles[0].fancyTextWeight + ";\n            letter-spacing: " + fancyStyles[0].fancyTextLetter + "px;\n            text-transform: " + (fancyStyles[0].fancyTextUpper ? "uppercase" : "none") + ";\n            font-style: " + fancyStyles[0].fancyTextStyle + ";\n            background-color: " + fancyStyles[0].fancyTextBGColor + ";\n            text-shadow: " + fancyStyles[0].shadowHorizontal + "px " + fancyStyles[0].shadowVertical + "px " + fancyStyles[0].shadowBlur + "px " + fancyStyles[0].shadowColor + ";\n        }\n       #premium-fancy-text-" + block_id + " .premium-fancy-text-title-slide {\n            font-size:" + fancyTextFontSize + fancyStyles[0].fancyTextfontSizeUnit + ";\n            color: " + fancyStyles[0].fancyTextColor + ";\n            font-weight: " + fancyStyles[0].fancyTextWeight + ";\n            letter-spacing: " + fancyStyles[0].fancyTextLetter + " + \"px\";\n            text-transform: " + (fancyStyles[0].fancyTextUpper ? "uppercase" : "none") + ";\n            font-style: " + fancyStyles[0].fancyTextStyle + ";\n            background-color: " + fancyStyles[0].fancyTextBGColor + ";\n            text-shadow: " + fancyStyles[0].shadowHorizontal + "px " + fancyStyles[0].shadowVertical + "px " + fancyStyles[0].shadowBlur + "px " + fancyStyles[0].shadowColor + ";\n        }\n        #premium-fancy-text-" + block_id + " .typed-cursor {\n            color: " + fancyStyles[0].cursorColor + ";\n        }\n        #premium-fancy-text-" + block_id + " .premium-fancy-text-prefix-text {\n            font-size:" + PrefixFontSize + PreStyles[0].textfontSizeUnit + ";\n            color: " + PreStyles[0].textColor + ";\n            font-weight: " + PreStyles[0].textWeight + ";\n            letter-spacing: " + PreStyles[0].textLetter + "px;\n            text-transform: " + (PreStyles[0].textUpper ? "uppercase" : "none") + ";\n            font-style: " + PreStyles[0].textStyle + ";\n            background-color: " + PreStyles[0].textBGColor + ";\n        }\n        #premium-fancy-text-" + block_id + " .premium-fancy-text-suffix-text{\n            font-size:" + PrefixFontSize + PreStyles[0].textfontSizeUnit + ";\n            color: " + PreStyles[0].textColor + ";\n            font-weight: " + PreStyles[0].textWeight + ";\n            letter-spacing: " + PreStyles[0].textLetter + "px;\n            text-transform: " + (PreStyles[0].textUpper ? "uppercase" : "none") + ";\n            font-style: " + PreStyles[0].textStyle + ";\n            background-color: " + PreStyles[0].textBGColor + ";\n        }\n            "
            );

            return [renderCss, isSelected && [React.createElement(
                BlockControls,
                null,
                React.createElement(AlignmentToolbar, {
                    value: align,
                    onChange: function onChange(value) {
                        return setAttributes({ align: value });
                    }
                })
            )], isSelected && React.createElement(
                InspectorControls,
                null,
                React.createElement(
                    PanelBody,
                    {
                        title: __("General Settings", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(TextControl, {
                        label: __("Prefix Text", 'premium-blocks-for-gutenberg'),
                        value: prefix,
                        onChange: function onChange(newText) {
                            return setAttributes({ prefix: newText });
                        }
                    }),
                    React.createElement(
                        Fragment,
                        null,
                        React.createElement(
                            "div",
                            { className: "premium-fancy-text-control-content" },
                            React.createElement(
                                "label",
                                null,
                                React.createElement(
                                    "span",
                                    { className: "premium-fancy-text-control-title" },
                                    " ",
                                    "Fancy Strings",
                                    " "
                                )
                            ),
                            React.createElement(SortableList, {
                                items: repeaterFancyText,
                                onSortEnd: function onSortEnd(oldIndex, newIndex) {
                                    return onSortEndSingle(oldIndex, newIndex);
                                },
                                removeItem: function removeItem(value) {
                                    return _removeItem(value);
                                },
                                edit: function edit(value) {
                                    return _edit(value);
                                },
                                shouldCancelStart: shouldCancelStart,
                                changeFancyValue: changeFancyValue,
                                helperClass: "premium-fancy-text__sortableHelper"
                            }),
                            React.createElement(
                                "div",
                                { className: "premium-repeater-btn__wrap" },
                                React.createElement(
                                    "button",
                                    {
                                        className: "premium-repeater-btn",
                                        onClick: function onClick() {
                                            return addNewFancyText();
                                        }
                                    },
                                    React.createElement("i", { className: "dashicons dashicons-plus premium-repeater__icon" }),
                                    React.createElement(
                                        "span",
                                        null,
                                        __('Add New Item')
                                    )
                                )
                            )
                        ),
                        React.createElement("br", null)
                    ),
                    React.createElement(TextControl, {
                        label: __("Suffix Text", 'premium-blocks-for-gutenberg'),
                        value: suffix,
                        onChange: function onChange(newText) {
                            return setAttributes({ suffix: newText });
                        }
                    })
                ),
                React.createElement(
                    PanelBody,
                    {
                        title: __("Advanced Settings", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(SelectControl, {
                        label: __("Effect", 'premium-blocks-for-gutenberg'),
                        options: EFFECT,
                        value: effect,
                        onChange: function onChange(newValue) {
                            return setAttributes({ effect: newValue });
                        }
                    }),
                    "typing" === effect ? React.createElement(
                        Fragment,
                        null,
                        React.createElement(TextControl, {
                            label: __("Type Speed", 'premium-blocks-for-gutenberg'),
                            type: "Number",
                            value: typeSpeed,
                            onChange: function onChange(newValue) {
                                return setAttributes({ typeSpeed: parseInt(newValue) });
                            },
                            help: __('Set typing effect speed in milliseconds.', 'premium-blocks-for-gutenberg')
                        }),
                        React.createElement(TextControl, {
                            label: __("Back Speed", 'premium-blocks-for-gutenberg'),
                            type: "Number",
                            value: backSpeed,
                            onChange: function onChange(newValue) {
                                return setAttributes({ backSpeed: parseInt(newValue) });
                            },
                            help: __('Set a speed for backspace effect in milliseconds.', 'premium-blocks-for-gutenberg')
                        }),
                        React.createElement(TextControl, {
                            label: __("Start Delay", 'premium-blocks-for-gutenberg'),
                            type: "Number",
                            value: startdelay,
                            onChange: function onChange(newValue) {
                                return setAttributes({ startdelay: parseInt(newValue) });
                            },
                            help: __('If you set it on 5000 milliseconds, the first word/string will appear after 5 seconds.', 'premium-blocks-for-gutenberg')
                        }),
                        React.createElement(TextControl, {
                            label: __("Back Delay", 'premium-blocks-for-gutenberg'),
                            type: "Number",
                            value: backdelay,
                            onChange: function onChange(newValue) {
                                return setAttributes({ backdelay: parseInt(newValue) });
                            },
                            help: __("If you set it on 5000 milliseconds, the word/string will remain visible for 5 seconds before backspace effect.", 'premium-blocks-for-gutenberg')
                        }),
                        React.createElement(ToggleControl, {
                            label: __("Loop", 'premium-blocks-for-gutenberg'),
                            checked: loop,
                            onChange: function onChange(newCheck) {
                                return setAttributes({ loop: newCheck });
                            }
                        }),
                        React.createElement(ToggleControl, {
                            label: __("Show Cursor", 'premium-blocks-for-gutenberg'),
                            checked: cursorShow,
                            onChange: function onChange(newCheck) {
                                return setAttributes({ cursorShow: newCheck });
                            }
                        }),
                        cursorShow && React.createElement(TextControl, {
                            label: __("Cursor Mark", 'premium-blocks-for-gutenberg'),
                            value: cursorMark,
                            onChange: function onChange(newCheck) {
                                return setAttributes({ cursorMark: newCheck });
                            }
                        })
                    ) : React.createElement(
                        Fragment,
                        null,
                        React.createElement(
                            "p",
                            { className: "premium-notice" },
                            __(' Please note that Slide effect works only on frontend', 'premium-blocks-for-gutenberg')
                        ),
                        React.createElement(TextControl, {
                            label: __("Animation Speed", 'premium-blocks-for-gutenberg'),
                            value: animationSpeed,
                            type: "Number",
                            onChange: function onChange(newValue) {
                                return setAttributes({ animationSpeed: parseInt(newValue) });
                            },
                            help: __("Set a duration value in milliseconds for slide effect.", 'premium-blocks-for-gutenberg')
                        }),
                        React.createElement(TextControl, {
                            label: __("Pause Time", 'premium-blocks-for-gutenberg'),
                            value: pauseTime,
                            type: "Number",
                            onChange: function onChange(newValue) {
                                return setAttributes({ pauseTime: parseInt(newValue) });
                            },
                            help: __("How long should the word/string stay visible? Set a value in milliseconds.", 'premium-blocks-for-gutenberg')
                        }),
                        React.createElement(ToggleControl, {
                            label: __("Pause on Hover", 'premium-blocks-for-gutenberg'),
                            checked: hoverPause,
                            onChange: function onChange(newCheck) {
                                return setAttributes({ hoverPause: newCheck });
                            },
                            help: __("If you enabled this option, the slide will be paused when mouseover.", 'premium-blocks-for-gutenberg')
                        }),
                        React.createElement(_radioControl2.default, {
                            choices: ["right", "center", "left"],
                            value: fancyalign,
                            onChange: function onChange(newValue) {
                                return setAttributes({ fancyalign: newValue });
                            },
                            label: __("Fancy Strings Alignment", 'premium-blocks-for-gutenberg')
                        })
                    )
                ),
                React.createElement(
                    PanelBody,
                    {
                        title: __("Fancy Text Style", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(_ColorComponent2.default, {
                        label: __("Color", 'premium-blocks-for-gutenberg'),
                        colorValue: fancyStyles[0].fancyTextColor,
                        colorDefault: '',
                        onColorChange: function onColorChange(newValue) {
                            return saveFancyStyle({ fancyTextColor: newValue });
                        }
                    }),
                    React.createElement(_premiumTypo2.default, {
                        components: ["responsiveSize", "weight", "style", "upper", "spacing"],
                        setAttributes: saveFancyStyle,
                        fontSizeType: {
                            value: fancyStyles[0].fancyTextfontSizeUnit,
                            label: __("fancyTextfontSizeUnit", 'premium-blocks-for-gutenberg')
                        },
                        fontSize: fancyStyles[0].fancyTextfontSize,
                        fontSizeMobile: fancyStyles[0].fancyTextfontSizeMobile,
                        fontSizeTablet: fancyStyles[0].fancyTextfontSizeTablet,
                        onChangeSize: function onChangeSize(newSize) {
                            return saveFancyStyle({ fancyTextfontSize: newSize });
                        },
                        onChangeTabletSize: function onChangeTabletSize(newSize) {
                            return saveFancyStyle({ fancyTextfontSizeTablet: newSize });
                        },
                        onChangeMobileSize: function onChangeMobileSize(newSize) {
                            return saveFancyStyle({ fancyTextfontSizeMobile: newSize });
                        },
                        weight: fancyStyles[0].fancyTextWeight,
                        style: fancyStyles[0].fancyTextStyle,
                        spacing: fancyStyles[0].fancyTextLetter,
                        upper: fancyStyles[0].fancyTextUpper,
                        onChangeWeight: function onChangeWeight(newWeight) {
                            return saveFancyStyle({ fancyTextWeight: newWeight || 500 });
                        },
                        onChangeStyle: function onChangeStyle(newStyle) {
                            return saveFancyStyle({ fancyTextStyle: newStyle });
                        },
                        onChangeSpacing: function onChangeSpacing(newValue) {
                            return saveFancyStyle({ fancyTextLetter: newValue });
                        },
                        onChangeUpper: function onChangeUpper(check) {
                            return saveFancyStyle({ fancyTextUpper: check });
                        }
                    }),
                    React.createElement(_ColorComponent2.default, {
                        label: __('Background Color'),
                        colorValue: fancyStyles[0].fancyTextBGColor,
                        colorDefault: '',
                        onColorChange: function onColorChange(newvalue) {
                            return saveFancyStyle({ fancyTextBGColor: newvalue });
                        }
                    }),
                    React.createElement(_PremiumShadow2.default, {
                        label: __("Text Shadow", "premium-blocks-for-gutenberg"),
                        color: fancyStyles[0].shadowColor,
                        blur: fancyStyles[0].shadowBlur,
                        horizontal: fancyStyles[0].shadowHorizontal,
                        vertical: fancyStyles[0].shadowVertical,
                        onChangeColor: function onChangeColor(newColor) {
                            return saveFancyStyle({ shadowColor: newColor });
                        },
                        onChangeBlur: function onChangeBlur(newBlur) {
                            return saveFancyStyle({ shadowBlur: newBlur });
                        },
                        onChangehHorizontal: function onChangehHorizontal(newValue) {
                            return saveFancyStyle({ shadowHorizontal: newValue });
                        },
                        onChangeVertical: function onChangeVertical(newValue) {
                            return saveFancyStyle({ shadowVertical: newValue });
                        }
                    }),
                    effect == "typing" && cursorShow && React.createElement(_ColorComponent2.default, {
                        label: __("Cursor Color", 'premium-blocks-for-gutenberg'),
                        colorValue: fancyStyles[0].cursorColor,
                        colorDefault: '',
                        onColorChange: function onColorChange(newValue) {
                            return saveFancyStyle({ cursorColor: newValue });
                        }
                    })
                ),
                React.createElement(
                    PanelBody,
                    {
                        title: __("Prefix & Suffix Style", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(_ColorComponent2.default, {
                        label: __("Color", 'premium-blocks-for-gutenberg'),
                        colorValue: PreStyles[0].textColor,
                        colorDefault: '',
                        onColorChange: function onColorChange(newValue) {
                            return savePrefixStyle({ textColor: newValue });
                        }
                    }),
                    React.createElement(_premiumTypo2.default, {
                        components: ["responsiveSize", "weight", "style", "upper", "spacing"],
                        setAttributes: savePrefixStyle,
                        fontSizeType: {
                            value: PreStyles[0].textfontSizeUnit,
                            label: __("textfontSizeUnit", 'premium-blocks-for-gutenberg')
                        },
                        fontSize: PreStyles[0].textfontSize,
                        fontSizeMobile: PreStyles[0].textfontSizeMobile,
                        fontSizeTablet: PreStyles[0].textfontSizeTablet,
                        onChangeSize: function onChangeSize(newSize) {
                            return savePrefixStyle({ textfontSize: newSize });
                        },
                        onChangeTabletSize: function onChangeTabletSize(newSize) {
                            return savePrefixStyle({ textfontSizeTablet: newSize });
                        },
                        onChangeMobileSize: function onChangeMobileSize(newSize) {
                            return savePrefixStyle({ textfontSizeMobile: newSize });
                        },
                        weight: PreStyles[0].textWeight,
                        style: PreStyles[0].textStyle,
                        spacing: PreStyles[0].textLetter,
                        upper: PreStyles[0].textUpper,
                        onChangeWeight: function onChangeWeight(newWeight) {
                            return savePrefixStyle({ textWeight: newWeight || 500 });
                        },
                        onChangeStyle: function onChangeStyle(newStyle) {
                            return savePrefixStyle({ textStyle: newStyle });
                        },
                        onChangeSpacing: function onChangeSpacing(newValue) {
                            return savePrefixStyle({ textLetter: newValue });
                        },
                        onChangeUpper: function onChangeUpper(check) {
                            return savePrefixStyle({ textUpper: check });
                        }
                    }),
                    React.createElement(_ColorComponent2.default, {
                        label: __("Background Color"),
                        colorValue: PreStyles[0].textBGColor,
                        colorDefault: "",
                        onColorChange: function onColorChange(newvalue) {
                            return savePrefixStyle({ textBGColor: newvalue });
                        }
                    })
                ),
                React.createElement(_premiumResponsiveTabs2.default, {
                    Desktop: hideDesktop,
                    Tablet: hideTablet,
                    Mobile: hideMobile,
                    onChangeDesktop: function onChangeDesktop(value) {
                        return setAttributes({ hideDesktop: value ? " premium-desktop-hidden" : "" });
                    },
                    onChangeTablet: function onChangeTablet(value) {
                        return setAttributes({ hideTablet: value ? " premium-tablet-hidden" : "" });
                    },
                    onChangeMobile: function onChangeMobile(value) {
                        return setAttributes({ hideMobile: value ? " premium-mobile-hidden" : "" });
                    }
                })
            ), React.createElement(
                "div",
                {
                    className: (0, _classnames2.default)(className, "premium-block-" + block_id + " " + hideDesktop + " " + hideTablet + " " + hideMobile),
                    style: {
                        textAlign: align
                    }
                },
                effect === "typing" ? React.createElement(
                    "div",
                    {
                        id: "premium-fancy-text-" + block_id,
                        className: "premium-fancy-text",
                        style: {
                            textAlign: align
                        },
                        "data-effect": "" + effect,
                        "data-strings": "" + repeaterFancyText.map(function (item, index) {
                            return item.title;
                        }),
                        "data-typespeed": "" + typeSpeed,
                        "data-backspeed": "" + backSpeed,
                        "data-startdelay": "" + startdelay,
                        "data-backdelay": "" + backdelay,
                        "data-loop": "" + loop,
                        "data-cursorshow": "" + cursorShow,
                        "data-cursormark": "" + cursorMark
                    },
                    React.createElement(
                        "span",
                        { className: "premium-fancy-text-prefix-text" },
                        prefix,
                        " "
                    ),
                    React.createElement(
                        "span",
                        {
                            className: "premium-fancy-text-title",
                            ref: function ref(el) {
                                _this2.el = el;
                            }
                        },
                        " "
                    ),
                    React.createElement(
                        "span",
                        { className: "premium-fancy-text-suffix-text" },
                        " ",
                        suffix
                    )
                ) : React.createElement(
                    "div",
                    {
                        id: "premium-fancy-text-" + block_id,
                        className: "premium-fancy-text premium-fancy-slide",
                        style: {
                            textAlign: align
                        },
                        "data-effect": "" + effect,
                        "data-strings": "" + repeaterFancyText.map(function (item, index) {
                            return item.title;
                        }),
                        "data-animationspeed": "" + animationSpeed,
                        "data-pausetime": "" + pauseTime,
                        "data-hoverpause": "" + hoverPause
                    },
                    React.createElement(
                        "span",
                        { className: "premium-fancy-text-prefix-text" },
                        prefix,
                        " "
                    ),
                    React.createElement(
                        "div",
                        {
                            className: "premium-fancy-text-title-slide",
                            style: {
                                textAlign: fancyalign
                            }
                        },
                        React.createElement(
                            "ul",
                            {
                                className: "premium-fancy-text-title-slide-list"
                            },
                            repeaterFancyText.map(function (item, index) {
                                return React.createElement(
                                    "li",
                                    null,
                                    item.title
                                );
                            })
                        )
                    ),
                    React.createElement(
                        "span",
                        { className: "premium-fancy-text-suffix-text" },
                        " ",
                        suffix
                    )
                )
            )];
        }
    }]);

    return edit;
}(Component);

exports.default = withSelect(function (select, props) {
    var _select = select('core/edit-post'),
        _select$__experimenta = _select.__experimentalGetPreviewDeviceType,
        __experimentalGetPreviewDeviceType = _select$__experimenta === undefined ? null : _select$__experimenta;

    var deviceType = __experimentalGetPreviewDeviceType ? __experimentalGetPreviewDeviceType() : null;

    return {
        deviceType: deviceType
    };
})(edit);

/***/ }),
/* 291 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
 * 
 *   typed.js - A JavaScript Typing Animation Library
 *   Author: Matt Boldt <me@mattboldt.com>
 *   Version: v2.0.11
 *   Url: https://github.com/mattboldt/typed.js
 *   License(s): MIT
 * 
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if (( false ? 'undefined' : _typeof(exports)) === 'object' && ( false ? 'undefined' : _typeof(module)) === 'object') module.exports = factory();else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') exports["Typed"] = factory();else root["Typed"] = factory();
})(undefined, function () {
	return (/******/function (modules) {
			// webpackBootstrap
			/******/ // The module cache
			/******/var installedModules = {};
			/******/
			/******/ // The require function
			/******/function __webpack_require__(moduleId) {
				/******/
				/******/ // Check if module is in cache
				/******/if (installedModules[moduleId])
					/******/return installedModules[moduleId].exports;
				/******/
				/******/ // Create a new module (and put it into the cache)
				/******/var module = installedModules[moduleId] = {
					/******/exports: {},
					/******/id: moduleId,
					/******/loaded: false
					/******/ };
				/******/
				/******/ // Execute the module function
				/******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
				/******/
				/******/ // Flag the module as loaded
				/******/module.loaded = true;
				/******/
				/******/ // Return the exports of the module
				/******/return module.exports;
				/******/
			}
			/******/
			/******/
			/******/ // expose the modules object (__webpack_modules__)
			/******/__webpack_require__.m = modules;
			/******/
			/******/ // expose the module cache
			/******/__webpack_require__.c = installedModules;
			/******/
			/******/ // __webpack_public_path__
			/******/__webpack_require__.p = "";
			/******/
			/******/ // Load entry module and return exports
			/******/return __webpack_require__(0);
			/******/
		}(
		/************************************************************************/
		/******/[
		/* 0 */
		/***/function (module, exports, __webpack_require__) {

			'use strict';

			Object.defineProperty(exports, '__esModule', {
				value: true
			});

			var _createClass = function () {
				function defineProperties(target, props) {
					for (var i = 0; i < props.length; i++) {
						var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
					}
				}return function (Constructor, protoProps, staticProps) {
					if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
				};
			}();

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError('Cannot call a class as a function');
				}
			}

			var _initializerJs = __webpack_require__(1);

			var _htmlParserJs = __webpack_require__(3);

			/**
    * Welcome to Typed.js!
    * @param {string} elementId HTML element ID _OR_ HTML element
    * @param {object} options options object
    * @returns {object} a new Typed object
    */

			var Typed = function () {
				function Typed(elementId, options) {
					_classCallCheck(this, Typed);

					// Initialize it up
					_initializerJs.initializer.load(this, options, elementId);
					// All systems go!
					this.begin();
				}

				/**
     * Toggle start() and stop() of the Typed instance
     * @public
     */

				_createClass(Typed, [{
					key: 'toggle',
					value: function toggle() {
						this.pause.status ? this.start() : this.stop();
					}

					/**
      * Stop typing / backspacing and enable cursor blinking
      * @public
      */
				}, {
					key: 'stop',
					value: function stop() {
						if (this.typingComplete) return;
						if (this.pause.status) return;
						this.toggleBlinking(true);
						this.pause.status = true;
						this.options.onStop(this.arrayPos, this);
					}

					/**
      * Start typing / backspacing after being stopped
      * @public
      */
				}, {
					key: 'start',
					value: function start() {
						if (this.typingComplete) return;
						if (!this.pause.status) return;
						this.pause.status = false;
						if (this.pause.typewrite) {
							this.typewrite(this.pause.curString, this.pause.curStrPos);
						} else {
							this.backspace(this.pause.curString, this.pause.curStrPos);
						}
						this.options.onStart(this.arrayPos, this);
					}

					/**
      * Destroy this instance of Typed
      * @public
      */
				}, {
					key: 'destroy',
					value: function destroy() {
						this.reset(false);
						this.options.onDestroy(this);
					}

					/**
      * Reset Typed and optionally restarts
      * @param {boolean} restart
      * @public
      */
				}, {
					key: 'reset',
					value: function reset() {
						var restart = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];

						clearInterval(this.timeout);
						this.replaceText('');
						if (this.cursor && this.cursor.parentNode) {
							this.cursor.parentNode.removeChild(this.cursor);
							this.cursor = null;
						}
						this.strPos = 0;
						this.arrayPos = 0;
						this.curLoop = 0;
						if (restart) {
							this.insertCursor();
							this.options.onReset(this);
							this.begin();
						}
					}

					/**
      * Begins the typing animation
      * @private
      */
				}, {
					key: 'begin',
					value: function begin() {
						var _this = this;

						this.options.onBegin(this);
						this.typingComplete = false;
						this.shuffleStringsIfNeeded(this);
						this.insertCursor();
						if (this.bindInputFocusEvents) this.bindFocusEvents();
						this.timeout = setTimeout(function () {
							// Check if there is some text in the element, if yes start by backspacing the default message
							if (!_this.currentElContent || _this.currentElContent.length === 0) {
								_this.typewrite(_this.strings[_this.sequence[_this.arrayPos]], _this.strPos);
							} else {
								// Start typing
								_this.backspace(_this.currentElContent, _this.currentElContent.length);
							}
						}, this.startDelay);
					}

					/**
      * Called for each character typed
      * @param {string} curString the current string in the strings array
      * @param {number} curStrPos the current position in the curString
      * @private
      */
				}, {
					key: 'typewrite',
					value: function typewrite(curString, curStrPos) {
						var _this2 = this;

						if (this.fadeOut && this.el.classList.contains(this.fadeOutClass)) {
							this.el.classList.remove(this.fadeOutClass);
							if (this.cursor) this.cursor.classList.remove(this.fadeOutClass);
						}

						var humanize = this.humanizer(this.typeSpeed);
						var numChars = 1;

						if (this.pause.status === true) {
							this.setPauseStatus(curString, curStrPos, true);
							return;
						}

						// contain typing function in a timeout humanize'd delay
						this.timeout = setTimeout(function () {
							// skip over any HTML chars
							curStrPos = _htmlParserJs.htmlParser.typeHtmlChars(curString, curStrPos, _this2);

							var pauseTime = 0;
							var substr = curString.substr(curStrPos);
							// check for an escape character before a pause value
							// format: \^\d+ .. eg: ^1000 .. should be able to print the ^ too using ^^
							// single ^ are removed from string
							if (substr.charAt(0) === '^') {
								if (/^\^\d+/.test(substr)) {
									var skip = 1; // skip at least 1
									substr = /\d+/.exec(substr)[0];
									skip += substr.length;
									pauseTime = parseInt(substr);
									_this2.temporaryPause = true;
									_this2.options.onTypingPaused(_this2.arrayPos, _this2);
									// strip out the escape character and pause value so they're not printed
									curString = curString.substring(0, curStrPos) + curString.substring(curStrPos + skip);
									_this2.toggleBlinking(true);
								}
							}

							// check for skip characters formatted as
							// "this is a `string to print NOW` ..."
							if (substr.charAt(0) === '`') {
								while (curString.substr(curStrPos + numChars).charAt(0) !== '`') {
									numChars++;
									if (curStrPos + numChars > curString.length) break;
								}
								// strip out the escape characters and append all the string in between
								var stringBeforeSkip = curString.substring(0, curStrPos);
								var stringSkipped = curString.substring(stringBeforeSkip.length + 1, curStrPos + numChars);
								var stringAfterSkip = curString.substring(curStrPos + numChars + 1);
								curString = stringBeforeSkip + stringSkipped + stringAfterSkip;
								numChars--;
							}

							// timeout for any pause after a character
							_this2.timeout = setTimeout(function () {
								// Accounts for blinking while paused
								_this2.toggleBlinking(false);

								// We're done with this sentence!
								if (curStrPos >= curString.length) {
									_this2.doneTyping(curString, curStrPos);
								} else {
									_this2.keepTyping(curString, curStrPos, numChars);
								}
								// end of character pause
								if (_this2.temporaryPause) {
									_this2.temporaryPause = false;
									_this2.options.onTypingResumed(_this2.arrayPos, _this2);
								}
							}, pauseTime);

							// humanized value for typing
						}, humanize);
					}

					/**
      * Continue to the next string & begin typing
      * @param {string} curString the current string in the strings array
      * @param {number} curStrPos the current position in the curString
      * @private
      */
				}, {
					key: 'keepTyping',
					value: function keepTyping(curString, curStrPos, numChars) {
						// call before functions if applicable
						if (curStrPos === 0) {
							this.toggleBlinking(false);
							this.options.preStringTyped(this.arrayPos, this);
						}
						// start typing each new char into existing string
						// curString: arg, this.el.html: original text inside element
						curStrPos += numChars;
						var nextString = curString.substr(0, curStrPos);
						this.replaceText(nextString);
						// loop the function
						this.typewrite(curString, curStrPos);
					}

					/**
      * We're done typing the current string
      * @param {string} curString the current string in the strings array
      * @param {number} curStrPos the current position in the curString
      * @private
      */
				}, {
					key: 'doneTyping',
					value: function doneTyping(curString, curStrPos) {
						var _this3 = this;

						// fires callback function
						this.options.onStringTyped(this.arrayPos, this);
						this.toggleBlinking(true);
						// is this the final string
						if (this.arrayPos === this.strings.length - 1) {
							// callback that occurs on the last typed string
							this.complete();
							// quit if we wont loop back
							if (this.loop === false || this.curLoop === this.loopCount) {
								return;
							}
						}
						this.timeout = setTimeout(function () {
							_this3.backspace(curString, curStrPos);
						}, this.backDelay);
					}

					/**
      * Backspaces 1 character at a time
      * @param {string} curString the current string in the strings array
      * @param {number} curStrPos the current position in the curString
      * @private
      */
				}, {
					key: 'backspace',
					value: function backspace(curString, curStrPos) {
						var _this4 = this;

						if (this.pause.status === true) {
							this.setPauseStatus(curString, curStrPos, true);
							return;
						}
						if (this.fadeOut) return this.initFadeOut();

						this.toggleBlinking(false);
						var humanize = this.humanizer(this.backSpeed);

						this.timeout = setTimeout(function () {
							curStrPos = _htmlParserJs.htmlParser.backSpaceHtmlChars(curString, curStrPos, _this4);
							// replace text with base text + typed characters
							var curStringAtPosition = curString.substr(0, curStrPos);
							_this4.replaceText(curStringAtPosition);

							// if smartBack is enabled
							if (_this4.smartBackspace) {
								// the remaining part of the current string is equal of the same part of the new string
								var nextString = _this4.strings[_this4.arrayPos + 1];
								if (nextString && curStringAtPosition === nextString.substr(0, curStrPos)) {
									_this4.stopNum = curStrPos;
								} else {
									_this4.stopNum = 0;
								}
							}

							// if the number (id of character in current string) is
							// less than the stop number, keep going
							if (curStrPos > _this4.stopNum) {
								// subtract characters one by one
								curStrPos--;
								// loop the function
								_this4.backspace(curString, curStrPos);
							} else if (curStrPos <= _this4.stopNum) {
								// if the stop number has been reached, increase
								// array position to next string
								_this4.arrayPos++;
								// When looping, begin at the beginning after backspace complete
								if (_this4.arrayPos === _this4.strings.length) {
									_this4.arrayPos = 0;
									_this4.options.onLastStringBackspaced();
									_this4.shuffleStringsIfNeeded();
									_this4.begin();
								} else {
									_this4.typewrite(_this4.strings[_this4.sequence[_this4.arrayPos]], curStrPos);
								}
							}
							// humanized value for typing
						}, humanize);
					}

					/**
      * Full animation is complete
      * @private
      */
				}, {
					key: 'complete',
					value: function complete() {
						this.options.onComplete(this);
						if (this.loop) {
							this.curLoop++;
						} else {
							this.typingComplete = true;
						}
					}

					/**
      * Has the typing been stopped
      * @param {string} curString the current string in the strings array
      * @param {number} curStrPos the current position in the curString
      * @param {boolean} isTyping
      * @private
      */
				}, {
					key: 'setPauseStatus',
					value: function setPauseStatus(curString, curStrPos, isTyping) {
						this.pause.typewrite = isTyping;
						this.pause.curString = curString;
						this.pause.curStrPos = curStrPos;
					}

					/**
      * Toggle the blinking cursor
      * @param {boolean} isBlinking
      * @private
      */
				}, {
					key: 'toggleBlinking',
					value: function toggleBlinking(isBlinking) {
						if (!this.cursor) return;
						// if in paused state, don't toggle blinking a 2nd time
						if (this.pause.status) return;
						if (this.cursorBlinking === isBlinking) return;
						this.cursorBlinking = isBlinking;
						if (isBlinking) {
							this.cursor.classList.add('typed-cursor--blink');
						} else {
							this.cursor.classList.remove('typed-cursor--blink');
						}
					}

					/**
      * Speed in MS to type
      * @param {number} speed
      * @private
      */
				}, {
					key: 'humanizer',
					value: function humanizer(speed) {
						return Math.round(Math.random() * speed / 2) + speed;
					}

					/**
      * Shuffle the sequence of the strings array
      * @private
      */
				}, {
					key: 'shuffleStringsIfNeeded',
					value: function shuffleStringsIfNeeded() {
						if (!this.shuffle) return;
						this.sequence = this.sequence.sort(function () {
							return Math.random() - 0.5;
						});
					}

					/**
      * Adds a CSS class to fade out current string
      * @private
      */
				}, {
					key: 'initFadeOut',
					value: function initFadeOut() {
						var _this5 = this;

						this.el.className += ' ' + this.fadeOutClass;
						if (this.cursor) this.cursor.className += ' ' + this.fadeOutClass;
						return setTimeout(function () {
							_this5.arrayPos++;
							_this5.replaceText('');

							// Resets current string if end of loop reached
							if (_this5.strings.length > _this5.arrayPos) {
								_this5.typewrite(_this5.strings[_this5.sequence[_this5.arrayPos]], 0);
							} else {
								_this5.typewrite(_this5.strings[0], 0);
								_this5.arrayPos = 0;
							}
						}, this.fadeOutDelay);
					}

					/**
      * Replaces current text in the HTML element
      * depending on element type
      * @param {string} str
      * @private
      */
				}, {
					key: 'replaceText',
					value: function replaceText(str) {
						if (this.attr) {
							this.el.setAttribute(this.attr, str);
						} else {
							if (this.isInput) {
								this.el.value = str;
							} else if (this.contentType === 'html') {
								this.el.innerHTML = str;
							} else {
								this.el.textContent = str;
							}
						}
					}

					/**
      * If using input elements, bind focus in order to
      * start and stop the animation
      * @private
      */
				}, {
					key: 'bindFocusEvents',
					value: function bindFocusEvents() {
						var _this6 = this;

						if (!this.isInput) return;
						this.el.addEventListener('focus', function (e) {
							_this6.stop();
						});
						this.el.addEventListener('blur', function (e) {
							if (_this6.el.value && _this6.el.value.length !== 0) {
								return;
							}
							_this6.start();
						});
					}

					/**
      * On init, insert the cursor element
      * @private
      */
				}, {
					key: 'insertCursor',
					value: function insertCursor() {
						if (!this.showCursor) return;
						if (this.cursor) return;
						this.cursor = document.createElement('span');
						this.cursor.className = 'typed-cursor';
						this.cursor.innerHTML = this.cursorChar;
						this.el.parentNode && this.el.parentNode.insertBefore(this.cursor, this.el.nextSibling);
					}
				}]);

				return Typed;
			}();

			exports['default'] = Typed;
			module.exports = exports['default'];

			/***/
		},
		/* 1 */
		/***/function (module, exports, __webpack_require__) {

			'use strict';

			Object.defineProperty(exports, '__esModule', {
				value: true
			});

			var _extends = Object.assign || function (target) {
				for (var i = 1; i < arguments.length; i++) {
					var source = arguments[i];for (var key in source) {
						if (Object.prototype.hasOwnProperty.call(source, key)) {
							target[key] = source[key];
						}
					}
				}return target;
			};

			var _createClass = function () {
				function defineProperties(target, props) {
					for (var i = 0; i < props.length; i++) {
						var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
					}
				}return function (Constructor, protoProps, staticProps) {
					if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
				};
			}();

			function _interopRequireDefault(obj) {
				return obj && obj.__esModule ? obj : { 'default': obj };
			}

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError('Cannot call a class as a function');
				}
			}

			var _defaultsJs = __webpack_require__(2);

			var _defaultsJs2 = _interopRequireDefault(_defaultsJs);

			/**
    * Initialize the Typed object
    */

			var Initializer = function () {
				function Initializer() {
					_classCallCheck(this, Initializer);
				}

				_createClass(Initializer, [{
					key: 'load',

					/**
      * Load up defaults & options on the Typed instance
      * @param {Typed} self instance of Typed
      * @param {object} options options object
      * @param {string} elementId HTML element ID _OR_ instance of HTML element
      * @private
      */

					value: function load(self, options, elementId) {
						// chosen element to manipulate text
						if (typeof elementId === 'string') {
							self.el = document.querySelector(elementId);
						} else {
							self.el = elementId;
						}

						self.options = _extends({}, _defaultsJs2['default'], options);

						// attribute to type into
						self.isInput = self.el.tagName.toLowerCase() === 'input';
						self.attr = self.options.attr;
						self.bindInputFocusEvents = self.options.bindInputFocusEvents;

						// show cursor
						self.showCursor = self.isInput ? false : self.options.showCursor;

						// custom cursor
						self.cursorChar = self.options.cursorChar;

						// Is the cursor blinking
						self.cursorBlinking = true;

						// text content of element
						self.elContent = self.attr ? self.el.getAttribute(self.attr) : self.el.textContent;

						// html or plain text
						self.contentType = self.options.contentType;

						// typing speed
						self.typeSpeed = self.options.typeSpeed;

						// add a delay before typing starts
						self.startDelay = self.options.startDelay;

						// backspacing speed
						self.backSpeed = self.options.backSpeed;

						// only backspace what doesn't match the previous string
						self.smartBackspace = self.options.smartBackspace;

						// amount of time to wait before backspacing
						self.backDelay = self.options.backDelay;

						// Fade out instead of backspace
						self.fadeOut = self.options.fadeOut;
						self.fadeOutClass = self.options.fadeOutClass;
						self.fadeOutDelay = self.options.fadeOutDelay;

						// variable to check whether typing is currently paused
						self.isPaused = false;

						// input strings of text
						self.strings = self.options.strings.map(function (s) {
							return s.trim();
						});

						// div containing strings
						if (typeof self.options.stringsElement === 'string') {
							self.stringsElement = document.querySelector(self.options.stringsElement);
						} else {
							self.stringsElement = self.options.stringsElement;
						}

						if (self.stringsElement) {
							self.strings = [];
							self.stringsElement.style.display = 'none';
							var strings = Array.prototype.slice.apply(self.stringsElement.children);
							var stringsLength = strings.length;

							if (stringsLength) {
								for (var i = 0; i < stringsLength; i += 1) {
									var stringEl = strings[i];
									self.strings.push(stringEl.innerHTML.trim());
								}
							}
						}

						// character number position of current string
						self.strPos = 0;

						// current array position
						self.arrayPos = 0;

						// index of string to stop backspacing on
						self.stopNum = 0;

						// Looping logic
						self.loop = self.options.loop;
						self.loopCount = self.options.loopCount;
						self.curLoop = 0;

						// shuffle the strings
						self.shuffle = self.options.shuffle;
						// the order of strings
						self.sequence = [];

						self.pause = {
							status: false,
							typewrite: true,
							curString: '',
							curStrPos: 0
						};

						// When the typing is complete (when not looped)
						self.typingComplete = false;

						// Set the order in which the strings are typed
						for (var i in self.strings) {
							self.sequence[i] = i;
						}

						// If there is some text in the element
						self.currentElContent = this.getCurrentElContent(self);

						self.autoInsertCss = self.options.autoInsertCss;

						this.appendAnimationCss(self);
					}
				}, {
					key: 'getCurrentElContent',
					value: function getCurrentElContent(self) {
						var elContent = '';
						if (self.attr) {
							elContent = self.el.getAttribute(self.attr);
						} else if (self.isInput) {
							elContent = self.el.value;
						} else if (self.contentType === 'html') {
							elContent = self.el.innerHTML;
						} else {
							elContent = self.el.textContent;
						}
						return elContent;
					}
				}, {
					key: 'appendAnimationCss',
					value: function appendAnimationCss(self) {
						var cssDataName = 'data-typed-js-css';
						if (!self.autoInsertCss) {
							return;
						}
						if (!self.showCursor && !self.fadeOut) {
							return;
						}
						if (document.querySelector('[' + cssDataName + ']')) {
							return;
						}

						var css = document.createElement('style');
						css.type = 'text/css';
						css.setAttribute(cssDataName, true);

						var innerCss = '';
						if (self.showCursor) {
							innerCss += '\n        .typed-cursor{\n          opacity: 1;\n        }\n        .typed-cursor.typed-cursor--blink{\n          animation: typedjsBlink 0.7s infinite;\n          -webkit-animation: typedjsBlink 0.7s infinite;\n                  animation: typedjsBlink 0.7s infinite;\n        }\n        @keyframes typedjsBlink{\n          50% { opacity: 0.0; }\n        }\n        @-webkit-keyframes typedjsBlink{\n          0% { opacity: 1; }\n          50% { opacity: 0.0; }\n          100% { opacity: 1; }\n        }\n      ';
						}
						if (self.fadeOut) {
							innerCss += '\n        .typed-fade-out{\n          opacity: 0;\n          transition: opacity .25s;\n        }\n        .typed-cursor.typed-cursor--blink.typed-fade-out{\n          -webkit-animation: 0;\n          animation: 0;\n        }\n      ';
						}
						if (css.length === 0) {
							return;
						}
						css.innerHTML = innerCss;
						document.body.appendChild(css);
					}
				}]);

				return Initializer;
			}();

			exports['default'] = Initializer;
			var initializer = new Initializer();
			exports.initializer = initializer;

			/***/
		},
		/* 2 */
		/***/function (module, exports) {

			/**
    * Defaults & options
    * @returns {object} Typed defaults & options
    * @public
    */

			'use strict';

			Object.defineProperty(exports, '__esModule', {
				value: true
			});
			var defaults = {
				/**
     * @property {array} strings strings to be typed
     * @property {string} stringsElement ID of element containing string children
     */
				strings: ['These are the default values...', 'You know what you should do?', 'Use your own!', 'Have a great day!'],
				stringsElement: null,

				/**
     * @property {number} typeSpeed type speed in milliseconds
     */
				typeSpeed: 0,

				/**
     * @property {number} startDelay time before typing starts in milliseconds
     */
				startDelay: 0,

				/**
     * @property {number} backSpeed backspacing speed in milliseconds
     */
				backSpeed: 0,

				/**
     * @property {boolean} smartBackspace only backspace what doesn't match the previous string
     */
				smartBackspace: true,

				/**
     * @property {boolean} shuffle shuffle the strings
     */
				shuffle: false,

				/**
     * @property {number} backDelay time before backspacing in milliseconds
     */
				backDelay: 700,

				/**
     * @property {boolean} fadeOut Fade out instead of backspace
     * @property {string} fadeOutClass css class for fade animation
     * @property {boolean} fadeOutDelay Fade out delay in milliseconds
     */
				fadeOut: false,
				fadeOutClass: 'typed-fade-out',
				fadeOutDelay: 500,

				/**
     * @property {boolean} loop loop strings
     * @property {number} loopCount amount of loops
     */
				loop: false,
				loopCount: Infinity,

				/**
     * @property {boolean} showCursor show cursor
     * @property {string} cursorChar character for cursor
     * @property {boolean} autoInsertCss insert CSS for cursor and fadeOut into HTML <head>
     */
				showCursor: true,
				cursorChar: '|',
				autoInsertCss: true,

				/**
     * @property {string} attr attribute for typing
     * Ex: input placeholder, value, or just HTML text
     */
				attr: null,

				/**
     * @property {boolean} bindInputFocusEvents bind to focus and blur if el is text input
     */
				bindInputFocusEvents: false,

				/**
     * @property {string} contentType 'html' or 'null' for plaintext
     */
				contentType: 'html',

				/**
     * Before it begins typing
     * @param {Typed} self
     */
				onBegin: function onBegin(self) {},

				/**
     * All typing is complete
     * @param {Typed} self
     */
				onComplete: function onComplete(self) {},

				/**
     * Before each string is typed
     * @param {number} arrayPos
     * @param {Typed} self
     */
				preStringTyped: function preStringTyped(arrayPos, self) {},

				/**
     * After each string is typed
     * @param {number} arrayPos
     * @param {Typed} self
     */
				onStringTyped: function onStringTyped(arrayPos, self) {},

				/**
     * During looping, after last string is typed
     * @param {Typed} self
     */
				onLastStringBackspaced: function onLastStringBackspaced(self) {},

				/**
     * Typing has been stopped
     * @param {number} arrayPos
     * @param {Typed} self
     */
				onTypingPaused: function onTypingPaused(arrayPos, self) {},

				/**
     * Typing has been started after being stopped
     * @param {number} arrayPos
     * @param {Typed} self
     */
				onTypingResumed: function onTypingResumed(arrayPos, self) {},

				/**
     * After reset
     * @param {Typed} self
     */
				onReset: function onReset(self) {},

				/**
     * After stop
     * @param {number} arrayPos
     * @param {Typed} self
     */
				onStop: function onStop(arrayPos, self) {},

				/**
     * After start
     * @param {number} arrayPos
     * @param {Typed} self
     */
				onStart: function onStart(arrayPos, self) {},

				/**
     * After destroy
     * @param {Typed} self
     */
				onDestroy: function onDestroy(self) {}
			};

			exports['default'] = defaults;
			module.exports = exports['default'];

			/***/
		},
		/* 3 */
		/***/function (module, exports) {

			/**
    * TODO: These methods can probably be combined somehow
    * Parse HTML tags & HTML Characters
    */

			'use strict';

			Object.defineProperty(exports, '__esModule', {
				value: true
			});

			var _createClass = function () {
				function defineProperties(target, props) {
					for (var i = 0; i < props.length; i++) {
						var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
					}
				}return function (Constructor, protoProps, staticProps) {
					if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
				};
			}();

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError('Cannot call a class as a function');
				}
			}

			var HTMLParser = function () {
				function HTMLParser() {
					_classCallCheck(this, HTMLParser);
				}

				_createClass(HTMLParser, [{
					key: 'typeHtmlChars',

					/**
      * Type HTML tags & HTML Characters
      * @param {string} curString Current string
      * @param {number} curStrPos Position in current string
      * @param {Typed} self instance of Typed
      * @returns {number} a new string position
      * @private
      */

					value: function typeHtmlChars(curString, curStrPos, self) {
						if (self.contentType !== 'html') return curStrPos;
						var curChar = curString.substr(curStrPos).charAt(0);
						if (curChar === '<' || curChar === '&') {
							var endTag = '';
							if (curChar === '<') {
								endTag = '>';
							} else {
								endTag = ';';
							}
							while (curString.substr(curStrPos + 1).charAt(0) !== endTag) {
								curStrPos++;
								if (curStrPos + 1 > curString.length) {
									break;
								}
							}
							curStrPos++;
						}
						return curStrPos;
					}

					/**
      * Backspace HTML tags and HTML Characters
      * @param {string} curString Current string
      * @param {number} curStrPos Position in current string
      * @param {Typed} self instance of Typed
      * @returns {number} a new string position
      * @private
      */
				}, {
					key: 'backSpaceHtmlChars',
					value: function backSpaceHtmlChars(curString, curStrPos, self) {
						if (self.contentType !== 'html') return curStrPos;
						var curChar = curString.substr(curStrPos).charAt(0);
						if (curChar === '>' || curChar === ';') {
							var endTag = '';
							if (curChar === '>') {
								endTag = '<';
							} else {
								endTag = '&';
							}
							while (curString.substr(curStrPos - 1).charAt(0) !== endTag) {
								curStrPos--;
								if (curStrPos < 0) {
									break;
								}
							}
							curStrPos--;
						}
						return curStrPos;
					}
				}]);

				return HTMLParser;
			}();

			exports['default'] = HTMLParser;
			var htmlParser = new HTMLParser();
			exports.htmlParser = htmlParser;

			/***/
		}]
		/******/)
	);
});
;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(49)(module)))

/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _extends;
function _extends() {
  exports.default = _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _slicedToArray;

var _arrayWithHoles = __webpack_require__(294);

var _arrayWithHoles2 = _interopRequireDefault(_arrayWithHoles);

var _iterableToArrayLimit = __webpack_require__(295);

var _iterableToArrayLimit2 = _interopRequireDefault(_iterableToArrayLimit);

var _unsupportedIterableToArray = __webpack_require__(113);

var _unsupportedIterableToArray2 = _interopRequireDefault(_unsupportedIterableToArray);

var _nonIterableRest = __webpack_require__(296);

var _nonIterableRest2 = _interopRequireDefault(_nonIterableRest);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) {
  return (0, _arrayWithHoles2.default)(arr) || (0, _iterableToArrayLimit2.default)(arr, i) || (0, _unsupportedIterableToArray2.default)(arr, i) || (0, _nonIterableRest2.default)();
}

/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _arrayWithHoles;
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _iterableToArrayLimit;
function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;

  var _s, _e;

  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

/***/ }),
/* 296 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _nonIterableRest;
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _objectSpread;

var _defineProperty = __webpack_require__(115);

var _defineProperty2 = _interopRequireDefault(_defineProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? Object(arguments[i]) : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys.push.apply(ownKeys, Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      (0, _defineProperty2.default)(target, key, source[key]);
    });
  }

  return target;
}

/***/ }),
/* 298 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _classCallCheck;
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _createClass;
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

/***/ }),
/* 300 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _possibleConstructorReturn;

var _typeof2 = __webpack_require__(301);

var _typeof3 = _interopRequireDefault(_typeof2);

var _assertThisInitialized = __webpack_require__(116);

var _assertThisInitialized2 = _interopRequireDefault(_assertThisInitialized);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _possibleConstructorReturn(self, call) {
  if (call && ((0, _typeof3.default)(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return (0, _assertThisInitialized2.default)(self);
}

/***/ }),
/* 301 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = _typeof;
function _typeof(obj) {
  "@babel/helpers - typeof";

  return exports.default = _typeof = "function" == typeof Symbol && "symbol" == _typeof2(Symbol.iterator) ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
  }, _typeof(obj);
}

/***/ }),
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _getPrototypeOf;
function _getPrototypeOf(o) {
  exports.default = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

/***/ }),
/* 303 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _inherits;

var _setPrototypeOf = __webpack_require__(304);

var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) (0, _setPrototypeOf2.default)(subClass, superClass);
}

/***/ }),
/* 304 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _setPrototypeOf;
function _setPrototypeOf(o, p) {
  exports.default = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function invariant(condition, format, a, b, c, d, e, f) {
  if (process.env.NODE_ENV !== 'production') {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
};

module.exports = invariant;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)))

/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _toConsumableArray;

var _arrayWithoutHoles = __webpack_require__(307);

var _arrayWithoutHoles2 = _interopRequireDefault(_arrayWithoutHoles);

var _iterableToArray = __webpack_require__(308);

var _iterableToArray2 = _interopRequireDefault(_iterableToArray);

var _unsupportedIterableToArray = __webpack_require__(113);

var _unsupportedIterableToArray2 = _interopRequireDefault(_unsupportedIterableToArray);

var _nonIterableSpread = __webpack_require__(309);

var _nonIterableSpread2 = _interopRequireDefault(_nonIterableSpread);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) {
  return (0, _arrayWithoutHoles2.default)(arr) || (0, _iterableToArray2.default)(arr) || (0, _unsupportedIterableToArray2.default)(arr) || (0, _nonIterableSpread2.default)();
}

/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _arrayWithoutHoles;

var _arrayLikeToArray = __webpack_require__(114);

var _arrayLikeToArray2 = _interopRequireDefault(_arrayLikeToArray);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return (0, _arrayLikeToArray2.default)(arr);
}

/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _iterableToArray;
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _nonIterableSpread;
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classnames = __webpack_require__(0);

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __ = wp.i18n.__;


var attributes = {
    block_id: {
        type: "string"
    },
    classMigrate: {
        type: "boolean",
        default: false
    },
    align: {
        type: "string",
        default: "center"
    },
    prefix: {
        type: "string",
        default: "This is"
    },
    suffix: {
        type: "string",
        default: "Text"
    },
    repeaterFancyText: {
        type: "array",
        default: [{
            title: __("Designer"),
            edit: false
        }, {
            title: __("Developer"),
            edit: false
        }, {
            title: __("Awesome"),
            edit: false
        }]
    },
    effect: {
        type: "string",
        default: "typing"
    },
    fancyTextColor: {
        type: "string",
        default: "#6ec1e4"
    },
    cursorColor: {
        type: "string",
        default: "#6ec1e4"
    },
    fancyTextLetter: {
        type: "number"
    },
    fancyTextStyle: {
        type: "string"
    },
    fancyTextUpper: {
        type: "boolean",
        default: false
    },
    fancyTextWeight: {
        type: "number",
        default: 600
    },
    fancyTextfontSize: {
        type: "number",
        default: 20
    },
    fancyTextfontSizeUnit: {
        type: "string",
        default: "px"
    },
    fancyTextfontSizeMobile: {
        type: "number",
        default: 20
    },
    fancyTextfontSizeTablet: {
        type: "number",
        default: 20
    },
    fancyTextBGColor: {
        type: "string"
    },
    shadowColor: {
        type: "string"
    },
    shadowBlur: {
        type: "number",
        default: "0"
    },
    shadowHorizontal: {
        type: "number",
        default: "0"
    },
    shadowVertical: {
        type: "number",
        default: "0"
    },
    textColor: {
        type: "string",
        default: "#54595f"
    },
    textLetter: {
        type: "number"
    },
    textStyle: {
        type: "string"
    },
    textUpper: {
        type: "boolean",
        default: false
    },
    textWeight: {
        type: "number",
        default: 600
    },
    textfontSize: {
        type: "number",
        default: 20
    },
    textfontSizeUnit: {
        type: "string",
        default: "px"
    },
    textfontSizeMobile: {
        type: "number",
        default: 20
    },
    textfontSizeTablet: {
        type: "number",
        default: 20
    },
    textBGColor: {
        type: "string"
    },
    loop: {
        type: "boolean",
        default: "true"
    },
    cursorShow: {
        type: "boolean",
        default: "true"
    },
    cursorMark: {
        type: "string",
        default: "|"
    },
    typeSpeed: {
        type: "number",
        default: 100
    },
    backdelay: {
        type: "number",
        default: 30
    },
    startdelay: {
        type: "number",
        default: 30
    },
    backSpeed: {
        type: "number",
        default: 30
    },
    animationSpeed: {
        type: "number",
        default: 200
    },
    pauseTime: {
        type: "number",
        default: 3000
    },
    hoverPause: {
        type: "boolean",
        default: false
    },
    fancyalign: {
        type: "string",
        default: "center"
    }
};

var newAtrributes_1_0_1 = {
    fancyTextBGOpacity: {
        type: "number",
        default: "1"
    },
    textBGOpacity: {
        type: "number",
        default: "1"
    },
    hideDesktop: {
        type: 'boolean',
        default: false
    },
    hideTablet: {
        type: 'boolean',
        default: false
    },
    hideMobile: {
        type: 'boolean',
        default: false
    }
};

var fancyAttributes_1_0_1 = Object.assign(newAtrributes_1_0_1, attributes);
var new_Deprecated_Attributes = {
    fancyStyles: {
        type: "array",
        default: [{
            fancyTextColor: "#6ec1e4",
            fancyTextfontSize: 20,
            fancyTextfontSizeUnit: 'px',
            fancyTextfontSizeMobile: 20,
            fancyTextfontSizeTablet: 20,
            fancyTextBGColor: '',
            fancyTextBGOpacity: 1,
            fancyTextLetter: '',
            fancyTextStyle: '',
            fancyTextUpper: false,
            fancyTextWeight: 600,
            shadowColor: '',
            shadowBlur: '0',
            shadowHorizontal: '0',
            shadowVertical: '0',
            cursorColor: "#6ec1e4"
        }]
    },
    PreStyles: {
        type: "array",
        default: [{
            textColor: "#54595f",
            textLetter: '',
            textStyle: '',
            textUpper: false,
            textWeight: 600,
            textfontSize: 20,
            textfontSizeUnit: 'px',
            textfontSizeMobile: 20,
            textfontSizeTablet: 20,
            textBGColor: '',
            textBGOpacity: 1
        }]
    }
};
var deprecated_fancyAttributes = Object.assign(fancyAttributes_1_0_1, new_Deprecated_Attributes);

var deprecated = [{
    attributes: deprecated_fancyAttributes,
    migrate: function migrate(attributes) {
        var newAttributes = {
            fancyStyles: [{
                fancyTextColor: attributes.fancyTextColor,
                fancyTextfontSize: attributes.fancyTextfontSize,
                fancyTextfontSizeUnit: attributes.fancyTextfontSizeUnit,
                fancyTextfontSizeMobile: attributes.fancyTextfontSizeMobile,
                fancyTextfontSizeTablet: attributes.fancyTextfontSizeTablet,
                fancyTextBGColor: attributes.fancyTextBGColor,
                fancyTextBGOpacity: attributes.fancyTextBGOpacity,
                fancyTextLetter: attributes.fancyTextLetter,
                fancyTextStyle: attributes.fancyTextStyle,
                fancyTextUpper: attributes.fancyTextUpper,
                fancyTextWeight: attributes.fancyTextWeight,
                shadowColor: attributes.shadowColor,
                shadowBlur: attributes.shadowBlur,
                shadowHorizontal: attributes.shadowHorizontal,
                shadowVertical: attributes.shadowVertical,
                cursorColor: attributes.cursorColor
            }],
            PreStyles: [{
                textColor: attributes.textColor,
                textLetter: attributes.textLetter,
                textStyle: attributes.textStyle,
                textUpper: attributes.textUpper,
                textWeight: attributes.textWeight,
                textfontSize: attributes.textFontSize,
                textfontSizeUnit: attributes.textFontSizeUnit,
                textfontSizeMobile: attributes.textFontSizeMobile,
                textfontSizeTablet: attributes.textfontSizeTablet,
                textBGColor: attributes.textBGColor,
                textBGOpacity: attributes.textBGOpacity
            }]

        };
        return Object.assign(attributes, newAttributes);
    },
    save: function save(props) {
        var attributes = props.attributes,
            className = props.className;
        var block_id = attributes.block_id,
            align = attributes.align,
            prefix = attributes.prefix,
            suffix = attributes.suffix,
            repeaterFancyText = attributes.repeaterFancyText,
            effect = attributes.effect,
            loop = attributes.loop,
            cursorShow = attributes.cursorShow,
            cursorMark = attributes.cursorMark,
            typeSpeed = attributes.typeSpeed,
            backSpeed = attributes.backSpeed,
            startdelay = attributes.startdelay,
            backdelay = attributes.backdelay,
            animationSpeed = attributes.animationSpeed,
            pauseTime = attributes.pauseTime,
            hoverPause = attributes.hoverPause,
            fancyalign = attributes.fancyalign,
            hideDesktop = attributes.hideDesktop,
            hideTablet = attributes.hideTablet,
            hideMobile = attributes.hideMobile;

        return React.createElement(
            "div",
            {
                className: (0, _classnames2.default)(className, "premium-block-" + block_id + " " + hideDesktop + " " + hideTablet + " " + hideMobile),
                style: {
                    textAlign: align
                } },
            effect == 'typing' ? React.createElement(
                "div",
                {
                    id: "premium-fancy-text-" + block_id,
                    className: "premium-fancy-text", style: {
                        textAlign: align
                    },
                    "data-effect": "" + effect,
                    "data-strings": "" + repeaterFancyText.map(function (item, index) {
                        return item.title;
                    }),
                    "data-typespeed": "" + typeSpeed,
                    "data-backspeed": "" + backSpeed,
                    "data-startdelay": "" + startdelay,
                    "data-backdelay": "" + backdelay,
                    "data-loop": "" + loop,
                    "data-cursorshow": "" + cursorShow,
                    "data-cursormark": "" + cursorMark
                },
                React.createElement(
                    "span",
                    { className: "premium-fancy-text-prefix-text" },
                    prefix,
                    " "
                ),
                React.createElement(
                    "span",
                    { className: "premium-fancy-text-title" },
                    " "
                ),
                React.createElement(
                    "span",
                    { className: "premium-fancy-text-suffix-text" },
                    " ",
                    suffix
                )
            ) : React.createElement(
                "div",
                { className: "premium-fancy-text premium-fancy-slide", style: {
                        textAlign: align
                    },
                    "data-effect": "" + effect,
                    "data-strings": "" + repeaterFancyText.map(function (item, index) {
                        return item.title;
                    }),
                    "data-animationspeed": "" + animationSpeed,
                    "data-pausetime": "" + pauseTime,
                    "data-hoverpause": "" + hoverPause
                },
                React.createElement(
                    "span",
                    { className: "premium-fancy-text-prefix-text" },
                    prefix,
                    " "
                ),
                React.createElement(
                    "div",
                    { className: "premium-fancy-text-title-slide", style: {
                            textAlign: fancyalign
                        } },
                    React.createElement(
                        "ul",
                        { className: "premium-fancy-text-title-slide-list" },
                        repeaterFancyText.map(function (item, index) {
                            return React.createElement(
                                "li",
                                null,
                                item.title
                            );
                        })
                    )
                ),
                React.createElement(
                    "span",
                    { className: "premium-fancy-text-suffix-text" },
                    " ",
                    suffix
                )
            )
        );
    }
}, {
    attributes: fancyAttributes_1_0_1,
    migrate: function migrate(attributes) {
        var newAttributes = {
            fancyTextBGOpacity: "",
            textBGOpacity: "",
            hideDesktop: false,
            hideTablet: false,
            hideMobile: false

        };
        return Object.assign(attributes, newAttributes);
    },
    save: function save(props) {
        var attributes = props.attributes,
            className = props.className;
        var block_id = attributes.block_id,
            align = attributes.align,
            prefix = attributes.prefix,
            suffix = attributes.suffix,
            repeaterFancyText = attributes.repeaterFancyText,
            effect = attributes.effect,
            loop = attributes.loop,
            cursorShow = attributes.cursorShow,
            cursorMark = attributes.cursorMark,
            typeSpeed = attributes.typeSpeed,
            backSpeed = attributes.backSpeed,
            startdelay = attributes.startdelay,
            backdelay = attributes.backdelay,
            animationSpeed = attributes.animationSpeed,
            pauseTime = attributes.pauseTime,
            hoverPause = attributes.hoverPause,
            fancyalign = attributes.fancyalign;


        return React.createElement(
            "div",
            {
                className: (0, _classnames2.default)(className, "premium-block-" + block_id),
                style: {
                    textAlign: align
                }
            },
            effect == "typing" ? React.createElement(
                "div",
                {
                    id: "premium-fancy-text-" + block_id,
                    className: "premium-fancy-text",
                    style: {
                        textAlign: align
                    },
                    "data-effect": "" + effect,
                    "data-strings": "" + repeaterFancyText.map(function (item, index) {
                        return item.title;
                    }),
                    "data-typespeed": "" + typeSpeed,
                    "data-backspeed": "" + backSpeed,
                    "data-startdelay": "" + startdelay,
                    "data-backdelay": "" + backdelay,
                    "data-loop": "" + loop,
                    "data-cursorshow": "" + cursorShow,
                    "data-cursormark": "" + cursorMark
                },
                React.createElement(
                    "span",
                    { className: "premium-fancy-text-prefix-text" },
                    prefix
                ),
                React.createElement("span", { className: "premium-fancy-text-title" }),
                React.createElement(
                    "span",
                    { className: "premium-fancy-text-suffix-text" },
                    suffix
                )
            ) : React.createElement(
                "div",
                {
                    className: "premium-fancy-text premium-fancy-slide",
                    style: {
                        textAlign: align
                    },
                    "data-effect": "" + effect,
                    "data-strings": "" + repeaterFancyText.map(function (item, index) {
                        return item.title;
                    }),
                    "data-animationspeed": "" + animationSpeed,
                    "data-pausetime": "" + pauseTime,
                    "data-hoverpause": "" + hoverPause
                },
                React.createElement(
                    "span",
                    { className: "premium-fancy-text-prefix-text" },
                    prefix
                ),
                React.createElement(
                    "div",
                    {
                        className: "premium-fancy-text-title-slide",
                        style: {
                            textAlign: fancyalign
                        }
                    },
                    React.createElement(
                        "ul",
                        {
                            className: "premium-fancy-text-title-slide-list"
                        },
                        repeaterFancyText.map(function (item, index) {
                            return React.createElement(
                                "li",
                                null,
                                item.title
                            );
                        })
                    )
                ),
                React.createElement(
                    "span",
                    { className: "premium-fancy-text-suffix-text" },
                    suffix
                )
            )
        );
    }
}];
exports.default = deprecated;

/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
var __ = wp.i18n.__;

var attributes = {
    block_id: {
        type: "string"
    },
    classMigrate: {
        type: "boolean",
        default: false
    },
    align: {
        type: "string",
        default: "center"
    },
    prefix: {
        type: "string",
        default: "This is"
    },
    suffix: {
        type: "string",
        default: "Text"
    },
    repeaterFancyText: {
        type: "array",
        default: [{
            title: __("Designer", 'premium-blocks-for-gutenberg'),
            edit: false
        }, {
            title: __("Developer", 'premium-blocks-for-gutenberg'),
            edit: false
        }, {
            title: __("Awesome", 'premium-blocks-for-gutenebrg'),
            edit: false
        }]
    },
    effect: {
        type: "string",
        default: "typing"
    },
    loop: {
        type: "boolean",
        default: "true"
    },
    cursorShow: {
        type: "boolean",
        default: "true"
    },
    cursorMark: {
        type: "string",
        default: "|"
    },
    typeSpeed: {
        type: "number",
        default: 100
    },
    backdelay: {
        type: "number",
        default: 30
    },
    startdelay: {
        type: "number",
        default: 30
    },
    backSpeed: {
        type: "number",
        default: 30
    },
    animationSpeed: {
        type: "number",
        default: 200
    },
    pauseTime: {
        type: "number",
        default: 3000
    },
    hoverPause: {
        type: "boolean",
        default: false
    },
    fancyalign: {
        type: "string",
        default: "center"
    },
    hideDesktop: {
        type: 'boolean',
        default: false
    },
    hideTablet: {
        type: 'boolean',
        default: false
    },
    hideMobile: {
        type: 'boolean',
        default: false
    },
    fancyStyles: {
        type: "array",
        default: [{
            fancyTextColor: "#6ec1e4",
            fancyTextfontSize: 20,
            fancyTextfontSizeUnit: 'px',
            fancyTextfontSizeMobile: 20,
            fancyTextfontSizeTablet: 20,
            fancyTextBGColor: '',
            fancyTextBGOpacity: 1,
            fancyTextLetter: '',
            fancyTextStyle: '',
            fancyTextUpper: false,
            fancyTextWeight: 600,
            shadowColor: '',
            shadowBlur: '0',
            shadowHorizontal: '0',
            shadowVertical: '0',
            cursorColor: "#6ec1e4"
        }]
    },
    PreStyles: {
        type: "array",
        default: [{
            textColor: "#54595f",
            textLetter: '',
            textStyle: '',
            textUpper: false,
            textWeight: 600,
            textfontSize: 20,
            textfontSizeUnit: 'px',
            textfontSizeMobile: 20,
            textfontSizeTablet: 20,
            textBGColor: '',
            textBGOpacity: 1
        }]
    }
};
exports.default = attributes;

/***/ }),
/* 312 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _icons = __webpack_require__(4);

var _icons2 = _interopRequireDefault(_icons);

var _edit = __webpack_require__(313);

var _edit2 = _interopRequireDefault(_edit);

var _settings = __webpack_require__(1);

var _save = __webpack_require__(366);

var _save2 = _interopRequireDefault(_save);

var _deprecated = __webpack_require__(367);

var _deprecated2 = _interopRequireDefault(_deprecated);

var _attributes = __webpack_require__(368);

var _attributes2 = _interopRequireDefault(_attributes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __ = wp.i18n.__;
var registerBlockType = wp.blocks.registerBlockType;


registerBlockType("premium/lottie", {
    title: __("Lottie Animation"),
    icon: React.createElement(_icons2.default, { icon: "lottie" }),
    category: "premium-blocks",
    attributes: _attributes2.default,
    supports: {
        inserter: _settings.lottie
    },
    example: {},
    edit: _edit2.default,
    save: _save2.default,
    deprecated: _deprecated2.default
});

/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _classnames = __webpack_require__(0);

var _classnames2 = _interopRequireDefault(_classnames);

var _reactLottieWithSegments = __webpack_require__(71);

var _reactLottieWithSegments2 = _interopRequireDefault(_reactLottieWithSegments);

var _premiumFilters = __webpack_require__(30);

var _premiumFilters2 = _interopRequireDefault(_premiumFilters);

var _premiumBorder = __webpack_require__(6);

var _premiumBorder2 = _interopRequireDefault(_premiumBorder);

var _PremiumResponsivePadding = __webpack_require__(16);

var _PremiumResponsivePadding2 = _interopRequireDefault(_PremiumResponsivePadding);

var _premiumResponsiveTabs = __webpack_require__(8);

var _premiumResponsiveTabs2 = _interopRequireDefault(_premiumResponsiveTabs);

var _singleRangeControl = __webpack_require__(3);

var _singleRangeControl2 = _interopRequireDefault(_singleRangeControl);

var _ColorComponent = __webpack_require__(2);

var _ColorComponent2 = _interopRequireDefault(_ColorComponent);

var _radioControl = __webpack_require__(10);

var _radioControl2 = _interopRequireDefault(_radioControl);

var _responsiveRangeControl = __webpack_require__(19);

var _responsiveRangeControl2 = _interopRequireDefault(_responsiveRangeControl);

var _container = __webpack_require__(365);

var _container2 = _interopRequireDefault(_container);

var _settings = __webpack_require__(1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var __ = wp.i18n.__;
var _wp$element = wp.element,
    Component = _wp$element.Component,
    Fragment = _wp$element.Fragment;
var withSelect = wp.data.withSelect;
var InspectorControls = wp.blockEditor.InspectorControls;
var _wp$components = wp.components,
    PanelBody = _wp$components.PanelBody,
    TextControl = _wp$components.TextControl,
    ToggleControl = _wp$components.ToggleControl,
    SelectControl = _wp$components.SelectControl,
    TabPanel = _wp$components.TabPanel;


var isLottieUpdated = null;

var edit = function (_Component) {
    _inherits(edit, _Component);

    function edit() {
        _classCallCheck(this, edit);

        var _this = _possibleConstructorReturn(this, (edit.__proto__ || Object.getPrototypeOf(edit)).apply(this, arguments));

        _this.lottieplayer = React.createRef();
        _this.state = {
            isJSONAllowed: false
        };
        return _this;
    }

    _createClass(edit, [{
        key: "componentDidMount",
        value: function componentDidMount() {
            var _props = this.props,
                setAttributes = _props.setAttributes,
                clientId = _props.clientId,
                attributes = _props.attributes;
            var block_id = attributes.block_id;


            setAttributes({ block_id: clientId });
            setAttributes({ classMigrate: true });
            if (!attributes.lottieId) {
                setAttributes({ lottieId: "premium-lottie-" + block_id });
            }
            this.onSelectLottieJSON = this.onSelectLottieJSON.bind(this);
            this.initLottieAnimation = this.initLottieAnimation.bind(this);
            this.getPreviewSize = this.getPreviewSize.bind(this);
            this.setState({ isJSONAllowed: Boolean(_settings.JsonUploadEnabled) });
        }
    }, {
        key: "getPreviewSize",
        value: function getPreviewSize(device, desktopSize, tabletSize, mobileSize) {
            if (device === 'Mobile') {
                if (undefined !== mobileSize && '' !== mobileSize) {
                    return mobileSize;
                } else if (undefined !== tabletSize && '' !== tabletSize) {
                    return tabletSize;
                }
            } else if (device === 'Tablet') {
                if (undefined !== tabletSize && '' !== tabletSize) {
                    return tabletSize;
                }
            }
            return desktopSize;
        }
    }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
            clearTimeout(isLottieUpdated);
            isLottieUpdated = setTimeout(this.initLottieAnimation, 400);
        }
    }, {
        key: "onSelectLottieJSON",
        value: function onSelectLottieJSON(media) {
            var setAttributes = this.props.setAttributes;

            if (!media || !media.url) {
                setAttributes({ jsonLottie: null });
                return;
            }
            setAttributes({ jsonLottie: media });
            setAttributes({ lottieURl: media.url });
        }
    }, {
        key: "initLottieAnimation",
        value: function initLottieAnimation() {
            var _props$attributes = this.props.attributes,
                block_id = _props$attributes.block_id,
                trigger = _props$attributes.trigger,
                bottom = _props$attributes.bottom,
                top = _props$attributes.top;

            var lottieContainer = document.getElementById("premium-lottie-" + block_id);
            if (lottieContainer !== null) {
                var initScroll = function initScroll() {
                    var triggerEvent = trigger,
                        startEvent = bottom,
                        endEvent = top;
                    if (triggerEvent === "scroll" || triggerEvent === "viewport") {
                        var scrollHeight = scrollElement.scrollHeight,
                            scrollTop = scrollElement.scrollTop,
                            pageRange = scrollElement.clientHeight,
                            precentage = scrollTop * 100 / scrollHeight,
                            pageEnd = (scrollTop + pageRange) * 100 / scrollHeight;

                        if (triggerEvent === "viewport") {
                            if (startEvent < precentage && pageEnd < endEvent) animate.anim.play();else {
                                animate.anim.pause();
                            }
                        } else {
                            var stopFrame = animate.anim.totalFrames;
                            var currframe = precentage / 100 * stopFrame;
                            animate.anim.goToAndStop(currframe, true);
                        }
                    }
                };

                var _lottieContainer = document.getElementById("premium-lottie-" + block_id),
                    scrollElement = document.querySelector('.interface-interface-skeleton__content'),
                    animate = this.lottieplayer.current;
                document.addEventListener("load", initScroll);
                scrollElement.addEventListener('scroll', initScroll);
            }
        }
    }, {
        key: "render",
        value: function render() {
            var _this2 = this;

            var _props2 = this.props,
                attributes = _props2.attributes,
                setAttributes = _props2.setAttributes,
                className = _props2.className;
            var lottieId = attributes.lottieId,
                block_id = attributes.block_id,
                lottieURl = attributes.lottieURl,
                lottieJson = attributes.lottieJson,
                loop = attributes.loop,
                reverse = attributes.reverse,
                speed = attributes.speed,
                trigger = attributes.trigger,
                bottom = attributes.bottom,
                top = attributes.top,
                scrollSpeed = attributes.scrollSpeed,
                rotate = attributes.rotate,
                align = attributes.align,
                link = attributes.link,
                url = attributes.url,
                target = attributes.target,
                render = attributes.render,
                hideDesktop = attributes.hideDesktop,
                hideTablet = attributes.hideTablet,
                hideMobile = attributes.hideMobile,
                lottieStyles = attributes.lottieStyles,
                paddingT = attributes.paddingT,
                paddingR = attributes.paddingR,
                paddingB = attributes.paddingB,
                paddingL = attributes.paddingL,
                borderTop = attributes.borderTop,
                borderRight = attributes.borderRight,
                borderBottom = attributes.borderBottom,
                borderLeft = attributes.borderLeft,
                paddingTTablet = attributes.paddingTTablet,
                paddingRTablet = attributes.paddingRTablet,
                paddingBTablet = attributes.paddingBTablet,
                paddingLTablet = attributes.paddingLTablet,
                paddingTMobile = attributes.paddingTMobile,
                paddingRMobile = attributes.paddingRMobile,
                paddingBMobile = attributes.paddingBMobile,
                paddingLMobile = attributes.paddingLMobile,
                lottieWidth = attributes.lottieWidth;

            var validJsonPath = 'invalid';
            if (lottieURl && lottieURl.endsWith('.json')) {
                validJsonPath = 'valid';
            }

            if (validJsonPath === 'invalid') {
                return React.createElement(
                    "div",
                    { className: "premium-lottie-animation-wrap" },
                    React.createElement(_container2.default, {
                        className: className,
                        value: lottieJson,
                        isJSONAllowed: _settings.JsonUploadEnabled == 1 ? true : false,
                        attributes: attributes,
                        onSelectURL: function onSelectURL(value) {
                            return setAttributes({ lottieURl: value });
                        },
                        onSelect: this.onSelectLottieJSON
                    })
                );
            }

            var handleLottieMouseEnter = function handleLottieMouseEnter() {
                _this2.lottieplayer.current.anim.play();
            };

            var handleLottieMouseLeave = function handleLottieMouseLeave() {
                _this2.lottieplayer.current.anim.pause();
            };

            var handleRemoveLottie = function handleRemoveLottie() {
                setAttributes({
                    lottieURl: ""
                });
            };

            var saveLottieStyles = function saveLottieStyles(value) {
                var newUpdate = lottieStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({
                    lottieStyles: newUpdate
                });
            };

            var stopAnimation = true;

            if ('none' === trigger || 'undefined' === typeof trigger) {
                stopAnimation = false;
            }
            var reversedir = reverse ? -1 : 1;
            var mainClasses = (0, _classnames2.default)(className, 'premium-lottie-wrap');
            var lottieSize = this.getPreviewSize(this.props.deviceType, lottieStyles[0].size, lottieStyles[0].sizeTablet, lottieStyles[0].sizeMobile);
            var renderCss = React.createElement(
                "style",
                null,
                "\n            #premium-lottie-" + block_id + " .premium-lottie-animation svg{\n                width:" + lottieSize + lottieStyles[0].sizeUnit + " !important;\n                height:" + lottieSize + lottieStyles[0].sizeUnit + " !important;\n            }\n            "
            );
            var containerPaddingTop = this.getPreviewSize(this.props.deviceType, paddingT, paddingTTablet, paddingTMobile);
            var containerPaddingRight = this.getPreviewSize(this.props.deviceType, paddingR, paddingRTablet, paddingRMobile);
            var containerPaddingBottom = this.getPreviewSize(this.props.deviceType, paddingB, paddingBTablet, paddingBMobile);
            var containerPaddingLeft = this.getPreviewSize(this.props.deviceType, paddingL, paddingLTablet, paddingLMobile);

            return [renderCss, React.createElement(
                InspectorControls,
                null,
                React.createElement(
                    PanelBody,
                    {
                        title: __("General Settings"),
                        className: "premium-panel-body",
                        initialOpen: true
                    },
                    React.createElement(
                        "button",
                        { className: "lottie-remove", onClick: handleRemoveLottie },
                        __('Change Animation')
                    ),
                    React.createElement(ToggleControl, {
                        label: __("loop", 'premium-blocks-for-gutenberg'),
                        checked: loop,
                        onChange: function onChange(value) {
                            return setAttributes({ loop: value });
                        },
                        help: loop ? __('This option works only on the preview page', 'premium-blocks-for-gutenberg') : ''
                    }),
                    React.createElement(ToggleControl, {
                        label: __("Reverse", 'premium-blocks-for-gutenberg'),
                        checked: reverse,
                        onChange: function onChange() {
                            return setAttributes({ reverse: !reverse });
                        }
                    }),
                    React.createElement(_singleRangeControl2.default, {
                        label: __('Animation Speed', 'premium-blocks-for-gutenberg'),
                        value: speed,
                        onChange: function onChange(newValue) {
                            return setAttributes({ speed: newValue !== "" ? newValue : 1 });
                        },
                        showUnit: false,
                        defaultValue: 1,
                        max: 3,
                        min: .1,
                        step: 0.1
                    }),
                    React.createElement(SelectControl, {
                        label: __('Trigger', 'premium-blocks-for-gutenberg'),
                        options: [{ value: 'none', label: __("None", 'premium-blocks-for-gutenberg') }, { value: "hover", label: __("Hover", 'premium-blocks-for-gutenberg') }, { value: "scroll", label: __("Scroll", 'premium-blocks-for-gutenberg') }, { value: "viewport", label: __("Viewport", 'premium-blocks-for-gutenberg') }],
                        value: trigger,
                        onChange: function onChange(newValue) {
                            return setAttributes({ trigger: newValue });
                        }
                    }),
                    'scroll' === trigger && !reverse && React.createElement(
                        Fragment,
                        null,
                        React.createElement(_singleRangeControl2.default, {
                            label: __('Scroll Speed', 'premium-blocks-for-gutenberg'),
                            value: scrollSpeed,
                            onChange: function onChange(newValue) {
                                return setAttributes({ scrollSpeed: newValue !== "" ? newValue : 200 });
                            },
                            showUnit: false,
                            defaultValue: 0,
                            min: 1,
                            max: 10,
                            step: .1
                        })
                    ),
                    (trigger === 'viewport' || trigger === 'scroll') && !reverse && React.createElement(
                        Fragment,
                        null,
                        React.createElement(_singleRangeControl2.default, {
                            label: __('Bottom', 'premium-blocks-for-gutenberg'),
                            value: bottom,
                            onChange: function onChange(newValue) {
                                return setAttributes({ bottom: newValue });
                            },
                            showUnit: false,
                            defaultValue: '',
                            min: 0,
                            max: 50
                        }),
                        React.createElement(_singleRangeControl2.default, {
                            label: __('Top', 'premium-blocks-for-gutenberg'),
                            value: top,
                            onChange: function onChange(newValue) {
                                return setAttributes({ top: newValue });
                            },
                            showUnit: false,
                            defaultValue: '',
                            min: 50,
                            max: 100
                        })
                    ),
                    React.createElement(_responsiveRangeControl2.default, {
                        label: __('Size', 'premium-blocks-for-gutenberg'),
                        value: lottieWidth,
                        onChange: function onChange(value) {
                            return setAttributes({ lottieWidth: value });
                        },
                        min: 0,
                        max: 800,
                        step: 1,
                        showUnit: true,
                        units: ['px', 'em', 'rem'],
                        defaultValue: 200
                    }),
                    React.createElement(_singleRangeControl2.default, {
                        label: __("Rotate (Degree)", 'premium-blocks-for-gutenberg'),
                        value: rotate,
                        min: -180,
                        max: 180,
                        onChange: function onChange(newValue) {
                            return setAttributes({ rotate: newValue });
                        },
                        showUnit: false,
                        defaultValue: 0
                    }),
                    React.createElement(_radioControl2.default, {
                        choices: ["left", "center", "right"],
                        value: align,
                        onChange: function onChange(newValue) {
                            return setAttributes({ align: newValue });
                        },
                        label: __("Alignment", 'premium-blocks-for-gutenberg')
                    }),
                    React.createElement("hr", null),
                    React.createElement(ToggleControl, {
                        label: __("Link", 'premium-blocks-for-gutenberg'),
                        checked: link,
                        onChange: function onChange() {
                            return setAttributes({ link: !link });
                        }
                    }),
                    link && React.createElement(
                        Fragment,
                        null,
                        React.createElement(TextControl, {
                            label: __("URL", 'premium-blocks-for-gutenberg'),
                            value: url,
                            onChange: function onChange(newURL) {
                                return setAttributes({ url: newURL });
                            }
                        }),
                        React.createElement(ToggleControl, {
                            label: __("Open link in new tab", 'premium-blocks-for-gutenberg'),
                            checked: target,
                            onChange: function onChange(newValue) {
                                return setAttributes({ target: newValue });
                            }
                        })
                    ),
                    React.createElement(SelectControl, {
                        label: __('Render As', 'premium-blocks-for-gutenberg'),
                        value: render,
                        options: [{ label: "SVG", value: 'svg' }, { label: 'Canvas', value: 'canvas' }],
                        help: __("Set render type to canvas if you're having performance issues on the page.\n                    This setting will only take effect once you are on the live page, and not while you're editing.\n                    ", 'premium-blocks-for-gutenberg'),
                        onChange: function onChange(newValue) {
                            return setAttributes({ render: newValue });
                        }
                    })
                ),
                React.createElement(
                    PanelBody,
                    {
                        title: __("Style", 'premium-blocks-for-gutenberg'),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(
                        TabPanel,
                        {
                            className: "premium-color-tabpanel",
                            activeClass: "active-tab",
                            tabs: [{
                                name: "normal",
                                title: "Normal",
                                className: "premium-tab"
                            }, {
                                name: "hover",
                                title: "Hover",
                                className: "premium-tab"
                            }]
                        },
                        function (tab) {
                            var tabout = void 0;
                            if ("normal" === tab.name) {
                                tabout = React.createElement(
                                    Fragment,
                                    null,
                                    React.createElement(_ColorComponent2.default, {
                                        label: __("Background Color", 'premium-blocks-for-gutenberg'),
                                        colorValue: lottieStyles[0].backColor,
                                        colorDefault: '',
                                        onColorChange: function onColorChange(newValue) {
                                            return saveLottieStyles({ backColor: newValue });
                                        }
                                    }),
                                    React.createElement(_singleRangeControl2.default, {
                                        label: __("Opacity", 'premium-blocks-for-gutenberg'),
                                        value: lottieStyles[0].backOpacity,
                                        max: 1,
                                        min: .1,
                                        step: 0.01,
                                        onChange: function onChange(newvalue) {
                                            return saveLottieStyles({ backOpacity: newvalue });
                                        },
                                        showUnit: false,
                                        defaultValue: .1
                                    }),
                                    React.createElement(_premiumFilters2.default, {
                                        blur: lottieStyles[0].blur,
                                        bright: lottieStyles[0].bright,
                                        contrast: lottieStyles[0].contrast,
                                        saturation: lottieStyles[0].saturation,
                                        hue: lottieStyles[0].hue,
                                        onChangeBlur: function onChangeBlur(value) {
                                            return saveLottieStyles({ blur: value });
                                        },
                                        onChangeBright: function onChangeBright(value) {
                                            return saveLottieStyles({ bright: value });
                                        },
                                        onChangeContrast: function onChangeContrast(value) {
                                            return saveLottieStyles({ contrast: value });
                                        },
                                        onChangeSat: function onChangeSat(value) {
                                            return saveLottieStyles({ saturation: value });
                                        },
                                        onChangeHue: function onChangeHue(value) {
                                            return saveLottieStyles({ hue: value });
                                        }
                                    })
                                );
                            }
                            if ("hover" === tab.name) {
                                tabout = React.createElement(
                                    Fragment,
                                    null,
                                    React.createElement(_ColorComponent2.default, {
                                        label: __("Background Color", 'premium-blocks-for-gutenberg'),
                                        colorValue: lottieStyles[0].backHColor,
                                        colorDefault: '',
                                        onColorChange: function onColorChange(newValue) {
                                            return saveLottieStyles({ backHColor: newValue });
                                        }
                                    }),
                                    React.createElement(_singleRangeControl2.default, {
                                        label: __("Opacity", 'premium-blocks-for-gutenberg'),
                                        value: lottieStyles[0].backHOpacity,
                                        max: 1,
                                        min: .1,
                                        step: 0.01,
                                        onChange: function onChange(newvalue) {
                                            return saveLottieStyles({ backHOpacity: newvalue });
                                        },
                                        showUnit: false,
                                        defaultValue: .1
                                    }),
                                    React.createElement(_premiumFilters2.default, {
                                        blur: lottieStyles[0].blurH,
                                        bright: lottieStyles[0].brightH,
                                        contrast: lottieStyles[0].contrastH,
                                        saturation: lottieStyles[0].saturationH,
                                        hue: lottieStyles[0].hueH,
                                        onChangeBlur: function onChangeBlur(value) {
                                            return saveLottieStyles({ blurH: value });
                                        },
                                        onChangeBright: function onChangeBright(value) {
                                            return saveLottieStyles({ brightH: value });
                                        },
                                        onChangeContrast: function onChangeContrast(value) {
                                            return saveLottieStyles({ contrastH: value });
                                        },
                                        onChangeSat: function onChangeSat(value) {
                                            return saveLottieStyles({ saturationH: value });
                                        },
                                        onChangeHue: function onChangeHue(value) {
                                            return saveLottieStyles({ hueH: value });
                                        }
                                    })
                                );
                            }
                            return React.createElement(
                                "div",
                                null,
                                tabout,
                                React.createElement("hr", null)
                            );
                        }
                    ),
                    React.createElement(_premiumBorder2.default, {
                        borderType: lottieStyles[0].borderType,
                        top: borderTop,
                        right: borderRight,
                        bottom: borderBottom,
                        left: borderLeft,
                        borderColor: lottieStyles[0].borderColor,
                        borderRadius: lottieStyles[0].borderRadius,
                        onChangeType: function onChangeType(newType) {
                            return saveLottieStyles({ borderType: newType });
                        },
                        onChangeWidth: function onChangeWidth(_ref) {
                            var top = _ref.top,
                                right = _ref.right,
                                bottom = _ref.bottom,
                                left = _ref.left;
                            return setAttributes({
                                borderTop: top,
                                borderRight: right,
                                borderBottom: bottom,
                                borderLeft: left
                            });
                        },
                        onChangeColor: function onChangeColor(colorValue) {
                            return saveLottieStyles({ borderColor: colorValue === undefined ? "transparent" : colorValue });
                        },
                        onChangeRadius: function onChangeRadius(newRadius) {
                            return saveLottieStyles({ borderRadius: newRadius === undefined ? 0 : newRadius });
                        }
                    }),
                    React.createElement(_PremiumResponsivePadding2.default, {
                        paddingTop: paddingT,
                        paddingRight: paddingR,
                        paddingBottom: paddingB,
                        paddingLeft: paddingL,
                        paddingTopTablet: paddingTTablet,
                        paddingRightTablet: paddingRTablet,
                        paddingBottomTablet: paddingBTablet,
                        paddingLeftTablet: paddingLTablet,
                        paddingTopMobile: paddingTMobile,
                        paddingRightMobile: paddingRMobile,
                        paddingBottomMobile: paddingBMobile,
                        paddingLeftMobile: paddingLMobile,
                        onChangePaddingTop: function onChangePaddingTop(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ paddingT: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ paddingTTablet: newValue });
                            } else {
                                setAttributes({ paddingTMobile: newValue });
                            }
                        },
                        onChangePaddingRight: function onChangePaddingRight(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ paddingR: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ paddingRTablet: newValue });
                            } else {
                                setAttributes({ paddingRMobile: newValue });
                            }
                        },
                        onChangePaddingBottom: function onChangePaddingBottom(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ paddingB: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ paddingBTablet: newValue });
                            } else {
                                setAttributes({ paddingBMobile: newValue });
                            }
                        },
                        onChangePaddingLeft: function onChangePaddingLeft(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ paddingL: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ paddingLTablet: newValue });
                            } else {
                                setAttributes({ paddingLMobile: newValue });
                            }
                        }
                    })
                ),
                React.createElement(_premiumResponsiveTabs2.default, {
                    Desktop: hideDesktop,
                    Tablet: hideTablet,
                    Mobile: hideMobile,
                    onChangeDesktop: function onChangeDesktop(value) {
                        return setAttributes({ hideDesktop: value ? " premium-desktop-hidden" : "" });
                    },
                    onChangeTablet: function onChangeTablet(value) {
                        return setAttributes({ hideTablet: value ? " premium-tablet-hidden" : "" });
                    },
                    onChangeMobile: function onChangeMobile(value) {
                        return setAttributes({ hideMobile: value ? " premium-mobile-hidden" : "" });
                    }
                })
            ), React.createElement(
                "div",
                { id: "premium-lottie-" + block_id, className: "premium-lottie-" + block_id + " " + mainClasses + " " + hideDesktop + " " + hideTablet + " " + hideMobile,
                    "data-lottieURl": lottieURl, "data-trigger": trigger, "data-start": bottom, "data-end": top
                },
                React.createElement(
                    "div",
                    { className: "premium-lottie-animation",
                        onMouseEnter: 'hover' === trigger ? handleLottieMouseEnter : function () {
                            return stopAnimation = true;
                        },
                        onMouseLeave: 'hover' === trigger ? handleLottieMouseLeave : function () {
                            return stopAnimation = true;
                        }
                    },
                    React.createElement(_reactLottieWithSegments2.default, {
                        ref: this.lottieplayer,
                        options: {
                            loop: loop,
                            path: lottieURl,
                            rendererSettings: {
                                preserveAspectRatio: 'xMidYMid',
                                className: "premium-lottie-inner"
                            }
                        },
                        isStopped: stopAnimation,
                        speed: speed === "" ? 1 : speed,
                        isClickToPauseDisabled: true,
                        direction: reversedir
                    }),
                    link && url !== ' ' && React.createElement("a", { rel: "noopener noreferrer", target: target ? "_blank" : "_self", href: "javascript:void(0)" })
                ),
                React.createElement("style", {
                    dangerouslySetInnerHTML: {
                        __html: ["#premium-lottie-" + block_id + "{", "text-align:" + align + ";", "}", "#premium-lottie-" + block_id + "  .premium-lottie-animation  {", "background-color:" + lottieStyles[0].backColor + ";", "opacity : " + lottieStyles[0].backOpacity + ";", "filter: brightness( " + lottieStyles[0].bright + "% ) contrast( " + lottieStyles[0].contrast + "% ) saturate( " + lottieStyles[0].saturation + "% ) blur( " + lottieStyles[0].blur + "px ) hue-rotate( " + lottieStyles[0].hue + "deg );", "border-style : " + lottieStyles[0].borderType + ";", "border-width : " + borderTop + "px " + borderRight + "px " + borderBottom + "px " + borderLeft + "px ;", "border-radius : " + lottieStyles[0].borderRadius + "px;", "border-color : " + lottieStyles[0].borderColor + "; ", "padding-top : " + containerPaddingTop + lottieStyles[0].paddingU + ";", "padding-right : " + containerPaddingRight + lottieStyles[0].paddingU + ";", "padding-bottom : " + containerPaddingBottom + lottieStyles[0].paddingU + ";", "padding-left : " + containerPaddingLeft + lottieStyles[0].paddingU + ";", "transform: rotate(" + rotate + "deg) !important;", "}", "#premium-lottie-" + block_id + "  .premium-lottie-animation:hover {", "background-color:" + lottieStyles[0].backHColor + ";", "opacity:" + lottieStyles[0].backHOpacity + ";", "filter: brightness( " + lottieStyles[0].brightH + "% ) contrast( " + lottieStyles[0].contrastH + "% ) saturate( " + lottieStyles[0].saturationH + "% ) blur( " + lottieStyles[0].blurH + "px ) hue-rotate( " + lottieStyles[0].hueH + "deg ) !important;", "}"].join("\n")
                    }
                })
            )];
        }
    }]);

    return edit;
}(Component);

exports.default = withSelect(function (select, props) {
    var _select = select('core/edit-post'),
        _select$__experimenta = _select.__experimentalGetPreviewDeviceType,
        __experimentalGetPreviewDeviceType = _select$__experimenta === undefined ? null : _select$__experimenta;

    var deviceType = __experimentalGetPreviewDeviceType ? __experimentalGetPreviewDeviceType() : null;

    return {
        deviceType: deviceType
    };
})(edit);

/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = { "default": __webpack_require__(315), __esModule: true };

/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var core = __webpack_require__(13);
var $JSON = core.JSON || (core.JSON = { stringify: JSON.stringify });
module.exports = function stringify(it) {
  // eslint-disable-line no-unused-vars
  return $JSON.stringify.apply($JSON, arguments);
};

/***/ }),
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _assign = __webpack_require__(317);

var _assign2 = _interopRequireDefault(_assign);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

exports.default = _assign2.default || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = { "default": __webpack_require__(318), __esModule: true };

/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(319);
module.exports = __webpack_require__(13).Object.assign;

/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// 19.1.3.1 Object.assign(target, source)
var $export = __webpack_require__(25);

$export($export.S + $export.F, 'Object', { assign: __webpack_require__(321) });

/***/ }),
/* 320 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};

/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.2.1 Object.assign(target, source, ...)

var getKeys = __webpack_require__(55);
var gOPS = __webpack_require__(78);
var pIE = __webpack_require__(58);
var toObject = __webpack_require__(79);
var IObject = __webpack_require__(121);
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || __webpack_require__(35)(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) {
    B[k] = k;
  });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) {
  // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) {
      if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
    }
  }return T;
} : $assign;

/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// false -> Array#indexOf
// true  -> Array#includes
var toIObject = __webpack_require__(36);
var toLength = __webpack_require__(323);
var toAbsoluteIndex = __webpack_require__(324);
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
      // Array#indexOf ignores holes, Array#includes - not
    } else for (; length > index; index++) {
      if (IS_INCLUDES || index in O) {
        if (O[index] === el) return IS_INCLUDES || index || 0;
      }
    }return !IS_INCLUDES && -1;
  };
};

/***/ }),
/* 323 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// 7.1.15 ToLength
var toInteger = __webpack_require__(74);
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};

/***/ }),
/* 324 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var toInteger = __webpack_require__(74);
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};

/***/ }),
/* 325 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = { "default": __webpack_require__(326), __esModule: true };

/***/ }),
/* 326 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(327);
module.exports = __webpack_require__(13).Object.getPrototypeOf;

/***/ }),
/* 327 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// 19.1.2.9 Object.getPrototypeOf(O)
var toObject = __webpack_require__(79);
var $getPrototypeOf = __webpack_require__(123);

__webpack_require__(328)('getPrototypeOf', function () {
  return function getPrototypeOf(it) {
    return $getPrototypeOf(toObject(it));
  };
});

/***/ }),
/* 328 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// most Object methods by ES6 should accept primitives
var $export = __webpack_require__(25);
var core = __webpack_require__(13);
var fails = __webpack_require__(35);
module.exports = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () {
    fn(1);
  }), 'Object', exp);
};

/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

exports.default = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

/***/ }),
/* 330 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _defineProperty = __webpack_require__(331);

var _defineProperty2 = _interopRequireDefault(_defineProperty);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

exports.default = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

/***/ }),
/* 331 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = { "default": __webpack_require__(332), __esModule: true };

/***/ }),
/* 332 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(333);
var $Object = __webpack_require__(13).Object;
module.exports = function defineProperty(it, key, desc) {
  return $Object.defineProperty(it, key, desc);
};

/***/ }),
/* 333 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__(25);
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !__webpack_require__(27), 'Object', { defineProperty: __webpack_require__(26).f });

/***/ }),
/* 334 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _typeof2 = __webpack_require__(124);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

exports.default = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
};

/***/ }),
/* 335 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = { "default": __webpack_require__(336), __esModule: true };

/***/ }),
/* 336 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(337);
__webpack_require__(342);
module.exports = __webpack_require__(83).f('iterator');

/***/ }),
/* 337 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $at = __webpack_require__(338)(true);

// 21.1.3.27 String.prototype[@@iterator]()
__webpack_require__(125)(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0; // next index
  // 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});

/***/ }),
/* 338 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var toInteger = __webpack_require__(74);
var defined = __webpack_require__(73);
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};

/***/ }),
/* 339 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var create = __webpack_require__(81);
var descriptor = __webpack_require__(54);
var setToStringTag = __webpack_require__(82);
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
__webpack_require__(33)(IteratorPrototype, __webpack_require__(37)('iterator'), function () {
  return this;
});

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};

/***/ }),
/* 340 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var dP = __webpack_require__(26);
var anObject = __webpack_require__(41);
var getKeys = __webpack_require__(55);

module.exports = __webpack_require__(27) ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) {
    dP.f(O, P = keys[i++], Properties[P]);
  }return O;
};

/***/ }),
/* 341 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var document = __webpack_require__(20).document;
module.exports = document && document.documentElement;

/***/ }),
/* 342 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(343);
var global = __webpack_require__(20);
var hide = __webpack_require__(33);
var Iterators = __webpack_require__(80);
var TO_STRING_TAG = __webpack_require__(37)('toStringTag');

var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' + 'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' + 'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' + 'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' + 'TextTrackList,TouchList').split(',');

for (var i = 0; i < DOMIterables.length; i++) {
  var NAME = DOMIterables[i];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
  Iterators[NAME] = Iterators.Array;
}

/***/ }),
/* 343 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var addToUnscopables = __webpack_require__(344);
var step = __webpack_require__(345);
var Iterators = __webpack_require__(80);
var toIObject = __webpack_require__(36);

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = __webpack_require__(125)(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0; // next index
  this._k = kind; // kind
  // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

/***/ }),
/* 344 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function () {/* empty */};

/***/ }),
/* 345 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (done, value) {
  return { value: value, done: !!done };
};

/***/ }),
/* 346 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = { "default": __webpack_require__(347), __esModule: true };

/***/ }),
/* 347 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(348);
__webpack_require__(353);
__webpack_require__(354);
__webpack_require__(355);
module.exports = __webpack_require__(13).Symbol;

/***/ }),
/* 348 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// ECMAScript 6 symbols shim

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var global = __webpack_require__(20);
var has = __webpack_require__(28);
var DESCRIPTORS = __webpack_require__(27);
var $export = __webpack_require__(25);
var redefine = __webpack_require__(126);
var META = __webpack_require__(349).KEY;
var $fails = __webpack_require__(35);
var shared = __webpack_require__(76);
var setToStringTag = __webpack_require__(82);
var uid = __webpack_require__(57);
var wks = __webpack_require__(37);
var wksExt = __webpack_require__(83);
var wksDefine = __webpack_require__(84);
var enumKeys = __webpack_require__(350);
var isArray = __webpack_require__(351);
var anObject = __webpack_require__(41);
var isObject = __webpack_require__(34);
var toIObject = __webpack_require__(36);
var toPrimitive = __webpack_require__(72);
var createDesc = __webpack_require__(54);
var _create = __webpack_require__(81);
var gOPNExt = __webpack_require__(352);
var $GOPD = __webpack_require__(128);
var $DP = __webpack_require__(26);
var $keys = __webpack_require__(55);
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function';
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function get() {
      return dP(this, 'a', { value: 7 }).a;
    }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function wrap(tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && _typeof($Symbol.iterator) == 'symbol' ? function (it) {
  return (typeof it === 'undefined' ? 'undefined' : _typeof(it)) == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    }return setSymbolDesc(it, key, D);
  }return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) {
    $defineProperty(it, key = keys[i++], P[key]);
  }return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  }return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  }return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function _Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function $set(value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  __webpack_require__(127).f = gOPNExt.f = $getOwnPropertyNames;
  __webpack_require__(58).f = $propertyIsEnumerable;
  __webpack_require__(78).f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !__webpack_require__(56)) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols =
// 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'.split(','), j = 0; es6Symbols.length > j;) {
  wks(es6Symbols[j++]);
}for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) {
  wksDefine(wellKnownSymbols[k++]);
}$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function _for(key) {
    return has(SymbolRegistry, key += '') ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) {
      if (SymbolRegistry[key] === sym) return key;
    }
  },
  useSetter: function useSetter() {
    setter = true;
  },
  useSimple: function useSimple() {
    setter = false;
  }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) {
      args.push(arguments[i++]);
    }$replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray(replacer)) replacer = function replacer(key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(33)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);

/***/ }),
/* 349 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var META = __webpack_require__(57)('meta');
var isObject = __webpack_require__(34);
var has = __webpack_require__(28);
var setDesc = __webpack_require__(26).f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !__webpack_require__(35)(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function setMeta(it) {
  setDesc(it, META, { value: {
      i: 'O' + ++id, // object ID
      w: {} // weak collections IDs
    } });
};
var fastKey = function fastKey(it, create) {
  // return primitive with prefix
  if (!isObject(it)) return (typeof it === 'undefined' ? 'undefined' : _typeof(it)) == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
    // return object ID
  }return it[META].i;
};
var getWeak = function getWeak(it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
    // return hash weak collections IDs
  }return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function onFreeze(it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};

/***/ }),
/* 350 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// all enumerable object keys, includes symbols
var getKeys = __webpack_require__(55);
var gOPS = __webpack_require__(78);
var pIE = __webpack_require__(58);
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) {
      if (isEnum.call(it, key = symbols[i++])) result.push(key);
    }
  }return result;
};

/***/ }),
/* 351 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// 7.2.2 IsArray(argument)
var cof = __webpack_require__(122);
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};

/***/ }),
/* 352 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = __webpack_require__(36);
var gOPN = __webpack_require__(127).f;
var toString = {}.toString;

var windowNames = (typeof window === 'undefined' ? 'undefined' : _typeof(window)) == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function getWindowNames(it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};

/***/ }),
/* 353 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/***/ }),
/* 354 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(84)('asyncIterator');

/***/ }),
/* 355 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(84)('observable');

/***/ }),
/* 356 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _setPrototypeOf = __webpack_require__(357);

var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

var _create = __webpack_require__(361);

var _create2 = _interopRequireDefault(_create);

var _typeof2 = __webpack_require__(124);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

exports.default = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
  }

  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
};

/***/ }),
/* 357 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = { "default": __webpack_require__(358), __esModule: true };

/***/ }),
/* 358 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(359);
module.exports = __webpack_require__(13).Object.setPrototypeOf;

/***/ }),
/* 359 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = __webpack_require__(25);
$export($export.S, 'Object', { setPrototypeOf: __webpack_require__(360).set });

/***/ }),
/* 360 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = __webpack_require__(34);
var anObject = __webpack_require__(41);
var check = function check(O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
  function (test, buggy, set) {
    try {
      set = __webpack_require__(117)(Function.call, __webpack_require__(128).f(Object.prototype, '__proto__').set, 2);
      set(test, []);
      buggy = !(test instanceof Array);
    } catch (e) {
      buggy = true;
    }
    return function setPrototypeOf(O, proto) {
      check(O, proto);
      if (buggy) O.__proto__ = proto;else set(O, proto);
      return O;
    };
  }({}, false) : undefined),
  check: check
};

/***/ }),
/* 361 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = { "default": __webpack_require__(362), __esModule: true };

/***/ }),
/* 362 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(363);
var $Object = __webpack_require__(13).Object;
module.exports = function create(P, D) {
  return $Object.create(P, D);
};

/***/ }),
/* 363 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__(25);
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', { create: __webpack_require__(81) });

/***/ }),
/* 364 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_RESULT__;var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};typeof navigator!=="undefined"&&function(root,factory){if(true){!(__WEBPACK_AMD_DEFINE_RESULT__ = (function(){return factory(root);}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));}else if((typeof module==="undefined"?"undefined":_typeof(module))==="object"&&module.exports){module.exports=factory(root);}else{root.lottie=factory(root);root.bodymovin=root.lottie;}}(window||{},function(window){/* global locationHref:writable, animationManager, subframeEnabled:writable, defaultCurveSegments:writable, roundValues,
expressionsPlugin:writable, PropertyFactory, ShapePropertyFactory, Matrix *//* exported locationHref, subframeEnabled, expressionsPlugin */'use strict';/* exported svgNS, locationHref, initialDefaultFrame */var svgNS='http://www.w3.org/2000/svg';var locationHref='';var initialDefaultFrame=-999999;/* global createSizedArray *//* exported subframeEnabled, expressionsPlugin, isSafari, cachedColors, bmPow, bmSqrt, bmFloor, bmMax, bmMin, ProjectInterface,
defaultCurveSegments, degToRads, roundCorner, bmRnd, styleDiv, BMEnterFrameEvent, BMCompleteEvent, BMCompleteLoopEvent,
BMSegmentStartEvent, BMDestroyEvent, BMRenderFrameErrorEvent, BMConfigErrorEvent, BMAnimationConfigErrorEvent, createElementID,
addSaturationToRGB, addBrightnessToRGB, addHueToRGB, rgbToHex */var subframeEnabled=true;var expressionsPlugin;var isSafari=/^((?!chrome|android).)*safari/i.test(navigator.userAgent);var cachedColors={};var bmRnd;var bmPow=Math.pow;var bmSqrt=Math.sqrt;var bmFloor=Math.floor;var bmMax=Math.max;var bmMin=Math.min;var BMMath={};(function(){var propertyNames=['abs','acos','acosh','asin','asinh','atan','atanh','atan2','ceil','cbrt','expm1','clz32','cos','cosh','exp','floor','fround','hypot','imul','log','log1p','log2','log10','max','min','pow','random','round','sign','sin','sinh','sqrt','tan','tanh','trunc','E','LN10','LN2','LOG10E','LOG2E','PI','SQRT1_2','SQRT2'];var i;var len=propertyNames.length;for(i=0;i<len;i+=1){BMMath[propertyNames[i]]=Math[propertyNames[i]];}})();function ProjectInterface(){return{};}BMMath.random=Math.random;BMMath.abs=function(val){var tOfVal=typeof val==="undefined"?"undefined":_typeof(val);if(tOfVal==='object'&&val.length){var absArr=createSizedArray(val.length);var i;var len=val.length;for(i=0;i<len;i+=1){absArr[i]=Math.abs(val[i]);}return absArr;}return Math.abs(val);};var defaultCurveSegments=150;var degToRads=Math.PI/180;var roundCorner=0.5519;function roundValues(flag){if(flag){bmRnd=Math.round;}else{bmRnd=function bmRnd(val){return val;};}}roundValues(false);function styleDiv(element){element.style.position='absolute';element.style.top=0;element.style.left=0;element.style.display='block';element.style.transformOrigin='0 0';element.style.webkitTransformOrigin='0 0';element.style.backfaceVisibility='visible';element.style.webkitBackfaceVisibility='visible';element.style.transformStyle='preserve-3d';element.style.webkitTransformStyle='preserve-3d';element.style.mozTransformStyle='preserve-3d';}function BMEnterFrameEvent(type,currentTime,totalTime,frameMultiplier){this.type=type;this.currentTime=currentTime;this.totalTime=totalTime;this.direction=frameMultiplier<0?-1:1;}function BMCompleteEvent(type,frameMultiplier){this.type=type;this.direction=frameMultiplier<0?-1:1;}function BMCompleteLoopEvent(type,totalLoops,currentLoop,frameMultiplier){this.type=type;this.currentLoop=currentLoop;this.totalLoops=totalLoops;this.direction=frameMultiplier<0?-1:1;}function BMSegmentStartEvent(type,firstFrame,totalFrames){this.type=type;this.firstFrame=firstFrame;this.totalFrames=totalFrames;}function BMDestroyEvent(type,target){this.type=type;this.target=target;}function BMRenderFrameErrorEvent(nativeError,currentTime){this.type='renderFrameError';this.nativeError=nativeError;this.currentTime=currentTime;}function BMConfigErrorEvent(nativeError){this.type='configError';this.nativeError=nativeError;}function BMAnimationConfigErrorEvent(type,nativeError){this.type=type;this.nativeError=nativeError;}var createElementID=function(){var _count=0;return function createID(){_count+=1;return'__lottie_element_'+_count;};}();function HSVtoRGB(h,s,v){var r;var g;var b;var i;var f;var p;var q;var t;i=Math.floor(h*6);f=h*6-i;p=v*(1-s);q=v*(1-f*s);t=v*(1-(1-f)*s);switch(i%6){case 0:r=v;g=t;b=p;break;case 1:r=q;g=v;b=p;break;case 2:r=p;g=v;b=t;break;case 3:r=p;g=q;b=v;break;case 4:r=t;g=p;b=v;break;case 5:r=v;g=p;b=q;break;default:break;}return[r,g,b];}function RGBtoHSV(r,g,b){var max=Math.max(r,g,b);var min=Math.min(r,g,b);var d=max-min;var h;var s=max===0?0:d/max;var v=max/255;switch(max){case min:h=0;break;case r:h=g-b+d*(g<b?6:0);h/=6*d;break;case g:h=b-r+d*2;h/=6*d;break;case b:h=r-g+d*4;h/=6*d;break;default:break;}return[h,s,v];}function addSaturationToRGB(color,offset){var hsv=RGBtoHSV(color[0]*255,color[1]*255,color[2]*255);hsv[1]+=offset;if(hsv[1]>1){hsv[1]=1;}else if(hsv[1]<=0){hsv[1]=0;}return HSVtoRGB(hsv[0],hsv[1],hsv[2]);}function addBrightnessToRGB(color,offset){var hsv=RGBtoHSV(color[0]*255,color[1]*255,color[2]*255);hsv[2]+=offset;if(hsv[2]>1){hsv[2]=1;}else if(hsv[2]<0){hsv[2]=0;}return HSVtoRGB(hsv[0],hsv[1],hsv[2]);}function addHueToRGB(color,offset){var hsv=RGBtoHSV(color[0]*255,color[1]*255,color[2]*255);hsv[0]+=offset/360;if(hsv[0]>1){hsv[0]-=1;}else if(hsv[0]<0){hsv[0]+=1;}return HSVtoRGB(hsv[0],hsv[1],hsv[2]);}var rgbToHex=function(){var colorMap=[];var i;var hex;for(i=0;i<256;i+=1){hex=i.toString(16);colorMap[i]=hex.length===1?'0'+hex:hex;}return function(r,g,b){if(r<0){r=0;}if(g<0){g=0;}if(b<0){b=0;}return'#'+colorMap[r]+colorMap[g]+colorMap[b];};}();function BaseEvent(){}BaseEvent.prototype={triggerEvent:function triggerEvent(eventName,args){if(this._cbs[eventName]){var len=this._cbs[eventName].length;for(var i=0;i<len;i+=1){this._cbs[eventName][i](args);}}},addEventListener:function addEventListener(eventName,callback){if(!this._cbs[eventName]){this._cbs[eventName]=[];}this._cbs[eventName].push(callback);return function(){this.removeEventListener(eventName,callback);}.bind(this);},removeEventListener:function removeEventListener(eventName,callback){if(!callback){this._cbs[eventName]=null;}else if(this._cbs[eventName]){var i=0;var len=this._cbs[eventName].length;while(i<len){if(this._cbs[eventName][i]===callback){this._cbs[eventName].splice(i,1);i-=1;len-=1;}i+=1;}if(!this._cbs[eventName].length){this._cbs[eventName]=null;}}}};/* exported createTypedArray, createSizedArray */var createTypedArray=function(){function createRegularArray(type,len){var i=0;var arr=[];var value;switch(type){case'int16':case'uint8c':value=1;break;default:value=1.1;break;}for(i=0;i<len;i+=1){arr.push(value);}return arr;}function createTypedArrayFactory(type,len){if(type==='float32'){return new Float32Array(len);}if(type==='int16'){return new Int16Array(len);}if(type==='uint8c'){return new Uint8ClampedArray(len);}return createRegularArray(type,len);}if(typeof Uint8ClampedArray==='function'&&typeof Float32Array==='function'){return createTypedArrayFactory;}return createRegularArray;}();function createSizedArray(len){return Array.apply(null,{length:len});}/* global svgNS *//* exported createNS */function createNS(type){// return {appendChild:function(){},setAttribute:function(){},style:{}}
return document.createElementNS(svgNS,type);}/* exported createTag */function createTag(type){// return {appendChild:function(){},setAttribute:function(){},style:{}}
return document.createElement(type);}function DynamicPropertyContainer(){}DynamicPropertyContainer.prototype={addDynamicProperty:function addDynamicProperty(prop){if(this.dynamicProperties.indexOf(prop)===-1){this.dynamicProperties.push(prop);this.container.addDynamicProperty(this);this._isAnimated=true;}},iterateDynamicProperties:function iterateDynamicProperties(){this._mdf=false;var i;var len=this.dynamicProperties.length;for(i=0;i<len;i+=1){this.dynamicProperties[i].getValue();if(this.dynamicProperties[i]._mdf){this._mdf=true;}}},initDynamicPropertyContainer:function initDynamicPropertyContainer(container){this.container=container;this.dynamicProperties=[];this._mdf=false;this._isAnimated=false;}};/* exported getBlendMode */var getBlendMode=function(){var blendModeEnums={0:'source-over',1:'multiply',2:'screen',3:'overlay',4:'darken',5:'lighten',6:'color-dodge',7:'color-burn',8:'hard-light',9:'soft-light',10:'difference',11:'exclusion',12:'hue',13:'saturation',14:'color',15:'luminosity'};return function(mode){return blendModeEnums[mode]||'';};}();/* global createTypedArray *//*!
 Transformation Matrix v2.0
 (c) Epistemex 2014-2015
 www.epistemex.com
 By Ken Fyrstenberg
 Contributions by leeoniya.
 License: MIT, header required.
 *//**
 * 2D transformation matrix object initialized with identity matrix.
 *
 * The matrix can synchronize a canvas context by supplying the context
 * as an argument, or later apply current absolute transform to an
 * existing context.
 *
 * All values are handled as floating point values.
 *
 * @param {CanvasRenderingContext2D} [context] - Optional context to sync with Matrix
 * @prop {number} a - scale x
 * @prop {number} b - shear y
 * @prop {number} c - shear x
 * @prop {number} d - scale y
 * @prop {number} e - translate x
 * @prop {number} f - translate y
 * @prop {CanvasRenderingContext2D|null} [context=null] - set or get current canvas context
 * @constructor
 */var Matrix=function(){var _cos=Math.cos;var _sin=Math.sin;var _tan=Math.tan;var _rnd=Math.round;function reset(){this.props[0]=1;this.props[1]=0;this.props[2]=0;this.props[3]=0;this.props[4]=0;this.props[5]=1;this.props[6]=0;this.props[7]=0;this.props[8]=0;this.props[9]=0;this.props[10]=1;this.props[11]=0;this.props[12]=0;this.props[13]=0;this.props[14]=0;this.props[15]=1;return this;}function rotate(angle){if(angle===0){return this;}var mCos=_cos(angle);var mSin=_sin(angle);return this._t(mCos,-mSin,0,0,mSin,mCos,0,0,0,0,1,0,0,0,0,1);}function rotateX(angle){if(angle===0){return this;}var mCos=_cos(angle);var mSin=_sin(angle);return this._t(1,0,0,0,0,mCos,-mSin,0,0,mSin,mCos,0,0,0,0,1);}function rotateY(angle){if(angle===0){return this;}var mCos=_cos(angle);var mSin=_sin(angle);return this._t(mCos,0,mSin,0,0,1,0,0,-mSin,0,mCos,0,0,0,0,1);}function rotateZ(angle){if(angle===0){return this;}var mCos=_cos(angle);var mSin=_sin(angle);return this._t(mCos,-mSin,0,0,mSin,mCos,0,0,0,0,1,0,0,0,0,1);}function shear(sx,sy){return this._t(1,sy,sx,1,0,0);}function skew(ax,ay){return this.shear(_tan(ax),_tan(ay));}function skewFromAxis(ax,angle){var mCos=_cos(angle);var mSin=_sin(angle);return this._t(mCos,mSin,0,0,-mSin,mCos,0,0,0,0,1,0,0,0,0,1)._t(1,0,0,0,_tan(ax),1,0,0,0,0,1,0,0,0,0,1)._t(mCos,-mSin,0,0,mSin,mCos,0,0,0,0,1,0,0,0,0,1);// return this._t(mCos, mSin, -mSin, mCos, 0, 0)._t(1, 0, _tan(ax), 1, 0, 0)._t(mCos, -mSin, mSin, mCos, 0, 0);
}function scale(sx,sy,sz){if(!sz&&sz!==0){sz=1;}if(sx===1&&sy===1&&sz===1){return this;}return this._t(sx,0,0,0,0,sy,0,0,0,0,sz,0,0,0,0,1);}function setTransform(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p){this.props[0]=a;this.props[1]=b;this.props[2]=c;this.props[3]=d;this.props[4]=e;this.props[5]=f;this.props[6]=g;this.props[7]=h;this.props[8]=i;this.props[9]=j;this.props[10]=k;this.props[11]=l;this.props[12]=m;this.props[13]=n;this.props[14]=o;this.props[15]=p;return this;}function translate(tx,ty,tz){tz=tz||0;if(tx!==0||ty!==0||tz!==0){return this._t(1,0,0,0,0,1,0,0,0,0,1,0,tx,ty,tz,1);}return this;}function transform(a2,b2,c2,d2,e2,f2,g2,h2,i2,j2,k2,l2,m2,n2,o2,p2){var _p=this.props;if(a2===1&&b2===0&&c2===0&&d2===0&&e2===0&&f2===1&&g2===0&&h2===0&&i2===0&&j2===0&&k2===1&&l2===0){// NOTE: commenting this condition because TurboFan deoptimizes code when present
// if(m2 !== 0 || n2 !== 0 || o2 !== 0){
_p[12]=_p[12]*a2+_p[15]*m2;_p[13]=_p[13]*f2+_p[15]*n2;_p[14]=_p[14]*k2+_p[15]*o2;_p[15]*=p2;// }
this._identityCalculated=false;return this;}var a1=_p[0];var b1=_p[1];var c1=_p[2];var d1=_p[3];var e1=_p[4];var f1=_p[5];var g1=_p[6];var h1=_p[7];var i1=_p[8];var j1=_p[9];var k1=_p[10];var l1=_p[11];var m1=_p[12];var n1=_p[13];var o1=_p[14];var p1=_p[15];/* matrix order (canvas compatible):
         * ace
         * bdf
         * 001
         */_p[0]=a1*a2+b1*e2+c1*i2+d1*m2;_p[1]=a1*b2+b1*f2+c1*j2+d1*n2;_p[2]=a1*c2+b1*g2+c1*k2+d1*o2;_p[3]=a1*d2+b1*h2+c1*l2+d1*p2;_p[4]=e1*a2+f1*e2+g1*i2+h1*m2;_p[5]=e1*b2+f1*f2+g1*j2+h1*n2;_p[6]=e1*c2+f1*g2+g1*k2+h1*o2;_p[7]=e1*d2+f1*h2+g1*l2+h1*p2;_p[8]=i1*a2+j1*e2+k1*i2+l1*m2;_p[9]=i1*b2+j1*f2+k1*j2+l1*n2;_p[10]=i1*c2+j1*g2+k1*k2+l1*o2;_p[11]=i1*d2+j1*h2+k1*l2+l1*p2;_p[12]=m1*a2+n1*e2+o1*i2+p1*m2;_p[13]=m1*b2+n1*f2+o1*j2+p1*n2;_p[14]=m1*c2+n1*g2+o1*k2+p1*o2;_p[15]=m1*d2+n1*h2+o1*l2+p1*p2;this._identityCalculated=false;return this;}function isIdentity(){if(!this._identityCalculated){this._identity=!(this.props[0]!==1||this.props[1]!==0||this.props[2]!==0||this.props[3]!==0||this.props[4]!==0||this.props[5]!==1||this.props[6]!==0||this.props[7]!==0||this.props[8]!==0||this.props[9]!==0||this.props[10]!==1||this.props[11]!==0||this.props[12]!==0||this.props[13]!==0||this.props[14]!==0||this.props[15]!==1);this._identityCalculated=true;}return this._identity;}function equals(matr){var i=0;while(i<16){if(matr.props[i]!==this.props[i]){return false;}i+=1;}return true;}function clone(matr){var i;for(i=0;i<16;i+=1){matr.props[i]=this.props[i];}return matr;}function cloneFromProps(props){var i;for(i=0;i<16;i+=1){this.props[i]=props[i];}}function applyToPoint(x,y,z){return{x:x*this.props[0]+y*this.props[4]+z*this.props[8]+this.props[12],y:x*this.props[1]+y*this.props[5]+z*this.props[9]+this.props[13],z:x*this.props[2]+y*this.props[6]+z*this.props[10]+this.props[14]};/* return {
         x: x * me.a + y * me.c + me.e,
         y: x * me.b + y * me.d + me.f
         }; */}function applyToX(x,y,z){return x*this.props[0]+y*this.props[4]+z*this.props[8]+this.props[12];}function applyToY(x,y,z){return x*this.props[1]+y*this.props[5]+z*this.props[9]+this.props[13];}function applyToZ(x,y,z){return x*this.props[2]+y*this.props[6]+z*this.props[10]+this.props[14];}function getInverseMatrix(){var determinant=this.props[0]*this.props[5]-this.props[1]*this.props[4];var a=this.props[5]/determinant;var b=-this.props[1]/determinant;var c=-this.props[4]/determinant;var d=this.props[0]/determinant;var e=(this.props[4]*this.props[13]-this.props[5]*this.props[12])/determinant;var f=-(this.props[0]*this.props[13]-this.props[1]*this.props[12])/determinant;var inverseMatrix=new Matrix();inverseMatrix.props[0]=a;inverseMatrix.props[1]=b;inverseMatrix.props[4]=c;inverseMatrix.props[5]=d;inverseMatrix.props[12]=e;inverseMatrix.props[13]=f;return inverseMatrix;}function inversePoint(pt){var inverseMatrix=this.getInverseMatrix();return inverseMatrix.applyToPointArray(pt[0],pt[1],pt[2]||0);}function inversePoints(pts){var i;var len=pts.length;var retPts=[];for(i=0;i<len;i+=1){retPts[i]=inversePoint(pts[i]);}return retPts;}function applyToTriplePoints(pt1,pt2,pt3){var arr=createTypedArray('float32',6);if(this.isIdentity()){arr[0]=pt1[0];arr[1]=pt1[1];arr[2]=pt2[0];arr[3]=pt2[1];arr[4]=pt3[0];arr[5]=pt3[1];}else{var p0=this.props[0];var p1=this.props[1];var p4=this.props[4];var p5=this.props[5];var p12=this.props[12];var p13=this.props[13];arr[0]=pt1[0]*p0+pt1[1]*p4+p12;arr[1]=pt1[0]*p1+pt1[1]*p5+p13;arr[2]=pt2[0]*p0+pt2[1]*p4+p12;arr[3]=pt2[0]*p1+pt2[1]*p5+p13;arr[4]=pt3[0]*p0+pt3[1]*p4+p12;arr[5]=pt3[0]*p1+pt3[1]*p5+p13;}return arr;}function applyToPointArray(x,y,z){var arr;if(this.isIdentity()){arr=[x,y,z];}else{arr=[x*this.props[0]+y*this.props[4]+z*this.props[8]+this.props[12],x*this.props[1]+y*this.props[5]+z*this.props[9]+this.props[13],x*this.props[2]+y*this.props[6]+z*this.props[10]+this.props[14]];}return arr;}function applyToPointStringified(x,y){if(this.isIdentity()){return x+','+y;}var _p=this.props;return Math.round((x*_p[0]+y*_p[4]+_p[12])*100)/100+','+Math.round((x*_p[1]+y*_p[5]+_p[13])*100)/100;}function toCSS(){// Doesn't make much sense to add this optimization. If it is an identity matrix, it's very likely this will get called only once since it won't be keyframed.
/* if(this.isIdentity()) {
            return '';
        } */var i=0;var props=this.props;var cssValue='matrix3d(';var v=10000;while(i<16){cssValue+=_rnd(props[i]*v)/v;cssValue+=i===15?')':',';i+=1;}return cssValue;}function roundMatrixProperty(val){var v=10000;if(val<0.000001&&val>0||val>-0.000001&&val<0){return _rnd(val*v)/v;}return val;}function to2dCSS(){// Doesn't make much sense to add this optimization. If it is an identity matrix, it's very likely this will get called only once since it won't be keyframed.
/* if(this.isIdentity()) {
            return '';
        } */var props=this.props;var _a=roundMatrixProperty(props[0]);var _b=roundMatrixProperty(props[1]);var _c=roundMatrixProperty(props[4]);var _d=roundMatrixProperty(props[5]);var _e=roundMatrixProperty(props[12]);var _f=roundMatrixProperty(props[13]);return'matrix('+_a+','+_b+','+_c+','+_d+','+_e+','+_f+')';}return function(){this.reset=reset;this.rotate=rotate;this.rotateX=rotateX;this.rotateY=rotateY;this.rotateZ=rotateZ;this.skew=skew;this.skewFromAxis=skewFromAxis;this.shear=shear;this.scale=scale;this.setTransform=setTransform;this.translate=translate;this.transform=transform;this.applyToPoint=applyToPoint;this.applyToX=applyToX;this.applyToY=applyToY;this.applyToZ=applyToZ;this.applyToPointArray=applyToPointArray;this.applyToTriplePoints=applyToTriplePoints;this.applyToPointStringified=applyToPointStringified;this.toCSS=toCSS;this.to2dCSS=to2dCSS;this.clone=clone;this.cloneFromProps=cloneFromProps;this.equals=equals;this.inversePoints=inversePoints;this.inversePoint=inversePoint;this.getInverseMatrix=getInverseMatrix;this._t=this.transform;this.isIdentity=isIdentity;this._identity=true;this._identityCalculated=false;this.props=createTypedArray('float32',16);this.reset();};}();/* eslint-disable *//*
 Copyright 2014 David Bau.

 Permission is hereby granted, free of charge, to any person obtaining
 a copy of this software and associated documentation files (the
 "Software"), to deal in the Software without restriction, including
 without limitation the rights to use, copy, modify, merge, publish,
 distribute, sublicense, and/or sell copies of the Software, and to
 permit persons to whom the Software is furnished to do so, subject to
 the following conditions:

 The above copyright notice and this permission notice shall be
 included in all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

 */(function(pool,math){//
// The following constants are related to IEEE 754 limits.
//
var global=this,width=256,// each RC4 output is 0 <= x < 256
chunks=6,// at least six RC4 outputs for each double
digits=52,// there are 52 significant digits in a double
rngname='random',// rngname: name for Math.random and Math.seedrandom
startdenom=math.pow(width,chunks),significance=math.pow(2,digits),overflow=significance*2,mask=width-1,nodecrypto;// node.js crypto module, initialized at the bottom.
//
// seedrandom()
// This is the seedrandom function described above.
//
function seedrandom(seed,options,callback){var key=[];options=options===true?{entropy:true}:options||{};// Flatten the seed string or build one from local entropy if needed.
var shortseed=mixkey(flatten(options.entropy?[seed,tostring(pool)]:seed===null?autoseed():seed,3),key);// Use the seed to initialize an ARC4 generator.
var arc4=new ARC4(key);// This function returns a random double in [0, 1) that contains
// randomness in every bit of the mantissa of the IEEE 754 value.
var prng=function prng(){var n=arc4.g(chunks),// Start with a numerator n < 2 ^ 48
d=startdenom,//   and denominator d = 2 ^ 48.
x=0;//   and no 'extra last byte'.
while(n<significance){// Fill up all significant digits by
n=(n+x)*width;//   shifting numerator and
d*=width;//   denominator and generating a
x=arc4.g(1);//   new least-significant-byte.
}while(n>=overflow){// To avoid rounding up, before adding
n/=2;//   last byte, shift everything
d/=2;//   right using integer math until
x>>>=1;//   we have exactly the desired bits.
}return(n+x)/d;// Form the number within [0, 1).
};prng.int32=function(){return arc4.g(4)|0;};prng.quick=function(){return arc4.g(4)/0x100000000;};prng.double=prng;// Mix the randomness into accumulated entropy.
mixkey(tostring(arc4.S),pool);// Calling convention: what to return as a function of prng, seed, is_math.
return(options.pass||callback||function(prng,seed,is_math_call,state){if(state){// Load the arc4 state from the given state if it has an S array.
if(state.S){copy(state,arc4);}// Only provide the .state method if requested via options.state.
prng.state=function(){return copy(arc4,{});};}// If called as a method of Math (Math.seedrandom()), mutate
// Math.random because that is how seedrandom.js has worked since v1.0.
if(is_math_call){math[rngname]=prng;return seed;}// Otherwise, it is a newer calling convention, so return the
// prng directly.
else return prng;})(prng,shortseed,'global'in options?options.global:this==math,options.state);}math['seed'+rngname]=seedrandom;//
// ARC4
//
// An ARC4 implementation.  The constructor takes a key in the form of
// an array of at most (width) integers that should be 0 <= x < (width).
//
// The g(count) method returns a pseudorandom integer that concatenates
// the next (count) outputs from ARC4.  Its return value is a number x
// that is in the range 0 <= x < (width ^ count).
//
function ARC4(key){var t,keylen=key.length,me=this,i=0,j=me.i=me.j=0,s=me.S=[];// The empty key [] is treated as [0].
if(!keylen){key=[keylen++];}// Set up S using the standard key scheduling algorithm.
while(i<width){s[i]=i++;}for(i=0;i<width;i++){s[i]=s[j=mask&j+key[i%keylen]+(t=s[i])];s[j]=t;}// The "g" method returns the next (count) outputs as one number.
me.g=function(count){// Using instance members instead of closure state nearly doubles speed.
var t,r=0,i=me.i,j=me.j,s=me.S;while(count--){t=s[i=mask&i+1];r=r*width+s[mask&(s[i]=s[j=mask&j+t])+(s[j]=t)];}me.i=i;me.j=j;return r;// For robust unpredictability, the function call below automatically
// discards an initial batch of values.  This is called RC4-drop[256].
// See http://google.com/search?q=rsa+fluhrer+response&btnI
};}//
// copy()
// Copies internal state of ARC4 to or from a plain object.
//
function copy(f,t){t.i=f.i;t.j=f.j;t.S=f.S.slice();return t;}//
// flatten()
// Converts an object tree to nested arrays of strings.
//
function flatten(obj,depth){var result=[],typ=typeof obj==="undefined"?"undefined":_typeof(obj),prop;if(depth&&typ=='object'){for(prop in obj){try{result.push(flatten(obj[prop],depth-1));}catch(e){}}}return result.length?result:typ=='string'?obj:obj+'\0';}//
// mixkey()
// Mixes a string seed into a key that is an array of integers, and
// returns a shortened string seed that is equivalent to the result key.
//
function mixkey(seed,key){var stringseed=seed+'',smear,j=0;while(j<stringseed.length){key[mask&j]=mask&(smear^=key[mask&j]*19)+stringseed.charCodeAt(j++);}return tostring(key);}//
// autoseed()
// Returns an object for autoseeding, using window.crypto and Node crypto
// module if available.
//
function autoseed(){try{if(nodecrypto){return tostring(nodecrypto.randomBytes(width));}var out=new Uint8Array(width);(global.crypto||global.msCrypto).getRandomValues(out);return tostring(out);}catch(e){var browser=global.navigator,plugins=browser&&browser.plugins;return[+new Date(),global,plugins,global.screen,tostring(pool)];}}//
// tostring()
// Converts an array of charcodes to a string
//
function tostring(a){return String.fromCharCode.apply(0,a);}//
// When seedrandom.js is loaded, we immediately mix a few bits
// from the built-in RNG into the entropy pool.  Because we do
// not want to interfere with deterministic PRNG state later,
// seedrandom will not call math.random on its own again after
// initialization.
//
mixkey(math.random(),pool);//
// Nodejs and AMD support: export the implementation as a module using
// either convention.
//
// End anonymous scope, and pass initial values.
})([],// pool: entropy pool starts empty
BMMath// math: package containing random, pow, and seedrandom
);/* eslint-disable */var BezierFactory=function(){/**
     * BezierEasing - use bezier curve for transition easing function
     * by Gaëtan Renaudeau 2014 - 2015 – MIT License
     *
     * Credits: is based on Firefox's nsSMILKeySpline.cpp
     * Usage:
     * var spline = BezierEasing([ 0.25, 0.1, 0.25, 1.0 ])
     * spline.get(x) => returns the easing value | x must be in [0, 1] range
     *
     */var ob={};ob.getBezierEasing=getBezierEasing;var beziers={};function getBezierEasing(a,b,c,d,nm){var str=nm||('bez_'+a+'_'+b+'_'+c+'_'+d).replace(/\./g,'p');if(beziers[str]){return beziers[str];}var bezEasing=new BezierEasing([a,b,c,d]);beziers[str]=bezEasing;return bezEasing;}// These values are established by empiricism with tests (tradeoff: performance VS precision)
var NEWTON_ITERATIONS=4;var NEWTON_MIN_SLOPE=0.001;var SUBDIVISION_PRECISION=0.0000001;var SUBDIVISION_MAX_ITERATIONS=10;var kSplineTableSize=11;var kSampleStepSize=1.0/(kSplineTableSize-1.0);var float32ArraySupported=typeof Float32Array==='function';function A(aA1,aA2){return 1.0-3.0*aA2+3.0*aA1;}function B(aA1,aA2){return 3.0*aA2-6.0*aA1;}function C(aA1){return 3.0*aA1;}// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.
function calcBezier(aT,aA1,aA2){return((A(aA1,aA2)*aT+B(aA1,aA2))*aT+C(aA1))*aT;}// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.
function getSlope(aT,aA1,aA2){return 3.0*A(aA1,aA2)*aT*aT+2.0*B(aA1,aA2)*aT+C(aA1);}function binarySubdivide(aX,aA,aB,mX1,mX2){var currentX,currentT,i=0;do{currentT=aA+(aB-aA)/2.0;currentX=calcBezier(currentT,mX1,mX2)-aX;if(currentX>0.0){aB=currentT;}else{aA=currentT;}}while(Math.abs(currentX)>SUBDIVISION_PRECISION&&++i<SUBDIVISION_MAX_ITERATIONS);return currentT;}function newtonRaphsonIterate(aX,aGuessT,mX1,mX2){for(var i=0;i<NEWTON_ITERATIONS;++i){var currentSlope=getSlope(aGuessT,mX1,mX2);if(currentSlope===0.0)return aGuessT;var currentX=calcBezier(aGuessT,mX1,mX2)-aX;aGuessT-=currentX/currentSlope;}return aGuessT;}/**
     * points is an array of [ mX1, mY1, mX2, mY2 ]
     */function BezierEasing(points){this._p=points;this._mSampleValues=float32ArraySupported?new Float32Array(kSplineTableSize):new Array(kSplineTableSize);this._precomputed=false;this.get=this.get.bind(this);}BezierEasing.prototype={get:function get(x){var mX1=this._p[0],mY1=this._p[1],mX2=this._p[2],mY2=this._p[3];if(!this._precomputed)this._precompute();if(mX1===mY1&&mX2===mY2)return x;// linear
// Because JavaScript number are imprecise, we should guarantee the extremes are right.
if(x===0)return 0;if(x===1)return 1;return calcBezier(this._getTForX(x),mY1,mY2);},// Private part
_precompute:function _precompute(){var mX1=this._p[0],mY1=this._p[1],mX2=this._p[2],mY2=this._p[3];this._precomputed=true;if(mX1!==mY1||mX2!==mY2){this._calcSampleValues();}},_calcSampleValues:function _calcSampleValues(){var mX1=this._p[0],mX2=this._p[2];for(var i=0;i<kSplineTableSize;++i){this._mSampleValues[i]=calcBezier(i*kSampleStepSize,mX1,mX2);}},/**
         * getTForX chose the fastest heuristic to determine the percentage value precisely from a given X projection.
         */_getTForX:function _getTForX(aX){var mX1=this._p[0],mX2=this._p[2],mSampleValues=this._mSampleValues;var intervalStart=0.0;var currentSample=1;var lastSample=kSplineTableSize-1;for(;currentSample!==lastSample&&mSampleValues[currentSample]<=aX;++currentSample){intervalStart+=kSampleStepSize;}--currentSample;// Interpolate to provide an initial guess for t
var dist=(aX-mSampleValues[currentSample])/(mSampleValues[currentSample+1]-mSampleValues[currentSample]);var guessForT=intervalStart+dist*kSampleStepSize;var initialSlope=getSlope(guessForT,mX1,mX2);if(initialSlope>=NEWTON_MIN_SLOPE){return newtonRaphsonIterate(aX,guessForT,mX1,mX2);}if(initialSlope===0.0){return guessForT;}return binarySubdivide(aX,intervalStart,intervalStart+kSampleStepSize,mX1,mX2);}};return ob;}();(function(){var lastTime=0;var vendors=['ms','moz','webkit','o'];for(var x=0;x<vendors.length&&!window.requestAnimationFrame;++x){// eslint-disable-line no-plusplus
window.requestAnimationFrame=window[vendors[x]+'RequestAnimationFrame'];window.cancelAnimationFrame=window[vendors[x]+'CancelAnimationFrame']||window[vendors[x]+'CancelRequestAnimationFrame'];}if(!window.requestAnimationFrame){window.requestAnimationFrame=function(callback){var currTime=new Date().getTime();var timeToCall=Math.max(0,16-(currTime-lastTime));var id=setTimeout(function(){callback(currTime+timeToCall);},timeToCall);lastTime=currTime+timeToCall;return id;};}if(!window.cancelAnimationFrame){window.cancelAnimationFrame=function(id){clearTimeout(id);};}})();/* exported extendPrototype, getDescriptor, createProxyFunction */function extendPrototype(sources,destination){var i;var len=sources.length;var sourcePrototype;for(i=0;i<len;i+=1){sourcePrototype=sources[i].prototype;for(var attr in sourcePrototype){if(Object.prototype.hasOwnProperty.call(sourcePrototype,attr))destination.prototype[attr]=sourcePrototype[attr];}}}function getDescriptor(object,prop){return Object.getOwnPropertyDescriptor(object,prop);}function createProxyFunction(prototype){function ProxyFunction(){}ProxyFunction.prototype=prototype;return ProxyFunction;}/* global segmentsLengthPool, defaultCurveSegments, createSizedArray, bmPow, bmSqrt, bmFloor, createTypedArray, bezierLengthPool *//* exported bez */function bezFunction(){var math=Math;function pointOnLine2D(x1,y1,x2,y2,x3,y3){var det1=x1*y2+y1*x3+x2*y3-x3*y2-y3*x1-x2*y1;return det1>-0.001&&det1<0.001;}function pointOnLine3D(x1,y1,z1,x2,y2,z2,x3,y3,z3){if(z1===0&&z2===0&&z3===0){return pointOnLine2D(x1,y1,x2,y2,x3,y3);}var dist1=math.sqrt(math.pow(x2-x1,2)+math.pow(y2-y1,2)+math.pow(z2-z1,2));var dist2=math.sqrt(math.pow(x3-x1,2)+math.pow(y3-y1,2)+math.pow(z3-z1,2));var dist3=math.sqrt(math.pow(x3-x2,2)+math.pow(y3-y2,2)+math.pow(z3-z2,2));var diffDist;if(dist1>dist2){if(dist1>dist3){diffDist=dist1-dist2-dist3;}else{diffDist=dist3-dist2-dist1;}}else if(dist3>dist2){diffDist=dist3-dist2-dist1;}else{diffDist=dist2-dist1-dist3;}return diffDist>-0.0001&&diffDist<0.0001;}var getBezierLength=function(){return function(pt1,pt2,pt3,pt4){var curveSegments=defaultCurveSegments;var k;var i;var len;var ptCoord;var perc;var addedLength=0;var ptDistance;var point=[];var lastPoint=[];var lengthData=bezierLengthPool.newElement();len=pt3.length;for(k=0;k<curveSegments;k+=1){perc=k/(curveSegments-1);ptDistance=0;for(i=0;i<len;i+=1){ptCoord=bmPow(1-perc,3)*pt1[i]+3*bmPow(1-perc,2)*perc*pt3[i]+3*(1-perc)*bmPow(perc,2)*pt4[i]+bmPow(perc,3)*pt2[i];point[i]=ptCoord;if(lastPoint[i]!==null){ptDistance+=bmPow(point[i]-lastPoint[i],2);}lastPoint[i]=point[i];}if(ptDistance){ptDistance=bmSqrt(ptDistance);addedLength+=ptDistance;}lengthData.percents[k]=perc;lengthData.lengths[k]=addedLength;}lengthData.addedLength=addedLength;return lengthData;};}();function getSegmentsLength(shapeData){var segmentsLength=segmentsLengthPool.newElement();var closed=shapeData.c;var pathV=shapeData.v;var pathO=shapeData.o;var pathI=shapeData.i;var i;var len=shapeData._length;var lengths=segmentsLength.lengths;var totalLength=0;for(i=0;i<len-1;i+=1){lengths[i]=getBezierLength(pathV[i],pathV[i+1],pathO[i],pathI[i+1]);totalLength+=lengths[i].addedLength;}if(closed&&len){lengths[i]=getBezierLength(pathV[i],pathV[0],pathO[i],pathI[0]);totalLength+=lengths[i].addedLength;}segmentsLength.totalLength=totalLength;return segmentsLength;}function BezierData(length){this.segmentLength=0;this.points=new Array(length);}function PointData(partial,point){this.partialLength=partial;this.point=point;}var buildBezierData=function(){var storedData={};return function(pt1,pt2,pt3,pt4){var bezierName=(pt1[0]+'_'+pt1[1]+'_'+pt2[0]+'_'+pt2[1]+'_'+pt3[0]+'_'+pt3[1]+'_'+pt4[0]+'_'+pt4[1]).replace(/\./g,'p');if(!storedData[bezierName]){var curveSegments=defaultCurveSegments;var k;var i;var len;var ptCoord;var perc;var addedLength=0;var ptDistance;var point;var lastPoint=null;if(pt1.length===2&&(pt1[0]!==pt2[0]||pt1[1]!==pt2[1])&&pointOnLine2D(pt1[0],pt1[1],pt2[0],pt2[1],pt1[0]+pt3[0],pt1[1]+pt3[1])&&pointOnLine2D(pt1[0],pt1[1],pt2[0],pt2[1],pt2[0]+pt4[0],pt2[1]+pt4[1])){curveSegments=2;}var bezierData=new BezierData(curveSegments);len=pt3.length;for(k=0;k<curveSegments;k+=1){point=createSizedArray(len);perc=k/(curveSegments-1);ptDistance=0;for(i=0;i<len;i+=1){ptCoord=bmPow(1-perc,3)*pt1[i]+3*bmPow(1-perc,2)*perc*(pt1[i]+pt3[i])+3*(1-perc)*bmPow(perc,2)*(pt2[i]+pt4[i])+bmPow(perc,3)*pt2[i];point[i]=ptCoord;if(lastPoint!==null){ptDistance+=bmPow(point[i]-lastPoint[i],2);}}ptDistance=bmSqrt(ptDistance);addedLength+=ptDistance;bezierData.points[k]=new PointData(ptDistance,point);lastPoint=point;}bezierData.segmentLength=addedLength;storedData[bezierName]=bezierData;}return storedData[bezierName];};}();function getDistancePerc(perc,bezierData){var percents=bezierData.percents;var lengths=bezierData.lengths;var len=percents.length;var initPos=bmFloor((len-1)*perc);var lengthPos=perc*bezierData.addedLength;var lPerc=0;if(initPos===len-1||initPos===0||lengthPos===lengths[initPos]){return percents[initPos];}var dir=lengths[initPos]>lengthPos?-1:1;var flag=true;while(flag){if(lengths[initPos]<=lengthPos&&lengths[initPos+1]>lengthPos){lPerc=(lengthPos-lengths[initPos])/(lengths[initPos+1]-lengths[initPos]);flag=false;}else{initPos+=dir;}if(initPos<0||initPos>=len-1){// FIX for TypedArrays that don't store floating point values with enough accuracy
if(initPos===len-1){return percents[initPos];}flag=false;}}return percents[initPos]+(percents[initPos+1]-percents[initPos])*lPerc;}function getPointInSegment(pt1,pt2,pt3,pt4,percent,bezierData){var t1=getDistancePerc(percent,bezierData);var u1=1-t1;var ptX=math.round((u1*u1*u1*pt1[0]+(t1*u1*u1+u1*t1*u1+u1*u1*t1)*pt3[0]+(t1*t1*u1+u1*t1*t1+t1*u1*t1)*pt4[0]+t1*t1*t1*pt2[0])*1000)/1000;var ptY=math.round((u1*u1*u1*pt1[1]+(t1*u1*u1+u1*t1*u1+u1*u1*t1)*pt3[1]+(t1*t1*u1+u1*t1*t1+t1*u1*t1)*pt4[1]+t1*t1*t1*pt2[1])*1000)/1000;return[ptX,ptY];}var bezierSegmentPoints=createTypedArray('float32',8);function getNewSegment(pt1,pt2,pt3,pt4,startPerc,endPerc,bezierData){if(startPerc<0){startPerc=0;}else if(startPerc>1){startPerc=1;}var t0=getDistancePerc(startPerc,bezierData);endPerc=endPerc>1?1:endPerc;var t1=getDistancePerc(endPerc,bezierData);var i;var len=pt1.length;var u0=1-t0;var u1=1-t1;var u0u0u0=u0*u0*u0;var t0u0u0_3=t0*u0*u0*3;// eslint-disable-line camelcase
var t0t0u0_3=t0*t0*u0*3;// eslint-disable-line camelcase
var t0t0t0=t0*t0*t0;//
var u0u0u1=u0*u0*u1;var t0u0u1_3=t0*u0*u1+u0*t0*u1+u0*u0*t1;// eslint-disable-line camelcase
var t0t0u1_3=t0*t0*u1+u0*t0*t1+t0*u0*t1;// eslint-disable-line camelcase
var t0t0t1=t0*t0*t1;//
var u0u1u1=u0*u1*u1;var t0u1u1_3=t0*u1*u1+u0*t1*u1+u0*u1*t1;// eslint-disable-line camelcase
var t0t1u1_3=t0*t1*u1+u0*t1*t1+t0*u1*t1;// eslint-disable-line camelcase
var t0t1t1=t0*t1*t1;//
var u1u1u1=u1*u1*u1;var t1u1u1_3=t1*u1*u1+u1*t1*u1+u1*u1*t1;// eslint-disable-line camelcase
var t1t1u1_3=t1*t1*u1+u1*t1*t1+t1*u1*t1;// eslint-disable-line camelcase
var t1t1t1=t1*t1*t1;for(i=0;i<len;i+=1){bezierSegmentPoints[i*4]=math.round((u0u0u0*pt1[i]+t0u0u0_3*pt3[i]+t0t0u0_3*pt4[i]+t0t0t0*pt2[i])*1000)/1000;// eslint-disable-line camelcase
bezierSegmentPoints[i*4+1]=math.round((u0u0u1*pt1[i]+t0u0u1_3*pt3[i]+t0t0u1_3*pt4[i]+t0t0t1*pt2[i])*1000)/1000;// eslint-disable-line camelcase
bezierSegmentPoints[i*4+2]=math.round((u0u1u1*pt1[i]+t0u1u1_3*pt3[i]+t0t1u1_3*pt4[i]+t0t1t1*pt2[i])*1000)/1000;// eslint-disable-line camelcase
bezierSegmentPoints[i*4+3]=math.round((u1u1u1*pt1[i]+t1u1u1_3*pt3[i]+t1t1u1_3*pt4[i]+t1t1t1*pt2[i])*1000)/1000;// eslint-disable-line camelcase
}return bezierSegmentPoints;}return{getSegmentsLength:getSegmentsLength,getNewSegment:getNewSegment,getPointInSegment:getPointInSegment,buildBezierData:buildBezierData,pointOnLine2D:pointOnLine2D,pointOnLine3D:pointOnLine3D};}var bez=bezFunction();/* exported dataManager */function dataFunctionManager(){// var tCanvasHelper = createTag('canvas').getContext('2d');
function completeLayers(layers,comps,fontManager){var layerData;var i;var len=layers.length;var j;var jLen;var k;var kLen;for(i=0;i<len;i+=1){layerData=layers[i];if('ks'in layerData&&!layerData.completed){layerData.completed=true;if(layerData.tt){layers[i-1].td=layerData.tt;}if(layerData.hasMask){var maskProps=layerData.masksProperties;jLen=maskProps.length;for(j=0;j<jLen;j+=1){if(maskProps[j].pt.k.i){convertPathsToAbsoluteValues(maskProps[j].pt.k);}else{kLen=maskProps[j].pt.k.length;for(k=0;k<kLen;k+=1){if(maskProps[j].pt.k[k].s){convertPathsToAbsoluteValues(maskProps[j].pt.k[k].s[0]);}if(maskProps[j].pt.k[k].e){convertPathsToAbsoluteValues(maskProps[j].pt.k[k].e[0]);}}}}}if(layerData.ty===0){layerData.layers=findCompLayers(layerData.refId,comps);completeLayers(layerData.layers,comps,fontManager);}else if(layerData.ty===4){completeShapes(layerData.shapes);}else if(layerData.ty===5){completeText(layerData,fontManager);}}}}function findCompLayers(id,comps){var i=0;var len=comps.length;while(i<len){if(comps[i].id===id){if(!comps[i].layers.__used){comps[i].layers.__used=true;return comps[i].layers;}return JSON.parse(JSON.stringify(comps[i].layers));}i+=1;}return null;}function completeShapes(arr){var i;var len=arr.length;var j;var jLen;for(i=len-1;i>=0;i-=1){if(arr[i].ty==='sh'){if(arr[i].ks.k.i){convertPathsToAbsoluteValues(arr[i].ks.k);}else{jLen=arr[i].ks.k.length;for(j=0;j<jLen;j+=1){if(arr[i].ks.k[j].s){convertPathsToAbsoluteValues(arr[i].ks.k[j].s[0]);}if(arr[i].ks.k[j].e){convertPathsToAbsoluteValues(arr[i].ks.k[j].e[0]);}}}}else if(arr[i].ty==='gr'){completeShapes(arr[i].it);}}}function convertPathsToAbsoluteValues(path){var i;var len=path.i.length;for(i=0;i<len;i+=1){path.i[i][0]+=path.v[i][0];path.i[i][1]+=path.v[i][1];path.o[i][0]+=path.v[i][0];path.o[i][1]+=path.v[i][1];}}function checkVersion(minimum,animVersionString){var animVersion=animVersionString?animVersionString.split('.'):[100,100,100];if(minimum[0]>animVersion[0]){return true;}if(animVersion[0]>minimum[0]){return false;}if(minimum[1]>animVersion[1]){return true;}if(animVersion[1]>minimum[1]){return false;}if(minimum[2]>animVersion[2]){return true;}if(animVersion[2]>minimum[2]){return false;}return null;}var checkText=function(){var minimumVersion=[4,4,14];function updateTextLayer(textLayer){var documentData=textLayer.t.d;textLayer.t.d={k:[{s:documentData,t:0}]};}function iterateLayers(layers){var i;var len=layers.length;for(i=0;i<len;i+=1){if(layers[i].ty===5){updateTextLayer(layers[i]);}}}return function(animationData){if(checkVersion(minimumVersion,animationData.v)){iterateLayers(animationData.layers);if(animationData.assets){var i;var len=animationData.assets.length;for(i=0;i<len;i+=1){if(animationData.assets[i].layers){iterateLayers(animationData.assets[i].layers);}}}}};}();var checkChars=function(){var minimumVersion=[4,7,99];return function(animationData){if(animationData.chars&&!checkVersion(minimumVersion,animationData.v)){var i;var len=animationData.chars.length;var j;var jLen;var pathData;var paths;for(i=0;i<len;i+=1){if(animationData.chars[i].data&&animationData.chars[i].data.shapes){paths=animationData.chars[i].data.shapes[0].it;jLen=paths.length;for(j=0;j<jLen;j+=1){pathData=paths[j].ks.k;if(!pathData.__converted){convertPathsToAbsoluteValues(paths[j].ks.k);pathData.__converted=true;}}}}}};}();var checkColors=function(){var minimumVersion=[4,1,9];function iterateShapes(shapes){var i;var len=shapes.length;var j;var jLen;for(i=0;i<len;i+=1){if(shapes[i].ty==='gr'){iterateShapes(shapes[i].it);}else if(shapes[i].ty==='fl'||shapes[i].ty==='st'){if(shapes[i].c.k&&shapes[i].c.k[0].i){jLen=shapes[i].c.k.length;for(j=0;j<jLen;j+=1){if(shapes[i].c.k[j].s){shapes[i].c.k[j].s[0]/=255;shapes[i].c.k[j].s[1]/=255;shapes[i].c.k[j].s[2]/=255;shapes[i].c.k[j].s[3]/=255;}if(shapes[i].c.k[j].e){shapes[i].c.k[j].e[0]/=255;shapes[i].c.k[j].e[1]/=255;shapes[i].c.k[j].e[2]/=255;shapes[i].c.k[j].e[3]/=255;}}}else{shapes[i].c.k[0]/=255;shapes[i].c.k[1]/=255;shapes[i].c.k[2]/=255;shapes[i].c.k[3]/=255;}}}}function iterateLayers(layers){var i;var len=layers.length;for(i=0;i<len;i+=1){if(layers[i].ty===4){iterateShapes(layers[i].shapes);}}}return function(animationData){if(checkVersion(minimumVersion,animationData.v)){iterateLayers(animationData.layers);if(animationData.assets){var i;var len=animationData.assets.length;for(i=0;i<len;i+=1){if(animationData.assets[i].layers){iterateLayers(animationData.assets[i].layers);}}}}};}();var checkShapes=function(){var minimumVersion=[4,4,18];function completeClosingShapes(arr){var i;var len=arr.length;var j;var jLen;for(i=len-1;i>=0;i-=1){if(arr[i].ty==='sh'){if(arr[i].ks.k.i){arr[i].ks.k.c=arr[i].closed;}else{jLen=arr[i].ks.k.length;for(j=0;j<jLen;j+=1){if(arr[i].ks.k[j].s){arr[i].ks.k[j].s[0].c=arr[i].closed;}if(arr[i].ks.k[j].e){arr[i].ks.k[j].e[0].c=arr[i].closed;}}}}else if(arr[i].ty==='gr'){completeClosingShapes(arr[i].it);}}}function iterateLayers(layers){var layerData;var i;var len=layers.length;var j;var jLen;var k;var kLen;for(i=0;i<len;i+=1){layerData=layers[i];if(layerData.hasMask){var maskProps=layerData.masksProperties;jLen=maskProps.length;for(j=0;j<jLen;j+=1){if(maskProps[j].pt.k.i){maskProps[j].pt.k.c=maskProps[j].cl;}else{kLen=maskProps[j].pt.k.length;for(k=0;k<kLen;k+=1){if(maskProps[j].pt.k[k].s){maskProps[j].pt.k[k].s[0].c=maskProps[j].cl;}if(maskProps[j].pt.k[k].e){maskProps[j].pt.k[k].e[0].c=maskProps[j].cl;}}}}}if(layerData.ty===4){completeClosingShapes(layerData.shapes);}}}return function(animationData){if(checkVersion(minimumVersion,animationData.v)){iterateLayers(animationData.layers);if(animationData.assets){var i;var len=animationData.assets.length;for(i=0;i<len;i+=1){if(animationData.assets[i].layers){iterateLayers(animationData.assets[i].layers);}}}}};}();function completeData(animationData,fontManager){if(animationData.__complete){return;}checkColors(animationData);checkText(animationData);checkChars(animationData);checkShapes(animationData);completeLayers(animationData.layers,animationData.assets,fontManager);animationData.__complete=true;}function completeText(data){if(data.t.a.length===0&&!('m'in data.t.p)){data.singleShape=true;}}var moduleOb={};moduleOb.completeData=completeData;moduleOb.checkColors=checkColors;moduleOb.checkChars=checkChars;moduleOb.checkShapes=checkShapes;moduleOb.completeLayers=completeLayers;return moduleOb;}var dataManager=dataFunctionManager();/* exported getFontProperties */function getFontProperties(fontData){var styles=fontData.fStyle?fontData.fStyle.split(' '):[];var fWeight='normal';var fStyle='normal';var len=styles.length;var styleName;for(var i=0;i<len;i+=1){styleName=styles[i].toLowerCase();switch(styleName){case'italic':fStyle='italic';break;case'bold':fWeight='700';break;case'black':fWeight='900';break;case'medium':fWeight='500';break;case'regular':case'normal':fWeight='400';break;case'light':case'thin':fWeight='200';break;default:break;}}return{style:fStyle,weight:fontData.fWeight||fWeight};}/* global createNS, createTag, getFontProperties *//* exported FontManager */var FontManager=function(){var maxWaitingTime=5000;var emptyChar={w:0,size:0,shapes:[]};var combinedCharacters=[];// Hindi characters
combinedCharacters=combinedCharacters.concat([2304,2305,2306,2307,2362,2363,2364,2364,2366,2367,2368,2369,2370,2371,2372,2373,2374,2375,2376,2377,2378,2379,2380,2381,2382,2383,2387,2388,2389,2390,2391,2402,2403]);function trimFontOptions(font){var familyArray=font.split(',');var i;var len=familyArray.length;var enabledFamilies=[];for(i=0;i<len;i+=1){if(familyArray[i]!=='sans-serif'&&familyArray[i]!=='monospace'){enabledFamilies.push(familyArray[i]);}}return enabledFamilies.join(',');}function setUpNode(font,family){var parentNode=createTag('span');// Node is invisible to screen readers.
parentNode.setAttribute('aria-hidden',true);parentNode.style.fontFamily=family;var node=createTag('span');// Characters that vary significantly among different fonts
node.innerText='giItT1WQy@!-/#';// Visible - so we can measure it - but not on the screen
parentNode.style.position='absolute';parentNode.style.left='-10000px';parentNode.style.top='-10000px';// Large font size makes even subtle changes obvious
parentNode.style.fontSize='300px';// Reset any font properties
parentNode.style.fontVariant='normal';parentNode.style.fontStyle='normal';parentNode.style.fontWeight='normal';parentNode.style.letterSpacing='0';parentNode.appendChild(node);document.body.appendChild(parentNode);// Remember width with no applied web font
var width=node.offsetWidth;node.style.fontFamily=trimFontOptions(font)+', '+family;return{node:node,w:width,parent:parentNode};}function checkLoadedFonts(){var i;var len=this.fonts.length;var node;var w;var loadedCount=len;for(i=0;i<len;i+=1){if(this.fonts[i].loaded){loadedCount-=1;}else if(this.fonts[i].fOrigin==='n'||this.fonts[i].origin===0){this.fonts[i].loaded=true;}else{node=this.fonts[i].monoCase.node;w=this.fonts[i].monoCase.w;if(node.offsetWidth!==w){loadedCount-=1;this.fonts[i].loaded=true;}else{node=this.fonts[i].sansCase.node;w=this.fonts[i].sansCase.w;if(node.offsetWidth!==w){loadedCount-=1;this.fonts[i].loaded=true;}}if(this.fonts[i].loaded){this.fonts[i].sansCase.parent.parentNode.removeChild(this.fonts[i].sansCase.parent);this.fonts[i].monoCase.parent.parentNode.removeChild(this.fonts[i].monoCase.parent);}}}if(loadedCount!==0&&Date.now()-this.initTime<maxWaitingTime){setTimeout(this.checkLoadedFontsBinded,20);}else{setTimeout(this.setIsLoadedBinded,10);}}function createHelper(def,fontData){var tHelper=createNS('text');tHelper.style.fontSize='100px';// tHelper.style.fontFamily = fontData.fFamily;
var fontProps=getFontProperties(fontData);tHelper.setAttribute('font-family',fontData.fFamily);tHelper.setAttribute('font-style',fontProps.style);tHelper.setAttribute('font-weight',fontProps.weight);tHelper.textContent='1';if(fontData.fClass){tHelper.style.fontFamily='inherit';tHelper.setAttribute('class',fontData.fClass);}else{tHelper.style.fontFamily=fontData.fFamily;}def.appendChild(tHelper);var tCanvasHelper=createTag('canvas').getContext('2d');tCanvasHelper.font=fontData.fWeight+' '+fontData.fStyle+' 100px '+fontData.fFamily;// tCanvasHelper.font = ' 100px '+ fontData.fFamily;
return tHelper;}function addFonts(fontData,defs){if(!fontData){this.isLoaded=true;return;}if(this.chars){this.isLoaded=true;this.fonts=fontData.list;return;}var fontArr=fontData.list;var i;var len=fontArr.length;var _pendingFonts=len;for(i=0;i<len;i+=1){var shouldLoadFont=true;var loadedSelector;var j;fontArr[i].loaded=false;fontArr[i].monoCase=setUpNode(fontArr[i].fFamily,'monospace');fontArr[i].sansCase=setUpNode(fontArr[i].fFamily,'sans-serif');if(!fontArr[i].fPath){fontArr[i].loaded=true;_pendingFonts-=1;}else if(fontArr[i].fOrigin==='p'||fontArr[i].origin===3){loadedSelector=document.querySelectorAll('style[f-forigin="p"][f-family="'+fontArr[i].fFamily+'"], style[f-origin="3"][f-family="'+fontArr[i].fFamily+'"]');if(loadedSelector.length>0){shouldLoadFont=false;}if(shouldLoadFont){var s=createTag('style');s.setAttribute('f-forigin',fontArr[i].fOrigin);s.setAttribute('f-origin',fontArr[i].origin);s.setAttribute('f-family',fontArr[i].fFamily);s.type='text/css';s.innerText='@font-face {font-family: '+fontArr[i].fFamily+"; font-style: normal; src: url('"+fontArr[i].fPath+"');}";defs.appendChild(s);}}else if(fontArr[i].fOrigin==='g'||fontArr[i].origin===1){loadedSelector=document.querySelectorAll('link[f-forigin="g"], link[f-origin="1"]');for(j=0;j<loadedSelector.length;j+=1){if(loadedSelector[j].href.indexOf(fontArr[i].fPath)!==-1){// Font is already loaded
shouldLoadFont=false;}}if(shouldLoadFont){var l=createTag('link');l.setAttribute('f-forigin',fontArr[i].fOrigin);l.setAttribute('f-origin',fontArr[i].origin);l.type='text/css';l.rel='stylesheet';l.href=fontArr[i].fPath;document.body.appendChild(l);}}else if(fontArr[i].fOrigin==='t'||fontArr[i].origin===2){loadedSelector=document.querySelectorAll('script[f-forigin="t"], script[f-origin="2"]');for(j=0;j<loadedSelector.length;j+=1){if(fontArr[i].fPath===loadedSelector[j].src){// Font is already loaded
shouldLoadFont=false;}}if(shouldLoadFont){var sc=createTag('link');sc.setAttribute('f-forigin',fontArr[i].fOrigin);sc.setAttribute('f-origin',fontArr[i].origin);sc.setAttribute('rel','stylesheet');sc.setAttribute('href',fontArr[i].fPath);defs.appendChild(sc);}}fontArr[i].helper=createHelper(defs,fontArr[i]);fontArr[i].cache={};this.fonts.push(fontArr[i]);}if(_pendingFonts===0){this.isLoaded=true;}else{// On some cases even if the font is loaded, it won't load correctly when measuring text on canvas.
// Adding this timeout seems to fix it
setTimeout(this.checkLoadedFonts.bind(this),100);}}function addChars(chars){if(!chars){return;}if(!this.chars){this.chars=[];}var i;var len=chars.length;var j;var jLen=this.chars.length;var found;for(i=0;i<len;i+=1){j=0;found=false;while(j<jLen){if(this.chars[j].style===chars[i].style&&this.chars[j].fFamily===chars[i].fFamily&&this.chars[j].ch===chars[i].ch){found=true;}j+=1;}if(!found){this.chars.push(chars[i]);jLen+=1;}}}function getCharData(char,style,font){var i=0;var len=this.chars.length;while(i<len){if(this.chars[i].ch===char&&this.chars[i].style===style&&this.chars[i].fFamily===font){return this.chars[i];}i+=1;}if((typeof char==='string'&&char.charCodeAt(0)!==13||!char)&&console&&console.warn// eslint-disable-line no-console
&&!this._warned){this._warned=true;console.warn('Missing character from exported characters list: ',char,style,font);// eslint-disable-line no-console
}return emptyChar;}function measureText(char,fontName,size){var fontData=this.getFontByName(fontName);var index=char.charCodeAt(0);if(!fontData.cache[index+1]){var tHelper=fontData.helper;// Canvas version
// fontData.cache[index] = tHelper.measureText(char).width / 100;
// SVG version
// console.log(tHelper.getBBox().width)
if(char===' '){tHelper.textContent='|'+char+'|';var doubleSize=tHelper.getComputedTextLength();tHelper.textContent='||';var singleSize=tHelper.getComputedTextLength();fontData.cache[index+1]=(doubleSize-singleSize)/100;}else{tHelper.textContent=char;fontData.cache[index+1]=tHelper.getComputedTextLength()/100;}}return fontData.cache[index+1]*size;}function getFontByName(name){var i=0;var len=this.fonts.length;while(i<len){if(this.fonts[i].fName===name){return this.fonts[i];}i+=1;}return this.fonts[0];}function getCombinedCharacterCodes(){return combinedCharacters;}function setIsLoaded(){this.isLoaded=true;}var Font=function Font(){this.fonts=[];this.chars=null;this.typekitLoaded=0;this.isLoaded=false;this._warned=false;this.initTime=Date.now();this.setIsLoadedBinded=this.setIsLoaded.bind(this);this.checkLoadedFontsBinded=this.checkLoadedFonts.bind(this);};// TODO: for now I'm adding these methods to the Class and not the prototype. Think of a better way to implement it.
Font.getCombinedCharacterCodes=getCombinedCharacterCodes;var fontPrototype={addChars:addChars,addFonts:addFonts,getCharData:getCharData,getFontByName:getFontByName,measureText:measureText,checkLoadedFonts:checkLoadedFonts,setIsLoaded:setIsLoaded};Font.prototype=fontPrototype;return Font;}();/* global initialDefaultFrame, BezierFactory, degToRads, bez, createTypedArray *//* exported PropertyFactory */var PropertyFactory=function(){var initFrame=initialDefaultFrame;var mathAbs=Math.abs;function interpolateValue(frameNum,caching){var offsetTime=this.offsetTime;var newValue;if(this.propType==='multidimensional'){newValue=createTypedArray('float32',this.pv.length);}var iterationIndex=caching.lastIndex;var i=iterationIndex;var len=this.keyframes.length-1;var flag=true;var keyData;var nextKeyData;while(flag){keyData=this.keyframes[i];nextKeyData=this.keyframes[i+1];if(i===len-1&&frameNum>=nextKeyData.t-offsetTime){if(keyData.h){keyData=nextKeyData;}iterationIndex=0;break;}if(nextKeyData.t-offsetTime>frameNum){iterationIndex=i;break;}if(i<len-1){i+=1;}else{iterationIndex=0;flag=false;}}var k;var kLen;var perc;var jLen;var j;var fnc;var nextKeyTime=nextKeyData.t-offsetTime;var keyTime=keyData.t-offsetTime;var endValue;if(keyData.to){if(!keyData.bezierData){keyData.bezierData=bez.buildBezierData(keyData.s,nextKeyData.s||keyData.e,keyData.to,keyData.ti);}var bezierData=keyData.bezierData;if(frameNum>=nextKeyTime||frameNum<keyTime){var ind=frameNum>=nextKeyTime?bezierData.points.length-1:0;kLen=bezierData.points[ind].point.length;for(k=0;k<kLen;k+=1){newValue[k]=bezierData.points[ind].point[k];}// caching._lastKeyframeIndex = -1;
}else{if(keyData.__fnct){fnc=keyData.__fnct;}else{fnc=BezierFactory.getBezierEasing(keyData.o.x,keyData.o.y,keyData.i.x,keyData.i.y,keyData.n).get;keyData.__fnct=fnc;}perc=fnc((frameNum-keyTime)/(nextKeyTime-keyTime));var distanceInLine=bezierData.segmentLength*perc;var segmentPerc;var addedLength=caching.lastFrame<frameNum&&caching._lastKeyframeIndex===i?caching._lastAddedLength:0;j=caching.lastFrame<frameNum&&caching._lastKeyframeIndex===i?caching._lastPoint:0;flag=true;jLen=bezierData.points.length;while(flag){addedLength+=bezierData.points[j].partialLength;if(distanceInLine===0||perc===0||j===bezierData.points.length-1){kLen=bezierData.points[j].point.length;for(k=0;k<kLen;k+=1){newValue[k]=bezierData.points[j].point[k];}break;}else if(distanceInLine>=addedLength&&distanceInLine<addedLength+bezierData.points[j+1].partialLength){segmentPerc=(distanceInLine-addedLength)/bezierData.points[j+1].partialLength;kLen=bezierData.points[j].point.length;for(k=0;k<kLen;k+=1){newValue[k]=bezierData.points[j].point[k]+(bezierData.points[j+1].point[k]-bezierData.points[j].point[k])*segmentPerc;}break;}if(j<jLen-1){j+=1;}else{flag=false;}}caching._lastPoint=j;caching._lastAddedLength=addedLength-bezierData.points[j].partialLength;caching._lastKeyframeIndex=i;}}else{var outX;var outY;var inX;var inY;var keyValue;len=keyData.s.length;endValue=nextKeyData.s||keyData.e;if(this.sh&&keyData.h!==1){if(frameNum>=nextKeyTime){newValue[0]=endValue[0];newValue[1]=endValue[1];newValue[2]=endValue[2];}else if(frameNum<=keyTime){newValue[0]=keyData.s[0];newValue[1]=keyData.s[1];newValue[2]=keyData.s[2];}else{var quatStart=createQuaternion(keyData.s);var quatEnd=createQuaternion(endValue);var time=(frameNum-keyTime)/(nextKeyTime-keyTime);quaternionToEuler(newValue,slerp(quatStart,quatEnd,time));}}else{for(i=0;i<len;i+=1){if(keyData.h!==1){if(frameNum>=nextKeyTime){perc=1;}else if(frameNum<keyTime){perc=0;}else{if(keyData.o.x.constructor===Array){if(!keyData.__fnct){keyData.__fnct=[];}if(!keyData.__fnct[i]){outX=typeof keyData.o.x[i]==='undefined'?keyData.o.x[0]:keyData.o.x[i];outY=typeof keyData.o.y[i]==='undefined'?keyData.o.y[0]:keyData.o.y[i];inX=typeof keyData.i.x[i]==='undefined'?keyData.i.x[0]:keyData.i.x[i];inY=typeof keyData.i.y[i]==='undefined'?keyData.i.y[0]:keyData.i.y[i];fnc=BezierFactory.getBezierEasing(outX,outY,inX,inY).get;keyData.__fnct[i]=fnc;}else{fnc=keyData.__fnct[i];}}else if(!keyData.__fnct){outX=keyData.o.x;outY=keyData.o.y;inX=keyData.i.x;inY=keyData.i.y;fnc=BezierFactory.getBezierEasing(outX,outY,inX,inY).get;keyData.__fnct=fnc;}else{fnc=keyData.__fnct;}perc=fnc((frameNum-keyTime)/(nextKeyTime-keyTime));}}endValue=nextKeyData.s||keyData.e;keyValue=keyData.h===1?keyData.s[i]:keyData.s[i]+(endValue[i]-keyData.s[i])*perc;if(this.propType==='multidimensional'){newValue[i]=keyValue;}else{newValue=keyValue;}}}}caching.lastIndex=iterationIndex;return newValue;}// based on @Toji's https://github.com/toji/gl-matrix/
function slerp(a,b,t){var out=[];var ax=a[0];var ay=a[1];var az=a[2];var aw=a[3];var bx=b[0];var by=b[1];var bz=b[2];var bw=b[3];var omega;var cosom;var sinom;var scale0;var scale1;cosom=ax*bx+ay*by+az*bz+aw*bw;if(cosom<0.0){cosom=-cosom;bx=-bx;by=-by;bz=-bz;bw=-bw;}if(1.0-cosom>0.000001){omega=Math.acos(cosom);sinom=Math.sin(omega);scale0=Math.sin((1.0-t)*omega)/sinom;scale1=Math.sin(t*omega)/sinom;}else{scale0=1.0-t;scale1=t;}out[0]=scale0*ax+scale1*bx;out[1]=scale0*ay+scale1*by;out[2]=scale0*az+scale1*bz;out[3]=scale0*aw+scale1*bw;return out;}function quaternionToEuler(out,quat){var qx=quat[0];var qy=quat[1];var qz=quat[2];var qw=quat[3];var heading=Math.atan2(2*qy*qw-2*qx*qz,1-2*qy*qy-2*qz*qz);var attitude=Math.asin(2*qx*qy+2*qz*qw);var bank=Math.atan2(2*qx*qw-2*qy*qz,1-2*qx*qx-2*qz*qz);out[0]=heading/degToRads;out[1]=attitude/degToRads;out[2]=bank/degToRads;}function createQuaternion(values){var heading=values[0]*degToRads;var attitude=values[1]*degToRads;var bank=values[2]*degToRads;var c1=Math.cos(heading/2);var c2=Math.cos(attitude/2);var c3=Math.cos(bank/2);var s1=Math.sin(heading/2);var s2=Math.sin(attitude/2);var s3=Math.sin(bank/2);var w=c1*c2*c3-s1*s2*s3;var x=s1*s2*c3+c1*c2*s3;var y=s1*c2*c3+c1*s2*s3;var z=c1*s2*c3-s1*c2*s3;return[x,y,z,w];}function getValueAtCurrentTime(){var frameNum=this.comp.renderedFrame-this.offsetTime;var initTime=this.keyframes[0].t-this.offsetTime;var endTime=this.keyframes[this.keyframes.length-1].t-this.offsetTime;if(!(frameNum===this._caching.lastFrame||this._caching.lastFrame!==initFrame&&(this._caching.lastFrame>=endTime&&frameNum>=endTime||this._caching.lastFrame<initTime&&frameNum<initTime))){if(this._caching.lastFrame>=frameNum){this._caching._lastKeyframeIndex=-1;this._caching.lastIndex=0;}var renderResult=this.interpolateValue(frameNum,this._caching);this.pv=renderResult;}this._caching.lastFrame=frameNum;return this.pv;}function setVValue(val){var multipliedValue;if(this.propType==='unidimensional'){multipliedValue=val*this.mult;if(mathAbs(this.v-multipliedValue)>0.00001){this.v=multipliedValue;this._mdf=true;}}else{var i=0;var len=this.v.length;while(i<len){multipliedValue=val[i]*this.mult;if(mathAbs(this.v[i]-multipliedValue)>0.00001){this.v[i]=multipliedValue;this._mdf=true;}i+=1;}}}function processEffectsSequence(){if(this.elem.globalData.frameId===this.frameId||!this.effectsSequence.length){return;}if(this.lock){this.setVValue(this.pv);return;}this.lock=true;this._mdf=this._isFirstFrame;var i;var len=this.effectsSequence.length;var finalValue=this.kf?this.pv:this.data.k;for(i=0;i<len;i+=1){finalValue=this.effectsSequence[i](finalValue);}this.setVValue(finalValue);this._isFirstFrame=false;this.lock=false;this.frameId=this.elem.globalData.frameId;}function addEffect(effectFunction){this.effectsSequence.push(effectFunction);this.container.addDynamicProperty(this);}function ValueProperty(elem,data,mult,container){this.propType='unidimensional';this.mult=mult||1;this.data=data;this.v=mult?data.k*mult:data.k;this.pv=data.k;this._mdf=false;this.elem=elem;this.container=container;this.comp=elem.comp;this.k=false;this.kf=false;this.vel=0;this.effectsSequence=[];this._isFirstFrame=true;this.getValue=processEffectsSequence;this.setVValue=setVValue;this.addEffect=addEffect;}function MultiDimensionalProperty(elem,data,mult,container){this.propType='multidimensional';this.mult=mult||1;this.data=data;this._mdf=false;this.elem=elem;this.container=container;this.comp=elem.comp;this.k=false;this.kf=false;this.frameId=-1;var i;var len=data.k.length;this.v=createTypedArray('float32',len);this.pv=createTypedArray('float32',len);this.vel=createTypedArray('float32',len);for(i=0;i<len;i+=1){this.v[i]=data.k[i]*this.mult;this.pv[i]=data.k[i];}this._isFirstFrame=true;this.effectsSequence=[];this.getValue=processEffectsSequence;this.setVValue=setVValue;this.addEffect=addEffect;}function KeyframedValueProperty(elem,data,mult,container){this.propType='unidimensional';this.keyframes=data.k;this.offsetTime=elem.data.st;this.frameId=-1;this._caching={lastFrame:initFrame,lastIndex:0,value:0,_lastKeyframeIndex:-1};this.k=true;this.kf=true;this.data=data;this.mult=mult||1;this.elem=elem;this.container=container;this.comp=elem.comp;this.v=initFrame;this.pv=initFrame;this._isFirstFrame=true;this.getValue=processEffectsSequence;this.setVValue=setVValue;this.interpolateValue=interpolateValue;this.effectsSequence=[getValueAtCurrentTime.bind(this)];this.addEffect=addEffect;}function KeyframedMultidimensionalProperty(elem,data,mult,container){this.propType='multidimensional';var i;var len=data.k.length;var s;var e;var to;var ti;for(i=0;i<len-1;i+=1){if(data.k[i].to&&data.k[i].s&&data.k[i+1]&&data.k[i+1].s){s=data.k[i].s;e=data.k[i+1].s;to=data.k[i].to;ti=data.k[i].ti;if(s.length===2&&!(s[0]===e[0]&&s[1]===e[1])&&bez.pointOnLine2D(s[0],s[1],e[0],e[1],s[0]+to[0],s[1]+to[1])&&bez.pointOnLine2D(s[0],s[1],e[0],e[1],e[0]+ti[0],e[1]+ti[1])||s.length===3&&!(s[0]===e[0]&&s[1]===e[1]&&s[2]===e[2])&&bez.pointOnLine3D(s[0],s[1],s[2],e[0],e[1],e[2],s[0]+to[0],s[1]+to[1],s[2]+to[2])&&bez.pointOnLine3D(s[0],s[1],s[2],e[0],e[1],e[2],e[0]+ti[0],e[1]+ti[1],e[2]+ti[2])){data.k[i].to=null;data.k[i].ti=null;}if(s[0]===e[0]&&s[1]===e[1]&&to[0]===0&&to[1]===0&&ti[0]===0&&ti[1]===0){if(s.length===2||s[2]===e[2]&&to[2]===0&&ti[2]===0){data.k[i].to=null;data.k[i].ti=null;}}}}this.effectsSequence=[getValueAtCurrentTime.bind(this)];this.data=data;this.keyframes=data.k;this.offsetTime=elem.data.st;this.k=true;this.kf=true;this._isFirstFrame=true;this.mult=mult||1;this.elem=elem;this.container=container;this.comp=elem.comp;this.getValue=processEffectsSequence;this.setVValue=setVValue;this.interpolateValue=interpolateValue;this.frameId=-1;var arrLen=data.k[0].s.length;this.v=createTypedArray('float32',arrLen);this.pv=createTypedArray('float32',arrLen);for(i=0;i<arrLen;i+=1){this.v[i]=initFrame;this.pv[i]=initFrame;}this._caching={lastFrame:initFrame,lastIndex:0,value:createTypedArray('float32',arrLen)};this.addEffect=addEffect;}function getProp(elem,data,type,mult,container){var p;if(!data.k.length){p=new ValueProperty(elem,data,mult,container);}else if(typeof data.k[0]==='number'){p=new MultiDimensionalProperty(elem,data,mult,container);}else{switch(type){case 0:p=new KeyframedValueProperty(elem,data,mult,container);break;case 1:p=new KeyframedMultidimensionalProperty(elem,data,mult,container);break;default:break;}}if(p.effectsSequence.length){container.addDynamicProperty(p);}return p;}var ob={getProp:getProp};return ob;}();/* global Matrix, degToRads, PropertyFactory, extendPrototype, DynamicPropertyContainer *//* exported TransformPropertyFactory */var TransformPropertyFactory=function(){var defaultVector=[0,0];function applyToMatrix(mat){var _mdf=this._mdf;this.iterateDynamicProperties();this._mdf=this._mdf||_mdf;if(this.a){mat.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]);}if(this.s){mat.scale(this.s.v[0],this.s.v[1],this.s.v[2]);}if(this.sk){mat.skewFromAxis(-this.sk.v,this.sa.v);}if(this.r){mat.rotate(-this.r.v);}else{mat.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);}if(this.data.p.s){if(this.data.p.z){mat.translate(this.px.v,this.py.v,-this.pz.v);}else{mat.translate(this.px.v,this.py.v,0);}}else{mat.translate(this.p.v[0],this.p.v[1],-this.p.v[2]);}}function processKeys(forceRender){if(this.elem.globalData.frameId===this.frameId){return;}if(this._isDirty){this.precalculateMatrix();this._isDirty=false;}this.iterateDynamicProperties();if(this._mdf||forceRender){var frameRate;this.v.cloneFromProps(this.pre.props);if(this.appliedTransformations<1){this.v.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]);}if(this.appliedTransformations<2){this.v.scale(this.s.v[0],this.s.v[1],this.s.v[2]);}if(this.sk&&this.appliedTransformations<3){this.v.skewFromAxis(-this.sk.v,this.sa.v);}if(this.r&&this.appliedTransformations<4){this.v.rotate(-this.r.v);}else if(!this.r&&this.appliedTransformations<4){this.v.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);}if(this.autoOriented){var v1;var v2;frameRate=this.elem.globalData.frameRate;if(this.p&&this.p.keyframes&&this.p.getValueAtTime){if(this.p._caching.lastFrame+this.p.offsetTime<=this.p.keyframes[0].t){v1=this.p.getValueAtTime((this.p.keyframes[0].t+0.01)/frameRate,0);v2=this.p.getValueAtTime(this.p.keyframes[0].t/frameRate,0);}else if(this.p._caching.lastFrame+this.p.offsetTime>=this.p.keyframes[this.p.keyframes.length-1].t){v1=this.p.getValueAtTime(this.p.keyframes[this.p.keyframes.length-1].t/frameRate,0);v2=this.p.getValueAtTime((this.p.keyframes[this.p.keyframes.length-1].t-0.05)/frameRate,0);}else{v1=this.p.pv;v2=this.p.getValueAtTime((this.p._caching.lastFrame+this.p.offsetTime-0.01)/frameRate,this.p.offsetTime);}}else if(this.px&&this.px.keyframes&&this.py.keyframes&&this.px.getValueAtTime&&this.py.getValueAtTime){v1=[];v2=[];var px=this.px;var py=this.py;if(px._caching.lastFrame+px.offsetTime<=px.keyframes[0].t){v1[0]=px.getValueAtTime((px.keyframes[0].t+0.01)/frameRate,0);v1[1]=py.getValueAtTime((py.keyframes[0].t+0.01)/frameRate,0);v2[0]=px.getValueAtTime(px.keyframes[0].t/frameRate,0);v2[1]=py.getValueAtTime(py.keyframes[0].t/frameRate,0);}else if(px._caching.lastFrame+px.offsetTime>=px.keyframes[px.keyframes.length-1].t){v1[0]=px.getValueAtTime(px.keyframes[px.keyframes.length-1].t/frameRate,0);v1[1]=py.getValueAtTime(py.keyframes[py.keyframes.length-1].t/frameRate,0);v2[0]=px.getValueAtTime((px.keyframes[px.keyframes.length-1].t-0.01)/frameRate,0);v2[1]=py.getValueAtTime((py.keyframes[py.keyframes.length-1].t-0.01)/frameRate,0);}else{v1=[px.pv,py.pv];v2[0]=px.getValueAtTime((px._caching.lastFrame+px.offsetTime-0.01)/frameRate,px.offsetTime);v2[1]=py.getValueAtTime((py._caching.lastFrame+py.offsetTime-0.01)/frameRate,py.offsetTime);}}else{v2=defaultVector;v1=v2;}this.v.rotate(-Math.atan2(v1[1]-v2[1],v1[0]-v2[0]));}if(this.data.p&&this.data.p.s){if(this.data.p.z){this.v.translate(this.px.v,this.py.v,-this.pz.v);}else{this.v.translate(this.px.v,this.py.v,0);}}else{this.v.translate(this.p.v[0],this.p.v[1],-this.p.v[2]);}}this.frameId=this.elem.globalData.frameId;}function precalculateMatrix(){if(!this.a.k){this.pre.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]);this.appliedTransformations=1;}else{return;}if(!this.s.effectsSequence.length){this.pre.scale(this.s.v[0],this.s.v[1],this.s.v[2]);this.appliedTransformations=2;}else{return;}if(this.sk){if(!this.sk.effectsSequence.length&&!this.sa.effectsSequence.length){this.pre.skewFromAxis(-this.sk.v,this.sa.v);this.appliedTransformations=3;}else{return;}}if(this.r){if(!this.r.effectsSequence.length){this.pre.rotate(-this.r.v);this.appliedTransformations=4;}}else if(!this.rz.effectsSequence.length&&!this.ry.effectsSequence.length&&!this.rx.effectsSequence.length&&!this.or.effectsSequence.length){this.pre.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);this.appliedTransformations=4;}}function autoOrient(){//
// var prevP = this.getValueAtTime();
}function addDynamicProperty(prop){this._addDynamicProperty(prop);this.elem.addDynamicProperty(prop);this._isDirty=true;}function TransformProperty(elem,data,container){this.elem=elem;this.frameId=-1;this.propType='transform';this.data=data;this.v=new Matrix();// Precalculated matrix with non animated properties
this.pre=new Matrix();this.appliedTransformations=0;this.initDynamicPropertyContainer(container||elem);if(data.p&&data.p.s){this.px=PropertyFactory.getProp(elem,data.p.x,0,0,this);this.py=PropertyFactory.getProp(elem,data.p.y,0,0,this);if(data.p.z){this.pz=PropertyFactory.getProp(elem,data.p.z,0,0,this);}}else{this.p=PropertyFactory.getProp(elem,data.p||{k:[0,0,0]},1,0,this);}if(data.rx){this.rx=PropertyFactory.getProp(elem,data.rx,0,degToRads,this);this.ry=PropertyFactory.getProp(elem,data.ry,0,degToRads,this);this.rz=PropertyFactory.getProp(elem,data.rz,0,degToRads,this);if(data.or.k[0].ti){var i;var len=data.or.k.length;for(i=0;i<len;i+=1){data.or.k[i].to=null;data.or.k[i].ti=null;}}this.or=PropertyFactory.getProp(elem,data.or,1,degToRads,this);// sh Indicates it needs to be capped between -180 and 180
this.or.sh=true;}else{this.r=PropertyFactory.getProp(elem,data.r||{k:0},0,degToRads,this);}if(data.sk){this.sk=PropertyFactory.getProp(elem,data.sk,0,degToRads,this);this.sa=PropertyFactory.getProp(elem,data.sa,0,degToRads,this);}this.a=PropertyFactory.getProp(elem,data.a||{k:[0,0,0]},1,0,this);this.s=PropertyFactory.getProp(elem,data.s||{k:[100,100,100]},1,0.01,this);// Opacity is not part of the transform properties, that's why it won't use this.dynamicProperties. That way transforms won't get updated if opacity changes.
if(data.o){this.o=PropertyFactory.getProp(elem,data.o,0,0.01,elem);}else{this.o={_mdf:false,v:1};}this._isDirty=true;if(!this.dynamicProperties.length){this.getValue(true);}}TransformProperty.prototype={applyToMatrix:applyToMatrix,getValue:processKeys,precalculateMatrix:precalculateMatrix,autoOrient:autoOrient};extendPrototype([DynamicPropertyContainer],TransformProperty);TransformProperty.prototype.addDynamicProperty=addDynamicProperty;TransformProperty.prototype._addDynamicProperty=DynamicPropertyContainer.prototype.addDynamicProperty;function getTransformProperty(elem,data,container){return new TransformProperty(elem,data,container);}return{getTransformProperty:getTransformProperty};}();/* global createSizedArray, createSizedArray, pointPool */function ShapePath(){this.c=false;this._length=0;this._maxLength=8;this.v=createSizedArray(this._maxLength);this.o=createSizedArray(this._maxLength);this.i=createSizedArray(this._maxLength);}ShapePath.prototype.setPathData=function(closed,len){this.c=closed;this.setLength(len);var i=0;while(i<len){this.v[i]=pointPool.newElement();this.o[i]=pointPool.newElement();this.i[i]=pointPool.newElement();i+=1;}};ShapePath.prototype.setLength=function(len){while(this._maxLength<len){this.doubleArrayLength();}this._length=len;};ShapePath.prototype.doubleArrayLength=function(){this.v=this.v.concat(createSizedArray(this._maxLength));this.i=this.i.concat(createSizedArray(this._maxLength));this.o=this.o.concat(createSizedArray(this._maxLength));this._maxLength*=2;};ShapePath.prototype.setXYAt=function(x,y,type,pos,replace){var arr;this._length=Math.max(this._length,pos+1);if(this._length>=this._maxLength){this.doubleArrayLength();}switch(type){case'v':arr=this.v;break;case'i':arr=this.i;break;case'o':arr=this.o;break;default:arr=[];break;}if(!arr[pos]||arr[pos]&&!replace){arr[pos]=pointPool.newElement();}arr[pos][0]=x;arr[pos][1]=y;};ShapePath.prototype.setTripleAt=function(vX,vY,oX,oY,iX,iY,pos,replace){this.setXYAt(vX,vY,'v',pos,replace);this.setXYAt(oX,oY,'o',pos,replace);this.setXYAt(iX,iY,'i',pos,replace);};ShapePath.prototype.reverse=function(){var newPath=new ShapePath();newPath.setPathData(this.c,this._length);var vertices=this.v;var outPoints=this.o;var inPoints=this.i;var init=0;if(this.c){newPath.setTripleAt(vertices[0][0],vertices[0][1],inPoints[0][0],inPoints[0][1],outPoints[0][0],outPoints[0][1],0,false);init=1;}var cnt=this._length-1;var len=this._length;var i;for(i=init;i<len;i+=1){newPath.setTripleAt(vertices[cnt][0],vertices[cnt][1],inPoints[cnt][0],inPoints[cnt][1],outPoints[cnt][0],outPoints[cnt][1],i,false);cnt-=1;}return newPath;};/* global extendPrototype, roundCorner, BezierFactory, shapePool, degToRads,
  shapeCollectionPool, PropertyFactory, bmMin, DynamicPropertyContainer *//* exported ShapePropertyFactory */var ShapePropertyFactory=function(){var initFrame=-999999;function interpolateShape(frameNum,previousValue,caching){var iterationIndex=caching.lastIndex;var keyPropS;var keyPropE;var isHold;var j;var k;var jLen;var kLen;var perc;var vertexValue;var kf=this.keyframes;if(frameNum<kf[0].t-this.offsetTime){keyPropS=kf[0].s[0];isHold=true;iterationIndex=0;}else if(frameNum>=kf[kf.length-1].t-this.offsetTime){keyPropS=kf[kf.length-1].s?kf[kf.length-1].s[0]:kf[kf.length-2].e[0];/* if(kf[kf.length - 1].s){
                keyPropS = kf[kf.length - 1].s[0];
            }else{
                keyPropS = kf[kf.length - 2].e[0];
            } */isHold=true;}else{var i=iterationIndex;var len=kf.length-1;var flag=true;var keyData;var nextKeyData;while(flag){keyData=kf[i];nextKeyData=kf[i+1];if(nextKeyData.t-this.offsetTime>frameNum){break;}if(i<len-1){i+=1;}else{flag=false;}}isHold=keyData.h===1;iterationIndex=i;if(!isHold){if(frameNum>=nextKeyData.t-this.offsetTime){perc=1;}else if(frameNum<keyData.t-this.offsetTime){perc=0;}else{var fnc;if(keyData.__fnct){fnc=keyData.__fnct;}else{fnc=BezierFactory.getBezierEasing(keyData.o.x,keyData.o.y,keyData.i.x,keyData.i.y).get;keyData.__fnct=fnc;}perc=fnc((frameNum-(keyData.t-this.offsetTime))/(nextKeyData.t-this.offsetTime-(keyData.t-this.offsetTime)));}keyPropE=nextKeyData.s?nextKeyData.s[0]:keyData.e[0];}keyPropS=keyData.s[0];}jLen=previousValue._length;kLen=keyPropS.i[0].length;caching.lastIndex=iterationIndex;for(j=0;j<jLen;j+=1){for(k=0;k<kLen;k+=1){vertexValue=isHold?keyPropS.i[j][k]:keyPropS.i[j][k]+(keyPropE.i[j][k]-keyPropS.i[j][k])*perc;previousValue.i[j][k]=vertexValue;vertexValue=isHold?keyPropS.o[j][k]:keyPropS.o[j][k]+(keyPropE.o[j][k]-keyPropS.o[j][k])*perc;previousValue.o[j][k]=vertexValue;vertexValue=isHold?keyPropS.v[j][k]:keyPropS.v[j][k]+(keyPropE.v[j][k]-keyPropS.v[j][k])*perc;previousValue.v[j][k]=vertexValue;}}}function interpolateShapeCurrentTime(){var frameNum=this.comp.renderedFrame-this.offsetTime;var initTime=this.keyframes[0].t-this.offsetTime;var endTime=this.keyframes[this.keyframes.length-1].t-this.offsetTime;var lastFrame=this._caching.lastFrame;if(!(lastFrame!==initFrame&&(lastFrame<initTime&&frameNum<initTime||lastFrame>endTime&&frameNum>endTime))){/// /
this._caching.lastIndex=lastFrame<frameNum?this._caching.lastIndex:0;this.interpolateShape(frameNum,this.pv,this._caching);/// /
}this._caching.lastFrame=frameNum;return this.pv;}function resetShape(){this.paths=this.localShapeCollection;}function shapesEqual(shape1,shape2){if(shape1._length!==shape2._length||shape1.c!==shape2.c){return false;}var i;var len=shape1._length;for(i=0;i<len;i+=1){if(shape1.v[i][0]!==shape2.v[i][0]||shape1.v[i][1]!==shape2.v[i][1]||shape1.o[i][0]!==shape2.o[i][0]||shape1.o[i][1]!==shape2.o[i][1]||shape1.i[i][0]!==shape2.i[i][0]||shape1.i[i][1]!==shape2.i[i][1]){return false;}}return true;}function setVValue(newPath){if(!shapesEqual(this.v,newPath)){this.v=shapePool.clone(newPath);this.localShapeCollection.releaseShapes();this.localShapeCollection.addShape(this.v);this._mdf=true;this.paths=this.localShapeCollection;}}function processEffectsSequence(){if(this.elem.globalData.frameId===this.frameId){return;}if(!this.effectsSequence.length){this._mdf=false;return;}if(this.lock){this.setVValue(this.pv);return;}this.lock=true;this._mdf=false;var finalValue;if(this.kf){finalValue=this.pv;}else if(this.data.ks){finalValue=this.data.ks.k;}else{finalValue=this.data.pt.k;}var i;var len=this.effectsSequence.length;for(i=0;i<len;i+=1){finalValue=this.effectsSequence[i](finalValue);}this.setVValue(finalValue);this.lock=false;this.frameId=this.elem.globalData.frameId;}function ShapeProperty(elem,data,type){this.propType='shape';this.comp=elem.comp;this.container=elem;this.elem=elem;this.data=data;this.k=false;this.kf=false;this._mdf=false;var pathData=type===3?data.pt.k:data.ks.k;this.v=shapePool.clone(pathData);this.pv=shapePool.clone(this.v);this.localShapeCollection=shapeCollectionPool.newShapeCollection();this.paths=this.localShapeCollection;this.paths.addShape(this.v);this.reset=resetShape;this.effectsSequence=[];}function addEffect(effectFunction){this.effectsSequence.push(effectFunction);this.container.addDynamicProperty(this);}ShapeProperty.prototype.interpolateShape=interpolateShape;ShapeProperty.prototype.getValue=processEffectsSequence;ShapeProperty.prototype.setVValue=setVValue;ShapeProperty.prototype.addEffect=addEffect;function KeyframedShapeProperty(elem,data,type){this.propType='shape';this.comp=elem.comp;this.elem=elem;this.container=elem;this.offsetTime=elem.data.st;this.keyframes=type===3?data.pt.k:data.ks.k;this.k=true;this.kf=true;var len=this.keyframes[0].s[0].i.length;this.v=shapePool.newElement();this.v.setPathData(this.keyframes[0].s[0].c,len);this.pv=shapePool.clone(this.v);this.localShapeCollection=shapeCollectionPool.newShapeCollection();this.paths=this.localShapeCollection;this.paths.addShape(this.v);this.lastFrame=initFrame;this.reset=resetShape;this._caching={lastFrame:initFrame,lastIndex:0};this.effectsSequence=[interpolateShapeCurrentTime.bind(this)];}KeyframedShapeProperty.prototype.getValue=processEffectsSequence;KeyframedShapeProperty.prototype.interpolateShape=interpolateShape;KeyframedShapeProperty.prototype.setVValue=setVValue;KeyframedShapeProperty.prototype.addEffect=addEffect;var EllShapeProperty=function(){var cPoint=roundCorner;function EllShapePropertyFactory(elem,data){/* this.v = {
                v: createSizedArray(4),
                i: createSizedArray(4),
                o: createSizedArray(4),
                c: true
            }; */this.v=shapePool.newElement();this.v.setPathData(true,4);this.localShapeCollection=shapeCollectionPool.newShapeCollection();this.paths=this.localShapeCollection;this.localShapeCollection.addShape(this.v);this.d=data.d;this.elem=elem;this.comp=elem.comp;this.frameId=-1;this.initDynamicPropertyContainer(elem);this.p=PropertyFactory.getProp(elem,data.p,1,0,this);this.s=PropertyFactory.getProp(elem,data.s,1,0,this);if(this.dynamicProperties.length){this.k=true;}else{this.k=false;this.convertEllToPath();}}EllShapePropertyFactory.prototype={reset:resetShape,getValue:function getValue(){if(this.elem.globalData.frameId===this.frameId){return;}this.frameId=this.elem.globalData.frameId;this.iterateDynamicProperties();if(this._mdf){this.convertEllToPath();}},convertEllToPath:function convertEllToPath(){var p0=this.p.v[0];var p1=this.p.v[1];var s0=this.s.v[0]/2;var s1=this.s.v[1]/2;var _cw=this.d!==3;var _v=this.v;_v.v[0][0]=p0;_v.v[0][1]=p1-s1;_v.v[1][0]=_cw?p0+s0:p0-s0;_v.v[1][1]=p1;_v.v[2][0]=p0;_v.v[2][1]=p1+s1;_v.v[3][0]=_cw?p0-s0:p0+s0;_v.v[3][1]=p1;_v.i[0][0]=_cw?p0-s0*cPoint:p0+s0*cPoint;_v.i[0][1]=p1-s1;_v.i[1][0]=_cw?p0+s0:p0-s0;_v.i[1][1]=p1-s1*cPoint;_v.i[2][0]=_cw?p0+s0*cPoint:p0-s0*cPoint;_v.i[2][1]=p1+s1;_v.i[3][0]=_cw?p0-s0:p0+s0;_v.i[3][1]=p1+s1*cPoint;_v.o[0][0]=_cw?p0+s0*cPoint:p0-s0*cPoint;_v.o[0][1]=p1-s1;_v.o[1][0]=_cw?p0+s0:p0-s0;_v.o[1][1]=p1+s1*cPoint;_v.o[2][0]=_cw?p0-s0*cPoint:p0+s0*cPoint;_v.o[2][1]=p1+s1;_v.o[3][0]=_cw?p0-s0:p0+s0;_v.o[3][1]=p1-s1*cPoint;}};extendPrototype([DynamicPropertyContainer],EllShapePropertyFactory);return EllShapePropertyFactory;}();var StarShapeProperty=function(){function StarShapePropertyFactory(elem,data){this.v=shapePool.newElement();this.v.setPathData(true,0);this.elem=elem;this.comp=elem.comp;this.data=data;this.frameId=-1;this.d=data.d;this.initDynamicPropertyContainer(elem);if(data.sy===1){this.ir=PropertyFactory.getProp(elem,data.ir,0,0,this);this.is=PropertyFactory.getProp(elem,data.is,0,0.01,this);this.convertToPath=this.convertStarToPath;}else{this.convertToPath=this.convertPolygonToPath;}this.pt=PropertyFactory.getProp(elem,data.pt,0,0,this);this.p=PropertyFactory.getProp(elem,data.p,1,0,this);this.r=PropertyFactory.getProp(elem,data.r,0,degToRads,this);this.or=PropertyFactory.getProp(elem,data.or,0,0,this);this.os=PropertyFactory.getProp(elem,data.os,0,0.01,this);this.localShapeCollection=shapeCollectionPool.newShapeCollection();this.localShapeCollection.addShape(this.v);this.paths=this.localShapeCollection;if(this.dynamicProperties.length){this.k=true;}else{this.k=false;this.convertToPath();}}StarShapePropertyFactory.prototype={reset:resetShape,getValue:function getValue(){if(this.elem.globalData.frameId===this.frameId){return;}this.frameId=this.elem.globalData.frameId;this.iterateDynamicProperties();if(this._mdf){this.convertToPath();}},convertStarToPath:function convertStarToPath(){var numPts=Math.floor(this.pt.v)*2;var angle=Math.PI*2/numPts;/* this.v.v.length = numPts;
                this.v.i.length = numPts;
                this.v.o.length = numPts; */var longFlag=true;var longRad=this.or.v;var shortRad=this.ir.v;var longRound=this.os.v;var shortRound=this.is.v;var longPerimSegment=2*Math.PI*longRad/(numPts*2);var shortPerimSegment=2*Math.PI*shortRad/(numPts*2);var i;var rad;var roundness;var perimSegment;var currentAng=-Math.PI/2;currentAng+=this.r.v;var dir=this.data.d===3?-1:1;this.v._length=0;for(i=0;i<numPts;i+=1){rad=longFlag?longRad:shortRad;roundness=longFlag?longRound:shortRound;perimSegment=longFlag?longPerimSegment:shortPerimSegment;var x=rad*Math.cos(currentAng);var y=rad*Math.sin(currentAng);var ox=x===0&&y===0?0:y/Math.sqrt(x*x+y*y);var oy=x===0&&y===0?0:-x/Math.sqrt(x*x+y*y);x+=+this.p.v[0];y+=+this.p.v[1];this.v.setTripleAt(x,y,x-ox*perimSegment*roundness*dir,y-oy*perimSegment*roundness*dir,x+ox*perimSegment*roundness*dir,y+oy*perimSegment*roundness*dir,i,true);/* this.v.v[i] = [x,y];
                    this.v.i[i] = [x+ox*perimSegment*roundness*dir,y+oy*perimSegment*roundness*dir];
                    this.v.o[i] = [x-ox*perimSegment*roundness*dir,y-oy*perimSegment*roundness*dir];
                    this.v._length = numPts; */longFlag=!longFlag;currentAng+=angle*dir;}},convertPolygonToPath:function convertPolygonToPath(){var numPts=Math.floor(this.pt.v);var angle=Math.PI*2/numPts;var rad=this.or.v;var roundness=this.os.v;var perimSegment=2*Math.PI*rad/(numPts*4);var i;var currentAng=-Math.PI*0.5;var dir=this.data.d===3?-1:1;currentAng+=this.r.v;this.v._length=0;for(i=0;i<numPts;i+=1){var x=rad*Math.cos(currentAng);var y=rad*Math.sin(currentAng);var ox=x===0&&y===0?0:y/Math.sqrt(x*x+y*y);var oy=x===0&&y===0?0:-x/Math.sqrt(x*x+y*y);x+=+this.p.v[0];y+=+this.p.v[1];this.v.setTripleAt(x,y,x-ox*perimSegment*roundness*dir,y-oy*perimSegment*roundness*dir,x+ox*perimSegment*roundness*dir,y+oy*perimSegment*roundness*dir,i,true);currentAng+=angle*dir;}this.paths.length=0;this.paths[0]=this.v;}};extendPrototype([DynamicPropertyContainer],StarShapePropertyFactory);return StarShapePropertyFactory;}();var RectShapeProperty=function(){function RectShapePropertyFactory(elem,data){this.v=shapePool.newElement();this.v.c=true;this.localShapeCollection=shapeCollectionPool.newShapeCollection();this.localShapeCollection.addShape(this.v);this.paths=this.localShapeCollection;this.elem=elem;this.comp=elem.comp;this.frameId=-1;this.d=data.d;this.initDynamicPropertyContainer(elem);this.p=PropertyFactory.getProp(elem,data.p,1,0,this);this.s=PropertyFactory.getProp(elem,data.s,1,0,this);this.r=PropertyFactory.getProp(elem,data.r,0,0,this);if(this.dynamicProperties.length){this.k=true;}else{this.k=false;this.convertRectToPath();}}RectShapePropertyFactory.prototype={convertRectToPath:function convertRectToPath(){var p0=this.p.v[0];var p1=this.p.v[1];var v0=this.s.v[0]/2;var v1=this.s.v[1]/2;var round=bmMin(v0,v1,this.r.v);var cPoint=round*(1-roundCorner);this.v._length=0;if(this.d===2||this.d===1){this.v.setTripleAt(p0+v0,p1-v1+round,p0+v0,p1-v1+round,p0+v0,p1-v1+cPoint,0,true);this.v.setTripleAt(p0+v0,p1+v1-round,p0+v0,p1+v1-cPoint,p0+v0,p1+v1-round,1,true);if(round!==0){this.v.setTripleAt(p0+v0-round,p1+v1,p0+v0-round,p1+v1,p0+v0-cPoint,p1+v1,2,true);this.v.setTripleAt(p0-v0+round,p1+v1,p0-v0+cPoint,p1+v1,p0-v0+round,p1+v1,3,true);this.v.setTripleAt(p0-v0,p1+v1-round,p0-v0,p1+v1-round,p0-v0,p1+v1-cPoint,4,true);this.v.setTripleAt(p0-v0,p1-v1+round,p0-v0,p1-v1+cPoint,p0-v0,p1-v1+round,5,true);this.v.setTripleAt(p0-v0+round,p1-v1,p0-v0+round,p1-v1,p0-v0+cPoint,p1-v1,6,true);this.v.setTripleAt(p0+v0-round,p1-v1,p0+v0-cPoint,p1-v1,p0+v0-round,p1-v1,7,true);}else{this.v.setTripleAt(p0-v0,p1+v1,p0-v0+cPoint,p1+v1,p0-v0,p1+v1,2);this.v.setTripleAt(p0-v0,p1-v1,p0-v0,p1-v1+cPoint,p0-v0,p1-v1,3);}}else{this.v.setTripleAt(p0+v0,p1-v1+round,p0+v0,p1-v1+cPoint,p0+v0,p1-v1+round,0,true);if(round!==0){this.v.setTripleAt(p0+v0-round,p1-v1,p0+v0-round,p1-v1,p0+v0-cPoint,p1-v1,1,true);this.v.setTripleAt(p0-v0+round,p1-v1,p0-v0+cPoint,p1-v1,p0-v0+round,p1-v1,2,true);this.v.setTripleAt(p0-v0,p1-v1+round,p0-v0,p1-v1+round,p0-v0,p1-v1+cPoint,3,true);this.v.setTripleAt(p0-v0,p1+v1-round,p0-v0,p1+v1-cPoint,p0-v0,p1+v1-round,4,true);this.v.setTripleAt(p0-v0+round,p1+v1,p0-v0+round,p1+v1,p0-v0+cPoint,p1+v1,5,true);this.v.setTripleAt(p0+v0-round,p1+v1,p0+v0-cPoint,p1+v1,p0+v0-round,p1+v1,6,true);this.v.setTripleAt(p0+v0,p1+v1-round,p0+v0,p1+v1-round,p0+v0,p1+v1-cPoint,7,true);}else{this.v.setTripleAt(p0-v0,p1-v1,p0-v0+cPoint,p1-v1,p0-v0,p1-v1,1,true);this.v.setTripleAt(p0-v0,p1+v1,p0-v0,p1+v1-cPoint,p0-v0,p1+v1,2,true);this.v.setTripleAt(p0+v0,p1+v1,p0+v0-cPoint,p1+v1,p0+v0,p1+v1,3,true);}}},getValue:function getValue(){if(this.elem.globalData.frameId===this.frameId){return;}this.frameId=this.elem.globalData.frameId;this.iterateDynamicProperties();if(this._mdf){this.convertRectToPath();}},reset:resetShape};extendPrototype([DynamicPropertyContainer],RectShapePropertyFactory);return RectShapePropertyFactory;}();function getShapeProp(elem,data,type){var prop;if(type===3||type===4){var dataProp=type===3?data.pt:data.ks;var keys=dataProp.k;if(keys.length){prop=new KeyframedShapeProperty(elem,data,type);}else{prop=new ShapeProperty(elem,data,type);}}else if(type===5){prop=new RectShapeProperty(elem,data);}else if(type===6){prop=new EllShapeProperty(elem,data);}else if(type===7){prop=new StarShapeProperty(elem,data);}if(prop.k){elem.addDynamicProperty(prop);}return prop;}function getConstructorFunction(){return ShapeProperty;}function getKeyframedConstructorFunction(){return KeyframedShapeProperty;}var ob={};ob.getShapeProp=getShapeProp;ob.getConstructorFunction=getConstructorFunction;ob.getKeyframedConstructorFunction=getKeyframedConstructorFunction;return ob;}();/* global shapeCollectionPool, initialDefaultFrame, extendPrototype, DynamicPropertyContainer *//* exported ShapeModifiers */var ShapeModifiers=function(){var ob={};var modifiers={};ob.registerModifier=registerModifier;ob.getModifier=getModifier;function registerModifier(nm,factory){if(!modifiers[nm]){modifiers[nm]=factory;}}function getModifier(nm,elem,data){return new modifiers[nm](elem,data);}return ob;}();function ShapeModifier(){}ShapeModifier.prototype.initModifierProperties=function(){};ShapeModifier.prototype.addShapeToModifier=function(){};ShapeModifier.prototype.addShape=function(data){if(!this.closed){// Adding shape to dynamic properties. It covers the case where a shape has no effects applied, to reset it's _mdf state on every tick.
data.sh.container.addDynamicProperty(data.sh);var shapeData={shape:data.sh,data:data,localShapeCollection:shapeCollectionPool.newShapeCollection()};this.shapes.push(shapeData);this.addShapeToModifier(shapeData);if(this._isAnimated){data.setAsAnimated();}}};ShapeModifier.prototype.init=function(elem,data){this.shapes=[];this.elem=elem;this.initDynamicPropertyContainer(elem);this.initModifierProperties(elem,data);this.frameId=initialDefaultFrame;this.closed=false;this.k=false;if(this.dynamicProperties.length){this.k=true;}else{this.getValue(true);}};ShapeModifier.prototype.processKeys=function(){if(this.elem.globalData.frameId===this.frameId){return;}this.frameId=this.elem.globalData.frameId;this.iterateDynamicProperties();};extendPrototype([DynamicPropertyContainer],ShapeModifier);/* global extendPrototype, ShapeModifier, PropertyFactory, segmentsLengthPool, bez, shapePool, ShapeModifiers */function TrimModifier(){}extendPrototype([ShapeModifier],TrimModifier);TrimModifier.prototype.initModifierProperties=function(elem,data){this.s=PropertyFactory.getProp(elem,data.s,0,0.01,this);this.e=PropertyFactory.getProp(elem,data.e,0,0.01,this);this.o=PropertyFactory.getProp(elem,data.o,0,0,this);this.sValue=0;this.eValue=0;this.getValue=this.processKeys;this.m=data.m;this._isAnimated=!!this.s.effectsSequence.length||!!this.e.effectsSequence.length||!!this.o.effectsSequence.length;};TrimModifier.prototype.addShapeToModifier=function(shapeData){shapeData.pathsData=[];};TrimModifier.prototype.calculateShapeEdges=function(s,e,shapeLength,addedLength,totalModifierLength){var segments=[];if(e<=1){segments.push({s:s,e:e});}else if(s>=1){segments.push({s:s-1,e:e-1});}else{segments.push({s:s,e:1});segments.push({s:0,e:e-1});}var shapeSegments=[];var i;var len=segments.length;var segmentOb;for(i=0;i<len;i+=1){segmentOb=segments[i];if(!(segmentOb.e*totalModifierLength<addedLength||segmentOb.s*totalModifierLength>addedLength+shapeLength)){var shapeS;var shapeE;if(segmentOb.s*totalModifierLength<=addedLength){shapeS=0;}else{shapeS=(segmentOb.s*totalModifierLength-addedLength)/shapeLength;}if(segmentOb.e*totalModifierLength>=addedLength+shapeLength){shapeE=1;}else{shapeE=(segmentOb.e*totalModifierLength-addedLength)/shapeLength;}shapeSegments.push([shapeS,shapeE]);}}if(!shapeSegments.length){shapeSegments.push([0,0]);}return shapeSegments;};TrimModifier.prototype.releasePathsData=function(pathsData){var i;var len=pathsData.length;for(i=0;i<len;i+=1){segmentsLengthPool.release(pathsData[i]);}pathsData.length=0;return pathsData;};TrimModifier.prototype.processShapes=function(_isFirstFrame){var s;var e;if(this._mdf||_isFirstFrame){var o=this.o.v%360/360;if(o<0){o+=1;}if(this.s.v>1){s=1+o;}else if(this.s.v<0){s=0+o;}else{s=this.s.v+o;}if(this.e.v>1){e=1+o;}else if(this.e.v<0){e=0+o;}else{e=this.e.v+o;}if(s>e){var _s=s;s=e;e=_s;}s=Math.round(s*10000)*0.0001;e=Math.round(e*10000)*0.0001;this.sValue=s;this.eValue=e;}else{s=this.sValue;e=this.eValue;}var shapePaths;var i;var len=this.shapes.length;var j;var jLen;var pathsData;var pathData;var totalShapeLength;var totalModifierLength=0;if(e===s){for(i=0;i<len;i+=1){this.shapes[i].localShapeCollection.releaseShapes();this.shapes[i].shape._mdf=true;this.shapes[i].shape.paths=this.shapes[i].localShapeCollection;if(this._mdf){this.shapes[i].pathsData.length=0;}}}else if(!(e===1&&s===0||e===0&&s===1)){var segments=[];var shapeData;var localShapeCollection;for(i=0;i<len;i+=1){shapeData=this.shapes[i];// if shape hasn't changed and trim properties haven't changed, cached previous path can be used
if(!shapeData.shape._mdf&&!this._mdf&&!_isFirstFrame&&this.m!==2){shapeData.shape.paths=shapeData.localShapeCollection;}else{shapePaths=shapeData.shape.paths;jLen=shapePaths._length;totalShapeLength=0;if(!shapeData.shape._mdf&&shapeData.pathsData.length){totalShapeLength=shapeData.totalShapeLength;}else{pathsData=this.releasePathsData(shapeData.pathsData);for(j=0;j<jLen;j+=1){pathData=bez.getSegmentsLength(shapePaths.shapes[j]);pathsData.push(pathData);totalShapeLength+=pathData.totalLength;}shapeData.totalShapeLength=totalShapeLength;shapeData.pathsData=pathsData;}totalModifierLength+=totalShapeLength;shapeData.shape._mdf=true;}}var shapeS=s;var shapeE=e;var addedLength=0;var edges;for(i=len-1;i>=0;i-=1){shapeData=this.shapes[i];if(shapeData.shape._mdf){localShapeCollection=shapeData.localShapeCollection;localShapeCollection.releaseShapes();// if m === 2 means paths are trimmed individually so edges need to be found for this specific shape relative to whoel group
if(this.m===2&&len>1){edges=this.calculateShapeEdges(s,e,shapeData.totalShapeLength,addedLength,totalModifierLength);addedLength+=shapeData.totalShapeLength;}else{edges=[[shapeS,shapeE]];}jLen=edges.length;for(j=0;j<jLen;j+=1){shapeS=edges[j][0];shapeE=edges[j][1];segments.length=0;if(shapeE<=1){segments.push({s:shapeData.totalShapeLength*shapeS,e:shapeData.totalShapeLength*shapeE});}else if(shapeS>=1){segments.push({s:shapeData.totalShapeLength*(shapeS-1),e:shapeData.totalShapeLength*(shapeE-1)});}else{segments.push({s:shapeData.totalShapeLength*shapeS,e:shapeData.totalShapeLength});segments.push({s:0,e:shapeData.totalShapeLength*(shapeE-1)});}var newShapesData=this.addShapes(shapeData,segments[0]);if(segments[0].s!==segments[0].e){if(segments.length>1){var lastShapeInCollection=shapeData.shape.paths.shapes[shapeData.shape.paths._length-1];if(lastShapeInCollection.c){var lastShape=newShapesData.pop();this.addPaths(newShapesData,localShapeCollection);newShapesData=this.addShapes(shapeData,segments[1],lastShape);}else{this.addPaths(newShapesData,localShapeCollection);newShapesData=this.addShapes(shapeData,segments[1]);}}this.addPaths(newShapesData,localShapeCollection);}}shapeData.shape.paths=localShapeCollection;}}}else if(this._mdf){for(i=0;i<len;i+=1){// Releasign Trim Cached paths data when no trim applied in case shapes are modified inbetween.
// Don't remove this even if it's losing cached info.
this.shapes[i].pathsData.length=0;this.shapes[i].shape._mdf=true;}}};TrimModifier.prototype.addPaths=function(newPaths,localShapeCollection){var i;var len=newPaths.length;for(i=0;i<len;i+=1){localShapeCollection.addShape(newPaths[i]);}};TrimModifier.prototype.addSegment=function(pt1,pt2,pt3,pt4,shapePath,pos,newShape){shapePath.setXYAt(pt2[0],pt2[1],'o',pos);shapePath.setXYAt(pt3[0],pt3[1],'i',pos+1);if(newShape){shapePath.setXYAt(pt1[0],pt1[1],'v',pos);}shapePath.setXYAt(pt4[0],pt4[1],'v',pos+1);};TrimModifier.prototype.addSegmentFromArray=function(points,shapePath,pos,newShape){shapePath.setXYAt(points[1],points[5],'o',pos);shapePath.setXYAt(points[2],points[6],'i',pos+1);if(newShape){shapePath.setXYAt(points[0],points[4],'v',pos);}shapePath.setXYAt(points[3],points[7],'v',pos+1);};TrimModifier.prototype.addShapes=function(shapeData,shapeSegment,shapePath){var pathsData=shapeData.pathsData;var shapePaths=shapeData.shape.paths.shapes;var i;var len=shapeData.shape.paths._length;var j;var jLen;var addedLength=0;var currentLengthData;var segmentCount;var lengths;var segment;var shapes=[];var initPos;var newShape=true;if(!shapePath){shapePath=shapePool.newElement();segmentCount=0;initPos=0;}else{segmentCount=shapePath._length;initPos=shapePath._length;}shapes.push(shapePath);for(i=0;i<len;i+=1){lengths=pathsData[i].lengths;shapePath.c=shapePaths[i].c;jLen=shapePaths[i].c?lengths.length:lengths.length+1;for(j=1;j<jLen;j+=1){currentLengthData=lengths[j-1];if(addedLength+currentLengthData.addedLength<shapeSegment.s){addedLength+=currentLengthData.addedLength;shapePath.c=false;}else if(addedLength>shapeSegment.e){shapePath.c=false;break;}else{if(shapeSegment.s<=addedLength&&shapeSegment.e>=addedLength+currentLengthData.addedLength){this.addSegment(shapePaths[i].v[j-1],shapePaths[i].o[j-1],shapePaths[i].i[j],shapePaths[i].v[j],shapePath,segmentCount,newShape);newShape=false;}else{segment=bez.getNewSegment(shapePaths[i].v[j-1],shapePaths[i].v[j],shapePaths[i].o[j-1],shapePaths[i].i[j],(shapeSegment.s-addedLength)/currentLengthData.addedLength,(shapeSegment.e-addedLength)/currentLengthData.addedLength,lengths[j-1]);this.addSegmentFromArray(segment,shapePath,segmentCount,newShape);// this.addSegment(segment.pt1, segment.pt3, segment.pt4, segment.pt2, shapePath, segmentCount, newShape);
newShape=false;shapePath.c=false;}addedLength+=currentLengthData.addedLength;segmentCount+=1;}}if(shapePaths[i].c&&lengths.length){currentLengthData=lengths[j-1];if(addedLength<=shapeSegment.e){var segmentLength=lengths[j-1].addedLength;if(shapeSegment.s<=addedLength&&shapeSegment.e>=addedLength+segmentLength){this.addSegment(shapePaths[i].v[j-1],shapePaths[i].o[j-1],shapePaths[i].i[0],shapePaths[i].v[0],shapePath,segmentCount,newShape);newShape=false;}else{segment=bez.getNewSegment(shapePaths[i].v[j-1],shapePaths[i].v[0],shapePaths[i].o[j-1],shapePaths[i].i[0],(shapeSegment.s-addedLength)/segmentLength,(shapeSegment.e-addedLength)/segmentLength,lengths[j-1]);this.addSegmentFromArray(segment,shapePath,segmentCount,newShape);// this.addSegment(segment.pt1, segment.pt3, segment.pt4, segment.pt2, shapePath, segmentCount, newShape);
newShape=false;shapePath.c=false;}}else{shapePath.c=false;}addedLength+=currentLengthData.addedLength;segmentCount+=1;}if(shapePath._length){shapePath.setXYAt(shapePath.v[initPos][0],shapePath.v[initPos][1],'i',initPos);shapePath.setXYAt(shapePath.v[shapePath._length-1][0],shapePath.v[shapePath._length-1][1],'o',shapePath._length-1);}if(addedLength>shapeSegment.e){break;}if(i<len-1){shapePath=shapePool.newElement();newShape=true;shapes.push(shapePath);segmentCount=0;}}return shapes;};ShapeModifiers.registerModifier('tm',TrimModifier);/* global extendPrototype, ShapeModifier, PropertyFactory, shapePool, roundCorner, ShapeModifiers */function RoundCornersModifier(){}extendPrototype([ShapeModifier],RoundCornersModifier);RoundCornersModifier.prototype.initModifierProperties=function(elem,data){this.getValue=this.processKeys;this.rd=PropertyFactory.getProp(elem,data.r,0,null,this);this._isAnimated=!!this.rd.effectsSequence.length;};RoundCornersModifier.prototype.processPath=function(path,round){var clonedPath=shapePool.newElement();clonedPath.c=path.c;var i;var len=path._length;var currentV;var currentI;var currentO;var closerV;var distance;var newPosPerc;var index=0;var vX;var vY;var oX;var oY;var iX;var iY;for(i=0;i<len;i+=1){currentV=path.v[i];currentO=path.o[i];currentI=path.i[i];if(currentV[0]===currentO[0]&&currentV[1]===currentO[1]&&currentV[0]===currentI[0]&&currentV[1]===currentI[1]){if((i===0||i===len-1)&&!path.c){clonedPath.setTripleAt(currentV[0],currentV[1],currentO[0],currentO[1],currentI[0],currentI[1],index);/* clonedPath.v[index] = currentV;
                clonedPath.o[index] = currentO;
                clonedPath.i[index] = currentI; */index+=1;}else{if(i===0){closerV=path.v[len-1];}else{closerV=path.v[i-1];}distance=Math.sqrt(Math.pow(currentV[0]-closerV[0],2)+Math.pow(currentV[1]-closerV[1],2));newPosPerc=distance?Math.min(distance/2,round)/distance:0;iX=currentV[0]+(closerV[0]-currentV[0])*newPosPerc;vX=iX;iY=currentV[1]-(currentV[1]-closerV[1])*newPosPerc;vY=iY;oX=vX-(vX-currentV[0])*roundCorner;oY=vY-(vY-currentV[1])*roundCorner;clonedPath.setTripleAt(vX,vY,oX,oY,iX,iY,index);index+=1;if(i===len-1){closerV=path.v[0];}else{closerV=path.v[i+1];}distance=Math.sqrt(Math.pow(currentV[0]-closerV[0],2)+Math.pow(currentV[1]-closerV[1],2));newPosPerc=distance?Math.min(distance/2,round)/distance:0;oX=currentV[0]+(closerV[0]-currentV[0])*newPosPerc;vX=oX;oY=currentV[1]+(closerV[1]-currentV[1])*newPosPerc;vY=oY;iX=vX-(vX-currentV[0])*roundCorner;iY=vY-(vY-currentV[1])*roundCorner;clonedPath.setTripleAt(vX,vY,oX,oY,iX,iY,index);index+=1;}}else{clonedPath.setTripleAt(path.v[i][0],path.v[i][1],path.o[i][0],path.o[i][1],path.i[i][0],path.i[i][1],index);index+=1;}}return clonedPath;};RoundCornersModifier.prototype.processShapes=function(_isFirstFrame){var shapePaths;var i;var len=this.shapes.length;var j;var jLen;var rd=this.rd.v;if(rd!==0){var shapeData;var localShapeCollection;for(i=0;i<len;i+=1){shapeData=this.shapes[i];localShapeCollection=shapeData.localShapeCollection;if(!(!shapeData.shape._mdf&&!this._mdf&&!_isFirstFrame)){localShapeCollection.releaseShapes();shapeData.shape._mdf=true;shapePaths=shapeData.shape.paths.shapes;jLen=shapeData.shape.paths._length;for(j=0;j<jLen;j+=1){localShapeCollection.addShape(this.processPath(shapePaths[j],rd));}}shapeData.shape.paths=shapeData.localShapeCollection;}}if(!this.dynamicProperties.length){this._mdf=false;}};ShapeModifiers.registerModifier('rd',RoundCornersModifier);/* global extendPrototype, ShapeModifier, PropertyFactory, shapePool, ShapeModifiers */function PuckerAndBloatModifier(){}extendPrototype([ShapeModifier],PuckerAndBloatModifier);PuckerAndBloatModifier.prototype.initModifierProperties=function(elem,data){this.getValue=this.processKeys;this.amount=PropertyFactory.getProp(elem,data.a,0,null,this);this._isAnimated=!!this.amount.effectsSequence.length;};PuckerAndBloatModifier.prototype.processPath=function(path,amount){var percent=amount/100;var centerPoint=[0,0];var pathLength=path._length;var i=0;for(i=0;i<pathLength;i+=1){centerPoint[0]+=path.v[i][0];centerPoint[1]+=path.v[i][1];}centerPoint[0]/=pathLength;centerPoint[1]/=pathLength;var clonedPath=shapePool.newElement();clonedPath.c=path.c;var vX;var vY;var oX;var oY;var iX;var iY;for(i=0;i<pathLength;i+=1){vX=path.v[i][0]+(centerPoint[0]-path.v[i][0])*percent;vY=path.v[i][1]+(centerPoint[1]-path.v[i][1])*percent;oX=path.o[i][0]+(centerPoint[0]-path.o[i][0])*-percent;oY=path.o[i][1]+(centerPoint[1]-path.o[i][1])*-percent;iX=path.i[i][0]+(centerPoint[0]-path.i[i][0])*-percent;iY=path.i[i][1]+(centerPoint[1]-path.i[i][1])*-percent;clonedPath.setTripleAt(vX,vY,oX,oY,iX,iY,i);}return clonedPath;};PuckerAndBloatModifier.prototype.processShapes=function(_isFirstFrame){var shapePaths;var i;var len=this.shapes.length;var j;var jLen;var amount=this.amount.v;if(amount!==0){var shapeData;var localShapeCollection;for(i=0;i<len;i+=1){shapeData=this.shapes[i];localShapeCollection=shapeData.localShapeCollection;if(!(!shapeData.shape._mdf&&!this._mdf&&!_isFirstFrame)){localShapeCollection.releaseShapes();shapeData.shape._mdf=true;shapePaths=shapeData.shape.paths.shapes;jLen=shapeData.shape.paths._length;for(j=0;j<jLen;j+=1){localShapeCollection.addShape(this.processPath(shapePaths[j],amount));}}shapeData.shape.paths=shapeData.localShapeCollection;}}if(!this.dynamicProperties.length){this._mdf=false;}};ShapeModifiers.registerModifier('pb',PuckerAndBloatModifier);/* global extendPrototype, ShapeModifier, TransformPropertyFactory, PropertyFactory, Matrix, ShapeModifiers */function RepeaterModifier(){}extendPrototype([ShapeModifier],RepeaterModifier);RepeaterModifier.prototype.initModifierProperties=function(elem,data){this.getValue=this.processKeys;this.c=PropertyFactory.getProp(elem,data.c,0,null,this);this.o=PropertyFactory.getProp(elem,data.o,0,null,this);this.tr=TransformPropertyFactory.getTransformProperty(elem,data.tr,this);this.so=PropertyFactory.getProp(elem,data.tr.so,0,0.01,this);this.eo=PropertyFactory.getProp(elem,data.tr.eo,0,0.01,this);this.data=data;if(!this.dynamicProperties.length){this.getValue(true);}this._isAnimated=!!this.dynamicProperties.length;this.pMatrix=new Matrix();this.rMatrix=new Matrix();this.sMatrix=new Matrix();this.tMatrix=new Matrix();this.matrix=new Matrix();};RepeaterModifier.prototype.applyTransforms=function(pMatrix,rMatrix,sMatrix,transform,perc,inv){var dir=inv?-1:1;var scaleX=transform.s.v[0]+(1-transform.s.v[0])*(1-perc);var scaleY=transform.s.v[1]+(1-transform.s.v[1])*(1-perc);pMatrix.translate(transform.p.v[0]*dir*perc,transform.p.v[1]*dir*perc,transform.p.v[2]);rMatrix.translate(-transform.a.v[0],-transform.a.v[1],transform.a.v[2]);rMatrix.rotate(-transform.r.v*dir*perc);rMatrix.translate(transform.a.v[0],transform.a.v[1],transform.a.v[2]);sMatrix.translate(-transform.a.v[0],-transform.a.v[1],transform.a.v[2]);sMatrix.scale(inv?1/scaleX:scaleX,inv?1/scaleY:scaleY);sMatrix.translate(transform.a.v[0],transform.a.v[1],transform.a.v[2]);};RepeaterModifier.prototype.init=function(elem,arr,pos,elemsData){this.elem=elem;this.arr=arr;this.pos=pos;this.elemsData=elemsData;this._currentCopies=0;this._elements=[];this._groups=[];this.frameId=-1;this.initDynamicPropertyContainer(elem);this.initModifierProperties(elem,arr[pos]);while(pos>0){pos-=1;// this._elements.unshift(arr.splice(pos,1)[0]);
this._elements.unshift(arr[pos]);}if(this.dynamicProperties.length){this.k=true;}else{this.getValue(true);}};RepeaterModifier.prototype.resetElements=function(elements){var i;var len=elements.length;for(i=0;i<len;i+=1){elements[i]._processed=false;if(elements[i].ty==='gr'){this.resetElements(elements[i].it);}}};RepeaterModifier.prototype.cloneElements=function(elements){var newElements=JSON.parse(JSON.stringify(elements));this.resetElements(newElements);return newElements;};RepeaterModifier.prototype.changeGroupRender=function(elements,renderFlag){var i;var len=elements.length;for(i=0;i<len;i+=1){elements[i]._render=renderFlag;if(elements[i].ty==='gr'){this.changeGroupRender(elements[i].it,renderFlag);}}};RepeaterModifier.prototype.processShapes=function(_isFirstFrame){var items;var itemsTransform;var i;var dir;var cont;var hasReloaded=false;if(this._mdf||_isFirstFrame){var copies=Math.ceil(this.c.v);if(this._groups.length<copies){while(this._groups.length<copies){var group={it:this.cloneElements(this._elements),ty:'gr'};group.it.push({a:{a:0,ix:1,k:[0,0]},nm:'Transform',o:{a:0,ix:7,k:100},p:{a:0,ix:2,k:[0,0]},r:{a:1,ix:6,k:[{s:0,e:0,t:0},{s:0,e:0,t:1}]},s:{a:0,ix:3,k:[100,100]},sa:{a:0,ix:5,k:0},sk:{a:0,ix:4,k:0},ty:'tr'});this.arr.splice(0,0,group);this._groups.splice(0,0,group);this._currentCopies+=1;}this.elem.reloadShapes();hasReloaded=true;}cont=0;var renderFlag;for(i=0;i<=this._groups.length-1;i+=1){renderFlag=cont<copies;this._groups[i]._render=renderFlag;this.changeGroupRender(this._groups[i].it,renderFlag);if(!renderFlag){var elems=this.elemsData[i].it;var transformData=elems[elems.length-1];if(transformData.transform.op.v!==0){transformData.transform.op._mdf=true;transformData.transform.op.v=0;}else{transformData.transform.op._mdf=false;}}cont+=1;}this._currentCopies=copies;/// /
var offset=this.o.v;var offsetModulo=offset%1;var roundOffset=offset>0?Math.floor(offset):Math.ceil(offset);var pProps=this.pMatrix.props;var rProps=this.rMatrix.props;var sProps=this.sMatrix.props;this.pMatrix.reset();this.rMatrix.reset();this.sMatrix.reset();this.tMatrix.reset();this.matrix.reset();var iteration=0;if(offset>0){while(iteration<roundOffset){this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,false);iteration+=1;}if(offsetModulo){this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,offsetModulo,false);iteration+=offsetModulo;}}else if(offset<0){while(iteration>roundOffset){this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,true);iteration-=1;}if(offsetModulo){this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,-offsetModulo,true);iteration-=offsetModulo;}}i=this.data.m===1?0:this._currentCopies-1;dir=this.data.m===1?1:-1;cont=this._currentCopies;var j;var jLen;while(cont){items=this.elemsData[i].it;itemsTransform=items[items.length-1].transform.mProps.v.props;jLen=itemsTransform.length;items[items.length-1].transform.mProps._mdf=true;items[items.length-1].transform.op._mdf=true;items[items.length-1].transform.op.v=this._currentCopies===1?this.so.v:this.so.v+(this.eo.v-this.so.v)*(i/(this._currentCopies-1));if(iteration!==0){if(i!==0&&dir===1||i!==this._currentCopies-1&&dir===-1){this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,false);}this.matrix.transform(rProps[0],rProps[1],rProps[2],rProps[3],rProps[4],rProps[5],rProps[6],rProps[7],rProps[8],rProps[9],rProps[10],rProps[11],rProps[12],rProps[13],rProps[14],rProps[15]);this.matrix.transform(sProps[0],sProps[1],sProps[2],sProps[3],sProps[4],sProps[5],sProps[6],sProps[7],sProps[8],sProps[9],sProps[10],sProps[11],sProps[12],sProps[13],sProps[14],sProps[15]);this.matrix.transform(pProps[0],pProps[1],pProps[2],pProps[3],pProps[4],pProps[5],pProps[6],pProps[7],pProps[8],pProps[9],pProps[10],pProps[11],pProps[12],pProps[13],pProps[14],pProps[15]);for(j=0;j<jLen;j+=1){itemsTransform[j]=this.matrix.props[j];}this.matrix.reset();}else{this.matrix.reset();for(j=0;j<jLen;j+=1){itemsTransform[j]=this.matrix.props[j];}}iteration+=1;cont-=1;i+=dir;}}else{cont=this._currentCopies;i=0;dir=1;while(cont){items=this.elemsData[i].it;itemsTransform=items[items.length-1].transform.mProps.v.props;items[items.length-1].transform.mProps._mdf=false;items[items.length-1].transform.op._mdf=false;cont-=1;i+=dir;}}return hasReloaded;};RepeaterModifier.prototype.addShape=function(){};ShapeModifiers.registerModifier('rp',RepeaterModifier);/* global createSizedArray, shapePool */function ShapeCollection(){this._length=0;this._maxLength=4;this.shapes=createSizedArray(this._maxLength);}ShapeCollection.prototype.addShape=function(shapeData){if(this._length===this._maxLength){this.shapes=this.shapes.concat(createSizedArray(this._maxLength));this._maxLength*=2;}this.shapes[this._length]=shapeData;this._length+=1;};ShapeCollection.prototype.releaseShapes=function(){var i;for(i=0;i<this._length;i+=1){shapePool.release(this.shapes[i]);}this._length=0;};/* global createSizedArray, createTypedArray, PropertyFactory, extendPrototype, DynamicPropertyContainer */function DashProperty(elem,data,renderer,container){this.elem=elem;this.frameId=-1;this.dataProps=createSizedArray(data.length);this.renderer=renderer;this.k=false;this.dashStr='';this.dashArray=createTypedArray('float32',data.length?data.length-1:0);this.dashoffset=createTypedArray('float32',1);this.initDynamicPropertyContainer(container);var i;var len=data.length||0;var prop;for(i=0;i<len;i+=1){prop=PropertyFactory.getProp(elem,data[i].v,0,0,this);this.k=prop.k||this.k;this.dataProps[i]={n:data[i].n,p:prop};}if(!this.k){this.getValue(true);}this._isAnimated=this.k;}DashProperty.prototype.getValue=function(forceRender){if(this.elem.globalData.frameId===this.frameId&&!forceRender){return;}this.frameId=this.elem.globalData.frameId;this.iterateDynamicProperties();this._mdf=this._mdf||forceRender;if(this._mdf){var i=0;var len=this.dataProps.length;if(this.renderer==='svg'){this.dashStr='';}for(i=0;i<len;i+=1){if(this.dataProps[i].n!=='o'){if(this.renderer==='svg'){this.dashStr+=' '+this.dataProps[i].p.v;}else{this.dashArray[i]=this.dataProps[i].p.v;}}else{this.dashoffset[0]=this.dataProps[i].p.v;}}}};extendPrototype([DynamicPropertyContainer],DashProperty);/* global createTypedArray, PropertyFactory, extendPrototype, DynamicPropertyContainer */function GradientProperty(elem,data,container){this.data=data;this.c=createTypedArray('uint8c',data.p*4);var cLength=data.k.k[0].s?data.k.k[0].s.length-data.p*4:data.k.k.length-data.p*4;this.o=createTypedArray('float32',cLength);this._cmdf=false;this._omdf=false;this._collapsable=this.checkCollapsable();this._hasOpacity=cLength;this.initDynamicPropertyContainer(container);this.prop=PropertyFactory.getProp(elem,data.k,1,null,this);this.k=this.prop.k;this.getValue(true);}GradientProperty.prototype.comparePoints=function(values,points){var i=0;var len=this.o.length/2;var diff;while(i<len){diff=Math.abs(values[i*4]-values[points*4+i*2]);if(diff>0.01){return false;}i+=1;}return true;};GradientProperty.prototype.checkCollapsable=function(){if(this.o.length/2!==this.c.length/4){return false;}if(this.data.k.k[0].s){var i=0;var len=this.data.k.k.length;while(i<len){if(!this.comparePoints(this.data.k.k[i].s,this.data.p)){return false;}i+=1;}}else if(!this.comparePoints(this.data.k.k,this.data.p)){return false;}return true;};GradientProperty.prototype.getValue=function(forceRender){this.prop.getValue();this._mdf=false;this._cmdf=false;this._omdf=false;if(this.prop._mdf||forceRender){var i;var len=this.data.p*4;var mult;var val;for(i=0;i<len;i+=1){mult=i%4===0?100:255;val=Math.round(this.prop.v[i]*mult);if(this.c[i]!==val){this.c[i]=val;this._cmdf=!forceRender;}}if(this.o.length){len=this.prop.v.length;for(i=this.data.p*4;i<len;i+=1){mult=i%2===0?100:1;val=i%2===0?Math.round(this.prop.v[i]*100):this.prop.v[i];if(this.o[i-this.data.p*4]!==val){this.o[i-this.data.p*4]=val;this._omdf=!forceRender;}}}this._mdf=!forceRender;}};extendPrototype([DynamicPropertyContainer],GradientProperty);/* exported buildShapeString */var buildShapeString=function buildShapeString(pathNodes,length,closed,mat){if(length===0){return'';}var _o=pathNodes.o;var _i=pathNodes.i;var _v=pathNodes.v;var i;var shapeString=' M'+mat.applyToPointStringified(_v[0][0],_v[0][1]);for(i=1;i<length;i+=1){shapeString+=' C'+mat.applyToPointStringified(_o[i-1][0],_o[i-1][1])+' '+mat.applyToPointStringified(_i[i][0],_i[i][1])+' '+mat.applyToPointStringified(_v[i][0],_v[i][1]);}if(closed&&length){shapeString+=' C'+mat.applyToPointStringified(_o[i-1][0],_o[i-1][1])+' '+mat.applyToPointStringified(_i[0][0],_i[0][1])+' '+mat.applyToPointStringified(_v[0][0],_v[0][1]);shapeString+='z';}return shapeString;};/* global Howl *//* exported audioControllerFactory */var audioControllerFactory=function(){function AudioController(audioFactory){this.audios=[];this.audioFactory=audioFactory;this._volume=1;this._isMuted=false;}AudioController.prototype={addAudio:function addAudio(audio){this.audios.push(audio);},pause:function pause(){var i;var len=this.audios.length;for(i=0;i<len;i+=1){this.audios[i].pause();}},resume:function resume(){var i;var len=this.audios.length;for(i=0;i<len;i+=1){this.audios[i].resume();}},setRate:function setRate(rateValue){var i;var len=this.audios.length;for(i=0;i<len;i+=1){this.audios[i].setRate(rateValue);}},createAudio:function createAudio(assetPath){if(this.audioFactory){return this.audioFactory(assetPath);}if(Howl){return new Howl({src:[assetPath]});}return{isPlaying:false,play:function play(){this.isPlaying=true;},seek:function seek(){this.isPlaying=false;},playing:function playing(){},rate:function rate(){},setVolume:function setVolume(){}};},setAudioFactory:function setAudioFactory(audioFactory){this.audioFactory=audioFactory;},setVolume:function setVolume(value){this._volume=value;this._updateVolume();},mute:function mute(){this._isMuted=true;this._updateVolume();},unmute:function unmute(){this._isMuted=false;this._updateVolume();},getVolume:function getVolume(){return this._volume;},_updateVolume:function _updateVolume(){var i;var len=this.audios.length;for(i=0;i<len;i+=1){this.audios[i].volume(this._volume*(this._isMuted?0:1));}}};return function(){return new AudioController();};}();/* global createTag, createNS, isSafari, assetLoader *//* exported ImagePreloader */var ImagePreloader=function(){var proxyImage=function(){var canvas=createTag('canvas');canvas.width=1;canvas.height=1;var ctx=canvas.getContext('2d');ctx.fillStyle='rgba(0,0,0,0)';ctx.fillRect(0,0,1,1);return canvas;}();function imageLoaded(){this.loadedAssets+=1;if(this.loadedAssets===this.totalImages&&this.loadedFootagesCount===this.totalFootages){if(this.imagesLoadedCb){this.imagesLoadedCb(null);}}}function footageLoaded(){this.loadedFootagesCount+=1;if(this.loadedAssets===this.totalImages&&this.loadedFootagesCount===this.totalFootages){if(this.imagesLoadedCb){this.imagesLoadedCb(null);}}}function getAssetsPath(assetData,assetsPath,originalPath){var path='';if(assetData.e){path=assetData.p;}else if(assetsPath){var imagePath=assetData.p;if(imagePath.indexOf('images/')!==-1){imagePath=imagePath.split('/')[1];}path=assetsPath+imagePath;}else{path=originalPath;path+=assetData.u?assetData.u:'';path+=assetData.p;}return path;}function testImageLoaded(img){var _count=0;var intervalId=setInterval(function(){var box=img.getBBox();if(box.width||_count>500){this._imageLoaded();clearInterval(intervalId);}_count+=1;}.bind(this),50);}function createImageData(assetData){var path=getAssetsPath(assetData,this.assetsPath,this.path);var img=createNS('image');if(isSafari){this.testImageLoaded(img);}else{img.addEventListener('load',this._imageLoaded,false);}img.addEventListener('error',function(){ob.img=proxyImage;this._imageLoaded();}.bind(this),false);img.setAttributeNS('http://www.w3.org/1999/xlink','href',path);if(this._elementHelper.append){this._elementHelper.append(img);}else{this._elementHelper.appendChild(img);}var ob={img:img,assetData:assetData};return ob;}function createImgData(assetData){var path=getAssetsPath(assetData,this.assetsPath,this.path);var img=createTag('img');img.crossOrigin='anonymous';img.addEventListener('load',this._imageLoaded,false);img.addEventListener('error',function(){ob.img=proxyImage;this._imageLoaded();}.bind(this),false);img.src=path;var ob={img:img,assetData:assetData};return ob;}function createFootageData(data){var ob={assetData:data};var path=getAssetsPath(data,this.assetsPath,this.path);assetLoader.load(path,function(footageData){ob.img=footageData;this._footageLoaded();}.bind(this),function(){ob.img={};this._footageLoaded();}.bind(this));return ob;}function loadAssets(assets,cb){this.imagesLoadedCb=cb;var i;var len=assets.length;for(i=0;i<len;i+=1){if(!assets[i].layers){if(!assets[i].t){this.totalImages+=1;this.images.push(this._createImageData(assets[i]));}else if(assets[i].t===3){this.totalFootages+=1;this.images.push(this.createFootageData(assets[i]));}}}}function setPath(path){this.path=path||'';}function setAssetsPath(path){this.assetsPath=path||'';}function getAsset(assetData){var i=0;var len=this.images.length;while(i<len){if(this.images[i].assetData===assetData){return this.images[i].img;}i+=1;}return null;}function destroy(){this.imagesLoadedCb=null;this.images.length=0;}function loadedImages(){return this.totalImages===this.loadedAssets;}function loadedFootages(){return this.totalFootages===this.loadedFootagesCount;}function setCacheType(type,elementHelper){if(type==='svg'){this._elementHelper=elementHelper;this._createImageData=this.createImageData.bind(this);}else{this._createImageData=this.createImgData.bind(this);}}function ImagePreloaderFactory(){this._imageLoaded=imageLoaded.bind(this);this._footageLoaded=footageLoaded.bind(this);this.testImageLoaded=testImageLoaded.bind(this);this.createFootageData=createFootageData.bind(this);this.assetsPath='';this.path='';this.totalImages=0;this.totalFootages=0;this.loadedAssets=0;this.loadedFootagesCount=0;this.imagesLoadedCb=null;this.images=[];}ImagePreloaderFactory.prototype={loadAssets:loadAssets,setAssetsPath:setAssetsPath,setPath:setPath,loadedImages:loadedImages,loadedFootages:loadedFootages,destroy:destroy,getAsset:getAsset,createImgData:createImgData,createImageData:createImageData,imageLoaded:imageLoaded,footageLoaded:footageLoaded,setCacheType:setCacheType};return ImagePreloaderFactory;}();/* exported featureSupport */var featureSupport=function(){var ob={maskType:true};if(/MSIE 10/i.test(navigator.userAgent)||/MSIE 9/i.test(navigator.userAgent)||/rv:11.0/i.test(navigator.userAgent)||/Edge\/\d./i.test(navigator.userAgent)){ob.maskType=false;}return ob;}();/* global createNS *//* exported filtersFactory */var filtersFactory=function(){var ob={};ob.createFilter=createFilter;ob.createAlphaToLuminanceFilter=createAlphaToLuminanceFilter;function createFilter(filId,skipCoordinates){var fil=createNS('filter');fil.setAttribute('id',filId);if(skipCoordinates!==true){fil.setAttribute('filterUnits','objectBoundingBox');fil.setAttribute('x','0%');fil.setAttribute('y','0%');fil.setAttribute('width','100%');fil.setAttribute('height','100%');}return fil;}function createAlphaToLuminanceFilter(){var feColorMatrix=createNS('feColorMatrix');feColorMatrix.setAttribute('type','matrix');feColorMatrix.setAttribute('color-interpolation-filters','sRGB');feColorMatrix.setAttribute('values','0 0 0 1 0  0 0 0 1 0  0 0 0 1 0  0 0 0 1 1');return feColorMatrix;}return ob;}();/* exported assetLoader */var assetLoader=function(){function formatResponse(xhr){if(xhr.response&&_typeof(xhr.response)==='object'){return xhr.response;}if(xhr.response&&typeof xhr.response==='string'){return JSON.parse(xhr.response);}if(xhr.responseText){return JSON.parse(xhr.responseText);}return null;}function loadAsset(path,callback,errorCallback){var response;var xhr=new XMLHttpRequest();// set responseType after calling open or IE will break.
try{// This crashes on Android WebView prior to KitKat
xhr.responseType='json';}catch(err){}// eslint-disable-line no-empty
xhr.onreadystatechange=function(){if(xhr.readyState===4){if(xhr.status===200){response=formatResponse(xhr);callback(response);}else{try{response=formatResponse(xhr);callback(response);}catch(err){if(errorCallback){errorCallback(err);}}}}};xhr.open('GET',path,true);xhr.send();}return{load:loadAsset};}();/* global createSizedArray, PropertyFactory, TextAnimatorDataProperty, bez, addHueToRGB,
  addSaturationToRGB, addBrightnessToRGB, LetterProps, Matrix, extendPrototype, DynamicPropertyContainer */function TextAnimatorProperty(textData,renderType,elem){this._isFirstFrame=true;this._hasMaskedPath=false;this._frameId=-1;this._textData=textData;this._renderType=renderType;this._elem=elem;this._animatorsData=createSizedArray(this._textData.a.length);this._pathData={};this._moreOptions={alignment:{}};this.renderedLetters=[];this.lettersChangedFlag=false;this.initDynamicPropertyContainer(elem);}TextAnimatorProperty.prototype.searchProperties=function(){var i;var len=this._textData.a.length;var animatorProps;var getProp=PropertyFactory.getProp;for(i=0;i<len;i+=1){animatorProps=this._textData.a[i];this._animatorsData[i]=new TextAnimatorDataProperty(this._elem,animatorProps,this);}if(this._textData.p&&'m'in this._textData.p){this._pathData={f:getProp(this._elem,this._textData.p.f,0,0,this),l:getProp(this._elem,this._textData.p.l,0,0,this),r:this._textData.p.r,m:this._elem.maskManager.getMaskProperty(this._textData.p.m)};this._hasMaskedPath=true;}else{this._hasMaskedPath=false;}this._moreOptions.alignment=getProp(this._elem,this._textData.m.a,1,0,this);};TextAnimatorProperty.prototype.getMeasures=function(documentData,lettersChangedFlag){this.lettersChangedFlag=lettersChangedFlag;if(!this._mdf&&!this._isFirstFrame&&!lettersChangedFlag&&(!this._hasMaskedPath||!this._pathData.m._mdf)){return;}this._isFirstFrame=false;var alignment=this._moreOptions.alignment.v;var animators=this._animatorsData;var textData=this._textData;var matrixHelper=this.mHelper;var renderType=this._renderType;var renderedLettersCount=this.renderedLetters.length;var xPos;var yPos;var i;var len;var letters=documentData.l;var pathInfo;var currentLength;var currentPoint;var segmentLength;var flag;var pointInd;var segmentInd;var prevPoint;var points;var segments;var partialLength;var totalLength;var perc;var tanAngle;var mask;if(this._hasMaskedPath){mask=this._pathData.m;if(!this._pathData.n||this._pathData._mdf){var paths=mask.v;if(this._pathData.r){paths=paths.reverse();}// TODO: release bezier data cached from previous pathInfo: this._pathData.pi
pathInfo={tLength:0,segments:[]};len=paths._length-1;var bezierData;totalLength=0;for(i=0;i<len;i+=1){bezierData=bez.buildBezierData(paths.v[i],paths.v[i+1],[paths.o[i][0]-paths.v[i][0],paths.o[i][1]-paths.v[i][1]],[paths.i[i+1][0]-paths.v[i+1][0],paths.i[i+1][1]-paths.v[i+1][1]]);pathInfo.tLength+=bezierData.segmentLength;pathInfo.segments.push(bezierData);totalLength+=bezierData.segmentLength;}i=len;if(mask.v.c){bezierData=bez.buildBezierData(paths.v[i],paths.v[0],[paths.o[i][0]-paths.v[i][0],paths.o[i][1]-paths.v[i][1]],[paths.i[0][0]-paths.v[0][0],paths.i[0][1]-paths.v[0][1]]);pathInfo.tLength+=bezierData.segmentLength;pathInfo.segments.push(bezierData);totalLength+=bezierData.segmentLength;}this._pathData.pi=pathInfo;}pathInfo=this._pathData.pi;currentLength=this._pathData.f.v;segmentInd=0;pointInd=1;segmentLength=0;flag=true;segments=pathInfo.segments;if(currentLength<0&&mask.v.c){if(pathInfo.tLength<Math.abs(currentLength)){currentLength=-Math.abs(currentLength)%pathInfo.tLength;}segmentInd=segments.length-1;points=segments[segmentInd].points;pointInd=points.length-1;while(currentLength<0){currentLength+=points[pointInd].partialLength;pointInd-=1;if(pointInd<0){segmentInd-=1;points=segments[segmentInd].points;pointInd=points.length-1;}}}points=segments[segmentInd].points;prevPoint=points[pointInd-1];currentPoint=points[pointInd];partialLength=currentPoint.partialLength;}len=letters.length;xPos=0;yPos=0;var yOff=documentData.finalSize*1.2*0.714;var firstLine=true;var animatorProps;var animatorSelector;var j;var jLen;var letterValue;jLen=animators.length;var mult;var ind=-1;var offf;var xPathPos;var yPathPos;var initPathPos=currentLength;var initSegmentInd=segmentInd;var initPointInd=pointInd;var currentLine=-1;var elemOpacity;var sc;var sw;var fc;var k;var letterSw;var letterSc;var letterFc;var letterM='';var letterP=this.defaultPropsArray;var letterO;//
if(documentData.j===2||documentData.j===1){var animatorJustifyOffset=0;var animatorFirstCharOffset=0;var justifyOffsetMult=documentData.j===2?-0.5:-1;var lastIndex=0;var isNewLine=true;for(i=0;i<len;i+=1){if(letters[i].n){if(animatorJustifyOffset){animatorJustifyOffset+=animatorFirstCharOffset;}while(lastIndex<i){letters[lastIndex].animatorJustifyOffset=animatorJustifyOffset;lastIndex+=1;}animatorJustifyOffset=0;isNewLine=true;}else{for(j=0;j<jLen;j+=1){animatorProps=animators[j].a;if(animatorProps.t.propType){if(isNewLine&&documentData.j===2){animatorFirstCharOffset+=animatorProps.t.v*justifyOffsetMult;}animatorSelector=animators[j].s;mult=animatorSelector.getMult(letters[i].anIndexes[j],textData.a[j].s.totalChars);if(mult.length){animatorJustifyOffset+=animatorProps.t.v*mult[0]*justifyOffsetMult;}else{animatorJustifyOffset+=animatorProps.t.v*mult*justifyOffsetMult;}}}isNewLine=false;}}if(animatorJustifyOffset){animatorJustifyOffset+=animatorFirstCharOffset;}while(lastIndex<i){letters[lastIndex].animatorJustifyOffset=animatorJustifyOffset;lastIndex+=1;}}//
for(i=0;i<len;i+=1){matrixHelper.reset();elemOpacity=1;if(letters[i].n){xPos=0;yPos+=documentData.yOffset;yPos+=firstLine?1:0;currentLength=initPathPos;firstLine=false;if(this._hasMaskedPath){segmentInd=initSegmentInd;pointInd=initPointInd;points=segments[segmentInd].points;prevPoint=points[pointInd-1];currentPoint=points[pointInd];partialLength=currentPoint.partialLength;segmentLength=0;}letterM='';letterFc='';letterSw='';letterO='';letterP=this.defaultPropsArray;}else{if(this._hasMaskedPath){if(currentLine!==letters[i].line){switch(documentData.j){case 1:currentLength+=totalLength-documentData.lineWidths[letters[i].line];break;case 2:currentLength+=(totalLength-documentData.lineWidths[letters[i].line])/2;break;default:break;}currentLine=letters[i].line;}if(ind!==letters[i].ind){if(letters[ind]){currentLength+=letters[ind].extra;}currentLength+=letters[i].an/2;ind=letters[i].ind;}currentLength+=alignment[0]*letters[i].an*0.005;var animatorOffset=0;for(j=0;j<jLen;j+=1){animatorProps=animators[j].a;if(animatorProps.p.propType){animatorSelector=animators[j].s;mult=animatorSelector.getMult(letters[i].anIndexes[j],textData.a[j].s.totalChars);if(mult.length){animatorOffset+=animatorProps.p.v[0]*mult[0];}else{animatorOffset+=animatorProps.p.v[0]*mult;}}if(animatorProps.a.propType){animatorSelector=animators[j].s;mult=animatorSelector.getMult(letters[i].anIndexes[j],textData.a[j].s.totalChars);if(mult.length){animatorOffset+=animatorProps.a.v[0]*mult[0];}else{animatorOffset+=animatorProps.a.v[0]*mult;}}}flag=true;while(flag){if(segmentLength+partialLength>=currentLength+animatorOffset||!points){perc=(currentLength+animatorOffset-segmentLength)/currentPoint.partialLength;xPathPos=prevPoint.point[0]+(currentPoint.point[0]-prevPoint.point[0])*perc;yPathPos=prevPoint.point[1]+(currentPoint.point[1]-prevPoint.point[1])*perc;matrixHelper.translate(-alignment[0]*letters[i].an*0.005,-(alignment[1]*yOff)*0.01);flag=false;}else if(points){segmentLength+=currentPoint.partialLength;pointInd+=1;if(pointInd>=points.length){pointInd=0;segmentInd+=1;if(!segments[segmentInd]){if(mask.v.c){pointInd=0;segmentInd=0;points=segments[segmentInd].points;}else{segmentLength-=currentPoint.partialLength;points=null;}}else{points=segments[segmentInd].points;}}if(points){prevPoint=currentPoint;currentPoint=points[pointInd];partialLength=currentPoint.partialLength;}}}offf=letters[i].an/2-letters[i].add;matrixHelper.translate(-offf,0,0);}else{offf=letters[i].an/2-letters[i].add;matrixHelper.translate(-offf,0,0);// Grouping alignment
matrixHelper.translate(-alignment[0]*letters[i].an*0.005,-alignment[1]*yOff*0.01,0);}for(j=0;j<jLen;j+=1){animatorProps=animators[j].a;if(animatorProps.t.propType){animatorSelector=animators[j].s;mult=animatorSelector.getMult(letters[i].anIndexes[j],textData.a[j].s.totalChars);// This condition is to prevent applying tracking to first character in each line. Might be better to use a boolean "isNewLine"
if(xPos!==0||documentData.j!==0){if(this._hasMaskedPath){if(mult.length){currentLength+=animatorProps.t.v*mult[0];}else{currentLength+=animatorProps.t.v*mult;}}else if(mult.length){xPos+=animatorProps.t.v*mult[0];}else{xPos+=animatorProps.t.v*mult;}}}}if(documentData.strokeWidthAnim){sw=documentData.sw||0;}if(documentData.strokeColorAnim){if(documentData.sc){sc=[documentData.sc[0],documentData.sc[1],documentData.sc[2]];}else{sc=[0,0,0];}}if(documentData.fillColorAnim&&documentData.fc){fc=[documentData.fc[0],documentData.fc[1],documentData.fc[2]];}for(j=0;j<jLen;j+=1){animatorProps=animators[j].a;if(animatorProps.a.propType){animatorSelector=animators[j].s;mult=animatorSelector.getMult(letters[i].anIndexes[j],textData.a[j].s.totalChars);if(mult.length){matrixHelper.translate(-animatorProps.a.v[0]*mult[0],-animatorProps.a.v[1]*mult[1],animatorProps.a.v[2]*mult[2]);}else{matrixHelper.translate(-animatorProps.a.v[0]*mult,-animatorProps.a.v[1]*mult,animatorProps.a.v[2]*mult);}}}for(j=0;j<jLen;j+=1){animatorProps=animators[j].a;if(animatorProps.s.propType){animatorSelector=animators[j].s;mult=animatorSelector.getMult(letters[i].anIndexes[j],textData.a[j].s.totalChars);if(mult.length){matrixHelper.scale(1+(animatorProps.s.v[0]-1)*mult[0],1+(animatorProps.s.v[1]-1)*mult[1],1);}else{matrixHelper.scale(1+(animatorProps.s.v[0]-1)*mult,1+(animatorProps.s.v[1]-1)*mult,1);}}}for(j=0;j<jLen;j+=1){animatorProps=animators[j].a;animatorSelector=animators[j].s;mult=animatorSelector.getMult(letters[i].anIndexes[j],textData.a[j].s.totalChars);if(animatorProps.sk.propType){if(mult.length){matrixHelper.skewFromAxis(-animatorProps.sk.v*mult[0],animatorProps.sa.v*mult[1]);}else{matrixHelper.skewFromAxis(-animatorProps.sk.v*mult,animatorProps.sa.v*mult);}}if(animatorProps.r.propType){if(mult.length){matrixHelper.rotateZ(-animatorProps.r.v*mult[2]);}else{matrixHelper.rotateZ(-animatorProps.r.v*mult);}}if(animatorProps.ry.propType){if(mult.length){matrixHelper.rotateY(animatorProps.ry.v*mult[1]);}else{matrixHelper.rotateY(animatorProps.ry.v*mult);}}if(animatorProps.rx.propType){if(mult.length){matrixHelper.rotateX(animatorProps.rx.v*mult[0]);}else{matrixHelper.rotateX(animatorProps.rx.v*mult);}}if(animatorProps.o.propType){if(mult.length){elemOpacity+=(animatorProps.o.v*mult[0]-elemOpacity)*mult[0];}else{elemOpacity+=(animatorProps.o.v*mult-elemOpacity)*mult;}}if(documentData.strokeWidthAnim&&animatorProps.sw.propType){if(mult.length){sw+=animatorProps.sw.v*mult[0];}else{sw+=animatorProps.sw.v*mult;}}if(documentData.strokeColorAnim&&animatorProps.sc.propType){for(k=0;k<3;k+=1){if(mult.length){sc[k]+=(animatorProps.sc.v[k]-sc[k])*mult[0];}else{sc[k]+=(animatorProps.sc.v[k]-sc[k])*mult;}}}if(documentData.fillColorAnim&&documentData.fc){if(animatorProps.fc.propType){for(k=0;k<3;k+=1){if(mult.length){fc[k]+=(animatorProps.fc.v[k]-fc[k])*mult[0];}else{fc[k]+=(animatorProps.fc.v[k]-fc[k])*mult;}}}if(animatorProps.fh.propType){if(mult.length){fc=addHueToRGB(fc,animatorProps.fh.v*mult[0]);}else{fc=addHueToRGB(fc,animatorProps.fh.v*mult);}}if(animatorProps.fs.propType){if(mult.length){fc=addSaturationToRGB(fc,animatorProps.fs.v*mult[0]);}else{fc=addSaturationToRGB(fc,animatorProps.fs.v*mult);}}if(animatorProps.fb.propType){if(mult.length){fc=addBrightnessToRGB(fc,animatorProps.fb.v*mult[0]);}else{fc=addBrightnessToRGB(fc,animatorProps.fb.v*mult);}}}}for(j=0;j<jLen;j+=1){animatorProps=animators[j].a;if(animatorProps.p.propType){animatorSelector=animators[j].s;mult=animatorSelector.getMult(letters[i].anIndexes[j],textData.a[j].s.totalChars);if(this._hasMaskedPath){if(mult.length){matrixHelper.translate(0,animatorProps.p.v[1]*mult[0],-animatorProps.p.v[2]*mult[1]);}else{matrixHelper.translate(0,animatorProps.p.v[1]*mult,-animatorProps.p.v[2]*mult);}}else if(mult.length){matrixHelper.translate(animatorProps.p.v[0]*mult[0],animatorProps.p.v[1]*mult[1],-animatorProps.p.v[2]*mult[2]);}else{matrixHelper.translate(animatorProps.p.v[0]*mult,animatorProps.p.v[1]*mult,-animatorProps.p.v[2]*mult);}}}if(documentData.strokeWidthAnim){letterSw=sw<0?0:sw;}if(documentData.strokeColorAnim){letterSc='rgb('+Math.round(sc[0]*255)+','+Math.round(sc[1]*255)+','+Math.round(sc[2]*255)+')';}if(documentData.fillColorAnim&&documentData.fc){letterFc='rgb('+Math.round(fc[0]*255)+','+Math.round(fc[1]*255)+','+Math.round(fc[2]*255)+')';}if(this._hasMaskedPath){matrixHelper.translate(0,-documentData.ls);matrixHelper.translate(0,alignment[1]*yOff*0.01+yPos,0);if(textData.p.p){tanAngle=(currentPoint.point[1]-prevPoint.point[1])/(currentPoint.point[0]-prevPoint.point[0]);var rot=Math.atan(tanAngle)*180/Math.PI;if(currentPoint.point[0]<prevPoint.point[0]){rot+=180;}matrixHelper.rotate(-rot*Math.PI/180);}matrixHelper.translate(xPathPos,yPathPos,0);currentLength-=alignment[0]*letters[i].an*0.005;if(letters[i+1]&&ind!==letters[i+1].ind){currentLength+=letters[i].an/2;currentLength+=documentData.tr*0.001*documentData.finalSize;}}else{matrixHelper.translate(xPos,yPos,0);if(documentData.ps){// matrixHelper.translate(documentData.ps[0],documentData.ps[1],0);
matrixHelper.translate(documentData.ps[0],documentData.ps[1]+documentData.ascent,0);}switch(documentData.j){case 1:matrixHelper.translate(letters[i].animatorJustifyOffset+documentData.justifyOffset+(documentData.boxWidth-documentData.lineWidths[letters[i].line]),0,0);break;case 2:matrixHelper.translate(letters[i].animatorJustifyOffset+documentData.justifyOffset+(documentData.boxWidth-documentData.lineWidths[letters[i].line])/2,0,0);break;default:break;}matrixHelper.translate(0,-documentData.ls);matrixHelper.translate(offf,0,0);matrixHelper.translate(alignment[0]*letters[i].an*0.005,alignment[1]*yOff*0.01,0);xPos+=letters[i].l+documentData.tr*0.001*documentData.finalSize;}if(renderType==='html'){letterM=matrixHelper.toCSS();}else if(renderType==='svg'){letterM=matrixHelper.to2dCSS();}else{letterP=[matrixHelper.props[0],matrixHelper.props[1],matrixHelper.props[2],matrixHelper.props[3],matrixHelper.props[4],matrixHelper.props[5],matrixHelper.props[6],matrixHelper.props[7],matrixHelper.props[8],matrixHelper.props[9],matrixHelper.props[10],matrixHelper.props[11],matrixHelper.props[12],matrixHelper.props[13],matrixHelper.props[14],matrixHelper.props[15]];}letterO=elemOpacity;}if(renderedLettersCount<=i){letterValue=new LetterProps(letterO,letterSw,letterSc,letterFc,letterM,letterP);this.renderedLetters.push(letterValue);renderedLettersCount+=1;this.lettersChangedFlag=true;}else{letterValue=this.renderedLetters[i];this.lettersChangedFlag=letterValue.update(letterO,letterSw,letterSc,letterFc,letterM,letterP)||this.lettersChangedFlag;}}};TextAnimatorProperty.prototype.getValue=function(){if(this._elem.globalData.frameId===this._frameId){return;}this._frameId=this._elem.globalData.frameId;this.iterateDynamicProperties();};TextAnimatorProperty.prototype.mHelper=new Matrix();TextAnimatorProperty.prototype.defaultPropsArray=[];extendPrototype([DynamicPropertyContainer],TextAnimatorProperty);/* global PropertyFactory, degToRads, TextSelectorProp *//* exported TextAnimatorDataProperty */function TextAnimatorDataProperty(elem,animatorProps,container){var defaultData={propType:false};var getProp=PropertyFactory.getProp;var textAnimatorAnimatables=animatorProps.a;this.a={r:textAnimatorAnimatables.r?getProp(elem,textAnimatorAnimatables.r,0,degToRads,container):defaultData,rx:textAnimatorAnimatables.rx?getProp(elem,textAnimatorAnimatables.rx,0,degToRads,container):defaultData,ry:textAnimatorAnimatables.ry?getProp(elem,textAnimatorAnimatables.ry,0,degToRads,container):defaultData,sk:textAnimatorAnimatables.sk?getProp(elem,textAnimatorAnimatables.sk,0,degToRads,container):defaultData,sa:textAnimatorAnimatables.sa?getProp(elem,textAnimatorAnimatables.sa,0,degToRads,container):defaultData,s:textAnimatorAnimatables.s?getProp(elem,textAnimatorAnimatables.s,1,0.01,container):defaultData,a:textAnimatorAnimatables.a?getProp(elem,textAnimatorAnimatables.a,1,0,container):defaultData,o:textAnimatorAnimatables.o?getProp(elem,textAnimatorAnimatables.o,0,0.01,container):defaultData,p:textAnimatorAnimatables.p?getProp(elem,textAnimatorAnimatables.p,1,0,container):defaultData,sw:textAnimatorAnimatables.sw?getProp(elem,textAnimatorAnimatables.sw,0,0,container):defaultData,sc:textAnimatorAnimatables.sc?getProp(elem,textAnimatorAnimatables.sc,1,0,container):defaultData,fc:textAnimatorAnimatables.fc?getProp(elem,textAnimatorAnimatables.fc,1,0,container):defaultData,fh:textAnimatorAnimatables.fh?getProp(elem,textAnimatorAnimatables.fh,0,0,container):defaultData,fs:textAnimatorAnimatables.fs?getProp(elem,textAnimatorAnimatables.fs,0,0.01,container):defaultData,fb:textAnimatorAnimatables.fb?getProp(elem,textAnimatorAnimatables.fb,0,0.01,container):defaultData,t:textAnimatorAnimatables.t?getProp(elem,textAnimatorAnimatables.t,0,0,container):defaultData};this.s=TextSelectorProp.getTextSelectorProp(elem,animatorProps.s,container);this.s.t=animatorProps.s.t;}function LetterProps(o,sw,sc,fc,m,p){this.o=o;this.sw=sw;this.sc=sc;this.fc=fc;this.m=m;this.p=p;this._mdf={o:true,sw:!!sw,sc:!!sc,fc:!!fc,m:true,p:true};}LetterProps.prototype.update=function(o,sw,sc,fc,m,p){this._mdf.o=false;this._mdf.sw=false;this._mdf.sc=false;this._mdf.fc=false;this._mdf.m=false;this._mdf.p=false;var updated=false;if(this.o!==o){this.o=o;this._mdf.o=true;updated=true;}if(this.sw!==sw){this.sw=sw;this._mdf.sw=true;updated=true;}if(this.sc!==sc){this.sc=sc;this._mdf.sc=true;updated=true;}if(this.fc!==fc){this.fc=fc;this._mdf.fc=true;updated=true;}if(this.m!==m){this.m=m;this._mdf.m=true;updated=true;}if(p.length&&(this.p[0]!==p[0]||this.p[1]!==p[1]||this.p[4]!==p[4]||this.p[5]!==p[5]||this.p[12]!==p[12]||this.p[13]!==p[13])){this.p=p;this._mdf.p=true;updated=true;}return updated;};/* global FontManager, initialDefaultFrame, getFontProperties *//* exported TextProperty */function TextProperty(elem,data){this._frameId=initialDefaultFrame;this.pv='';this.v='';this.kf=false;this._isFirstFrame=true;this._mdf=false;this.data=data;this.elem=elem;this.comp=this.elem.comp;this.keysIndex=0;this.canResize=false;this.minimumFontSize=1;this.effectsSequence=[];this.currentData={ascent:0,boxWidth:this.defaultBoxWidth,f:'',fStyle:'',fWeight:'',fc:'',j:'',justifyOffset:'',l:[],lh:0,lineWidths:[],ls:'',of:'',s:'',sc:'',sw:0,t:0,tr:0,sz:0,ps:null,fillColorAnim:false,strokeColorAnim:false,strokeWidthAnim:false,yOffset:0,finalSize:0,finalText:[],finalLineHeight:0,__complete:false};this.copyData(this.currentData,this.data.d.k[0].s);if(!this.searchProperty()){this.completeTextData(this.currentData);}}TextProperty.prototype.defaultBoxWidth=[0,0];TextProperty.prototype.copyData=function(obj,data){for(var s in data){if(Object.prototype.hasOwnProperty.call(data,s)){obj[s]=data[s];}}return obj;};TextProperty.prototype.setCurrentData=function(data){if(!data.__complete){this.completeTextData(data);}this.currentData=data;this.currentData.boxWidth=this.currentData.boxWidth||this.defaultBoxWidth;this._mdf=true;};TextProperty.prototype.searchProperty=function(){return this.searchKeyframes();};TextProperty.prototype.searchKeyframes=function(){this.kf=this.data.d.k.length>1;if(this.kf){this.addEffect(this.getKeyframeValue.bind(this));}return this.kf;};TextProperty.prototype.addEffect=function(effectFunction){this.effectsSequence.push(effectFunction);this.elem.addDynamicProperty(this);};TextProperty.prototype.getValue=function(_finalValue){if((this.elem.globalData.frameId===this.frameId||!this.effectsSequence.length)&&!_finalValue){return;}this.currentData.t=this.data.d.k[this.keysIndex].s.t;var currentValue=this.currentData;var currentIndex=this.keysIndex;if(this.lock){this.setCurrentData(this.currentData);return;}this.lock=true;this._mdf=false;var i;var len=this.effectsSequence.length;var finalValue=_finalValue||this.data.d.k[this.keysIndex].s;for(i=0;i<len;i+=1){// Checking if index changed to prevent creating a new object every time the expression updates.
if(currentIndex!==this.keysIndex){finalValue=this.effectsSequence[i](finalValue,finalValue.t);}else{finalValue=this.effectsSequence[i](this.currentData,finalValue.t);}}if(currentValue!==finalValue){this.setCurrentData(finalValue);}this.v=this.currentData;this.pv=this.v;this.lock=false;this.frameId=this.elem.globalData.frameId;};TextProperty.prototype.getKeyframeValue=function(){var textKeys=this.data.d.k;var frameNum=this.elem.comp.renderedFrame;var i=0;var len=textKeys.length;while(i<=len-1){if(i===len-1||textKeys[i+1].t>frameNum){break;}i+=1;}if(this.keysIndex!==i){this.keysIndex=i;}return this.data.d.k[this.keysIndex].s;};TextProperty.prototype.buildFinalText=function(text){var combinedCharacters=FontManager.getCombinedCharacterCodes();var charactersArray=[];var i=0;var len=text.length;var charCode;while(i<len){charCode=text.charCodeAt(i);if(combinedCharacters.indexOf(charCode)!==-1){charactersArray[charactersArray.length-1]+=text.charAt(i);}else if(charCode>=0xD800&&charCode<=0xDBFF){charCode=text.charCodeAt(i+1);if(charCode>=0xDC00&&charCode<=0xDFFF){charactersArray.push(text.substr(i,2));i+=1;}else{charactersArray.push(text.charAt(i));}}else{charactersArray.push(text.charAt(i));}i+=1;}return charactersArray;};TextProperty.prototype.completeTextData=function(documentData){documentData.__complete=true;var fontManager=this.elem.globalData.fontManager;var data=this.data;var letters=[];var i;var len;var newLineFlag;var index=0;var val;var anchorGrouping=data.m.g;var currentSize=0;var currentPos=0;var currentLine=0;var lineWidths=[];var lineWidth=0;var maxLineWidth=0;var j;var jLen;var fontData=fontManager.getFontByName(documentData.f);var charData;var cLength=0;var fontProps=getFontProperties(fontData);documentData.fWeight=fontProps.weight;documentData.fStyle=fontProps.style;documentData.finalSize=documentData.s;documentData.finalText=this.buildFinalText(documentData.t);len=documentData.finalText.length;documentData.finalLineHeight=documentData.lh;var trackingOffset=documentData.tr/1000*documentData.finalSize;var charCode;if(documentData.sz){var flag=true;var boxWidth=documentData.sz[0];var boxHeight=documentData.sz[1];var currentHeight;var finalText;while(flag){finalText=this.buildFinalText(documentData.t);currentHeight=0;lineWidth=0;len=finalText.length;trackingOffset=documentData.tr/1000*documentData.finalSize;var lastSpaceIndex=-1;for(i=0;i<len;i+=1){charCode=finalText[i].charCodeAt(0);newLineFlag=false;if(finalText[i]===' '){lastSpaceIndex=i;}else if(charCode===13||charCode===3){lineWidth=0;newLineFlag=true;currentHeight+=documentData.finalLineHeight||documentData.finalSize*1.2;}if(fontManager.chars){charData=fontManager.getCharData(finalText[i],fontData.fStyle,fontData.fFamily);cLength=newLineFlag?0:charData.w*documentData.finalSize/100;}else{// tCanvasHelper.font = documentData.s + 'px '+ fontData.fFamily;
cLength=fontManager.measureText(finalText[i],documentData.f,documentData.finalSize);}if(lineWidth+cLength>boxWidth&&finalText[i]!==' '){if(lastSpaceIndex===-1){len+=1;}else{i=lastSpaceIndex;}currentHeight+=documentData.finalLineHeight||documentData.finalSize*1.2;finalText.splice(i,lastSpaceIndex===i?1:0,'\r');// finalText = finalText.substr(0,i) + "\r" + finalText.substr(i === lastSpaceIndex ? i + 1 : i);
lastSpaceIndex=-1;lineWidth=0;}else{lineWidth+=cLength;lineWidth+=trackingOffset;}}currentHeight+=fontData.ascent*documentData.finalSize/100;if(this.canResize&&documentData.finalSize>this.minimumFontSize&&boxHeight<currentHeight){documentData.finalSize-=1;documentData.finalLineHeight=documentData.finalSize*documentData.lh/documentData.s;}else{documentData.finalText=finalText;len=documentData.finalText.length;flag=false;}}}lineWidth=-trackingOffset;cLength=0;var uncollapsedSpaces=0;var currentChar;for(i=0;i<len;i+=1){newLineFlag=false;currentChar=documentData.finalText[i];charCode=currentChar.charCodeAt(0);if(charCode===13||charCode===3){uncollapsedSpaces=0;lineWidths.push(lineWidth);maxLineWidth=lineWidth>maxLineWidth?lineWidth:maxLineWidth;lineWidth=-2*trackingOffset;val='';newLineFlag=true;currentLine+=1;}else{val=currentChar;}if(fontManager.chars){charData=fontManager.getCharData(currentChar,fontData.fStyle,fontManager.getFontByName(documentData.f).fFamily);cLength=newLineFlag?0:charData.w*documentData.finalSize/100;}else{// var charWidth = fontManager.measureText(val, documentData.f, documentData.finalSize);
// tCanvasHelper.font = documentData.finalSize + 'px '+ fontManager.getFontByName(documentData.f).fFamily;
cLength=fontManager.measureText(val,documentData.f,documentData.finalSize);}//
if(currentChar===' '){uncollapsedSpaces+=cLength+trackingOffset;}else{lineWidth+=cLength+trackingOffset+uncollapsedSpaces;uncollapsedSpaces=0;}letters.push({l:cLength,an:cLength,add:currentSize,n:newLineFlag,anIndexes:[],val:val,line:currentLine,animatorJustifyOffset:0});if(anchorGrouping==2){// eslint-disable-line eqeqeq
currentSize+=cLength;if(val===''||val===' '||i===len-1){if(val===''||val===' '){currentSize-=cLength;}while(currentPos<=i){letters[currentPos].an=currentSize;letters[currentPos].ind=index;letters[currentPos].extra=cLength;currentPos+=1;}index+=1;currentSize=0;}}else if(anchorGrouping==3){// eslint-disable-line eqeqeq
currentSize+=cLength;if(val===''||i===len-1){if(val===''){currentSize-=cLength;}while(currentPos<=i){letters[currentPos].an=currentSize;letters[currentPos].ind=index;letters[currentPos].extra=cLength;currentPos+=1;}currentSize=0;index+=1;}}else{letters[index].ind=index;letters[index].extra=0;index+=1;}}documentData.l=letters;maxLineWidth=lineWidth>maxLineWidth?lineWidth:maxLineWidth;lineWidths.push(lineWidth);if(documentData.sz){documentData.boxWidth=documentData.sz[0];documentData.justifyOffset=0;}else{documentData.boxWidth=maxLineWidth;switch(documentData.j){case 1:documentData.justifyOffset=-documentData.boxWidth;break;case 2:documentData.justifyOffset=-documentData.boxWidth/2;break;default:documentData.justifyOffset=0;}}documentData.lineWidths=lineWidths;var animators=data.a;var animatorData;var letterData;jLen=animators.length;var based;var ind;var indexes=[];for(j=0;j<jLen;j+=1){animatorData=animators[j];if(animatorData.a.sc){documentData.strokeColorAnim=true;}if(animatorData.a.sw){documentData.strokeWidthAnim=true;}if(animatorData.a.fc||animatorData.a.fh||animatorData.a.fs||animatorData.a.fb){documentData.fillColorAnim=true;}ind=0;based=animatorData.s.b;for(i=0;i<len;i+=1){letterData=letters[i];letterData.anIndexes[j]=ind;if(based==1&&letterData.val!==''||based==2&&letterData.val!==''&&letterData.val!==' '||based==3&&(letterData.n||letterData.val==' '||i==len-1)||based==4&&(letterData.n||i==len-1)){// eslint-disable-line eqeqeq
if(animatorData.s.rn===1){indexes.push(ind);}ind+=1;}}data.a[j].s.totalChars=ind;var currentInd=-1;var newInd;if(animatorData.s.rn===1){for(i=0;i<len;i+=1){letterData=letters[i];if(currentInd!=letterData.anIndexes[j]){// eslint-disable-line eqeqeq
currentInd=letterData.anIndexes[j];newInd=indexes.splice(Math.floor(Math.random()*indexes.length),1)[0];}letterData.anIndexes[j]=newInd;}}}documentData.yOffset=documentData.finalLineHeight||documentData.finalSize*1.2;documentData.ls=documentData.ls||0;documentData.ascent=fontData.ascent*documentData.finalSize/100;};TextProperty.prototype.updateDocumentData=function(newData,index){index=index===undefined?this.keysIndex:index;var dData=this.copyData({},this.data.d.k[index].s);dData=this.copyData(dData,newData);this.data.d.k[index].s=dData;this.recalculate(index);this.elem.addDynamicProperty(this);};TextProperty.prototype.recalculate=function(index){var dData=this.data.d.k[index].s;dData.__complete=false;this.keysIndex=0;this._isFirstFrame=true;this.getValue(dData);};TextProperty.prototype.canResizeFont=function(_canResize){this.canResize=_canResize;this.recalculate(this.keysIndex);this.elem.addDynamicProperty(this);};TextProperty.prototype.setMinimumFontSize=function(_fontValue){this.minimumFontSize=Math.floor(_fontValue)||1;this.recalculate(this.keysIndex);this.elem.addDynamicProperty(this);};/* global extendPrototype, BezierFactory, PropertyFactory, DynamicPropertyContainer *//* exported TextSelectorProp */var TextSelectorProp=function(){var max=Math.max;var min=Math.min;var floor=Math.floor;function TextSelectorPropFactory(elem,data){this._currentTextLength=-1;this.k=false;this.data=data;this.elem=elem;this.comp=elem.comp;this.finalS=0;this.finalE=0;this.initDynamicPropertyContainer(elem);this.s=PropertyFactory.getProp(elem,data.s||{k:0},0,0,this);if('e'in data){this.e=PropertyFactory.getProp(elem,data.e,0,0,this);}else{this.e={v:100};}this.o=PropertyFactory.getProp(elem,data.o||{k:0},0,0,this);this.xe=PropertyFactory.getProp(elem,data.xe||{k:0},0,0,this);this.ne=PropertyFactory.getProp(elem,data.ne||{k:0},0,0,this);this.a=PropertyFactory.getProp(elem,data.a,0,0.01,this);if(!this.dynamicProperties.length){this.getValue();}}TextSelectorPropFactory.prototype={getMult:function getMult(ind){if(this._currentTextLength!==this.elem.textProperty.currentData.l.length){this.getValue();}// var easer = bez.getEasingCurve(this.ne.v/100,0,1-this.xe.v/100,1);
var x1=0;var y1=0;var x2=1;var y2=1;if(this.ne.v>0){x1=this.ne.v/100.0;}else{y1=-this.ne.v/100.0;}if(this.xe.v>0){x2=1.0-this.xe.v/100.0;}else{y2=1.0+this.xe.v/100.0;}var easer=BezierFactory.getBezierEasing(x1,y1,x2,y2).get;var mult=0;var s=this.finalS;var e=this.finalE;var type=this.data.sh;if(type===2){if(e===s){mult=ind>=e?1:0;}else{mult=max(0,min(0.5/(e-s)+(ind-s)/(e-s),1));}mult=easer(mult);}else if(type===3){if(e===s){mult=ind>=e?0:1;}else{mult=1-max(0,min(0.5/(e-s)+(ind-s)/(e-s),1));}mult=easer(mult);}else if(type===4){if(e===s){mult=0;}else{mult=max(0,min(0.5/(e-s)+(ind-s)/(e-s),1));if(mult<0.5){mult*=2;}else{mult=1-2*(mult-0.5);}}mult=easer(mult);}else if(type===5){if(e===s){mult=0;}else{var tot=e-s;/* ind += 0.5;
                    mult = -4/(tot*tot)*(ind*ind)+(4/tot)*ind; */ind=min(max(0,ind+0.5-s),e-s);var x=-tot/2+ind;var a=tot/2;mult=Math.sqrt(1-x*x/(a*a));}mult=easer(mult);}else if(type===6){if(e===s){mult=0;}else{ind=min(max(0,ind+0.5-s),e-s);mult=(1+Math.cos(Math.PI+Math.PI*2*ind/(e-s)))/2;// eslint-disable-line
}mult=easer(mult);}else{if(ind>=floor(s)){if(ind-s<0){mult=max(0,min(min(e,1)-(s-ind),1));}else{mult=max(0,min(e-ind,1));}}mult=easer(mult);}return mult*this.a.v;},getValue:function getValue(newCharsFlag){this.iterateDynamicProperties();this._mdf=newCharsFlag||this._mdf;this._currentTextLength=this.elem.textProperty.currentData.l.length||0;if(newCharsFlag&&this.data.r===2){this.e.v=this._currentTextLength;}var divisor=this.data.r===2?1:100/this.data.totalChars;var o=this.o.v/divisor;var s=this.s.v/divisor+o;var e=this.e.v/divisor+o;if(s>e){var _s=s;s=e;e=_s;}this.finalS=s;this.finalE=e;}};extendPrototype([DynamicPropertyContainer],TextSelectorPropFactory);function getTextSelectorProp(elem,data,arr){return new TextSelectorPropFactory(elem,data,arr);}return{getTextSelectorProp:getTextSelectorProp};}();/* global createSizedArray, pooling *//* exported poolFactory */var poolFactory=function(){return function(initialLength,_create,_release){var _length=0;var _maxLength=initialLength;var pool=createSizedArray(_maxLength);var ob={newElement:newElement,release:release};function newElement(){var element;if(_length){_length-=1;element=pool[_length];}else{element=_create();}return element;}function release(element){if(_length===_maxLength){pool=pooling.double(pool);_maxLength*=2;}if(_release){_release(element);}pool[_length]=element;_length+=1;}return ob;};}();/* global createSizedArray *//* exported pooling */var pooling=function(){function double(arr){return arr.concat(createSizedArray(arr.length));}return{double:double};}();/* global createTypedArray, poolFactory *//* exported pointPool */var pointPool=function(){function create(){return createTypedArray('float32',2);}return poolFactory(8,create);}();/* global ShapePath, pointPool, poolFactory *//* exported shapePool */var shapePool=function(){function create(){return new ShapePath();}function release(shapePath){var len=shapePath._length;var i;for(i=0;i<len;i+=1){pointPool.release(shapePath.v[i]);pointPool.release(shapePath.i[i]);pointPool.release(shapePath.o[i]);shapePath.v[i]=null;shapePath.i[i]=null;shapePath.o[i]=null;}shapePath._length=0;shapePath.c=false;}function clone(shape){var cloned=factory.newElement();var i;var len=shape._length===undefined?shape.v.length:shape._length;cloned.setLength(len);cloned.c=shape.c;for(i=0;i<len;i+=1){cloned.setTripleAt(shape.v[i][0],shape.v[i][1],shape.o[i][0],shape.o[i][1],shape.i[i][0],shape.i[i][1],i);}return cloned;}var factory=poolFactory(4,create,release);factory.clone=clone;return factory;}();/* global createSizedArray, ShapeCollection, shapePool, pooling *//* exported shapeCollectionPool */var shapeCollectionPool=function(){var ob={newShapeCollection:newShapeCollection,release:release};var _length=0;var _maxLength=4;var pool=createSizedArray(_maxLength);function newShapeCollection(){var shapeCollection;if(_length){_length-=1;shapeCollection=pool[_length];}else{shapeCollection=new ShapeCollection();}return shapeCollection;}function release(shapeCollection){var i;var len=shapeCollection._length;for(i=0;i<len;i+=1){shapePool.release(shapeCollection.shapes[i]);}shapeCollection._length=0;if(_length===_maxLength){pool=pooling.double(pool);_maxLength*=2;}pool[_length]=shapeCollection;_length+=1;}return ob;}();/* global poolFactory, bezierLengthPool *//* exported segmentsLengthPool */var segmentsLengthPool=function(){function create(){return{lengths:[],totalLength:0};}function release(element){var i;var len=element.lengths.length;for(i=0;i<len;i+=1){bezierLengthPool.release(element.lengths[i]);}element.lengths.length=0;}return poolFactory(8,create,release);}();/* global createTypedArray, defaultCurveSegments, poolFactory *//* exported bezierLengthPool */var bezierLengthPool=function(){function create(){return{addedLength:0,percents:createTypedArray('float32',defaultCurveSegments),lengths:createTypedArray('float32',defaultCurveSegments)};}return poolFactory(8,create);}();/* exported markerParser */var markerParser=function(){function parsePayloadLines(payload){var lines=payload.split('\r\n');var keys={};var line;var keysCount=0;for(var i=0;i<lines.length;i+=1){line=lines[i].split(':');if(line.length===2){keys[line[0]]=line[1].trim();keysCount+=1;}}if(keysCount===0){throw new Error();}return keys;}return function(_markers){var markers=[];for(var i=0;i<_markers.length;i+=1){var _marker=_markers[i];var markerData={time:_marker.tm,duration:_marker.dr};try{markerData.payload=JSON.parse(_markers[i].cm);}catch(_){try{markerData.payload=parsePayloadLines(_markers[i].cm);}catch(__){markerData.payload={name:_markers[i]};}}markers.push(markerData);}return markers;};}();/* global AudioElement, FootageElement, FontManager */function BaseRenderer(){}BaseRenderer.prototype.checkLayers=function(num){var i;var len=this.layers.length;var data;this.completeLayers=true;for(i=len-1;i>=0;i-=1){if(!this.elements[i]){data=this.layers[i];if(data.ip-data.st<=num-this.layers[i].st&&data.op-data.st>num-this.layers[i].st){this.buildItem(i);}}this.completeLayers=this.elements[i]?this.completeLayers:false;}this.checkPendingElements();};BaseRenderer.prototype.createItem=function(layer){switch(layer.ty){case 2:return this.createImage(layer);case 0:return this.createComp(layer);case 1:return this.createSolid(layer);case 3:return this.createNull(layer);case 4:return this.createShape(layer);case 5:return this.createText(layer);case 6:return this.createAudio(layer);case 13:return this.createCamera(layer);case 15:return this.createFootage(layer);default:return this.createNull(layer);}};BaseRenderer.prototype.createCamera=function(){throw new Error('You\'re using a 3d camera. Try the html renderer.');};BaseRenderer.prototype.createAudio=function(data){return new AudioElement(data,this.globalData,this);};BaseRenderer.prototype.createFootage=function(data){return new FootageElement(data,this.globalData,this);};BaseRenderer.prototype.buildAllItems=function(){var i;var len=this.layers.length;for(i=0;i<len;i+=1){this.buildItem(i);}this.checkPendingElements();};BaseRenderer.prototype.includeLayers=function(newLayers){this.completeLayers=false;var i;var len=newLayers.length;var j;var jLen=this.layers.length;for(i=0;i<len;i+=1){j=0;while(j<jLen){if(this.layers[j].id===newLayers[i].id){this.layers[j]=newLayers[i];break;}j+=1;}}};BaseRenderer.prototype.setProjectInterface=function(pInterface){this.globalData.projectInterface=pInterface;};BaseRenderer.prototype.initItems=function(){if(!this.globalData.progressiveLoad){this.buildAllItems();}};BaseRenderer.prototype.buildElementParenting=function(element,parentName,hierarchy){var elements=this.elements;var layers=this.layers;var i=0;var len=layers.length;while(i<len){if(layers[i].ind==parentName){// eslint-disable-line eqeqeq
if(!elements[i]||elements[i]===true){this.buildItem(i);this.addPendingElement(element);}else{hierarchy.push(elements[i]);elements[i].setAsParent();if(layers[i].parent!==undefined){this.buildElementParenting(element,layers[i].parent,hierarchy);}else{element.setHierarchy(hierarchy);}}}i+=1;}};BaseRenderer.prototype.addPendingElement=function(element){this.pendingElements.push(element);};BaseRenderer.prototype.searchExtraCompositions=function(assets){var i;var len=assets.length;for(i=0;i<len;i+=1){if(assets[i].xt){var comp=this.createComp(assets[i]);comp.initExpressions();this.globalData.projectInterface.registerComposition(comp);}}};BaseRenderer.prototype.setupGlobalData=function(animData,fontsContainer){this.globalData.fontManager=new FontManager();this.globalData.fontManager.addChars(animData.chars);this.globalData.fontManager.addFonts(animData.fonts,fontsContainer);this.globalData.getAssetData=this.animationItem.getAssetData.bind(this.animationItem);this.globalData.getAssetsPath=this.animationItem.getAssetsPath.bind(this.animationItem);this.globalData.imageLoader=this.animationItem.imagePreloader;this.globalData.audioController=this.animationItem.audioController;this.globalData.frameId=0;this.globalData.frameRate=animData.fr;this.globalData.nm=animData.nm;this.globalData.compSize={w:animData.w,h:animData.h};};/* global createElementID, extendPrototype, BaseRenderer, NullElement, SVGShapeElement, SVGTextLottieElement,
IImageElement, SVGCompElement, ISolidElement, createNS, locationHref, createSizedArray, expressionsPlugin */function SVGRenderer(animationItem,config){this.animationItem=animationItem;this.layers=null;this.renderedFrame=-1;this.svgElement=createNS('svg');var ariaLabel='';if(config&&config.title){var titleElement=createNS('title');var titleId=createElementID();titleElement.setAttribute('id',titleId);titleElement.textContent=config.title;this.svgElement.appendChild(titleElement);ariaLabel+=titleId;}if(config&&config.description){var descElement=createNS('desc');var descId=createElementID();descElement.setAttribute('id',descId);descElement.textContent=config.description;this.svgElement.appendChild(descElement);ariaLabel+=' '+descId;}if(ariaLabel){this.svgElement.setAttribute('aria-labelledby',ariaLabel);}var defs=createNS('defs');this.svgElement.appendChild(defs);var maskElement=createNS('g');this.svgElement.appendChild(maskElement);this.layerElement=maskElement;this.renderConfig={preserveAspectRatio:config&&config.preserveAspectRatio||'xMidYMid meet',imagePreserveAspectRatio:config&&config.imagePreserveAspectRatio||'xMidYMid slice',progressiveLoad:config&&config.progressiveLoad||false,hideOnTransparent:!(config&&config.hideOnTransparent===false),viewBoxOnly:config&&config.viewBoxOnly||false,viewBoxSize:config&&config.viewBoxSize||false,className:config&&config.className||'',id:config&&config.id||'',focusable:config&&config.focusable,filterSize:{width:config&&config.filterSize&&config.filterSize.width||'100%',height:config&&config.filterSize&&config.filterSize.height||'100%',x:config&&config.filterSize&&config.filterSize.x||'0%',y:config&&config.filterSize&&config.filterSize.y||'0%'}};this.globalData={_mdf:false,frameNum:-1,defs:defs,renderConfig:this.renderConfig};this.elements=[];this.pendingElements=[];this.destroyed=false;this.rendererType='svg';}extendPrototype([BaseRenderer],SVGRenderer);SVGRenderer.prototype.createNull=function(data){return new NullElement(data,this.globalData,this);};SVGRenderer.prototype.createShape=function(data){return new SVGShapeElement(data,this.globalData,this);};SVGRenderer.prototype.createText=function(data){return new SVGTextLottieElement(data,this.globalData,this);};SVGRenderer.prototype.createImage=function(data){return new IImageElement(data,this.globalData,this);};SVGRenderer.prototype.createComp=function(data){return new SVGCompElement(data,this.globalData,this);};SVGRenderer.prototype.createSolid=function(data){return new ISolidElement(data,this.globalData,this);};SVGRenderer.prototype.configAnimation=function(animData){this.svgElement.setAttribute('xmlns','http://www.w3.org/2000/svg');if(this.renderConfig.viewBoxSize){this.svgElement.setAttribute('viewBox',this.renderConfig.viewBoxSize);}else{this.svgElement.setAttribute('viewBox','0 0 '+animData.w+' '+animData.h);}if(!this.renderConfig.viewBoxOnly){this.svgElement.setAttribute('width',animData.w);this.svgElement.setAttribute('height',animData.h);this.svgElement.style.width='100%';this.svgElement.style.height='100%';this.svgElement.style.transform='translate3d(0,0,0)';}if(this.renderConfig.className){this.svgElement.setAttribute('class',this.renderConfig.className);}if(this.renderConfig.id){this.svgElement.setAttribute('id',this.renderConfig.id);}if(this.renderConfig.focusable!==undefined){this.svgElement.setAttribute('focusable',this.renderConfig.focusable);}this.svgElement.setAttribute('preserveAspectRatio',this.renderConfig.preserveAspectRatio);// this.layerElement.style.transform = 'translate3d(0,0,0)';
// this.layerElement.style.transformOrigin = this.layerElement.style.mozTransformOrigin = this.layerElement.style.webkitTransformOrigin = this.layerElement.style['-webkit-transform'] = "0px 0px 0px";
this.animationItem.wrapper.appendChild(this.svgElement);// Mask animation
var defs=this.globalData.defs;this.setupGlobalData(animData,defs);this.globalData.progressiveLoad=this.renderConfig.progressiveLoad;this.data=animData;var maskElement=createNS('clipPath');var rect=createNS('rect');rect.setAttribute('width',animData.w);rect.setAttribute('height',animData.h);rect.setAttribute('x',0);rect.setAttribute('y',0);var maskId=createElementID();maskElement.setAttribute('id',maskId);maskElement.appendChild(rect);this.layerElement.setAttribute('clip-path','url('+locationHref+'#'+maskId+')');defs.appendChild(maskElement);this.layers=animData.layers;this.elements=createSizedArray(animData.layers.length);};SVGRenderer.prototype.destroy=function(){if(this.animationItem.wrapper){this.animationItem.wrapper.innerText='';}this.layerElement=null;this.globalData.defs=null;var i;var len=this.layers?this.layers.length:0;for(i=0;i<len;i+=1){if(this.elements[i]){this.elements[i].destroy();}}this.elements.length=0;this.destroyed=true;this.animationItem=null;};SVGRenderer.prototype.updateContainerSize=function(){};SVGRenderer.prototype.buildItem=function(pos){var elements=this.elements;if(elements[pos]||this.layers[pos].ty===99){return;}elements[pos]=true;var element=this.createItem(this.layers[pos]);elements[pos]=element;if(expressionsPlugin){if(this.layers[pos].ty===0){this.globalData.projectInterface.registerComposition(element);}element.initExpressions();}this.appendElementInPos(element,pos);if(this.layers[pos].tt){if(!this.elements[pos-1]||this.elements[pos-1]===true){this.buildItem(pos-1);this.addPendingElement(element);}else{element.setMatte(elements[pos-1].layerId);}}};SVGRenderer.prototype.checkPendingElements=function(){while(this.pendingElements.length){var element=this.pendingElements.pop();element.checkParenting();if(element.data.tt){var i=0;var len=this.elements.length;while(i<len){if(this.elements[i]===element){element.setMatte(this.elements[i-1].layerId);break;}i+=1;}}}};SVGRenderer.prototype.renderFrame=function(num){if(this.renderedFrame===num||this.destroyed){return;}if(num===null){num=this.renderedFrame;}else{this.renderedFrame=num;}// console.log('-------');
// console.log('FRAME ',num);
this.globalData.frameNum=num;this.globalData.frameId+=1;this.globalData.projectInterface.currentFrame=num;this.globalData._mdf=false;var i;var len=this.layers.length;if(!this.completeLayers){this.checkLayers(num);}for(i=len-1;i>=0;i-=1){if(this.completeLayers||this.elements[i]){this.elements[i].prepareFrame(num-this.layers[i].st);}}if(this.globalData._mdf){for(i=0;i<len;i+=1){if(this.completeLayers||this.elements[i]){this.elements[i].renderFrame();}}}};SVGRenderer.prototype.appendElementInPos=function(element,pos){var newElement=element.getBaseElement();if(!newElement){return;}var i=0;var nextElement;while(i<pos){if(this.elements[i]&&this.elements[i]!==true&&this.elements[i].getBaseElement()){nextElement=this.elements[i].getBaseElement();}i+=1;}if(nextElement){this.layerElement.insertBefore(newElement,nextElement);}else{this.layerElement.appendChild(newElement);}};SVGRenderer.prototype.hide=function(){this.layerElement.style.display='none';};SVGRenderer.prototype.show=function(){this.layerElement.style.display='block';};/* global CVContextData, Matrix, extendPrototype, BaseRenderer, CVShapeElement, CVTextElement,
CVImageElement, CVCompElement, CVSolidElement, SVGRenderer, createTag, createSizedArray */function CanvasRenderer(animationItem,config){this.animationItem=animationItem;this.renderConfig={clearCanvas:config&&config.clearCanvas!==undefined?config.clearCanvas:true,context:config&&config.context||null,progressiveLoad:config&&config.progressiveLoad||false,preserveAspectRatio:config&&config.preserveAspectRatio||'xMidYMid meet',imagePreserveAspectRatio:config&&config.imagePreserveAspectRatio||'xMidYMid slice',className:config&&config.className||'',id:config&&config.id||''};this.renderConfig.dpr=config&&config.dpr||1;if(this.animationItem.wrapper){this.renderConfig.dpr=config&&config.dpr||window.devicePixelRatio||1;}this.renderedFrame=-1;this.globalData={frameNum:-1,_mdf:false,renderConfig:this.renderConfig,currentGlobalAlpha:-1};this.contextData=new CVContextData();this.elements=[];this.pendingElements=[];this.transformMat=new Matrix();this.completeLayers=false;this.rendererType='canvas';}extendPrototype([BaseRenderer],CanvasRenderer);CanvasRenderer.prototype.createShape=function(data){return new CVShapeElement(data,this.globalData,this);};CanvasRenderer.prototype.createText=function(data){return new CVTextElement(data,this.globalData,this);};CanvasRenderer.prototype.createImage=function(data){return new CVImageElement(data,this.globalData,this);};CanvasRenderer.prototype.createComp=function(data){return new CVCompElement(data,this.globalData,this);};CanvasRenderer.prototype.createSolid=function(data){return new CVSolidElement(data,this.globalData,this);};CanvasRenderer.prototype.createNull=SVGRenderer.prototype.createNull;CanvasRenderer.prototype.ctxTransform=function(props){if(props[0]===1&&props[1]===0&&props[4]===0&&props[5]===1&&props[12]===0&&props[13]===0){return;}if(!this.renderConfig.clearCanvas){this.canvasContext.transform(props[0],props[1],props[4],props[5],props[12],props[13]);return;}this.transformMat.cloneFromProps(props);var cProps=this.contextData.cTr.props;this.transformMat.transform(cProps[0],cProps[1],cProps[2],cProps[3],cProps[4],cProps[5],cProps[6],cProps[7],cProps[8],cProps[9],cProps[10],cProps[11],cProps[12],cProps[13],cProps[14],cProps[15]);// this.contextData.cTr.transform(props[0],props[1],props[2],props[3],props[4],props[5],props[6],props[7],props[8],props[9],props[10],props[11],props[12],props[13],props[14],props[15]);
this.contextData.cTr.cloneFromProps(this.transformMat.props);var trProps=this.contextData.cTr.props;this.canvasContext.setTransform(trProps[0],trProps[1],trProps[4],trProps[5],trProps[12],trProps[13]);};CanvasRenderer.prototype.ctxOpacity=function(op){/* if(op === 1){
        return;
    } */if(!this.renderConfig.clearCanvas){this.canvasContext.globalAlpha*=op<0?0:op;this.globalData.currentGlobalAlpha=this.contextData.cO;return;}this.contextData.cO*=op<0?0:op;if(this.globalData.currentGlobalAlpha!==this.contextData.cO){this.canvasContext.globalAlpha=this.contextData.cO;this.globalData.currentGlobalAlpha=this.contextData.cO;}};CanvasRenderer.prototype.reset=function(){if(!this.renderConfig.clearCanvas){this.canvasContext.restore();return;}this.contextData.reset();};CanvasRenderer.prototype.save=function(actionFlag){if(!this.renderConfig.clearCanvas){this.canvasContext.save();return;}if(actionFlag){this.canvasContext.save();}var props=this.contextData.cTr.props;if(this.contextData._length<=this.contextData.cArrPos){this.contextData.duplicate();}var i;var arr=this.contextData.saved[this.contextData.cArrPos];for(i=0;i<16;i+=1){arr[i]=props[i];}this.contextData.savedOp[this.contextData.cArrPos]=this.contextData.cO;this.contextData.cArrPos+=1;};CanvasRenderer.prototype.restore=function(actionFlag){if(!this.renderConfig.clearCanvas){this.canvasContext.restore();return;}if(actionFlag){this.canvasContext.restore();this.globalData.blendMode='source-over';}this.contextData.cArrPos-=1;var popped=this.contextData.saved[this.contextData.cArrPos];var i;var arr=this.contextData.cTr.props;for(i=0;i<16;i+=1){arr[i]=popped[i];}this.canvasContext.setTransform(popped[0],popped[1],popped[4],popped[5],popped[12],popped[13]);popped=this.contextData.savedOp[this.contextData.cArrPos];this.contextData.cO=popped;if(this.globalData.currentGlobalAlpha!==popped){this.canvasContext.globalAlpha=popped;this.globalData.currentGlobalAlpha=popped;}};CanvasRenderer.prototype.configAnimation=function(animData){if(this.animationItem.wrapper){this.animationItem.container=createTag('canvas');var containerStyle=this.animationItem.container.style;containerStyle.width='100%';containerStyle.height='100%';var origin='0px 0px 0px';containerStyle.transformOrigin=origin;containerStyle.mozTransformOrigin=origin;containerStyle.webkitTransformOrigin=origin;containerStyle['-webkit-transform']=origin;this.animationItem.wrapper.appendChild(this.animationItem.container);this.canvasContext=this.animationItem.container.getContext('2d');if(this.renderConfig.className){this.animationItem.container.setAttribute('class',this.renderConfig.className);}if(this.renderConfig.id){this.animationItem.container.setAttribute('id',this.renderConfig.id);}}else{this.canvasContext=this.renderConfig.context;}this.data=animData;this.layers=animData.layers;this.transformCanvas={w:animData.w,h:animData.h,sx:0,sy:0,tx:0,ty:0};this.setupGlobalData(animData,document.body);this.globalData.canvasContext=this.canvasContext;this.globalData.renderer=this;this.globalData.isDashed=false;this.globalData.progressiveLoad=this.renderConfig.progressiveLoad;this.globalData.transformCanvas=this.transformCanvas;this.elements=createSizedArray(animData.layers.length);this.updateContainerSize();};CanvasRenderer.prototype.updateContainerSize=function(){this.reset();var elementWidth;var elementHeight;if(this.animationItem.wrapper&&this.animationItem.container){elementWidth=this.animationItem.wrapper.offsetWidth;elementHeight=this.animationItem.wrapper.offsetHeight;this.animationItem.container.setAttribute('width',elementWidth*this.renderConfig.dpr);this.animationItem.container.setAttribute('height',elementHeight*this.renderConfig.dpr);}else{elementWidth=this.canvasContext.canvas.width*this.renderConfig.dpr;elementHeight=this.canvasContext.canvas.height*this.renderConfig.dpr;}var elementRel;var animationRel;if(this.renderConfig.preserveAspectRatio.indexOf('meet')!==-1||this.renderConfig.preserveAspectRatio.indexOf('slice')!==-1){var par=this.renderConfig.preserveAspectRatio.split(' ');var fillType=par[1]||'meet';var pos=par[0]||'xMidYMid';var xPos=pos.substr(0,4);var yPos=pos.substr(4);elementRel=elementWidth/elementHeight;animationRel=this.transformCanvas.w/this.transformCanvas.h;if(animationRel>elementRel&&fillType==='meet'||animationRel<elementRel&&fillType==='slice'){this.transformCanvas.sx=elementWidth/(this.transformCanvas.w/this.renderConfig.dpr);this.transformCanvas.sy=elementWidth/(this.transformCanvas.w/this.renderConfig.dpr);}else{this.transformCanvas.sx=elementHeight/(this.transformCanvas.h/this.renderConfig.dpr);this.transformCanvas.sy=elementHeight/(this.transformCanvas.h/this.renderConfig.dpr);}if(xPos==='xMid'&&(animationRel<elementRel&&fillType==='meet'||animationRel>elementRel&&fillType==='slice')){this.transformCanvas.tx=(elementWidth-this.transformCanvas.w*(elementHeight/this.transformCanvas.h))/2*this.renderConfig.dpr;}else if(xPos==='xMax'&&(animationRel<elementRel&&fillType==='meet'||animationRel>elementRel&&fillType==='slice')){this.transformCanvas.tx=(elementWidth-this.transformCanvas.w*(elementHeight/this.transformCanvas.h))*this.renderConfig.dpr;}else{this.transformCanvas.tx=0;}if(yPos==='YMid'&&(animationRel>elementRel&&fillType==='meet'||animationRel<elementRel&&fillType==='slice')){this.transformCanvas.ty=(elementHeight-this.transformCanvas.h*(elementWidth/this.transformCanvas.w))/2*this.renderConfig.dpr;}else if(yPos==='YMax'&&(animationRel>elementRel&&fillType==='meet'||animationRel<elementRel&&fillType==='slice')){this.transformCanvas.ty=(elementHeight-this.transformCanvas.h*(elementWidth/this.transformCanvas.w))*this.renderConfig.dpr;}else{this.transformCanvas.ty=0;}}else if(this.renderConfig.preserveAspectRatio==='none'){this.transformCanvas.sx=elementWidth/(this.transformCanvas.w/this.renderConfig.dpr);this.transformCanvas.sy=elementHeight/(this.transformCanvas.h/this.renderConfig.dpr);this.transformCanvas.tx=0;this.transformCanvas.ty=0;}else{this.transformCanvas.sx=this.renderConfig.dpr;this.transformCanvas.sy=this.renderConfig.dpr;this.transformCanvas.tx=0;this.transformCanvas.ty=0;}this.transformCanvas.props=[this.transformCanvas.sx,0,0,0,0,this.transformCanvas.sy,0,0,0,0,1,0,this.transformCanvas.tx,this.transformCanvas.ty,0,1];/* var i, len = this.elements.length;
    for(i=0;i<len;i+=1){
        if(this.elements[i] && this.elements[i].data.ty === 0){
            this.elements[i].resize(this.globalData.transformCanvas);
        }
    } */this.ctxTransform(this.transformCanvas.props);this.canvasContext.beginPath();this.canvasContext.rect(0,0,this.transformCanvas.w,this.transformCanvas.h);this.canvasContext.closePath();this.canvasContext.clip();this.renderFrame(this.renderedFrame,true);};CanvasRenderer.prototype.destroy=function(){if(this.renderConfig.clearCanvas&&this.animationItem.wrapper){this.animationItem.wrapper.innerText='';}var i;var len=this.layers?this.layers.length:0;for(i=len-1;i>=0;i-=1){if(this.elements[i]){this.elements[i].destroy();}}this.elements.length=0;this.globalData.canvasContext=null;this.animationItem.container=null;this.destroyed=true;};CanvasRenderer.prototype.renderFrame=function(num,forceRender){if(this.renderedFrame===num&&this.renderConfig.clearCanvas===true&&!forceRender||this.destroyed||num===-1){return;}this.renderedFrame=num;this.globalData.frameNum=num-this.animationItem._isFirstFrame;this.globalData.frameId+=1;this.globalData._mdf=!this.renderConfig.clearCanvas||forceRender;this.globalData.projectInterface.currentFrame=num;// console.log('--------');
// console.log('NEW: ',num);
var i;var len=this.layers.length;if(!this.completeLayers){this.checkLayers(num);}for(i=0;i<len;i+=1){if(this.completeLayers||this.elements[i]){this.elements[i].prepareFrame(num-this.layers[i].st);}}if(this.globalData._mdf){if(this.renderConfig.clearCanvas===true){this.canvasContext.clearRect(0,0,this.transformCanvas.w,this.transformCanvas.h);}else{this.save();}for(i=len-1;i>=0;i-=1){if(this.completeLayers||this.elements[i]){this.elements[i].renderFrame();}}if(this.renderConfig.clearCanvas!==true){this.restore();}}};CanvasRenderer.prototype.buildItem=function(pos){var elements=this.elements;if(elements[pos]||this.layers[pos].ty===99){return;}var element=this.createItem(this.layers[pos],this,this.globalData);elements[pos]=element;element.initExpressions();/* if(this.layers[pos].ty === 0){
        element.resize(this.globalData.transformCanvas);
    } */};CanvasRenderer.prototype.checkPendingElements=function(){while(this.pendingElements.length){var element=this.pendingElements.pop();element.checkParenting();}};CanvasRenderer.prototype.hide=function(){this.animationItem.container.style.display='none';};CanvasRenderer.prototype.show=function(){this.animationItem.container.style.display='block';};/* global extendPrototype, BaseRenderer, SVGRenderer, SVGShapeElement, HShapeElement, SVGTextLottieElement,
HTextElement, HCameraElement, IImageElement, HImageElement, SVGCompElement, HCompElement, ISolidElement,
HSolidElement, styleDiv, createTag, createNS */function HybridRenderer(animationItem,config){this.animationItem=animationItem;this.layers=null;this.renderedFrame=-1;this.renderConfig={className:config&&config.className||'',imagePreserveAspectRatio:config&&config.imagePreserveAspectRatio||'xMidYMid slice',hideOnTransparent:!(config&&config.hideOnTransparent===false),filterSize:{width:config&&config.filterSize&&config.filterSize.width||'400%',height:config&&config.filterSize&&config.filterSize.height||'400%',x:config&&config.filterSize&&config.filterSize.x||'-100%',y:config&&config.filterSize&&config.filterSize.y||'-100%'}};this.globalData={_mdf:false,frameNum:-1,renderConfig:this.renderConfig};this.pendingElements=[];this.elements=[];this.threeDElements=[];this.destroyed=false;this.camera=null;this.supports3d=true;this.rendererType='html';}extendPrototype([BaseRenderer],HybridRenderer);HybridRenderer.prototype.buildItem=SVGRenderer.prototype.buildItem;HybridRenderer.prototype.checkPendingElements=function(){while(this.pendingElements.length){var element=this.pendingElements.pop();element.checkParenting();}};HybridRenderer.prototype.appendElementInPos=function(element,pos){var newDOMElement=element.getBaseElement();if(!newDOMElement){return;}var layer=this.layers[pos];if(!layer.ddd||!this.supports3d){if(this.threeDElements){this.addTo3dContainer(newDOMElement,pos);}else{var i=0;var nextDOMElement;var nextLayer;var tmpDOMElement;while(i<pos){if(this.elements[i]&&this.elements[i]!==true&&this.elements[i].getBaseElement){nextLayer=this.elements[i];tmpDOMElement=this.layers[i].ddd?this.getThreeDContainerByPos(i):nextLayer.getBaseElement();nextDOMElement=tmpDOMElement||nextDOMElement;}i+=1;}if(nextDOMElement){if(!layer.ddd||!this.supports3d){this.layerElement.insertBefore(newDOMElement,nextDOMElement);}}else if(!layer.ddd||!this.supports3d){this.layerElement.appendChild(newDOMElement);}}}else{this.addTo3dContainer(newDOMElement,pos);}};HybridRenderer.prototype.createShape=function(data){if(!this.supports3d){return new SVGShapeElement(data,this.globalData,this);}return new HShapeElement(data,this.globalData,this);};HybridRenderer.prototype.createText=function(data){if(!this.supports3d){return new SVGTextLottieElement(data,this.globalData,this);}return new HTextElement(data,this.globalData,this);};HybridRenderer.prototype.createCamera=function(data){this.camera=new HCameraElement(data,this.globalData,this);return this.camera;};HybridRenderer.prototype.createImage=function(data){if(!this.supports3d){return new IImageElement(data,this.globalData,this);}return new HImageElement(data,this.globalData,this);};HybridRenderer.prototype.createComp=function(data){if(!this.supports3d){return new SVGCompElement(data,this.globalData,this);}return new HCompElement(data,this.globalData,this);};HybridRenderer.prototype.createSolid=function(data){if(!this.supports3d){return new ISolidElement(data,this.globalData,this);}return new HSolidElement(data,this.globalData,this);};HybridRenderer.prototype.createNull=SVGRenderer.prototype.createNull;HybridRenderer.prototype.getThreeDContainerByPos=function(pos){var i=0;var len=this.threeDElements.length;while(i<len){if(this.threeDElements[i].startPos<=pos&&this.threeDElements[i].endPos>=pos){return this.threeDElements[i].perspectiveElem;}i+=1;}return null;};HybridRenderer.prototype.createThreeDContainer=function(pos,type){var perspectiveElem=createTag('div');var style;var containerStyle;styleDiv(perspectiveElem);var container=createTag('div');styleDiv(container);if(type==='3d'){style=perspectiveElem.style;style.width=this.globalData.compSize.w+'px';style.height=this.globalData.compSize.h+'px';var center='50% 50%';style.webkitTransformOrigin=center;style.mozTransformOrigin=center;style.transformOrigin=center;containerStyle=container.style;var matrix='matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)';containerStyle.transform=matrix;containerStyle.webkitTransform=matrix;}perspectiveElem.appendChild(container);// this.resizerElem.appendChild(perspectiveElem);
var threeDContainerData={container:container,perspectiveElem:perspectiveElem,startPos:pos,endPos:pos,type:type};this.threeDElements.push(threeDContainerData);return threeDContainerData;};HybridRenderer.prototype.build3dContainers=function(){var i;var len=this.layers.length;var lastThreeDContainerData;var currentContainer='';for(i=0;i<len;i+=1){if(this.layers[i].ddd&&this.layers[i].ty!==3){if(currentContainer!=='3d'){currentContainer='3d';lastThreeDContainerData=this.createThreeDContainer(i,'3d');}lastThreeDContainerData.endPos=Math.max(lastThreeDContainerData.endPos,i);}else{if(currentContainer!=='2d'){currentContainer='2d';lastThreeDContainerData=this.createThreeDContainer(i,'2d');}lastThreeDContainerData.endPos=Math.max(lastThreeDContainerData.endPos,i);}}len=this.threeDElements.length;for(i=len-1;i>=0;i-=1){this.resizerElem.appendChild(this.threeDElements[i].perspectiveElem);}};HybridRenderer.prototype.addTo3dContainer=function(elem,pos){var i=0;var len=this.threeDElements.length;while(i<len){if(pos<=this.threeDElements[i].endPos){var j=this.threeDElements[i].startPos;var nextElement;while(j<pos){if(this.elements[j]&&this.elements[j].getBaseElement){nextElement=this.elements[j].getBaseElement();}j+=1;}if(nextElement){this.threeDElements[i].container.insertBefore(elem,nextElement);}else{this.threeDElements[i].container.appendChild(elem);}break;}i+=1;}};HybridRenderer.prototype.configAnimation=function(animData){var resizerElem=createTag('div');var wrapper=this.animationItem.wrapper;var style=resizerElem.style;style.width=animData.w+'px';style.height=animData.h+'px';this.resizerElem=resizerElem;styleDiv(resizerElem);style.transformStyle='flat';style.mozTransformStyle='flat';style.webkitTransformStyle='flat';if(this.renderConfig.className){resizerElem.setAttribute('class',this.renderConfig.className);}wrapper.appendChild(resizerElem);style.overflow='hidden';var svg=createNS('svg');svg.setAttribute('width','1');svg.setAttribute('height','1');styleDiv(svg);this.resizerElem.appendChild(svg);var defs=createNS('defs');svg.appendChild(defs);this.data=animData;// Mask animation
this.setupGlobalData(animData,svg);this.globalData.defs=defs;this.layers=animData.layers;this.layerElement=this.resizerElem;this.build3dContainers();this.updateContainerSize();};HybridRenderer.prototype.destroy=function(){if(this.animationItem.wrapper){this.animationItem.wrapper.innerText='';}this.animationItem.container=null;this.globalData.defs=null;var i;var len=this.layers?this.layers.length:0;for(i=0;i<len;i+=1){this.elements[i].destroy();}this.elements.length=0;this.destroyed=true;this.animationItem=null;};HybridRenderer.prototype.updateContainerSize=function(){var elementWidth=this.animationItem.wrapper.offsetWidth;var elementHeight=this.animationItem.wrapper.offsetHeight;var elementRel=elementWidth/elementHeight;var animationRel=this.globalData.compSize.w/this.globalData.compSize.h;var sx;var sy;var tx;var ty;if(animationRel>elementRel){sx=elementWidth/this.globalData.compSize.w;sy=elementWidth/this.globalData.compSize.w;tx=0;ty=(elementHeight-this.globalData.compSize.h*(elementWidth/this.globalData.compSize.w))/2;}else{sx=elementHeight/this.globalData.compSize.h;sy=elementHeight/this.globalData.compSize.h;tx=(elementWidth-this.globalData.compSize.w*(elementHeight/this.globalData.compSize.h))/2;ty=0;}var style=this.resizerElem.style;style.webkitTransform='matrix3d('+sx+',0,0,0,0,'+sy+',0,0,0,0,1,0,'+tx+','+ty+',0,1)';style.transform=style.webkitTransform;};HybridRenderer.prototype.renderFrame=SVGRenderer.prototype.renderFrame;HybridRenderer.prototype.hide=function(){this.resizerElem.style.display='none';};HybridRenderer.prototype.show=function(){this.resizerElem.style.display='block';};HybridRenderer.prototype.initItems=function(){this.buildAllItems();if(this.camera){this.camera.setup();}else{var cWidth=this.globalData.compSize.w;var cHeight=this.globalData.compSize.h;var i;var len=this.threeDElements.length;for(i=0;i<len;i+=1){var style=this.threeDElements[i].perspectiveElem.style;style.webkitPerspective=Math.sqrt(Math.pow(cWidth,2)+Math.pow(cHeight,2))+'px';style.perspective=style.webkitPerspective;}}};HybridRenderer.prototype.searchExtraCompositions=function(assets){var i;var len=assets.length;var floatingContainer=createTag('div');for(i=0;i<len;i+=1){if(assets[i].xt){var comp=this.createComp(assets[i],floatingContainer,this.globalData.comp,null);comp.initExpressions();this.globalData.projectInterface.registerComposition(comp);}}};/* global createSizedArray, createElementID, PropertyFactory, ShapePropertyFactory, createNS, locationHref */function MaskElement(data,element,globalData){this.data=data;this.element=element;this.globalData=globalData;this.storedData=[];this.masksProperties=this.data.masksProperties||[];this.maskElement=null;var defs=this.globalData.defs;var i;var len=this.masksProperties?this.masksProperties.length:0;this.viewData=createSizedArray(len);this.solidPath='';var path;var properties=this.masksProperties;var count=0;var currentMasks=[];var j;var jLen;var layerId=createElementID();var rect;var expansor;var feMorph;var x;var maskType='clipPath';var maskRef='clip-path';for(i=0;i<len;i+=1){if(properties[i].mode!=='a'&&properties[i].mode!=='n'||properties[i].inv||properties[i].o.k!==100||properties[i].o.x){maskType='mask';maskRef='mask';}if((properties[i].mode==='s'||properties[i].mode==='i')&&count===0){rect=createNS('rect');rect.setAttribute('fill','#ffffff');rect.setAttribute('width',this.element.comp.data.w||0);rect.setAttribute('height',this.element.comp.data.h||0);currentMasks.push(rect);}else{rect=null;}path=createNS('path');if(properties[i].mode==='n'){// TODO move this to a factory or to a constructor
this.viewData[i]={op:PropertyFactory.getProp(this.element,properties[i].o,0,0.01,this.element),prop:ShapePropertyFactory.getShapeProp(this.element,properties[i],3),elem:path,lastPath:''};defs.appendChild(path);}else{count+=1;path.setAttribute('fill',properties[i].mode==='s'?'#000000':'#ffffff');path.setAttribute('clip-rule','nonzero');var filterID;if(properties[i].x.k!==0){maskType='mask';maskRef='mask';x=PropertyFactory.getProp(this.element,properties[i].x,0,null,this.element);filterID=createElementID();expansor=createNS('filter');expansor.setAttribute('id',filterID);feMorph=createNS('feMorphology');feMorph.setAttribute('operator','erode');feMorph.setAttribute('in','SourceGraphic');feMorph.setAttribute('radius','0');expansor.appendChild(feMorph);defs.appendChild(expansor);path.setAttribute('stroke',properties[i].mode==='s'?'#000000':'#ffffff');}else{feMorph=null;x=null;}// TODO move this to a factory or to a constructor
this.storedData[i]={elem:path,x:x,expan:feMorph,lastPath:'',lastOperator:'',filterId:filterID,lastRadius:0};if(properties[i].mode==='i'){jLen=currentMasks.length;var g=createNS('g');for(j=0;j<jLen;j+=1){g.appendChild(currentMasks[j]);}var mask=createNS('mask');mask.setAttribute('mask-type','alpha');mask.setAttribute('id',layerId+'_'+count);mask.appendChild(path);defs.appendChild(mask);g.setAttribute('mask','url('+locationHref+'#'+layerId+'_'+count+')');currentMasks.length=0;currentMasks.push(g);}else{currentMasks.push(path);}if(properties[i].inv&&!this.solidPath){this.solidPath=this.createLayerSolidPath();}// TODO move this to a factory or to a constructor
this.viewData[i]={elem:path,lastPath:'',op:PropertyFactory.getProp(this.element,properties[i].o,0,0.01,this.element),prop:ShapePropertyFactory.getShapeProp(this.element,properties[i],3),invRect:rect};if(!this.viewData[i].prop.k){this.drawPath(properties[i],this.viewData[i].prop.v,this.viewData[i]);}}}this.maskElement=createNS(maskType);len=currentMasks.length;for(i=0;i<len;i+=1){this.maskElement.appendChild(currentMasks[i]);}if(count>0){this.maskElement.setAttribute('id',layerId);this.element.maskedElement.setAttribute(maskRef,'url('+locationHref+'#'+layerId+')');defs.appendChild(this.maskElement);}if(this.viewData.length){this.element.addRenderableComponent(this);}}MaskElement.prototype.getMaskProperty=function(pos){return this.viewData[pos].prop;};MaskElement.prototype.renderFrame=function(isFirstFrame){var finalMat=this.element.finalTransform.mat;var i;var len=this.masksProperties.length;for(i=0;i<len;i+=1){if(this.viewData[i].prop._mdf||isFirstFrame){this.drawPath(this.masksProperties[i],this.viewData[i].prop.v,this.viewData[i]);}if(this.viewData[i].op._mdf||isFirstFrame){this.viewData[i].elem.setAttribute('fill-opacity',this.viewData[i].op.v);}if(this.masksProperties[i].mode!=='n'){if(this.viewData[i].invRect&&(this.element.finalTransform.mProp._mdf||isFirstFrame)){this.viewData[i].invRect.setAttribute('transform',finalMat.getInverseMatrix().to2dCSS());}if(this.storedData[i].x&&(this.storedData[i].x._mdf||isFirstFrame)){var feMorph=this.storedData[i].expan;if(this.storedData[i].x.v<0){if(this.storedData[i].lastOperator!=='erode'){this.storedData[i].lastOperator='erode';this.storedData[i].elem.setAttribute('filter','url('+locationHref+'#'+this.storedData[i].filterId+')');}feMorph.setAttribute('radius',-this.storedData[i].x.v);}else{if(this.storedData[i].lastOperator!=='dilate'){this.storedData[i].lastOperator='dilate';this.storedData[i].elem.setAttribute('filter',null);}this.storedData[i].elem.setAttribute('stroke-width',this.storedData[i].x.v*2);}}}}};MaskElement.prototype.getMaskelement=function(){return this.maskElement;};MaskElement.prototype.createLayerSolidPath=function(){var path='M0,0 ';path+=' h'+this.globalData.compSize.w;path+=' v'+this.globalData.compSize.h;path+=' h-'+this.globalData.compSize.w;path+=' v-'+this.globalData.compSize.h+' ';return path;};MaskElement.prototype.drawPath=function(pathData,pathNodes,viewData){var pathString=' M'+pathNodes.v[0][0]+','+pathNodes.v[0][1];var i;var len;len=pathNodes._length;for(i=1;i<len;i+=1){// pathString += " C"+pathNodes.o[i-1][0]+','+pathNodes.o[i-1][1] + " "+pathNodes.i[i][0]+','+pathNodes.i[i][1] + " "+pathNodes.v[i][0]+','+pathNodes.v[i][1];
pathString+=' C'+pathNodes.o[i-1][0]+','+pathNodes.o[i-1][1]+' '+pathNodes.i[i][0]+','+pathNodes.i[i][1]+' '+pathNodes.v[i][0]+','+pathNodes.v[i][1];}// pathString += " C"+pathNodes.o[i-1][0]+','+pathNodes.o[i-1][1] + " "+pathNodes.i[0][0]+','+pathNodes.i[0][1] + " "+pathNodes.v[0][0]+','+pathNodes.v[0][1];
if(pathNodes.c&&len>1){pathString+=' C'+pathNodes.o[i-1][0]+','+pathNodes.o[i-1][1]+' '+pathNodes.i[0][0]+','+pathNodes.i[0][1]+' '+pathNodes.v[0][0]+','+pathNodes.v[0][1];}// pathNodes.__renderedString = pathString;
if(viewData.lastPath!==pathString){var pathShapeValue='';if(viewData.elem){if(pathNodes.c){pathShapeValue=pathData.inv?this.solidPath+pathString:pathString;}viewData.elem.setAttribute('d',pathShapeValue);}viewData.lastPath=pathString;}};MaskElement.prototype.destroy=function(){this.element=null;this.globalData=null;this.maskElement=null;this.data=null;this.masksProperties=null;};/**
 * @file
 * Handles AE's layer parenting property.
 *
 */function HierarchyElement(){}HierarchyElement.prototype={/**
     * @function
     * Initializes hierarchy properties
     *
     */initHierarchy:function initHierarchy(){// element's parent list
this.hierarchy=[];// if element is parent of another layer _isParent will be true
this._isParent=false;this.checkParenting();},/**
     * @function
     * Sets layer's hierarchy.
     * @param {array} hierarch
     * layer's parent list
     *
     */setHierarchy:function setHierarchy(hierarchy){this.hierarchy=hierarchy;},/**
     * @function
     * Sets layer as parent.
     *
     */setAsParent:function setAsParent(){this._isParent=true;},/**
     * @function
     * Searches layer's parenting chain
     *
     */checkParenting:function checkParenting(){if(this.data.parent!==undefined){this.comp.buildElementParenting(this,this.data.parent,[]);}}};/**
 * @file
 * Handles element's layer frame update.
 * Checks layer in point and out point
 *
 */function FrameElement(){}FrameElement.prototype={/**
     * @function
     * Initializes frame related properties.
     *
     */initFrame:function initFrame(){// set to true when inpoint is rendered
this._isFirstFrame=false;// list of animated properties
this.dynamicProperties=[];// If layer has been modified in current tick this will be true
this._mdf=false;},/**
     * @function
     * Calculates all dynamic values
     *
     * @param {number} num
     * current frame number in Layer's time
     * @param {boolean} isVisible
     * if layers is currently in range
     *
     */prepareProperties:function prepareProperties(num,isVisible){var i;var len=this.dynamicProperties.length;for(i=0;i<len;i+=1){if(isVisible||this._isParent&&this.dynamicProperties[i].propType==='transform'){this.dynamicProperties[i].getValue();if(this.dynamicProperties[i]._mdf){this.globalData._mdf=true;this._mdf=true;}}}},addDynamicProperty:function addDynamicProperty(prop){if(this.dynamicProperties.indexOf(prop)===-1){this.dynamicProperties.push(prop);}}};/* global TransformPropertyFactory, Matrix */function TransformElement(){}TransformElement.prototype={initTransform:function initTransform(){this.finalTransform={mProp:this.data.ks?TransformPropertyFactory.getTransformProperty(this,this.data.ks,this):{o:0},_matMdf:false,_opMdf:false,mat:new Matrix()};if(this.data.ao){this.finalTransform.mProp.autoOriented=true;}// TODO: check TYPE 11: Guided elements
if(this.data.ty!==11){// this.createElements();
}},renderTransform:function renderTransform(){this.finalTransform._opMdf=this.finalTransform.mProp.o._mdf||this._isFirstFrame;this.finalTransform._matMdf=this.finalTransform.mProp._mdf||this._isFirstFrame;if(this.hierarchy){var mat;var finalMat=this.finalTransform.mat;var i=0;var len=this.hierarchy.length;// Checking if any of the transformation matrices in the hierarchy chain has changed.
if(!this.finalTransform._matMdf){while(i<len){if(this.hierarchy[i].finalTransform.mProp._mdf){this.finalTransform._matMdf=true;break;}i+=1;}}if(this.finalTransform._matMdf){mat=this.finalTransform.mProp.v.props;finalMat.cloneFromProps(mat);for(i=0;i<len;i+=1){mat=this.hierarchy[i].finalTransform.mProp.v.props;finalMat.transform(mat[0],mat[1],mat[2],mat[3],mat[4],mat[5],mat[6],mat[7],mat[8],mat[9],mat[10],mat[11],mat[12],mat[13],mat[14],mat[15]);}}}},globalToLocal:function globalToLocal(pt){var transforms=[];transforms.push(this.finalTransform);var flag=true;var comp=this.comp;while(flag){if(comp.finalTransform){if(comp.data.hasMask){transforms.splice(0,0,comp.finalTransform);}comp=comp.comp;}else{flag=false;}}var i;var len=transforms.length;var ptNew;for(i=0;i<len;i+=1){ptNew=transforms[i].mat.applyToPointArray(0,0,0);// ptNew = transforms[i].mat.applyToPointArray(pt[0],pt[1],pt[2]);
pt=[pt[0]-ptNew[0],pt[1]-ptNew[1],0];}return pt;},mHelper:new Matrix()};function RenderableElement(){}RenderableElement.prototype={initRenderable:function initRenderable(){// layer's visibility related to inpoint and outpoint. Rename isVisible to isInRange
this.isInRange=false;// layer's display state
this.hidden=false;// If layer's transparency equals 0, it can be hidden
this.isTransparent=false;// list of animated components
this.renderableComponents=[];},addRenderableComponent:function addRenderableComponent(component){if(this.renderableComponents.indexOf(component)===-1){this.renderableComponents.push(component);}},removeRenderableComponent:function removeRenderableComponent(component){if(this.renderableComponents.indexOf(component)!==-1){this.renderableComponents.splice(this.renderableComponents.indexOf(component),1);}},prepareRenderableFrame:function prepareRenderableFrame(num){this.checkLayerLimits(num);},checkTransparency:function checkTransparency(){if(this.finalTransform.mProp.o.v<=0){if(!this.isTransparent&&this.globalData.renderConfig.hideOnTransparent){this.isTransparent=true;this.hide();}}else if(this.isTransparent){this.isTransparent=false;this.show();}},/**
     * @function
     * Initializes frame related properties.
     *
     * @param {number} num
     * current frame number in Layer's time
     *
     */checkLayerLimits:function checkLayerLimits(num){if(this.data.ip-this.data.st<=num&&this.data.op-this.data.st>num){if(this.isInRange!==true){this.globalData._mdf=true;this._mdf=true;this.isInRange=true;this.show();}}else if(this.isInRange!==false){this.globalData._mdf=true;this.isInRange=false;this.hide();}},renderRenderable:function renderRenderable(){var i;var len=this.renderableComponents.length;for(i=0;i<len;i+=1){this.renderableComponents[i].renderFrame(this._isFirstFrame);}/* this.maskManager.renderFrame(this.finalTransform.mat);
        this.renderableEffectsManager.renderFrame(this._isFirstFrame); */},sourceRectAtTime:function sourceRectAtTime(){return{top:0,left:0,width:100,height:100};},getLayerSize:function getLayerSize(){if(this.data.ty===5){return{w:this.data.textData.width,h:this.data.textData.height};}return{w:this.data.width,h:this.data.height};}};/* global extendPrototype, RenderableElement, createProxyFunction */function RenderableDOMElement(){}(function(){var _prototype={initElement:function initElement(data,globalData,comp){this.initFrame();this.initBaseData(data,globalData,comp);this.initTransform(data,globalData,comp);this.initHierarchy();this.initRenderable();this.initRendererElement();this.createContainerElements();this.createRenderableComponents();this.createContent();this.hide();},hide:function hide(){if(!this.hidden&&(!this.isInRange||this.isTransparent)){var elem=this.baseElement||this.layerElement;elem.style.display='none';this.hidden=true;}},show:function show(){if(this.isInRange&&!this.isTransparent){if(!this.data.hd){var elem=this.baseElement||this.layerElement;elem.style.display='block';}this.hidden=false;this._isFirstFrame=true;}},renderFrame:function renderFrame(){// If it is exported as hidden (data.hd === true) no need to render
// If it is not visible no need to render
if(this.data.hd||this.hidden){return;}this.renderTransform();this.renderRenderable();this.renderElement();this.renderInnerContent();if(this._isFirstFrame){this._isFirstFrame=false;}},renderInnerContent:function renderInnerContent(){},prepareFrame:function prepareFrame(num){this._mdf=false;this.prepareRenderableFrame(num);this.prepareProperties(num,this.isInRange);this.checkTransparency();},destroy:function destroy(){this.innerElem=null;this.destroyBaseElement();}};extendPrototype([RenderableElement,createProxyFunction(_prototype)],RenderableDOMElement);})();/* exported ProcessedElement */function ProcessedElement(element,position){this.elem=element;this.pos=position;}/* global createNS */function SVGStyleData(data,level){this.data=data;this.type=data.ty;this.d='';this.lvl=level;this._mdf=false;this.closed=data.hd===true;this.pElem=createNS('path');this.msElem=null;}SVGStyleData.prototype.reset=function(){this.d='';this._mdf=false;};function SVGShapeData(transformers,level,shape){this.caches=[];this.styles=[];this.transformers=transformers;this.lStr='';this.sh=shape;this.lvl=level;// TODO find if there are some cases where _isAnimated can be false.
// For now, since shapes add up with other shapes. They have to be calculated every time.
// One way of finding out is checking if all styles associated to this shape depend only of this shape
this._isAnimated=!!shape.k;// TODO: commenting this for now since all shapes are animated
var i=0;var len=transformers.length;while(i<len){if(transformers[i].mProps.dynamicProperties.length){this._isAnimated=true;break;}i+=1;}}SVGShapeData.prototype.setAsAnimated=function(){this._isAnimated=true;};/* exported SVGTransformData */function SVGTransformData(mProps,op,container){this.transform={mProps:mProps,op:op,container:container};this.elements=[];this._isAnimated=this.transform.mProps.dynamicProperties.length||this.transform.op.effectsSequence.length;}/* global DashProperty, PropertyFactory, extendPrototype, DynamicPropertyContainer */function SVGStrokeStyleData(elem,data,styleOb){this.initDynamicPropertyContainer(elem);this.getValue=this.iterateDynamicProperties;this.o=PropertyFactory.getProp(elem,data.o,0,0.01,this);this.w=PropertyFactory.getProp(elem,data.w,0,null,this);this.d=new DashProperty(elem,data.d||{},'svg',this);this.c=PropertyFactory.getProp(elem,data.c,1,255,this);this.style=styleOb;this._isAnimated=!!this._isAnimated;}extendPrototype([DynamicPropertyContainer],SVGStrokeStyleData);/* global PropertyFactory, extendPrototype, DynamicPropertyContainer */function SVGFillStyleData(elem,data,styleOb){this.initDynamicPropertyContainer(elem);this.getValue=this.iterateDynamicProperties;this.o=PropertyFactory.getProp(elem,data.o,0,0.01,this);this.c=PropertyFactory.getProp(elem,data.c,1,255,this);this.style=styleOb;}extendPrototype([DynamicPropertyContainer],SVGFillStyleData);/* global PropertyFactory, degToRads, GradientProperty, createElementID, createNS, locationHref,
extendPrototype, DynamicPropertyContainer */function SVGGradientFillStyleData(elem,data,styleOb){this.initDynamicPropertyContainer(elem);this.getValue=this.iterateDynamicProperties;this.initGradientData(elem,data,styleOb);}SVGGradientFillStyleData.prototype.initGradientData=function(elem,data,styleOb){this.o=PropertyFactory.getProp(elem,data.o,0,0.01,this);this.s=PropertyFactory.getProp(elem,data.s,1,null,this);this.e=PropertyFactory.getProp(elem,data.e,1,null,this);this.h=PropertyFactory.getProp(elem,data.h||{k:0},0,0.01,this);this.a=PropertyFactory.getProp(elem,data.a||{k:0},0,degToRads,this);this.g=new GradientProperty(elem,data.g,this);this.style=styleOb;this.stops=[];this.setGradientData(styleOb.pElem,data);this.setGradientOpacity(data,styleOb);this._isAnimated=!!this._isAnimated;};SVGGradientFillStyleData.prototype.setGradientData=function(pathElement,data){var gradientId=createElementID();var gfill=createNS(data.t===1?'linearGradient':'radialGradient');gfill.setAttribute('id',gradientId);gfill.setAttribute('spreadMethod','pad');gfill.setAttribute('gradientUnits','userSpaceOnUse');var stops=[];var stop;var j;var jLen;jLen=data.g.p*4;for(j=0;j<jLen;j+=4){stop=createNS('stop');gfill.appendChild(stop);stops.push(stop);}pathElement.setAttribute(data.ty==='gf'?'fill':'stroke','url('+locationHref+'#'+gradientId+')');this.gf=gfill;this.cst=stops;};SVGGradientFillStyleData.prototype.setGradientOpacity=function(data,styleOb){if(this.g._hasOpacity&&!this.g._collapsable){var stop;var j;var jLen;var mask=createNS('mask');var maskElement=createNS('path');mask.appendChild(maskElement);var opacityId=createElementID();var maskId=createElementID();mask.setAttribute('id',maskId);var opFill=createNS(data.t===1?'linearGradient':'radialGradient');opFill.setAttribute('id',opacityId);opFill.setAttribute('spreadMethod','pad');opFill.setAttribute('gradientUnits','userSpaceOnUse');jLen=data.g.k.k[0].s?data.g.k.k[0].s.length:data.g.k.k.length;var stops=this.stops;for(j=data.g.p*4;j<jLen;j+=2){stop=createNS('stop');stop.setAttribute('stop-color','rgb(255,255,255)');opFill.appendChild(stop);stops.push(stop);}maskElement.setAttribute(data.ty==='gf'?'fill':'stroke','url('+locationHref+'#'+opacityId+')');this.of=opFill;this.ms=mask;this.ost=stops;this.maskId=maskId;styleOb.msElem=maskElement;}};extendPrototype([DynamicPropertyContainer],SVGGradientFillStyleData);/* global PropertyFactory, DashProperty, extendPrototype, SVGGradientFillStyleData, DynamicPropertyContainer */function SVGGradientStrokeStyleData(elem,data,styleOb){this.initDynamicPropertyContainer(elem);this.getValue=this.iterateDynamicProperties;this.w=PropertyFactory.getProp(elem,data.w,0,null,this);this.d=new DashProperty(elem,data.d||{},'svg',this);this.initGradientData(elem,data,styleOb);this._isAnimated=!!this._isAnimated;}extendPrototype([SVGGradientFillStyleData,DynamicPropertyContainer],SVGGradientStrokeStyleData);/* global createNS *//* exported ShapeGroupData */function ShapeGroupData(){this.it=[];this.prevViewData=[];this.gr=createNS('g');}/* global Matrix, buildShapeString, bmFloor *//* exported SVGElementsRenderer */var SVGElementsRenderer=function(){var _identityMatrix=new Matrix();var _matrixHelper=new Matrix();var ob={createRenderFunction:createRenderFunction};function createRenderFunction(data){switch(data.ty){case'fl':return renderFill;case'gf':return renderGradient;case'gs':return renderGradientStroke;case'st':return renderStroke;case'sh':case'el':case'rc':case'sr':return renderPath;case'tr':return renderContentTransform;default:return null;}}function renderContentTransform(styleData,itemData,isFirstFrame){if(isFirstFrame||itemData.transform.op._mdf){itemData.transform.container.setAttribute('opacity',itemData.transform.op.v);}if(isFirstFrame||itemData.transform.mProps._mdf){itemData.transform.container.setAttribute('transform',itemData.transform.mProps.v.to2dCSS());}}function renderPath(styleData,itemData,isFirstFrame){var j;var jLen;var pathStringTransformed;var redraw;var pathNodes;var l;var lLen=itemData.styles.length;var lvl=itemData.lvl;var paths;var mat;var props;var iterations;var k;for(l=0;l<lLen;l+=1){redraw=itemData.sh._mdf||isFirstFrame;if(itemData.styles[l].lvl<lvl){mat=_matrixHelper.reset();iterations=lvl-itemData.styles[l].lvl;k=itemData.transformers.length-1;while(!redraw&&iterations>0){redraw=itemData.transformers[k].mProps._mdf||redraw;iterations-=1;k-=1;}if(redraw){iterations=lvl-itemData.styles[l].lvl;k=itemData.transformers.length-1;while(iterations>0){props=itemData.transformers[k].mProps.v.props;mat.transform(props[0],props[1],props[2],props[3],props[4],props[5],props[6],props[7],props[8],props[9],props[10],props[11],props[12],props[13],props[14],props[15]);iterations-=1;k-=1;}}}else{mat=_identityMatrix;}paths=itemData.sh.paths;jLen=paths._length;if(redraw){pathStringTransformed='';for(j=0;j<jLen;j+=1){pathNodes=paths.shapes[j];if(pathNodes&&pathNodes._length){pathStringTransformed+=buildShapeString(pathNodes,pathNodes._length,pathNodes.c,mat);}}itemData.caches[l]=pathStringTransformed;}else{pathStringTransformed=itemData.caches[l];}itemData.styles[l].d+=styleData.hd===true?'':pathStringTransformed;itemData.styles[l]._mdf=redraw||itemData.styles[l]._mdf;}}function renderFill(styleData,itemData,isFirstFrame){var styleElem=itemData.style;if(itemData.c._mdf||isFirstFrame){styleElem.pElem.setAttribute('fill','rgb('+bmFloor(itemData.c.v[0])+','+bmFloor(itemData.c.v[1])+','+bmFloor(itemData.c.v[2])+')');}if(itemData.o._mdf||isFirstFrame){styleElem.pElem.setAttribute('fill-opacity',itemData.o.v);}}function renderGradientStroke(styleData,itemData,isFirstFrame){renderGradient(styleData,itemData,isFirstFrame);renderStroke(styleData,itemData,isFirstFrame);}function renderGradient(styleData,itemData,isFirstFrame){var gfill=itemData.gf;var hasOpacity=itemData.g._hasOpacity;var pt1=itemData.s.v;var pt2=itemData.e.v;if(itemData.o._mdf||isFirstFrame){var attr=styleData.ty==='gf'?'fill-opacity':'stroke-opacity';itemData.style.pElem.setAttribute(attr,itemData.o.v);}if(itemData.s._mdf||isFirstFrame){var attr1=styleData.t===1?'x1':'cx';var attr2=attr1==='x1'?'y1':'cy';gfill.setAttribute(attr1,pt1[0]);gfill.setAttribute(attr2,pt1[1]);if(hasOpacity&&!itemData.g._collapsable){itemData.of.setAttribute(attr1,pt1[0]);itemData.of.setAttribute(attr2,pt1[1]);}}var stops;var i;var len;var stop;if(itemData.g._cmdf||isFirstFrame){stops=itemData.cst;var cValues=itemData.g.c;len=stops.length;for(i=0;i<len;i+=1){stop=stops[i];stop.setAttribute('offset',cValues[i*4]+'%');stop.setAttribute('stop-color','rgb('+cValues[i*4+1]+','+cValues[i*4+2]+','+cValues[i*4+3]+')');}}if(hasOpacity&&(itemData.g._omdf||isFirstFrame)){var oValues=itemData.g.o;if(itemData.g._collapsable){stops=itemData.cst;}else{stops=itemData.ost;}len=stops.length;for(i=0;i<len;i+=1){stop=stops[i];if(!itemData.g._collapsable){stop.setAttribute('offset',oValues[i*2]+'%');}stop.setAttribute('stop-opacity',oValues[i*2+1]);}}if(styleData.t===1){if(itemData.e._mdf||isFirstFrame){gfill.setAttribute('x2',pt2[0]);gfill.setAttribute('y2',pt2[1]);if(hasOpacity&&!itemData.g._collapsable){itemData.of.setAttribute('x2',pt2[0]);itemData.of.setAttribute('y2',pt2[1]);}}}else{var rad;if(itemData.s._mdf||itemData.e._mdf||isFirstFrame){rad=Math.sqrt(Math.pow(pt1[0]-pt2[0],2)+Math.pow(pt1[1]-pt2[1],2));gfill.setAttribute('r',rad);if(hasOpacity&&!itemData.g._collapsable){itemData.of.setAttribute('r',rad);}}if(itemData.e._mdf||itemData.h._mdf||itemData.a._mdf||isFirstFrame){if(!rad){rad=Math.sqrt(Math.pow(pt1[0]-pt2[0],2)+Math.pow(pt1[1]-pt2[1],2));}var ang=Math.atan2(pt2[1]-pt1[1],pt2[0]-pt1[0]);var percent=itemData.h.v;if(percent>=1){percent=0.99;}else if(percent<=-1){percent=-0.99;}var dist=rad*percent;var x=Math.cos(ang+itemData.a.v)*dist+pt1[0];var y=Math.sin(ang+itemData.a.v)*dist+pt1[1];gfill.setAttribute('fx',x);gfill.setAttribute('fy',y);if(hasOpacity&&!itemData.g._collapsable){itemData.of.setAttribute('fx',x);itemData.of.setAttribute('fy',y);}}// gfill.setAttribute('fy','200');
}}function renderStroke(styleData,itemData,isFirstFrame){var styleElem=itemData.style;var d=itemData.d;if(d&&(d._mdf||isFirstFrame)&&d.dashStr){styleElem.pElem.setAttribute('stroke-dasharray',d.dashStr);styleElem.pElem.setAttribute('stroke-dashoffset',d.dashoffset[0]);}if(itemData.c&&(itemData.c._mdf||isFirstFrame)){styleElem.pElem.setAttribute('stroke','rgb('+bmFloor(itemData.c.v[0])+','+bmFloor(itemData.c.v[1])+','+bmFloor(itemData.c.v[2])+')');}if(itemData.o._mdf||isFirstFrame){styleElem.pElem.setAttribute('stroke-opacity',itemData.o.v);}if(itemData.w._mdf||isFirstFrame){styleElem.pElem.setAttribute('stroke-width',itemData.w.v);if(styleElem.msElem){styleElem.msElem.setAttribute('stroke-width',itemData.w.v);}}}return ob;}();/* global Matrix */function ShapeTransformManager(){this.sequences={};this.sequenceList=[];this.transform_key_count=0;}ShapeTransformManager.prototype={addTransformSequence:function addTransformSequence(transforms){var i;var len=transforms.length;var key='_';for(i=0;i<len;i+=1){key+=transforms[i].transform.key+'_';}var sequence=this.sequences[key];if(!sequence){sequence={transforms:[].concat(transforms),finalTransform:new Matrix(),_mdf:false};this.sequences[key]=sequence;this.sequenceList.push(sequence);}return sequence;},processSequence:function processSequence(sequence,isFirstFrame){var i=0;var len=sequence.transforms.length;var _mdf=isFirstFrame;while(i<len&&!isFirstFrame){if(sequence.transforms[i].transform.mProps._mdf){_mdf=true;break;}i+=1;}if(_mdf){var props;sequence.finalTransform.reset();for(i=len-1;i>=0;i-=1){props=sequence.transforms[i].transform.mProps.v.props;sequence.finalTransform.transform(props[0],props[1],props[2],props[3],props[4],props[5],props[6],props[7],props[8],props[9],props[10],props[11],props[12],props[13],props[14],props[15]);}}sequence._mdf=_mdf;},processSequences:function processSequences(isFirstFrame){var i;var len=this.sequenceList.length;for(i=0;i<len;i+=1){this.processSequence(this.sequenceList[i],isFirstFrame);}},getNewKey:function getNewKey(){this.transform_key_count+=1;return'_'+this.transform_key_count;}};/* global ShapePropertyFactory, SVGShapeData */function CVShapeData(element,data,styles,transformsManager){this.styledShapes=[];this.tr=[0,0,0,0,0,0];var ty=4;if(data.ty==='rc'){ty=5;}else if(data.ty==='el'){ty=6;}else if(data.ty==='sr'){ty=7;}this.sh=ShapePropertyFactory.getShapeProp(element,data,ty,element);var i;var len=styles.length;var styledShape;for(i=0;i<len;i+=1){if(!styles[i].closed){styledShape={transforms:transformsManager.addTransformSequence(styles[i].transforms),trNodes:[]};this.styledShapes.push(styledShape);styles[i].elements.push(styledShape);}}}CVShapeData.prototype.setAsAnimated=SVGShapeData.prototype.setAsAnimated;/* global LayerExpressionInterface, EffectsExpressionInterface, CompExpressionInterface, ShapeExpressionInterface,
TextExpressionInterface, getBlendMode,createElementID, EffectsManager */function BaseElement(){}BaseElement.prototype={checkMasks:function checkMasks(){if(!this.data.hasMask){return false;}var i=0;var len=this.data.masksProperties.length;while(i<len){if(this.data.masksProperties[i].mode!=='n'&&this.data.masksProperties[i].cl!==false){return true;}i+=1;}return false;},initExpressions:function initExpressions(){this.layerInterface=LayerExpressionInterface(this);if(this.data.hasMask&&this.maskManager){this.layerInterface.registerMaskInterface(this.maskManager);}var effectsInterface=EffectsExpressionInterface.createEffectsInterface(this,this.layerInterface);this.layerInterface.registerEffectsInterface(effectsInterface);if(this.data.ty===0||this.data.xt){this.compInterface=CompExpressionInterface(this);}else if(this.data.ty===4){this.layerInterface.shapeInterface=ShapeExpressionInterface(this.shapesData,this.itemsData,this.layerInterface);this.layerInterface.content=this.layerInterface.shapeInterface;}else if(this.data.ty===5){this.layerInterface.textInterface=TextExpressionInterface(this);this.layerInterface.text=this.layerInterface.textInterface;}},setBlendMode:function setBlendMode(){var blendModeValue=getBlendMode(this.data.bm);var elem=this.baseElement||this.layerElement;elem.style['mix-blend-mode']=blendModeValue;},initBaseData:function initBaseData(data,globalData,comp){this.globalData=globalData;this.comp=comp;this.data=data;this.layerId=createElementID();// Stretch factor for old animations missing this property.
if(!this.data.sr){this.data.sr=1;}// effects manager
this.effectsManager=new EffectsManager(this.data,this,this.dynamicProperties);},getType:function getType(){return this.type;},sourceRectAtTime:function sourceRectAtTime(){}};/* global extendPrototype, BaseElement, TransformElement, HierarchyElement, FrameElement */function NullElement(data,globalData,comp){this.initFrame();this.initBaseData(data,globalData,comp);this.initFrame();this.initTransform(data,globalData,comp);this.initHierarchy();}NullElement.prototype.prepareFrame=function(num){this.prepareProperties(num,true);};NullElement.prototype.renderFrame=function(){};NullElement.prototype.getBaseElement=function(){return null;};NullElement.prototype.destroy=function(){};NullElement.prototype.sourceRectAtTime=function(){};NullElement.prototype.hide=function(){};extendPrototype([BaseElement,TransformElement,HierarchyElement,FrameElement],NullElement);/* global filtersFactory, featureSupport, filtersFactory, createElementID, createNS, MaskElement, SVGEffects, locationHref */function SVGBaseElement(){}SVGBaseElement.prototype={initRendererElement:function initRendererElement(){this.layerElement=createNS('g');},createContainerElements:function createContainerElements(){this.matteElement=createNS('g');this.transformedElement=this.layerElement;this.maskedElement=this.layerElement;this._sizeChanged=false;var layerElementParent=null;// If this layer acts as a mask for the following layer
var filId;var fil;var gg;if(this.data.td){if(this.data.td==3||this.data.td==1){// eslint-disable-line eqeqeq
var masker=createNS('mask');masker.setAttribute('id',this.layerId);masker.setAttribute('mask-type',this.data.td==3?'luminance':'alpha');// eslint-disable-line eqeqeq
masker.appendChild(this.layerElement);layerElementParent=masker;this.globalData.defs.appendChild(masker);// This is only for IE and Edge when mask if of type alpha
if(!featureSupport.maskType&&this.data.td==1){// eslint-disable-line eqeqeq
masker.setAttribute('mask-type','luminance');filId=createElementID();fil=filtersFactory.createFilter(filId);this.globalData.defs.appendChild(fil);fil.appendChild(filtersFactory.createAlphaToLuminanceFilter());gg=createNS('g');gg.appendChild(this.layerElement);layerElementParent=gg;masker.appendChild(gg);gg.setAttribute('filter','url('+locationHref+'#'+filId+')');}}else if(this.data.td==2){// eslint-disable-line eqeqeq
var maskGroup=createNS('mask');maskGroup.setAttribute('id',this.layerId);maskGroup.setAttribute('mask-type','alpha');var maskGrouper=createNS('g');maskGroup.appendChild(maskGrouper);filId=createElementID();fil=filtersFactory.createFilter(filId);/// /
// This solution doesn't work on Android when meta tag with viewport attribute is set
/* var feColorMatrix = createNS('feColorMatrix');
                feColorMatrix.setAttribute('type', 'matrix');
                feColorMatrix.setAttribute('color-interpolation-filters', 'sRGB');
                feColorMatrix.setAttribute('values','1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 -1 1');
                fil.appendChild(feColorMatrix); *//// /
var feCTr=createNS('feComponentTransfer');feCTr.setAttribute('in','SourceGraphic');fil.appendChild(feCTr);var feFunc=createNS('feFuncA');feFunc.setAttribute('type','table');feFunc.setAttribute('tableValues','1.0 0.0');feCTr.appendChild(feFunc);/// /
this.globalData.defs.appendChild(fil);var alphaRect=createNS('rect');alphaRect.setAttribute('width',this.comp.data.w);alphaRect.setAttribute('height',this.comp.data.h);alphaRect.setAttribute('x','0');alphaRect.setAttribute('y','0');alphaRect.setAttribute('fill','#ffffff');alphaRect.setAttribute('opacity','0');maskGrouper.setAttribute('filter','url('+locationHref+'#'+filId+')');maskGrouper.appendChild(alphaRect);maskGrouper.appendChild(this.layerElement);layerElementParent=maskGrouper;if(!featureSupport.maskType){maskGroup.setAttribute('mask-type','luminance');fil.appendChild(filtersFactory.createAlphaToLuminanceFilter());gg=createNS('g');maskGrouper.appendChild(alphaRect);gg.appendChild(this.layerElement);layerElementParent=gg;maskGrouper.appendChild(gg);}this.globalData.defs.appendChild(maskGroup);}}else if(this.data.tt){this.matteElement.appendChild(this.layerElement);layerElementParent=this.matteElement;this.baseElement=this.matteElement;}else{this.baseElement=this.layerElement;}if(this.data.ln){this.layerElement.setAttribute('id',this.data.ln);}if(this.data.cl){this.layerElement.setAttribute('class',this.data.cl);}// Clipping compositions to hide content that exceeds boundaries. If collapsed transformations is on, component should not be clipped
if(this.data.ty===0&&!this.data.hd){var cp=createNS('clipPath');var pt=createNS('path');pt.setAttribute('d','M0,0 L'+this.data.w+',0 L'+this.data.w+','+this.data.h+' L0,'+this.data.h+'z');var clipId=createElementID();cp.setAttribute('id',clipId);cp.appendChild(pt);this.globalData.defs.appendChild(cp);if(this.checkMasks()){var cpGroup=createNS('g');cpGroup.setAttribute('clip-path','url('+locationHref+'#'+clipId+')');cpGroup.appendChild(this.layerElement);this.transformedElement=cpGroup;if(layerElementParent){layerElementParent.appendChild(this.transformedElement);}else{this.baseElement=this.transformedElement;}}else{this.layerElement.setAttribute('clip-path','url('+locationHref+'#'+clipId+')');}}if(this.data.bm!==0){this.setBlendMode();}},renderElement:function renderElement(){if(this.finalTransform._matMdf){this.transformedElement.setAttribute('transform',this.finalTransform.mat.to2dCSS());}if(this.finalTransform._opMdf){this.transformedElement.setAttribute('opacity',this.finalTransform.mProp.o.v);}},destroyBaseElement:function destroyBaseElement(){this.layerElement=null;this.matteElement=null;this.maskManager.destroy();},getBaseElement:function getBaseElement(){if(this.data.hd){return null;}return this.baseElement;},createRenderableComponents:function createRenderableComponents(){this.maskManager=new MaskElement(this.data,this,this.globalData);this.renderableEffectsManager=new SVGEffects(this);},setMatte:function setMatte(id){if(!this.matteElement){return;}this.matteElement.setAttribute('mask','url('+locationHref+'#'+id+')');}};/* global ProcessedElement */function IShapeElement(){}IShapeElement.prototype={addShapeToModifiers:function addShapeToModifiers(data){var i;var len=this.shapeModifiers.length;for(i=0;i<len;i+=1){this.shapeModifiers[i].addShape(data);}},isShapeInAnimatedModifiers:function isShapeInAnimatedModifiers(data){var i=0;var len=this.shapeModifiers.length;while(i<len){if(this.shapeModifiers[i].isAnimatedWithShape(data)){return true;}}return false;},renderModifiers:function renderModifiers(){if(!this.shapeModifiers.length){return;}var i;var len=this.shapes.length;for(i=0;i<len;i+=1){this.shapes[i].sh.reset();}len=this.shapeModifiers.length;var shouldBreakProcess;for(i=len-1;i>=0;i-=1){shouldBreakProcess=this.shapeModifiers[i].processShapes(this._isFirstFrame);// workaround to fix cases where a repeater resets the shape so the following processes get called twice
// TODO: find a better solution for this
if(shouldBreakProcess){break;}}},lcEnum:{1:'butt',2:'round',3:'square'},ljEnum:{1:'miter',2:'round',3:'bevel'},searchProcessedElement:function searchProcessedElement(elem){var elements=this.processedElements;var i=0;var len=elements.length;while(i<len){if(elements[i].elem===elem){return elements[i].pos;}i+=1;}return 0;},addProcessedElement:function addProcessedElement(elem,pos){var elements=this.processedElements;var i=elements.length;while(i){i-=1;if(elements[i].elem===elem){elements[i].pos=pos;return;}}elements.push(new ProcessedElement(elem,pos));},prepareFrame:function prepareFrame(num){this.prepareRenderableFrame(num);this.prepareProperties(num,this.isInRange);}};/* global TextProperty, TextAnimatorProperty, buildShapeString, LetterProps */function ITextElement(){}ITextElement.prototype.initElement=function(data,globalData,comp){this.lettersChangedFlag=true;this.initFrame();this.initBaseData(data,globalData,comp);this.textProperty=new TextProperty(this,data.t,this.dynamicProperties);this.textAnimator=new TextAnimatorProperty(data.t,this.renderType,this);this.initTransform(data,globalData,comp);this.initHierarchy();this.initRenderable();this.initRendererElement();this.createContainerElements();this.createRenderableComponents();this.createContent();this.hide();this.textAnimator.searchProperties(this.dynamicProperties);};ITextElement.prototype.prepareFrame=function(num){this._mdf=false;this.prepareRenderableFrame(num);this.prepareProperties(num,this.isInRange);if(this.textProperty._mdf||this.textProperty._isFirstFrame){this.buildNewText();this.textProperty._isFirstFrame=false;this.textProperty._mdf=false;}};ITextElement.prototype.createPathShape=function(matrixHelper,shapes){var j;var jLen=shapes.length;var pathNodes;var shapeStr='';for(j=0;j<jLen;j+=1){pathNodes=shapes[j].ks.k;shapeStr+=buildShapeString(pathNodes,pathNodes.i.length,true,matrixHelper);}return shapeStr;};ITextElement.prototype.updateDocumentData=function(newData,index){this.textProperty.updateDocumentData(newData,index);};ITextElement.prototype.canResizeFont=function(_canResize){this.textProperty.canResizeFont(_canResize);};ITextElement.prototype.setMinimumFontSize=function(_fontSize){this.textProperty.setMinimumFontSize(_fontSize);};ITextElement.prototype.applyTextPropertiesToMatrix=function(documentData,matrixHelper,lineNumber,xPos,yPos){if(documentData.ps){matrixHelper.translate(documentData.ps[0],documentData.ps[1]+documentData.ascent,0);}matrixHelper.translate(0,-documentData.ls,0);switch(documentData.j){case 1:matrixHelper.translate(documentData.justifyOffset+(documentData.boxWidth-documentData.lineWidths[lineNumber]),0,0);break;case 2:matrixHelper.translate(documentData.justifyOffset+(documentData.boxWidth-documentData.lineWidths[lineNumber])/2,0,0);break;default:break;}matrixHelper.translate(xPos,yPos,0);};ITextElement.prototype.buildColor=function(colorData){return'rgb('+Math.round(colorData[0]*255)+','+Math.round(colorData[1]*255)+','+Math.round(colorData[2]*255)+')';};ITextElement.prototype.emptyProp=new LetterProps();ITextElement.prototype.destroy=function(){};/* global extendPrototype, BaseElement, TransformElement, HierarchyElement, FrameElement, RenderableDOMElement */function ICompElement(){}extendPrototype([BaseElement,TransformElement,HierarchyElement,FrameElement,RenderableDOMElement],ICompElement);ICompElement.prototype.initElement=function(data,globalData,comp){this.initFrame();this.initBaseData(data,globalData,comp);this.initTransform(data,globalData,comp);this.initRenderable();this.initHierarchy();this.initRendererElement();this.createContainerElements();this.createRenderableComponents();if(this.data.xt||!globalData.progressiveLoad){this.buildAllItems();}this.hide();};/* ICompElement.prototype.hide = function(){
    if(!this.hidden){
        this.hideElement();
        var i,len = this.elements.length;
        for( i = 0; i < len; i+=1 ){
            if(this.elements[i]){
                this.elements[i].hide();
            }
        }
    }
}; */ICompElement.prototype.prepareFrame=function(num){this._mdf=false;this.prepareRenderableFrame(num);this.prepareProperties(num,this.isInRange);if(!this.isInRange&&!this.data.xt){return;}if(!this.tm._placeholder){var timeRemapped=this.tm.v;if(timeRemapped===this.data.op){timeRemapped=this.data.op-1;}this.renderedFrame=timeRemapped;}else{this.renderedFrame=num/this.data.sr;}var i;var len=this.elements.length;if(!this.completeLayers){this.checkLayers(this.renderedFrame);}// This iteration needs to be backwards because of how expressions connect between each other
for(i=len-1;i>=0;i-=1){if(this.completeLayers||this.elements[i]){this.elements[i].prepareFrame(this.renderedFrame-this.layers[i].st);if(this.elements[i]._mdf){this._mdf=true;}}}};ICompElement.prototype.renderInnerContent=function(){var i;var len=this.layers.length;for(i=0;i<len;i+=1){if(this.completeLayers||this.elements[i]){this.elements[i].renderFrame();}}};ICompElement.prototype.setElements=function(elems){this.elements=elems;};ICompElement.prototype.getElements=function(){return this.elements;};ICompElement.prototype.destroyElements=function(){var i;var len=this.layers.length;for(i=0;i<len;i+=1){if(this.elements[i]){this.elements[i].destroy();}}};ICompElement.prototype.destroy=function(){this.destroyElements();this.destroyBaseElement();};/* global extendPrototype, BaseElement, TransformElement, SVGBaseElement, HierarchyElement, FrameElement, RenderableDOMElement, createNS */function IImageElement(data,globalData,comp){this.assetData=globalData.getAssetData(data.refId);this.initElement(data,globalData,comp);this.sourceRect={top:0,left:0,width:this.assetData.w,height:this.assetData.h};}extendPrototype([BaseElement,TransformElement,SVGBaseElement,HierarchyElement,FrameElement,RenderableDOMElement],IImageElement);IImageElement.prototype.createContent=function(){var assetPath=this.globalData.getAssetsPath(this.assetData);this.innerElem=createNS('image');this.innerElem.setAttribute('width',this.assetData.w+'px');this.innerElem.setAttribute('height',this.assetData.h+'px');this.innerElem.setAttribute('preserveAspectRatio',this.assetData.pr||this.globalData.renderConfig.imagePreserveAspectRatio);this.innerElem.setAttributeNS('http://www.w3.org/1999/xlink','href',assetPath);this.layerElement.appendChild(this.innerElem);};IImageElement.prototype.sourceRectAtTime=function(){return this.sourceRect;};/* global extendPrototype, IImageElement, createNS */function ISolidElement(data,globalData,comp){this.initElement(data,globalData,comp);}extendPrototype([IImageElement],ISolidElement);ISolidElement.prototype.createContent=function(){var rect=createNS('rect');/// /rect.style.width = this.data.sw;
/// /rect.style.height = this.data.sh;
/// /rect.style.fill = this.data.sc;
rect.setAttribute('width',this.data.sw);rect.setAttribute('height',this.data.sh);rect.setAttribute('fill',this.data.sc);this.layerElement.appendChild(rect);};/* global PropertyFactory, extendPrototype, RenderableElement, BaseElement, FrameElement */function AudioElement(data,globalData,comp){this.initFrame();this.initRenderable();this.assetData=globalData.getAssetData(data.refId);this.initBaseData(data,globalData,comp);this._isPlaying=false;this._canPlay=false;var assetPath=this.globalData.getAssetsPath(this.assetData);this.audio=this.globalData.audioController.createAudio(assetPath);this._currentTime=0;this.globalData.audioController.addAudio(this);this.tm=data.tm?PropertyFactory.getProp(this,data.tm,0,globalData.frameRate,this):{_placeholder:true};}AudioElement.prototype.prepareFrame=function(num){this.prepareRenderableFrame(num,true);this.prepareProperties(num,true);if(!this.tm._placeholder){var timeRemapped=this.tm.v;this._currentTime=timeRemapped;}else{this._currentTime=num/this.data.sr;}};extendPrototype([RenderableElement,BaseElement,FrameElement],AudioElement);AudioElement.prototype.renderFrame=function(){if(this.isInRange&&this._canPlay){if(!this._isPlaying){this.audio.play();this.audio.seek(this._currentTime/this.globalData.frameRate);this._isPlaying=true;}else if(!this.audio.playing()||Math.abs(this._currentTime/this.globalData.frameRate-this.audio.seek())>0.1){this.audio.seek(this._currentTime/this.globalData.frameRate);}}};AudioElement.prototype.show=function(){// this.audio.play()
};AudioElement.prototype.hide=function(){this.audio.pause();this._isPlaying=false;};AudioElement.prototype.pause=function(){this.audio.pause();this._isPlaying=false;this._canPlay=false;};AudioElement.prototype.resume=function(){this._canPlay=true;};AudioElement.prototype.setRate=function(rateValue){this.audio.rate(rateValue);};AudioElement.prototype.volume=function(volumeValue){this.audio.volume(volumeValue);};AudioElement.prototype.getBaseElement=function(){return null;};AudioElement.prototype.destroy=function(){};AudioElement.prototype.sourceRectAtTime=function(){};AudioElement.prototype.initExpressions=function(){};/* global extendPrototype, RenderableElement, BaseElement, FrameElement, FootageInterface */function FootageElement(data,globalData,comp){this.initFrame();this.initRenderable();this.assetData=globalData.getAssetData(data.refId);this.footageData=globalData.imageLoader.getAsset(this.assetData);this.initBaseData(data,globalData,comp);}FootageElement.prototype.prepareFrame=function(){};extendPrototype([RenderableElement,BaseElement,FrameElement],FootageElement);FootageElement.prototype.getBaseElement=function(){return null;};FootageElement.prototype.renderFrame=function(){};FootageElement.prototype.destroy=function(){};FootageElement.prototype.initExpressions=function(){this.layerInterface=FootageInterface(this);};FootageElement.prototype.getFootageData=function(){return this.footageData;};/* global createSizedArray, PropertyFactory, extendPrototype, SVGRenderer, ICompElement, SVGBaseElement */function SVGCompElement(data,globalData,comp){this.layers=data.layers;this.supports3d=true;this.completeLayers=false;this.pendingElements=[];this.elements=this.layers?createSizedArray(this.layers.length):[];// this.layerElement = createNS('g');
this.initElement(data,globalData,comp);this.tm=data.tm?PropertyFactory.getProp(this,data.tm,0,globalData.frameRate,this):{_placeholder:true};}extendPrototype([SVGRenderer,ICompElement,SVGBaseElement],SVGCompElement);/* global extendPrototype, BaseElement, TransformElement, SVGBaseElement, HierarchyElement, FrameElement,
RenderableDOMElement, ITextElement, createSizedArray, createNS */function SVGTextLottieElement(data,globalData,comp){this.textSpans=[];this.renderType='svg';this.initElement(data,globalData,comp);}extendPrototype([BaseElement,TransformElement,SVGBaseElement,HierarchyElement,FrameElement,RenderableDOMElement,ITextElement],SVGTextLottieElement);SVGTextLottieElement.prototype.createContent=function(){if(this.data.singleShape&&!this.globalData.fontManager.chars){this.textContainer=createNS('text');}};SVGTextLottieElement.prototype.buildTextContents=function(textArray){var i=0;var len=textArray.length;var textContents=[];var currentTextContent='';while(i<len){if(textArray[i]===String.fromCharCode(13)||textArray[i]===String.fromCharCode(3)){textContents.push(currentTextContent);currentTextContent='';}else{currentTextContent+=textArray[i];}i+=1;}textContents.push(currentTextContent);return textContents;};SVGTextLottieElement.prototype.buildNewText=function(){var i;var len;var documentData=this.textProperty.currentData;this.renderedLetters=createSizedArray(documentData?documentData.l.length:0);if(documentData.fc){this.layerElement.setAttribute('fill',this.buildColor(documentData.fc));}else{this.layerElement.setAttribute('fill','rgba(0,0,0,0)');}if(documentData.sc){this.layerElement.setAttribute('stroke',this.buildColor(documentData.sc));this.layerElement.setAttribute('stroke-width',documentData.sw);}this.layerElement.setAttribute('font-size',documentData.finalSize);var fontData=this.globalData.fontManager.getFontByName(documentData.f);if(fontData.fClass){this.layerElement.setAttribute('class',fontData.fClass);}else{this.layerElement.setAttribute('font-family',fontData.fFamily);var fWeight=documentData.fWeight;var fStyle=documentData.fStyle;this.layerElement.setAttribute('font-style',fStyle);this.layerElement.setAttribute('font-weight',fWeight);}this.layerElement.setAttribute('aria-label',documentData.t);var letters=documentData.l||[];var usesGlyphs=!!this.globalData.fontManager.chars;len=letters.length;var tSpan;var matrixHelper=this.mHelper;var shapes;var shapeStr='';var singleShape=this.data.singleShape;var xPos=0;var yPos=0;var firstLine=true;var trackingOffset=documentData.tr*0.001*documentData.finalSize;if(singleShape&&!usesGlyphs&&!documentData.sz){var tElement=this.textContainer;var justify='start';switch(documentData.j){case 1:justify='end';break;case 2:justify='middle';break;default:justify='start';break;}tElement.setAttribute('text-anchor',justify);tElement.setAttribute('letter-spacing',trackingOffset);var textContent=this.buildTextContents(documentData.finalText);len=textContent.length;yPos=documentData.ps?documentData.ps[1]+documentData.ascent:0;for(i=0;i<len;i+=1){tSpan=this.textSpans[i]||createNS('tspan');tSpan.textContent=textContent[i];tSpan.setAttribute('x',0);tSpan.setAttribute('y',yPos);tSpan.style.display='inherit';tElement.appendChild(tSpan);this.textSpans[i]=tSpan;yPos+=documentData.finalLineHeight;}this.layerElement.appendChild(tElement);}else{var cachedSpansLength=this.textSpans.length;var shapeData;var charData;for(i=0;i<len;i+=1){if(!usesGlyphs||!singleShape||i===0){tSpan=cachedSpansLength>i?this.textSpans[i]:createNS(usesGlyphs?'path':'text');if(cachedSpansLength<=i){tSpan.setAttribute('stroke-linecap','butt');tSpan.setAttribute('stroke-linejoin','round');tSpan.setAttribute('stroke-miterlimit','4');this.textSpans[i]=tSpan;this.layerElement.appendChild(tSpan);}tSpan.style.display='inherit';}matrixHelper.reset();matrixHelper.scale(documentData.finalSize/100,documentData.finalSize/100);if(singleShape){if(letters[i].n){xPos=-trackingOffset;yPos+=documentData.yOffset;yPos+=firstLine?1:0;firstLine=false;}this.applyTextPropertiesToMatrix(documentData,matrixHelper,letters[i].line,xPos,yPos);xPos+=letters[i].l||0;// xPos += letters[i].val === ' ' ? 0 : trackingOffset;
xPos+=trackingOffset;}if(usesGlyphs){charData=this.globalData.fontManager.getCharData(documentData.finalText[i],fontData.fStyle,this.globalData.fontManager.getFontByName(documentData.f).fFamily);shapeData=charData&&charData.data||{};shapes=shapeData.shapes?shapeData.shapes[0].it:[];if(!singleShape){tSpan.setAttribute('d',this.createPathShape(matrixHelper,shapes));}else{shapeStr+=this.createPathShape(matrixHelper,shapes);}}else{if(singleShape){tSpan.setAttribute('transform','translate('+matrixHelper.props[12]+','+matrixHelper.props[13]+')');}tSpan.textContent=letters[i].val;tSpan.setAttributeNS('http://www.w3.org/XML/1998/namespace','xml:space','preserve');}//
}if(singleShape&&tSpan){tSpan.setAttribute('d',shapeStr);}}while(i<this.textSpans.length){this.textSpans[i].style.display='none';i+=1;}this._sizeChanged=true;};SVGTextLottieElement.prototype.sourceRectAtTime=function(){this.prepareFrame(this.comp.renderedFrame-this.data.st);this.renderInnerContent();if(this._sizeChanged){this._sizeChanged=false;var textBox=this.layerElement.getBBox();this.bbox={top:textBox.y,left:textBox.x,width:textBox.width,height:textBox.height};}return this.bbox;};SVGTextLottieElement.prototype.renderInnerContent=function(){if(!this.data.singleShape){this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag);if(this.lettersChangedFlag||this.textAnimator.lettersChangedFlag){this._sizeChanged=true;var i;var len;var renderedLetters=this.textAnimator.renderedLetters;var letters=this.textProperty.currentData.l;len=letters.length;var renderedLetter;var textSpan;for(i=0;i<len;i+=1){if(!letters[i].n){renderedLetter=renderedLetters[i];textSpan=this.textSpans[i];if(renderedLetter._mdf.m){textSpan.setAttribute('transform',renderedLetter.m);}if(renderedLetter._mdf.o){textSpan.setAttribute('opacity',renderedLetter.o);}if(renderedLetter._mdf.sw){textSpan.setAttribute('stroke-width',renderedLetter.sw);}if(renderedLetter._mdf.sc){textSpan.setAttribute('stroke',renderedLetter.sc);}if(renderedLetter._mdf.fc){textSpan.setAttribute('fill',renderedLetter.fc);}}}}}};/* global extendPrototype, BaseElement, TransformElement, SVGBaseElement, IShapeElement, HierarchyElement,
FrameElement, RenderableDOMElement, Matrix, SVGStyleData, SVGStrokeStyleData, SVGFillStyleData,
SVGGradientFillStyleData, SVGGradientStrokeStyleData, locationHref, getBlendMode, ShapeGroupData,
TransformPropertyFactory, SVGTransformData, ShapePropertyFactory, SVGShapeData, SVGElementsRenderer, ShapeModifiers */function SVGShapeElement(data,globalData,comp){// List of drawable elements
this.shapes=[];// Full shape data
this.shapesData=data.shapes;// List of styles that will be applied to shapes
this.stylesList=[];// List of modifiers that will be applied to shapes
this.shapeModifiers=[];// List of items in shape tree
this.itemsData=[];// List of items in previous shape tree
this.processedElements=[];// List of animated components
this.animatedContents=[];this.initElement(data,globalData,comp);// Moving any property that doesn't get too much access after initialization because of v8 way of handling more than 10 properties.
// List of elements that have been created
this.prevViewData=[];// Moving any property that doesn't get too much access after initialization because of v8 way of handling more than 10 properties.
}extendPrototype([BaseElement,TransformElement,SVGBaseElement,IShapeElement,HierarchyElement,FrameElement,RenderableDOMElement],SVGShapeElement);SVGShapeElement.prototype.initSecondaryElement=function(){};SVGShapeElement.prototype.identityMatrix=new Matrix();SVGShapeElement.prototype.buildExpressionInterface=function(){};SVGShapeElement.prototype.createContent=function(){this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.layerElement,0,[],true);this.filterUniqueShapes();};/*
This method searches for multiple shapes that affect a single element and one of them is animated
*/SVGShapeElement.prototype.filterUniqueShapes=function(){var i;var len=this.shapes.length;var shape;var j;var jLen=this.stylesList.length;var style;var tempShapes=[];var areAnimated=false;for(j=0;j<jLen;j+=1){style=this.stylesList[j];areAnimated=false;tempShapes.length=0;for(i=0;i<len;i+=1){shape=this.shapes[i];if(shape.styles.indexOf(style)!==-1){tempShapes.push(shape);areAnimated=shape._isAnimated||areAnimated;}}if(tempShapes.length>1&&areAnimated){this.setShapesAsAnimated(tempShapes);}}};SVGShapeElement.prototype.setShapesAsAnimated=function(shapes){var i;var len=shapes.length;for(i=0;i<len;i+=1){shapes[i].setAsAnimated();}};SVGShapeElement.prototype.createStyleElement=function(data,level){// TODO: prevent drawing of hidden styles
var elementData;var styleOb=new SVGStyleData(data,level);var pathElement=styleOb.pElem;if(data.ty==='st'){elementData=new SVGStrokeStyleData(this,data,styleOb);}else if(data.ty==='fl'){elementData=new SVGFillStyleData(this,data,styleOb);}else if(data.ty==='gf'||data.ty==='gs'){var GradientConstructor=data.ty==='gf'?SVGGradientFillStyleData:SVGGradientStrokeStyleData;elementData=new GradientConstructor(this,data,styleOb);this.globalData.defs.appendChild(elementData.gf);if(elementData.maskId){this.globalData.defs.appendChild(elementData.ms);this.globalData.defs.appendChild(elementData.of);pathElement.setAttribute('mask','url('+locationHref+'#'+elementData.maskId+')');}}if(data.ty==='st'||data.ty==='gs'){pathElement.setAttribute('stroke-linecap',this.lcEnum[data.lc]||'round');pathElement.setAttribute('stroke-linejoin',this.ljEnum[data.lj]||'round');pathElement.setAttribute('fill-opacity','0');if(data.lj===1){pathElement.setAttribute('stroke-miterlimit',data.ml);}}if(data.r===2){pathElement.setAttribute('fill-rule','evenodd');}if(data.ln){pathElement.setAttribute('id',data.ln);}if(data.cl){pathElement.setAttribute('class',data.cl);}if(data.bm){pathElement.style['mix-blend-mode']=getBlendMode(data.bm);}this.stylesList.push(styleOb);this.addToAnimatedContents(data,elementData);return elementData;};SVGShapeElement.prototype.createGroupElement=function(data){var elementData=new ShapeGroupData();if(data.ln){elementData.gr.setAttribute('id',data.ln);}if(data.cl){elementData.gr.setAttribute('class',data.cl);}if(data.bm){elementData.gr.style['mix-blend-mode']=getBlendMode(data.bm);}return elementData;};SVGShapeElement.prototype.createTransformElement=function(data,container){var transformProperty=TransformPropertyFactory.getTransformProperty(this,data,this);var elementData=new SVGTransformData(transformProperty,transformProperty.o,container);this.addToAnimatedContents(data,elementData);return elementData;};SVGShapeElement.prototype.createShapeElement=function(data,ownTransformers,level){var ty=4;if(data.ty==='rc'){ty=5;}else if(data.ty==='el'){ty=6;}else if(data.ty==='sr'){ty=7;}var shapeProperty=ShapePropertyFactory.getShapeProp(this,data,ty,this);var elementData=new SVGShapeData(ownTransformers,level,shapeProperty);this.shapes.push(elementData);this.addShapeToModifiers(elementData);this.addToAnimatedContents(data,elementData);return elementData;};SVGShapeElement.prototype.addToAnimatedContents=function(data,element){var i=0;var len=this.animatedContents.length;while(i<len){if(this.animatedContents[i].element===element){return;}i+=1;}this.animatedContents.push({fn:SVGElementsRenderer.createRenderFunction(data),element:element,data:data});};SVGShapeElement.prototype.setElementStyles=function(elementData){var arr=elementData.styles;var j;var jLen=this.stylesList.length;for(j=0;j<jLen;j+=1){if(!this.stylesList[j].closed){arr.push(this.stylesList[j]);}}};SVGShapeElement.prototype.reloadShapes=function(){this._isFirstFrame=true;var i;var len=this.itemsData.length;for(i=0;i<len;i+=1){this.prevViewData[i]=this.itemsData[i];}this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.layerElement,0,[],true);this.filterUniqueShapes();len=this.dynamicProperties.length;for(i=0;i<len;i+=1){this.dynamicProperties[i].getValue();}this.renderModifiers();};SVGShapeElement.prototype.searchShapes=function(arr,itemsData,prevViewData,container,level,transformers,render){var ownTransformers=[].concat(transformers);var i;var len=arr.length-1;var j;var jLen;var ownStyles=[];var ownModifiers=[];var currentTransform;var modifier;var processedPos;for(i=len;i>=0;i-=1){processedPos=this.searchProcessedElement(arr[i]);if(!processedPos){arr[i]._render=render;}else{itemsData[i]=prevViewData[processedPos-1];}if(arr[i].ty==='fl'||arr[i].ty==='st'||arr[i].ty==='gf'||arr[i].ty==='gs'){if(!processedPos){itemsData[i]=this.createStyleElement(arr[i],level);}else{itemsData[i].style.closed=false;}if(arr[i]._render){container.appendChild(itemsData[i].style.pElem);}ownStyles.push(itemsData[i].style);}else if(arr[i].ty==='gr'){if(!processedPos){itemsData[i]=this.createGroupElement(arr[i]);}else{jLen=itemsData[i].it.length;for(j=0;j<jLen;j+=1){itemsData[i].prevViewData[j]=itemsData[i].it[j];}}this.searchShapes(arr[i].it,itemsData[i].it,itemsData[i].prevViewData,itemsData[i].gr,level+1,ownTransformers,render);if(arr[i]._render){container.appendChild(itemsData[i].gr);}}else if(arr[i].ty==='tr'){if(!processedPos){itemsData[i]=this.createTransformElement(arr[i],container);}currentTransform=itemsData[i].transform;ownTransformers.push(currentTransform);}else if(arr[i].ty==='sh'||arr[i].ty==='rc'||arr[i].ty==='el'||arr[i].ty==='sr'){if(!processedPos){itemsData[i]=this.createShapeElement(arr[i],ownTransformers,level);}this.setElementStyles(itemsData[i]);}else if(arr[i].ty==='tm'||arr[i].ty==='rd'||arr[i].ty==='ms'||arr[i].ty==='pb'){if(!processedPos){modifier=ShapeModifiers.getModifier(arr[i].ty);modifier.init(this,arr[i]);itemsData[i]=modifier;this.shapeModifiers.push(modifier);}else{modifier=itemsData[i];modifier.closed=false;}ownModifiers.push(modifier);}else if(arr[i].ty==='rp'){if(!processedPos){modifier=ShapeModifiers.getModifier(arr[i].ty);itemsData[i]=modifier;modifier.init(this,arr,i,itemsData);this.shapeModifiers.push(modifier);render=false;}else{modifier=itemsData[i];modifier.closed=true;}ownModifiers.push(modifier);}this.addProcessedElement(arr[i],i+1);}len=ownStyles.length;for(i=0;i<len;i+=1){ownStyles[i].closed=true;}len=ownModifiers.length;for(i=0;i<len;i+=1){ownModifiers[i].closed=true;}};SVGShapeElement.prototype.renderInnerContent=function(){this.renderModifiers();var i;var len=this.stylesList.length;for(i=0;i<len;i+=1){this.stylesList[i].reset();}this.renderShape();for(i=0;i<len;i+=1){if(this.stylesList[i]._mdf||this._isFirstFrame){if(this.stylesList[i].msElem){this.stylesList[i].msElem.setAttribute('d',this.stylesList[i].d);// Adding M0 0 fixes same mask bug on all browsers
this.stylesList[i].d='M0 0'+this.stylesList[i].d;}this.stylesList[i].pElem.setAttribute('d',this.stylesList[i].d||'M0 0');}}};SVGShapeElement.prototype.renderShape=function(){var i;var len=this.animatedContents.length;var animatedContent;for(i=0;i<len;i+=1){animatedContent=this.animatedContents[i];if((this._isFirstFrame||animatedContent.element._isAnimated)&&animatedContent.data!==true){animatedContent.fn(animatedContent.data,animatedContent.element,this._isFirstFrame);}}};SVGShapeElement.prototype.destroy=function(){this.destroyBaseElement();this.shapesData=null;this.itemsData=null;};/* global createNS */function SVGTintFilter(filter,filterManager){this.filterManager=filterManager;var feColorMatrix=createNS('feColorMatrix');feColorMatrix.setAttribute('type','matrix');feColorMatrix.setAttribute('color-interpolation-filters','linearRGB');feColorMatrix.setAttribute('values','0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0');feColorMatrix.setAttribute('result','f1');filter.appendChild(feColorMatrix);feColorMatrix=createNS('feColorMatrix');feColorMatrix.setAttribute('type','matrix');feColorMatrix.setAttribute('color-interpolation-filters','sRGB');feColorMatrix.setAttribute('values','1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0');feColorMatrix.setAttribute('result','f2');filter.appendChild(feColorMatrix);this.matrixFilter=feColorMatrix;if(filterManager.effectElements[2].p.v!==100||filterManager.effectElements[2].p.k){var feMerge=createNS('feMerge');filter.appendChild(feMerge);var feMergeNode;feMergeNode=createNS('feMergeNode');feMergeNode.setAttribute('in','SourceGraphic');feMerge.appendChild(feMergeNode);feMergeNode=createNS('feMergeNode');feMergeNode.setAttribute('in','f2');feMerge.appendChild(feMergeNode);}}SVGTintFilter.prototype.renderFrame=function(forceRender){if(forceRender||this.filterManager._mdf){var colorBlack=this.filterManager.effectElements[0].p.v;var colorWhite=this.filterManager.effectElements[1].p.v;var opacity=this.filterManager.effectElements[2].p.v/100;this.matrixFilter.setAttribute('values',colorWhite[0]-colorBlack[0]+' 0 0 0 '+colorBlack[0]+' '+(colorWhite[1]-colorBlack[1])+' 0 0 0 '+colorBlack[1]+' '+(colorWhite[2]-colorBlack[2])+' 0 0 0 '+colorBlack[2]+' 0 0 0 '+opacity+' 0');}};/* global createNS */function SVGFillFilter(filter,filterManager){this.filterManager=filterManager;var feColorMatrix=createNS('feColorMatrix');feColorMatrix.setAttribute('type','matrix');feColorMatrix.setAttribute('color-interpolation-filters','sRGB');feColorMatrix.setAttribute('values','1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0');filter.appendChild(feColorMatrix);this.matrixFilter=feColorMatrix;}SVGFillFilter.prototype.renderFrame=function(forceRender){if(forceRender||this.filterManager._mdf){var color=this.filterManager.effectElements[2].p.v;var opacity=this.filterManager.effectElements[6].p.v;this.matrixFilter.setAttribute('values','0 0 0 0 '+color[0]+' 0 0 0 0 '+color[1]+' 0 0 0 0 '+color[2]+' 0 0 0 '+opacity+' 0');}};/* global createNS */function SVGGaussianBlurEffect(filter,filterManager){// Outset the filter region by 100% on all sides to accommodate blur expansion.
filter.setAttribute('x','-100%');filter.setAttribute('y','-100%');filter.setAttribute('width','300%');filter.setAttribute('height','300%');this.filterManager=filterManager;var feGaussianBlur=createNS('feGaussianBlur');filter.appendChild(feGaussianBlur);this.feGaussianBlur=feGaussianBlur;}SVGGaussianBlurEffect.prototype.renderFrame=function(forceRender){if(forceRender||this.filterManager._mdf){// Empirical value, matching AE's blur appearance.
var kBlurrinessToSigma=0.3;var sigma=this.filterManager.effectElements[0].p.v*kBlurrinessToSigma;// Dimensions mapping:
//
//   1 -> horizontal & vertical
//   2 -> horizontal only
//   3 -> vertical only
//
var dimensions=this.filterManager.effectElements[1].p.v;var sigmaX=dimensions==3?0:sigma;// eslint-disable-line eqeqeq
var sigmaY=dimensions==2?0:sigma;// eslint-disable-line eqeqeq
this.feGaussianBlur.setAttribute('stdDeviation',sigmaX+' '+sigmaY);// Repeat edges mapping:
//
//   0 -> off -> duplicate
//   1 -> on  -> wrap
var edgeMode=this.filterManager.effectElements[2].p.v==1?'wrap':'duplicate';// eslint-disable-line eqeqeq
this.feGaussianBlur.setAttribute('edgeMode',edgeMode);}};/* global createNS, createElementID, locationHref, bmFloor */function SVGStrokeEffect(elem,filterManager){this.initialized=false;this.filterManager=filterManager;this.elem=elem;this.paths=[];}SVGStrokeEffect.prototype.initialize=function(){var elemChildren=this.elem.layerElement.children||this.elem.layerElement.childNodes;var path;var groupPath;var i;var len;if(this.filterManager.effectElements[1].p.v===1){len=this.elem.maskManager.masksProperties.length;i=0;}else{i=this.filterManager.effectElements[0].p.v-1;len=i+1;}groupPath=createNS('g');groupPath.setAttribute('fill','none');groupPath.setAttribute('stroke-linecap','round');groupPath.setAttribute('stroke-dashoffset',1);for(i;i<len;i+=1){path=createNS('path');groupPath.appendChild(path);this.paths.push({p:path,m:i});}if(this.filterManager.effectElements[10].p.v===3){var mask=createNS('mask');var id=createElementID();mask.setAttribute('id',id);mask.setAttribute('mask-type','alpha');mask.appendChild(groupPath);this.elem.globalData.defs.appendChild(mask);var g=createNS('g');g.setAttribute('mask','url('+locationHref+'#'+id+')');while(elemChildren[0]){g.appendChild(elemChildren[0]);}this.elem.layerElement.appendChild(g);this.masker=mask;groupPath.setAttribute('stroke','#fff');}else if(this.filterManager.effectElements[10].p.v===1||this.filterManager.effectElements[10].p.v===2){if(this.filterManager.effectElements[10].p.v===2){elemChildren=this.elem.layerElement.children||this.elem.layerElement.childNodes;while(elemChildren.length){this.elem.layerElement.removeChild(elemChildren[0]);}}this.elem.layerElement.appendChild(groupPath);this.elem.layerElement.removeAttribute('mask');groupPath.setAttribute('stroke','#fff');}this.initialized=true;this.pathMasker=groupPath;};SVGStrokeEffect.prototype.renderFrame=function(forceRender){if(!this.initialized){this.initialize();}var i;var len=this.paths.length;var mask;var path;for(i=0;i<len;i+=1){if(this.paths[i].m!==-1){mask=this.elem.maskManager.viewData[this.paths[i].m];path=this.paths[i].p;if(forceRender||this.filterManager._mdf||mask.prop._mdf){path.setAttribute('d',mask.lastPath);}if(forceRender||this.filterManager.effectElements[9].p._mdf||this.filterManager.effectElements[4].p._mdf||this.filterManager.effectElements[7].p._mdf||this.filterManager.effectElements[8].p._mdf||mask.prop._mdf){var dasharrayValue;if(this.filterManager.effectElements[7].p.v!==0||this.filterManager.effectElements[8].p.v!==100){var s=Math.min(this.filterManager.effectElements[7].p.v,this.filterManager.effectElements[8].p.v)*0.01;var e=Math.max(this.filterManager.effectElements[7].p.v,this.filterManager.effectElements[8].p.v)*0.01;var l=path.getTotalLength();dasharrayValue='0 0 0 '+l*s+' ';var lineLength=l*(e-s);var segment=1+this.filterManager.effectElements[4].p.v*2*this.filterManager.effectElements[9].p.v*0.01;var units=Math.floor(lineLength/segment);var j;for(j=0;j<units;j+=1){dasharrayValue+='1 '+this.filterManager.effectElements[4].p.v*2*this.filterManager.effectElements[9].p.v*0.01+' ';}dasharrayValue+='0 '+l*10+' 0 0';}else{dasharrayValue='1 '+this.filterManager.effectElements[4].p.v*2*this.filterManager.effectElements[9].p.v*0.01;}path.setAttribute('stroke-dasharray',dasharrayValue);}}}if(forceRender||this.filterManager.effectElements[4].p._mdf){this.pathMasker.setAttribute('stroke-width',this.filterManager.effectElements[4].p.v*2);}if(forceRender||this.filterManager.effectElements[6].p._mdf){this.pathMasker.setAttribute('opacity',this.filterManager.effectElements[6].p.v);}if(this.filterManager.effectElements[10].p.v===1||this.filterManager.effectElements[10].p.v===2){if(forceRender||this.filterManager.effectElements[3].p._mdf){var color=this.filterManager.effectElements[3].p.v;this.pathMasker.setAttribute('stroke','rgb('+bmFloor(color[0]*255)+','+bmFloor(color[1]*255)+','+bmFloor(color[2]*255)+')');}}};/* global createNS */function SVGTritoneFilter(filter,filterManager){this.filterManager=filterManager;var feColorMatrix=createNS('feColorMatrix');feColorMatrix.setAttribute('type','matrix');feColorMatrix.setAttribute('color-interpolation-filters','linearRGB');feColorMatrix.setAttribute('values','0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0');feColorMatrix.setAttribute('result','f1');filter.appendChild(feColorMatrix);var feComponentTransfer=createNS('feComponentTransfer');feComponentTransfer.setAttribute('color-interpolation-filters','sRGB');filter.appendChild(feComponentTransfer);this.matrixFilter=feComponentTransfer;var feFuncR=createNS('feFuncR');feFuncR.setAttribute('type','table');feComponentTransfer.appendChild(feFuncR);this.feFuncR=feFuncR;var feFuncG=createNS('feFuncG');feFuncG.setAttribute('type','table');feComponentTransfer.appendChild(feFuncG);this.feFuncG=feFuncG;var feFuncB=createNS('feFuncB');feFuncB.setAttribute('type','table');feComponentTransfer.appendChild(feFuncB);this.feFuncB=feFuncB;}SVGTritoneFilter.prototype.renderFrame=function(forceRender){if(forceRender||this.filterManager._mdf){var color1=this.filterManager.effectElements[0].p.v;var color2=this.filterManager.effectElements[1].p.v;var color3=this.filterManager.effectElements[2].p.v;var tableR=color3[0]+' '+color2[0]+' '+color1[0];var tableG=color3[1]+' '+color2[1]+' '+color1[1];var tableB=color3[2]+' '+color2[2]+' '+color1[2];this.feFuncR.setAttribute('tableValues',tableR);this.feFuncG.setAttribute('tableValues',tableG);this.feFuncB.setAttribute('tableValues',tableB);// var opacity = this.filterManager.effectElements[2].p.v/100;
// this.matrixFilter.setAttribute('values',(colorWhite[0]- colorBlack[0])+' 0 0 0 '+ colorBlack[0] +' '+ (colorWhite[1]- colorBlack[1]) +' 0 0 0 '+ colorBlack[1] +' '+ (colorWhite[2]- colorBlack[2]) +' 0 0 0 '+ colorBlack[2] +' 0 0 0 ' + opacity + ' 0');
}};/* global createNS */function SVGProLevelsFilter(filter,filterManager){this.filterManager=filterManager;var effectElements=this.filterManager.effectElements;var feComponentTransfer=createNS('feComponentTransfer');if(effectElements[10].p.k||effectElements[10].p.v!==0||effectElements[11].p.k||effectElements[11].p.v!==1||effectElements[12].p.k||effectElements[12].p.v!==1||effectElements[13].p.k||effectElements[13].p.v!==0||effectElements[14].p.k||effectElements[14].p.v!==1){this.feFuncR=this.createFeFunc('feFuncR',feComponentTransfer);}if(effectElements[17].p.k||effectElements[17].p.v!==0||effectElements[18].p.k||effectElements[18].p.v!==1||effectElements[19].p.k||effectElements[19].p.v!==1||effectElements[20].p.k||effectElements[20].p.v!==0||effectElements[21].p.k||effectElements[21].p.v!==1){this.feFuncG=this.createFeFunc('feFuncG',feComponentTransfer);}if(effectElements[24].p.k||effectElements[24].p.v!==0||effectElements[25].p.k||effectElements[25].p.v!==1||effectElements[26].p.k||effectElements[26].p.v!==1||effectElements[27].p.k||effectElements[27].p.v!==0||effectElements[28].p.k||effectElements[28].p.v!==1){this.feFuncB=this.createFeFunc('feFuncB',feComponentTransfer);}if(effectElements[31].p.k||effectElements[31].p.v!==0||effectElements[32].p.k||effectElements[32].p.v!==1||effectElements[33].p.k||effectElements[33].p.v!==1||effectElements[34].p.k||effectElements[34].p.v!==0||effectElements[35].p.k||effectElements[35].p.v!==1){this.feFuncA=this.createFeFunc('feFuncA',feComponentTransfer);}if(this.feFuncR||this.feFuncG||this.feFuncB||this.feFuncA){feComponentTransfer.setAttribute('color-interpolation-filters','sRGB');filter.appendChild(feComponentTransfer);feComponentTransfer=createNS('feComponentTransfer');}if(effectElements[3].p.k||effectElements[3].p.v!==0||effectElements[4].p.k||effectElements[4].p.v!==1||effectElements[5].p.k||effectElements[5].p.v!==1||effectElements[6].p.k||effectElements[6].p.v!==0||effectElements[7].p.k||effectElements[7].p.v!==1){feComponentTransfer.setAttribute('color-interpolation-filters','sRGB');filter.appendChild(feComponentTransfer);this.feFuncRComposed=this.createFeFunc('feFuncR',feComponentTransfer);this.feFuncGComposed=this.createFeFunc('feFuncG',feComponentTransfer);this.feFuncBComposed=this.createFeFunc('feFuncB',feComponentTransfer);}}SVGProLevelsFilter.prototype.createFeFunc=function(type,feComponentTransfer){var feFunc=createNS(type);feFunc.setAttribute('type','table');feComponentTransfer.appendChild(feFunc);return feFunc;};SVGProLevelsFilter.prototype.getTableValue=function(inputBlack,inputWhite,gamma,outputBlack,outputWhite){var cnt=0;var segments=256;var perc;var min=Math.min(inputBlack,inputWhite);var max=Math.max(inputBlack,inputWhite);var table=Array.call(null,{length:segments});var colorValue;var pos=0;var outputDelta=outputWhite-outputBlack;var inputDelta=inputWhite-inputBlack;while(cnt<=256){perc=cnt/256;if(perc<=min){colorValue=inputDelta<0?outputWhite:outputBlack;}else if(perc>=max){colorValue=inputDelta<0?outputBlack:outputWhite;}else{colorValue=outputBlack+outputDelta*Math.pow((perc-inputBlack)/inputDelta,1/gamma);}table[pos]=colorValue;pos+=1;cnt+=256/(segments-1);}return table.join(' ');};SVGProLevelsFilter.prototype.renderFrame=function(forceRender){if(forceRender||this.filterManager._mdf){var val;var effectElements=this.filterManager.effectElements;if(this.feFuncRComposed&&(forceRender||effectElements[3].p._mdf||effectElements[4].p._mdf||effectElements[5].p._mdf||effectElements[6].p._mdf||effectElements[7].p._mdf)){val=this.getTableValue(effectElements[3].p.v,effectElements[4].p.v,effectElements[5].p.v,effectElements[6].p.v,effectElements[7].p.v);this.feFuncRComposed.setAttribute('tableValues',val);this.feFuncGComposed.setAttribute('tableValues',val);this.feFuncBComposed.setAttribute('tableValues',val);}if(this.feFuncR&&(forceRender||effectElements[10].p._mdf||effectElements[11].p._mdf||effectElements[12].p._mdf||effectElements[13].p._mdf||effectElements[14].p._mdf)){val=this.getTableValue(effectElements[10].p.v,effectElements[11].p.v,effectElements[12].p.v,effectElements[13].p.v,effectElements[14].p.v);this.feFuncR.setAttribute('tableValues',val);}if(this.feFuncG&&(forceRender||effectElements[17].p._mdf||effectElements[18].p._mdf||effectElements[19].p._mdf||effectElements[20].p._mdf||effectElements[21].p._mdf)){val=this.getTableValue(effectElements[17].p.v,effectElements[18].p.v,effectElements[19].p.v,effectElements[20].p.v,effectElements[21].p.v);this.feFuncG.setAttribute('tableValues',val);}if(this.feFuncB&&(forceRender||effectElements[24].p._mdf||effectElements[25].p._mdf||effectElements[26].p._mdf||effectElements[27].p._mdf||effectElements[28].p._mdf)){val=this.getTableValue(effectElements[24].p.v,effectElements[25].p.v,effectElements[26].p.v,effectElements[27].p.v,effectElements[28].p.v);this.feFuncB.setAttribute('tableValues',val);}if(this.feFuncA&&(forceRender||effectElements[31].p._mdf||effectElements[32].p._mdf||effectElements[33].p._mdf||effectElements[34].p._mdf||effectElements[35].p._mdf)){val=this.getTableValue(effectElements[31].p.v,effectElements[32].p.v,effectElements[33].p.v,effectElements[34].p.v,effectElements[35].p.v);this.feFuncA.setAttribute('tableValues',val);}}};/* global createNS, rgbToHex, degToRads */function SVGDropShadowEffect(filter,filterManager){var filterSize=filterManager.container.globalData.renderConfig.filterSize;filter.setAttribute('x',filterSize.x);filter.setAttribute('y',filterSize.y);filter.setAttribute('width',filterSize.width);filter.setAttribute('height',filterSize.height);this.filterManager=filterManager;var feGaussianBlur=createNS('feGaussianBlur');feGaussianBlur.setAttribute('in','SourceAlpha');feGaussianBlur.setAttribute('result','drop_shadow_1');feGaussianBlur.setAttribute('stdDeviation','0');this.feGaussianBlur=feGaussianBlur;filter.appendChild(feGaussianBlur);var feOffset=createNS('feOffset');feOffset.setAttribute('dx','25');feOffset.setAttribute('dy','0');feOffset.setAttribute('in','drop_shadow_1');feOffset.setAttribute('result','drop_shadow_2');this.feOffset=feOffset;filter.appendChild(feOffset);var feFlood=createNS('feFlood');feFlood.setAttribute('flood-color','#00ff00');feFlood.setAttribute('flood-opacity','1');feFlood.setAttribute('result','drop_shadow_3');this.feFlood=feFlood;filter.appendChild(feFlood);var feComposite=createNS('feComposite');feComposite.setAttribute('in','drop_shadow_3');feComposite.setAttribute('in2','drop_shadow_2');feComposite.setAttribute('operator','in');feComposite.setAttribute('result','drop_shadow_4');filter.appendChild(feComposite);var feMerge=createNS('feMerge');filter.appendChild(feMerge);var feMergeNode;feMergeNode=createNS('feMergeNode');feMerge.appendChild(feMergeNode);feMergeNode=createNS('feMergeNode');feMergeNode.setAttribute('in','SourceGraphic');this.feMergeNode=feMergeNode;this.feMerge=feMerge;this.originalNodeAdded=false;feMerge.appendChild(feMergeNode);}SVGDropShadowEffect.prototype.renderFrame=function(forceRender){if(forceRender||this.filterManager._mdf){if(forceRender||this.filterManager.effectElements[4].p._mdf){this.feGaussianBlur.setAttribute('stdDeviation',this.filterManager.effectElements[4].p.v/4);}if(forceRender||this.filterManager.effectElements[0].p._mdf){var col=this.filterManager.effectElements[0].p.v;this.feFlood.setAttribute('flood-color',rgbToHex(Math.round(col[0]*255),Math.round(col[1]*255),Math.round(col[2]*255)));}if(forceRender||this.filterManager.effectElements[1].p._mdf){this.feFlood.setAttribute('flood-opacity',this.filterManager.effectElements[1].p.v/255);}if(forceRender||this.filterManager.effectElements[2].p._mdf||this.filterManager.effectElements[3].p._mdf){var distance=this.filterManager.effectElements[3].p.v;var angle=(this.filterManager.effectElements[2].p.v-90)*degToRads;var x=distance*Math.cos(angle);var y=distance*Math.sin(angle);this.feOffset.setAttribute('dx',x);this.feOffset.setAttribute('dy',y);}/* if(forceRender || this.filterManager.effectElements[5].p._mdf){
            if(this.filterManager.effectElements[5].p.v === 1 && this.originalNodeAdded) {
                this.feMerge.removeChild(this.feMergeNode);
                this.originalNodeAdded = false;
            } else if(this.filterManager.effectElements[5].p.v === 0 && !this.originalNodeAdded) {
                this.feMerge.appendChild(this.feMergeNode);
                this.originalNodeAdded = true;
            }
        } */}};/* global createElementID, createNS */var _svgMatteSymbols=[];function SVGMatte3Effect(filterElem,filterManager,elem){this.initialized=false;this.filterManager=filterManager;this.filterElem=filterElem;this.elem=elem;elem.matteElement=createNS('g');elem.matteElement.appendChild(elem.layerElement);elem.matteElement.appendChild(elem.transformedElement);elem.baseElement=elem.matteElement;}SVGMatte3Effect.prototype.findSymbol=function(mask){var i=0;var len=_svgMatteSymbols.length;while(i<len){if(_svgMatteSymbols[i]===mask){return _svgMatteSymbols[i];}i+=1;}return null;};SVGMatte3Effect.prototype.replaceInParent=function(mask,symbolId){var parentNode=mask.layerElement.parentNode;if(!parentNode){return;}var children=parentNode.children;var i=0;var len=children.length;while(i<len){if(children[i]===mask.layerElement){break;}i+=1;}var nextChild;if(i<=len-2){nextChild=children[i+1];}var useElem=createNS('use');useElem.setAttribute('href','#'+symbolId);if(nextChild){parentNode.insertBefore(useElem,nextChild);}else{parentNode.appendChild(useElem);}};SVGMatte3Effect.prototype.setElementAsMask=function(elem,mask){if(!this.findSymbol(mask)){var symbolId=createElementID();var masker=createNS('mask');masker.setAttribute('id',mask.layerId);masker.setAttribute('mask-type','alpha');_svgMatteSymbols.push(mask);var defs=elem.globalData.defs;defs.appendChild(masker);var symbol=createNS('symbol');symbol.setAttribute('id',symbolId);this.replaceInParent(mask,symbolId);symbol.appendChild(mask.layerElement);defs.appendChild(symbol);var useElem=createNS('use');useElem.setAttribute('href','#'+symbolId);masker.appendChild(useElem);mask.data.hd=false;mask.show();}elem.setMatte(mask.layerId);};SVGMatte3Effect.prototype.initialize=function(){var ind=this.filterManager.effectElements[0].p.v;var elements=this.elem.comp.elements;var i=0;var len=elements.length;while(i<len){if(elements[i]&&elements[i].data.ind===ind){this.setElementAsMask(this.elem,elements[i]);}i+=1;}this.initialized=true;};SVGMatte3Effect.prototype.renderFrame=function(){if(!this.initialized){this.initialize();}};/* global createElementID, filtersFactory, SVGTintFilter, SVGFillFilter, SVGStrokeEffect, SVGTritoneFilter,
SVGProLevelsFilter, SVGDropShadowEffect, SVGMatte3Effect, SVGGaussianBlurEffect, locationHref */function SVGEffects(elem){var i;var len=elem.data.ef?elem.data.ef.length:0;var filId=createElementID();var fil=filtersFactory.createFilter(filId,true);var count=0;this.filters=[];var filterManager;for(i=0;i<len;i+=1){filterManager=null;if(elem.data.ef[i].ty===20){count+=1;filterManager=new SVGTintFilter(fil,elem.effectsManager.effectElements[i]);}else if(elem.data.ef[i].ty===21){count+=1;filterManager=new SVGFillFilter(fil,elem.effectsManager.effectElements[i]);}else if(elem.data.ef[i].ty===22){filterManager=new SVGStrokeEffect(elem,elem.effectsManager.effectElements[i]);}else if(elem.data.ef[i].ty===23){count+=1;filterManager=new SVGTritoneFilter(fil,elem.effectsManager.effectElements[i]);}else if(elem.data.ef[i].ty===24){count+=1;filterManager=new SVGProLevelsFilter(fil,elem.effectsManager.effectElements[i]);}else if(elem.data.ef[i].ty===25){count+=1;filterManager=new SVGDropShadowEffect(fil,elem.effectsManager.effectElements[i]);}else if(elem.data.ef[i].ty===28){// count += 1;
filterManager=new SVGMatte3Effect(fil,elem.effectsManager.effectElements[i],elem);}else if(elem.data.ef[i].ty===29){count+=1;filterManager=new SVGGaussianBlurEffect(fil,elem.effectsManager.effectElements[i]);}if(filterManager){this.filters.push(filterManager);}}if(count){elem.globalData.defs.appendChild(fil);elem.layerElement.setAttribute('filter','url('+locationHref+'#'+filId+')');}if(this.filters.length){elem.addRenderableComponent(this);}}SVGEffects.prototype.renderFrame=function(_isFirstFrame){var i;var len=this.filters.length;for(i=0;i<len;i+=1){this.filters[i].renderFrame(_isFirstFrame);}};/* global Matrix, createTypedArray */function CVContextData(){this.saved=[];this.cArrPos=0;this.cTr=new Matrix();this.cO=1;var i;var len=15;this.savedOp=createTypedArray('float32',len);for(i=0;i<len;i+=1){this.saved[i]=createTypedArray('float32',16);}this._length=len;}CVContextData.prototype.duplicate=function(){var newLength=this._length*2;var currentSavedOp=this.savedOp;this.savedOp=createTypedArray('float32',newLength);this.savedOp.set(currentSavedOp);var i=0;for(i=this._length;i<newLength;i+=1){this.saved[i]=createTypedArray('float32',16);}this._length=newLength;};CVContextData.prototype.reset=function(){this.cArrPos=0;this.cTr.reset();this.cO=1;};/* global CVEffects, getBlendMode, CVMaskElement, Matrix */function CVBaseElement(){}CVBaseElement.prototype={createElements:function createElements(){},initRendererElement:function initRendererElement(){},createContainerElements:function createContainerElements(){this.canvasContext=this.globalData.canvasContext;this.renderableEffectsManager=new CVEffects(this);},createContent:function createContent(){},setBlendMode:function setBlendMode(){var globalData=this.globalData;if(globalData.blendMode!==this.data.bm){globalData.blendMode=this.data.bm;var blendModeValue=getBlendMode(this.data.bm);globalData.canvasContext.globalCompositeOperation=blendModeValue;}},createRenderableComponents:function createRenderableComponents(){this.maskManager=new CVMaskElement(this.data,this);},hideElement:function hideElement(){if(!this.hidden&&(!this.isInRange||this.isTransparent)){this.hidden=true;}},showElement:function showElement(){if(this.isInRange&&!this.isTransparent){this.hidden=false;this._isFirstFrame=true;this.maskManager._isFirstFrame=true;}},renderFrame:function renderFrame(){if(this.hidden||this.data.hd){return;}this.renderTransform();this.renderRenderable();this.setBlendMode();var forceRealStack=this.data.ty===0;this.globalData.renderer.save(forceRealStack);this.globalData.renderer.ctxTransform(this.finalTransform.mat.props);this.globalData.renderer.ctxOpacity(this.finalTransform.mProp.o.v);this.renderInnerContent();this.globalData.renderer.restore(forceRealStack);if(this.maskManager.hasMasks){this.globalData.renderer.restore(true);}if(this._isFirstFrame){this._isFirstFrame=false;}},destroy:function destroy(){this.canvasContext=null;this.data=null;this.globalData=null;this.maskManager.destroy();},mHelper:new Matrix()};CVBaseElement.prototype.hide=CVBaseElement.prototype.hideElement;CVBaseElement.prototype.show=CVBaseElement.prototype.showElement;/* global extendPrototype, BaseElement, TransformElement, CVBaseElement,HierarchyElement, FrameElement,
RenderableElement, SVGShapeElement, IImageElement, createTag */function CVImageElement(data,globalData,comp){this.assetData=globalData.getAssetData(data.refId);this.img=globalData.imageLoader.getAsset(this.assetData);this.initElement(data,globalData,comp);}extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement],CVImageElement);CVImageElement.prototype.initElement=SVGShapeElement.prototype.initElement;CVImageElement.prototype.prepareFrame=IImageElement.prototype.prepareFrame;CVImageElement.prototype.createContent=function(){if(this.img.width&&(this.assetData.w!==this.img.width||this.assetData.h!==this.img.height)){var canvas=createTag('canvas');canvas.width=this.assetData.w;canvas.height=this.assetData.h;var ctx=canvas.getContext('2d');var imgW=this.img.width;var imgH=this.img.height;var imgRel=imgW/imgH;var canvasRel=this.assetData.w/this.assetData.h;var widthCrop;var heightCrop;var par=this.assetData.pr||this.globalData.renderConfig.imagePreserveAspectRatio;if(imgRel>canvasRel&&par==='xMidYMid slice'||imgRel<canvasRel&&par!=='xMidYMid slice'){heightCrop=imgH;widthCrop=heightCrop*canvasRel;}else{widthCrop=imgW;heightCrop=widthCrop/canvasRel;}ctx.drawImage(this.img,(imgW-widthCrop)/2,(imgH-heightCrop)/2,widthCrop,heightCrop,0,0,this.assetData.w,this.assetData.h);this.img=canvas;}};CVImageElement.prototype.renderInnerContent=function(){this.canvasContext.drawImage(this.img,0,0);};CVImageElement.prototype.destroy=function(){this.img=null;};/* global createSizedArray, PropertyFactory, extendPrototype, CanvasRenderer, ICompElement, CVBaseElement */function CVCompElement(data,globalData,comp){this.completeLayers=false;this.layers=data.layers;this.pendingElements=[];this.elements=createSizedArray(this.layers.length);this.initElement(data,globalData,comp);this.tm=data.tm?PropertyFactory.getProp(this,data.tm,0,globalData.frameRate,this):{_placeholder:true};}extendPrototype([CanvasRenderer,ICompElement,CVBaseElement],CVCompElement);CVCompElement.prototype.renderInnerContent=function(){var ctx=this.canvasContext;ctx.beginPath();ctx.moveTo(0,0);ctx.lineTo(this.data.w,0);ctx.lineTo(this.data.w,this.data.h);ctx.lineTo(0,this.data.h);ctx.lineTo(0,0);ctx.clip();var i;var len=this.layers.length;for(i=len-1;i>=0;i-=1){if(this.completeLayers||this.elements[i]){this.elements[i].renderFrame();}}};CVCompElement.prototype.destroy=function(){var i;var len=this.layers.length;for(i=len-1;i>=0;i-=1){if(this.elements[i]){this.elements[i].destroy();}}this.layers=null;this.elements=null;};/* global createSizedArray, ShapePropertyFactory, MaskElement */function CVMaskElement(data,element){this.data=data;this.element=element;this.masksProperties=this.data.masksProperties||[];this.viewData=createSizedArray(this.masksProperties.length);var i;var len=this.masksProperties.length;var hasMasks=false;for(i=0;i<len;i+=1){if(this.masksProperties[i].mode!=='n'){hasMasks=true;}this.viewData[i]=ShapePropertyFactory.getShapeProp(this.element,this.masksProperties[i],3);}this.hasMasks=hasMasks;if(hasMasks){this.element.addRenderableComponent(this);}}CVMaskElement.prototype.renderFrame=function(){if(!this.hasMasks){return;}var transform=this.element.finalTransform.mat;var ctx=this.element.canvasContext;var i;var len=this.masksProperties.length;var pt;var pts;var data;ctx.beginPath();for(i=0;i<len;i+=1){if(this.masksProperties[i].mode!=='n'){if(this.masksProperties[i].inv){ctx.moveTo(0,0);ctx.lineTo(this.element.globalData.compSize.w,0);ctx.lineTo(this.element.globalData.compSize.w,this.element.globalData.compSize.h);ctx.lineTo(0,this.element.globalData.compSize.h);ctx.lineTo(0,0);}data=this.viewData[i].v;pt=transform.applyToPointArray(data.v[0][0],data.v[0][1],0);ctx.moveTo(pt[0],pt[1]);var j;var jLen=data._length;for(j=1;j<jLen;j+=1){pts=transform.applyToTriplePoints(data.o[j-1],data.i[j],data.v[j]);ctx.bezierCurveTo(pts[0],pts[1],pts[2],pts[3],pts[4],pts[5]);}pts=transform.applyToTriplePoints(data.o[j-1],data.i[0],data.v[0]);ctx.bezierCurveTo(pts[0],pts[1],pts[2],pts[3],pts[4],pts[5]);}}this.element.globalData.renderer.save(true);ctx.clip();};CVMaskElement.prototype.getMaskProperty=MaskElement.prototype.getMaskProperty;CVMaskElement.prototype.destroy=function(){this.element=null;};/* global ShapeTransformManager, extendPrototype, BaseElement, TransformElement, CVBaseElement, IShapeElement,
HierarchyElement, FrameElement, RenderableElement, RenderableDOMElement, PropertyFactory, degToRads, GradientProperty,
DashProperty, TransformPropertyFactory, CVShapeData, ShapeModifiers, bmFloor */function CVShapeElement(data,globalData,comp){this.shapes=[];this.shapesData=data.shapes;this.stylesList=[];this.itemsData=[];this.prevViewData=[];this.shapeModifiers=[];this.processedElements=[];this.transformsManager=new ShapeTransformManager();this.initElement(data,globalData,comp);}extendPrototype([BaseElement,TransformElement,CVBaseElement,IShapeElement,HierarchyElement,FrameElement,RenderableElement],CVShapeElement);CVShapeElement.prototype.initElement=RenderableDOMElement.prototype.initElement;CVShapeElement.prototype.transformHelper={opacity:1,_opMdf:false};CVShapeElement.prototype.dashResetter=[];CVShapeElement.prototype.createContent=function(){this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,true,[]);};CVShapeElement.prototype.createStyleElement=function(data,transforms){var styleElem={data:data,type:data.ty,preTransforms:this.transformsManager.addTransformSequence(transforms),transforms:[],elements:[],closed:data.hd===true};var elementData={};if(data.ty==='fl'||data.ty==='st'){elementData.c=PropertyFactory.getProp(this,data.c,1,255,this);if(!elementData.c.k){styleElem.co='rgb('+bmFloor(elementData.c.v[0])+','+bmFloor(elementData.c.v[1])+','+bmFloor(elementData.c.v[2])+')';}}else if(data.ty==='gf'||data.ty==='gs'){elementData.s=PropertyFactory.getProp(this,data.s,1,null,this);elementData.e=PropertyFactory.getProp(this,data.e,1,null,this);elementData.h=PropertyFactory.getProp(this,data.h||{k:0},0,0.01,this);elementData.a=PropertyFactory.getProp(this,data.a||{k:0},0,degToRads,this);elementData.g=new GradientProperty(this,data.g,this);}elementData.o=PropertyFactory.getProp(this,data.o,0,0.01,this);if(data.ty==='st'||data.ty==='gs'){styleElem.lc=this.lcEnum[data.lc]||'round';styleElem.lj=this.ljEnum[data.lj]||'round';if(data.lj==1){// eslint-disable-line eqeqeq
styleElem.ml=data.ml;}elementData.w=PropertyFactory.getProp(this,data.w,0,null,this);if(!elementData.w.k){styleElem.wi=elementData.w.v;}if(data.d){var d=new DashProperty(this,data.d,'canvas',this);elementData.d=d;if(!elementData.d.k){styleElem.da=elementData.d.dashArray;styleElem.do=elementData.d.dashoffset[0];}}}else{styleElem.r=data.r===2?'evenodd':'nonzero';}this.stylesList.push(styleElem);elementData.style=styleElem;return elementData;};CVShapeElement.prototype.createGroupElement=function(){var elementData={it:[],prevViewData:[]};return elementData;};CVShapeElement.prototype.createTransformElement=function(data){var elementData={transform:{opacity:1,_opMdf:false,key:this.transformsManager.getNewKey(),op:PropertyFactory.getProp(this,data.o,0,0.01,this),mProps:TransformPropertyFactory.getTransformProperty(this,data,this)}};return elementData;};CVShapeElement.prototype.createShapeElement=function(data){var elementData=new CVShapeData(this,data,this.stylesList,this.transformsManager);this.shapes.push(elementData);this.addShapeToModifiers(elementData);return elementData;};CVShapeElement.prototype.reloadShapes=function(){this._isFirstFrame=true;var i;var len=this.itemsData.length;for(i=0;i<len;i+=1){this.prevViewData[i]=this.itemsData[i];}this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,true,[]);len=this.dynamicProperties.length;for(i=0;i<len;i+=1){this.dynamicProperties[i].getValue();}this.renderModifiers();this.transformsManager.processSequences(this._isFirstFrame);};CVShapeElement.prototype.addTransformToStyleList=function(transform){var i;var len=this.stylesList.length;for(i=0;i<len;i+=1){if(!this.stylesList[i].closed){this.stylesList[i].transforms.push(transform);}}};CVShapeElement.prototype.removeTransformFromStyleList=function(){var i;var len=this.stylesList.length;for(i=0;i<len;i+=1){if(!this.stylesList[i].closed){this.stylesList[i].transforms.pop();}}};CVShapeElement.prototype.closeStyles=function(styles){var i;var len=styles.length;for(i=0;i<len;i+=1){styles[i].closed=true;}};CVShapeElement.prototype.searchShapes=function(arr,itemsData,prevViewData,shouldRender,transforms){var i;var len=arr.length-1;var j;var jLen;var ownStyles=[];var ownModifiers=[];var processedPos;var modifier;var currentTransform;var ownTransforms=[].concat(transforms);for(i=len;i>=0;i-=1){processedPos=this.searchProcessedElement(arr[i]);if(!processedPos){arr[i]._shouldRender=shouldRender;}else{itemsData[i]=prevViewData[processedPos-1];}if(arr[i].ty==='fl'||arr[i].ty==='st'||arr[i].ty==='gf'||arr[i].ty==='gs'){if(!processedPos){itemsData[i]=this.createStyleElement(arr[i],ownTransforms);}else{itemsData[i].style.closed=false;}ownStyles.push(itemsData[i].style);}else if(arr[i].ty==='gr'){if(!processedPos){itemsData[i]=this.createGroupElement(arr[i]);}else{jLen=itemsData[i].it.length;for(j=0;j<jLen;j+=1){itemsData[i].prevViewData[j]=itemsData[i].it[j];}}this.searchShapes(arr[i].it,itemsData[i].it,itemsData[i].prevViewData,shouldRender,ownTransforms);}else if(arr[i].ty==='tr'){if(!processedPos){currentTransform=this.createTransformElement(arr[i]);itemsData[i]=currentTransform;}ownTransforms.push(itemsData[i]);this.addTransformToStyleList(itemsData[i]);}else if(arr[i].ty==='sh'||arr[i].ty==='rc'||arr[i].ty==='el'||arr[i].ty==='sr'){if(!processedPos){itemsData[i]=this.createShapeElement(arr[i]);}}else if(arr[i].ty==='tm'||arr[i].ty==='rd'||arr[i].ty==='pb'){if(!processedPos){modifier=ShapeModifiers.getModifier(arr[i].ty);modifier.init(this,arr[i]);itemsData[i]=modifier;this.shapeModifiers.push(modifier);}else{modifier=itemsData[i];modifier.closed=false;}ownModifiers.push(modifier);}else if(arr[i].ty==='rp'){if(!processedPos){modifier=ShapeModifiers.getModifier(arr[i].ty);itemsData[i]=modifier;modifier.init(this,arr,i,itemsData);this.shapeModifiers.push(modifier);shouldRender=false;}else{modifier=itemsData[i];modifier.closed=true;}ownModifiers.push(modifier);}this.addProcessedElement(arr[i],i+1);}this.removeTransformFromStyleList();this.closeStyles(ownStyles);len=ownModifiers.length;for(i=0;i<len;i+=1){ownModifiers[i].closed=true;}};CVShapeElement.prototype.renderInnerContent=function(){this.transformHelper.opacity=1;this.transformHelper._opMdf=false;this.renderModifiers();this.transformsManager.processSequences(this._isFirstFrame);this.renderShape(this.transformHelper,this.shapesData,this.itemsData,true);};CVShapeElement.prototype.renderShapeTransform=function(parentTransform,groupTransform){if(parentTransform._opMdf||groupTransform.op._mdf||this._isFirstFrame){groupTransform.opacity=parentTransform.opacity;groupTransform.opacity*=groupTransform.op.v;groupTransform._opMdf=true;}};CVShapeElement.prototype.drawLayer=function(){var i;var len=this.stylesList.length;var j;var jLen;var k;var kLen;var elems;var nodes;var renderer=this.globalData.renderer;var ctx=this.globalData.canvasContext;var type;var currentStyle;for(i=0;i<len;i+=1){currentStyle=this.stylesList[i];type=currentStyle.type;// Skipping style when
// Stroke width equals 0
// style should not be rendered (extra unused repeaters)
// current opacity equals 0
// global opacity equals 0
if(!((type==='st'||type==='gs')&&currentStyle.wi===0||!currentStyle.data._shouldRender||currentStyle.coOp===0||this.globalData.currentGlobalAlpha===0)){renderer.save();elems=currentStyle.elements;if(type==='st'||type==='gs'){ctx.strokeStyle=type==='st'?currentStyle.co:currentStyle.grd;ctx.lineWidth=currentStyle.wi;ctx.lineCap=currentStyle.lc;ctx.lineJoin=currentStyle.lj;ctx.miterLimit=currentStyle.ml||0;}else{ctx.fillStyle=type==='fl'?currentStyle.co:currentStyle.grd;}renderer.ctxOpacity(currentStyle.coOp);if(type!=='st'&&type!=='gs'){ctx.beginPath();}renderer.ctxTransform(currentStyle.preTransforms.finalTransform.props);jLen=elems.length;for(j=0;j<jLen;j+=1){if(type==='st'||type==='gs'){ctx.beginPath();if(currentStyle.da){ctx.setLineDash(currentStyle.da);ctx.lineDashOffset=currentStyle.do;}}nodes=elems[j].trNodes;kLen=nodes.length;for(k=0;k<kLen;k+=1){if(nodes[k].t==='m'){ctx.moveTo(nodes[k].p[0],nodes[k].p[1]);}else if(nodes[k].t==='c'){ctx.bezierCurveTo(nodes[k].pts[0],nodes[k].pts[1],nodes[k].pts[2],nodes[k].pts[3],nodes[k].pts[4],nodes[k].pts[5]);}else{ctx.closePath();}}if(type==='st'||type==='gs'){ctx.stroke();if(currentStyle.da){ctx.setLineDash(this.dashResetter);}}}if(type!=='st'&&type!=='gs'){ctx.fill(currentStyle.r);}renderer.restore();}}};CVShapeElement.prototype.renderShape=function(parentTransform,items,data,isMain){var i;var len=items.length-1;var groupTransform;groupTransform=parentTransform;for(i=len;i>=0;i-=1){if(items[i].ty==='tr'){groupTransform=data[i].transform;this.renderShapeTransform(parentTransform,groupTransform);}else if(items[i].ty==='sh'||items[i].ty==='el'||items[i].ty==='rc'||items[i].ty==='sr'){this.renderPath(items[i],data[i]);}else if(items[i].ty==='fl'){this.renderFill(items[i],data[i],groupTransform);}else if(items[i].ty==='st'){this.renderStroke(items[i],data[i],groupTransform);}else if(items[i].ty==='gf'||items[i].ty==='gs'){this.renderGradientFill(items[i],data[i],groupTransform);}else if(items[i].ty==='gr'){this.renderShape(groupTransform,items[i].it,data[i].it);}else if(items[i].ty==='tm'){//
}}if(isMain){this.drawLayer();}};CVShapeElement.prototype.renderStyledShape=function(styledShape,shape){if(this._isFirstFrame||shape._mdf||styledShape.transforms._mdf){var shapeNodes=styledShape.trNodes;var paths=shape.paths;var i;var len;var j;var jLen=paths._length;shapeNodes.length=0;var groupTransformMat=styledShape.transforms.finalTransform;for(j=0;j<jLen;j+=1){var pathNodes=paths.shapes[j];if(pathNodes&&pathNodes.v){len=pathNodes._length;for(i=1;i<len;i+=1){if(i===1){shapeNodes.push({t:'m',p:groupTransformMat.applyToPointArray(pathNodes.v[0][0],pathNodes.v[0][1],0)});}shapeNodes.push({t:'c',pts:groupTransformMat.applyToTriplePoints(pathNodes.o[i-1],pathNodes.i[i],pathNodes.v[i])});}if(len===1){shapeNodes.push({t:'m',p:groupTransformMat.applyToPointArray(pathNodes.v[0][0],pathNodes.v[0][1],0)});}if(pathNodes.c&&len){shapeNodes.push({t:'c',pts:groupTransformMat.applyToTriplePoints(pathNodes.o[i-1],pathNodes.i[0],pathNodes.v[0])});shapeNodes.push({t:'z'});}}}styledShape.trNodes=shapeNodes;}};CVShapeElement.prototype.renderPath=function(pathData,itemData){if(pathData.hd!==true&&pathData._shouldRender){var i;var len=itemData.styledShapes.length;for(i=0;i<len;i+=1){this.renderStyledShape(itemData.styledShapes[i],itemData.sh);}}};CVShapeElement.prototype.renderFill=function(styleData,itemData,groupTransform){var styleElem=itemData.style;if(itemData.c._mdf||this._isFirstFrame){styleElem.co='rgb('+bmFloor(itemData.c.v[0])+','+bmFloor(itemData.c.v[1])+','+bmFloor(itemData.c.v[2])+')';}if(itemData.o._mdf||groupTransform._opMdf||this._isFirstFrame){styleElem.coOp=itemData.o.v*groupTransform.opacity;}};CVShapeElement.prototype.renderGradientFill=function(styleData,itemData,groupTransform){var styleElem=itemData.style;var grd;if(!styleElem.grd||itemData.g._mdf||itemData.s._mdf||itemData.e._mdf||styleData.t!==1&&(itemData.h._mdf||itemData.a._mdf)){var ctx=this.globalData.canvasContext;var pt1=itemData.s.v;var pt2=itemData.e.v;if(styleData.t===1){grd=ctx.createLinearGradient(pt1[0],pt1[1],pt2[0],pt2[1]);}else{var rad=Math.sqrt(Math.pow(pt1[0]-pt2[0],2)+Math.pow(pt1[1]-pt2[1],2));var ang=Math.atan2(pt2[1]-pt1[1],pt2[0]-pt1[0]);var percent=itemData.h.v;if(percent>=1){percent=0.99;}else if(percent<=-1){percent=-0.99;}var dist=rad*percent;var x=Math.cos(ang+itemData.a.v)*dist+pt1[0];var y=Math.sin(ang+itemData.a.v)*dist+pt1[1];grd=ctx.createRadialGradient(x,y,0,pt1[0],pt1[1],rad);}var i;var len=styleData.g.p;var cValues=itemData.g.c;var opacity=1;for(i=0;i<len;i+=1){if(itemData.g._hasOpacity&&itemData.g._collapsable){opacity=itemData.g.o[i*2+1];}grd.addColorStop(cValues[i*4]/100,'rgba('+cValues[i*4+1]+','+cValues[i*4+2]+','+cValues[i*4+3]+','+opacity+')');}styleElem.grd=grd;}styleElem.coOp=itemData.o.v*groupTransform.opacity;};CVShapeElement.prototype.renderStroke=function(styleData,itemData,groupTransform){var styleElem=itemData.style;var d=itemData.d;if(d&&(d._mdf||this._isFirstFrame)){styleElem.da=d.dashArray;styleElem.do=d.dashoffset[0];}if(itemData.c._mdf||this._isFirstFrame){styleElem.co='rgb('+bmFloor(itemData.c.v[0])+','+bmFloor(itemData.c.v[1])+','+bmFloor(itemData.c.v[2])+')';}if(itemData.o._mdf||groupTransform._opMdf||this._isFirstFrame){styleElem.coOp=itemData.o.v*groupTransform.opacity;}if(itemData.w._mdf||this._isFirstFrame){styleElem.wi=itemData.w.v;}};CVShapeElement.prototype.destroy=function(){this.shapesData=null;this.globalData=null;this.canvasContext=null;this.stylesList.length=0;this.itemsData.length=0;};/* global extendPrototype, BaseElement, TransformElement, CVBaseElement, HierarchyElement, FrameElement, RenderableElement,
SVGShapeElement, IImageElement */function CVSolidElement(data,globalData,comp){this.initElement(data,globalData,comp);}extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement],CVSolidElement);CVSolidElement.prototype.initElement=SVGShapeElement.prototype.initElement;CVSolidElement.prototype.prepareFrame=IImageElement.prototype.prepareFrame;CVSolidElement.prototype.renderInnerContent=function(){var ctx=this.canvasContext;ctx.fillStyle=this.data.sc;ctx.fillRect(0,0,this.data.sw,this.data.sh);//
};/* global extendPrototype, BaseElement, TransformElement, CVBaseElement, HierarchyElement, FrameElement,
RenderableElement, ITextElement, createTag, createSizedArray */function CVTextElement(data,globalData,comp){this.textSpans=[];this.yOffset=0;this.fillColorAnim=false;this.strokeColorAnim=false;this.strokeWidthAnim=false;this.stroke=false;this.fill=false;this.justifyOffset=0;this.currentRender=null;this.renderType='canvas';this.values={fill:'rgba(0,0,0,0)',stroke:'rgba(0,0,0,0)',sWidth:0,fValue:''};this.initElement(data,globalData,comp);}extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement,ITextElement],CVTextElement);CVTextElement.prototype.tHelper=createTag('canvas').getContext('2d');CVTextElement.prototype.buildNewText=function(){var documentData=this.textProperty.currentData;this.renderedLetters=createSizedArray(documentData.l?documentData.l.length:0);var hasFill=false;if(documentData.fc){hasFill=true;this.values.fill=this.buildColor(documentData.fc);}else{this.values.fill='rgba(0,0,0,0)';}this.fill=hasFill;var hasStroke=false;if(documentData.sc){hasStroke=true;this.values.stroke=this.buildColor(documentData.sc);this.values.sWidth=documentData.sw;}var fontData=this.globalData.fontManager.getFontByName(documentData.f);var i;var len;var letters=documentData.l;var matrixHelper=this.mHelper;this.stroke=hasStroke;this.values.fValue=documentData.finalSize+'px '+this.globalData.fontManager.getFontByName(documentData.f).fFamily;len=documentData.finalText.length;// this.tHelper.font = this.values.fValue;
var charData;var shapeData;var k;var kLen;var shapes;var j;var jLen;var pathNodes;var commands;var pathArr;var singleShape=this.data.singleShape;var trackingOffset=documentData.tr*0.001*documentData.finalSize;var xPos=0;var yPos=0;var firstLine=true;var cnt=0;for(i=0;i<len;i+=1){charData=this.globalData.fontManager.getCharData(documentData.finalText[i],fontData.fStyle,this.globalData.fontManager.getFontByName(documentData.f).fFamily);shapeData=charData&&charData.data||{};matrixHelper.reset();if(singleShape&&letters[i].n){xPos=-trackingOffset;yPos+=documentData.yOffset;yPos+=firstLine?1:0;firstLine=false;}shapes=shapeData.shapes?shapeData.shapes[0].it:[];jLen=shapes.length;matrixHelper.scale(documentData.finalSize/100,documentData.finalSize/100);if(singleShape){this.applyTextPropertiesToMatrix(documentData,matrixHelper,letters[i].line,xPos,yPos);}commands=createSizedArray(jLen);for(j=0;j<jLen;j+=1){kLen=shapes[j].ks.k.i.length;pathNodes=shapes[j].ks.k;pathArr=[];for(k=1;k<kLen;k+=1){if(k===1){pathArr.push(matrixHelper.applyToX(pathNodes.v[0][0],pathNodes.v[0][1],0),matrixHelper.applyToY(pathNodes.v[0][0],pathNodes.v[0][1],0));}pathArr.push(matrixHelper.applyToX(pathNodes.o[k-1][0],pathNodes.o[k-1][1],0),matrixHelper.applyToY(pathNodes.o[k-1][0],pathNodes.o[k-1][1],0),matrixHelper.applyToX(pathNodes.i[k][0],pathNodes.i[k][1],0),matrixHelper.applyToY(pathNodes.i[k][0],pathNodes.i[k][1],0),matrixHelper.applyToX(pathNodes.v[k][0],pathNodes.v[k][1],0),matrixHelper.applyToY(pathNodes.v[k][0],pathNodes.v[k][1],0));}pathArr.push(matrixHelper.applyToX(pathNodes.o[k-1][0],pathNodes.o[k-1][1],0),matrixHelper.applyToY(pathNodes.o[k-1][0],pathNodes.o[k-1][1],0),matrixHelper.applyToX(pathNodes.i[0][0],pathNodes.i[0][1],0),matrixHelper.applyToY(pathNodes.i[0][0],pathNodes.i[0][1],0),matrixHelper.applyToX(pathNodes.v[0][0],pathNodes.v[0][1],0),matrixHelper.applyToY(pathNodes.v[0][0],pathNodes.v[0][1],0));commands[j]=pathArr;}if(singleShape){xPos+=letters[i].l;xPos+=trackingOffset;}if(this.textSpans[cnt]){this.textSpans[cnt].elem=commands;}else{this.textSpans[cnt]={elem:commands};}cnt+=1;}};CVTextElement.prototype.renderInnerContent=function(){var ctx=this.canvasContext;ctx.font=this.values.fValue;ctx.lineCap='butt';ctx.lineJoin='miter';ctx.miterLimit=4;if(!this.data.singleShape){this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag);}var i;var len;var j;var jLen;var k;var kLen;var renderedLetters=this.textAnimator.renderedLetters;var letters=this.textProperty.currentData.l;len=letters.length;var renderedLetter;var lastFill=null;var lastStroke=null;var lastStrokeW=null;var commands;var pathArr;for(i=0;i<len;i+=1){if(!letters[i].n){renderedLetter=renderedLetters[i];if(renderedLetter){this.globalData.renderer.save();this.globalData.renderer.ctxTransform(renderedLetter.p);this.globalData.renderer.ctxOpacity(renderedLetter.o);}if(this.fill){if(renderedLetter&&renderedLetter.fc){if(lastFill!==renderedLetter.fc){lastFill=renderedLetter.fc;ctx.fillStyle=renderedLetter.fc;}}else if(lastFill!==this.values.fill){lastFill=this.values.fill;ctx.fillStyle=this.values.fill;}commands=this.textSpans[i].elem;jLen=commands.length;this.globalData.canvasContext.beginPath();for(j=0;j<jLen;j+=1){pathArr=commands[j];kLen=pathArr.length;this.globalData.canvasContext.moveTo(pathArr[0],pathArr[1]);for(k=2;k<kLen;k+=6){this.globalData.canvasContext.bezierCurveTo(pathArr[k],pathArr[k+1],pathArr[k+2],pathArr[k+3],pathArr[k+4],pathArr[k+5]);}}this.globalData.canvasContext.closePath();this.globalData.canvasContext.fill();/// ctx.fillText(this.textSpans[i].val,0,0);
}if(this.stroke){if(renderedLetter&&renderedLetter.sw){if(lastStrokeW!==renderedLetter.sw){lastStrokeW=renderedLetter.sw;ctx.lineWidth=renderedLetter.sw;}}else if(lastStrokeW!==this.values.sWidth){lastStrokeW=this.values.sWidth;ctx.lineWidth=this.values.sWidth;}if(renderedLetter&&renderedLetter.sc){if(lastStroke!==renderedLetter.sc){lastStroke=renderedLetter.sc;ctx.strokeStyle=renderedLetter.sc;}}else if(lastStroke!==this.values.stroke){lastStroke=this.values.stroke;ctx.strokeStyle=this.values.stroke;}commands=this.textSpans[i].elem;jLen=commands.length;this.globalData.canvasContext.beginPath();for(j=0;j<jLen;j+=1){pathArr=commands[j];kLen=pathArr.length;this.globalData.canvasContext.moveTo(pathArr[0],pathArr[1]);for(k=2;k<kLen;k+=6){this.globalData.canvasContext.bezierCurveTo(pathArr[k],pathArr[k+1],pathArr[k+2],pathArr[k+3],pathArr[k+4],pathArr[k+5]);}}this.globalData.canvasContext.closePath();this.globalData.canvasContext.stroke();/// ctx.strokeText(letters[i].val,0,0);
}if(renderedLetter){this.globalData.renderer.restore();}}}};function CVEffects(){}CVEffects.prototype.renderFrame=function(){};/* global createTag, createNS, styleDiv, CVEffects, MaskElement, SVGBaseElement, HybridRenderer */function HBaseElement(){}HBaseElement.prototype={checkBlendMode:function checkBlendMode(){},initRendererElement:function initRendererElement(){this.baseElement=createTag(this.data.tg||'div');if(this.data.hasMask){this.svgElement=createNS('svg');this.layerElement=createNS('g');this.maskedElement=this.layerElement;this.svgElement.appendChild(this.layerElement);this.baseElement.appendChild(this.svgElement);}else{this.layerElement=this.baseElement;}styleDiv(this.baseElement);},createContainerElements:function createContainerElements(){this.renderableEffectsManager=new CVEffects(this);this.transformedElement=this.baseElement;this.maskedElement=this.layerElement;if(this.data.ln){this.layerElement.setAttribute('id',this.data.ln);}if(this.data.cl){this.layerElement.setAttribute('class',this.data.cl);}if(this.data.bm!==0){this.setBlendMode();}},renderElement:function renderElement(){var transformedElementStyle=this.transformedElement?this.transformedElement.style:{};if(this.finalTransform._matMdf){var matrixValue=this.finalTransform.mat.toCSS();transformedElementStyle.transform=matrixValue;transformedElementStyle.webkitTransform=matrixValue;}if(this.finalTransform._opMdf){transformedElementStyle.opacity=this.finalTransform.mProp.o.v;}},renderFrame:function renderFrame(){// If it is exported as hidden (data.hd === true) no need to render
// If it is not visible no need to render
if(this.data.hd||this.hidden){return;}this.renderTransform();this.renderRenderable();this.renderElement();this.renderInnerContent();if(this._isFirstFrame){this._isFirstFrame=false;}},destroy:function destroy(){this.layerElement=null;this.transformedElement=null;if(this.matteElement){this.matteElement=null;}if(this.maskManager){this.maskManager.destroy();this.maskManager=null;}},createRenderableComponents:function createRenderableComponents(){this.maskManager=new MaskElement(this.data,this,this.globalData);},addEffects:function addEffects(){},setMatte:function setMatte(){}};HBaseElement.prototype.getBaseElement=SVGBaseElement.prototype.getBaseElement;HBaseElement.prototype.destroyBaseElement=HBaseElement.prototype.destroy;HBaseElement.prototype.buildElementParenting=HybridRenderer.prototype.buildElementParenting;/* global extendPrototype, BaseElement, TransformElement, HBaseElement, HierarchyElement, FrameElement,
RenderableDOMElement, createNS, createTag */function HSolidElement(data,globalData,comp){this.initElement(data,globalData,comp);}extendPrototype([BaseElement,TransformElement,HBaseElement,HierarchyElement,FrameElement,RenderableDOMElement],HSolidElement);HSolidElement.prototype.createContent=function(){var rect;if(this.data.hasMask){rect=createNS('rect');rect.setAttribute('width',this.data.sw);rect.setAttribute('height',this.data.sh);rect.setAttribute('fill',this.data.sc);this.svgElement.setAttribute('width',this.data.sw);this.svgElement.setAttribute('height',this.data.sh);}else{rect=createTag('div');rect.style.width=this.data.sw+'px';rect.style.height=this.data.sh+'px';rect.style.backgroundColor=this.data.sc;}this.layerElement.appendChild(rect);};/* global createSizedArray, PropertyFactory, extendPrototype, HybridRenderer, ICompElement, HBaseElement */function HCompElement(data,globalData,comp){this.layers=data.layers;this.supports3d=!data.hasMask;this.completeLayers=false;this.pendingElements=[];this.elements=this.layers?createSizedArray(this.layers.length):[];this.initElement(data,globalData,comp);this.tm=data.tm?PropertyFactory.getProp(this,data.tm,0,globalData.frameRate,this):{_placeholder:true};}extendPrototype([HybridRenderer,ICompElement,HBaseElement],HCompElement);HCompElement.prototype._createBaseContainerElements=HCompElement.prototype.createContainerElements;HCompElement.prototype.createContainerElements=function(){this._createBaseContainerElements();// divElement.style.clip = 'rect(0px, '+this.data.w+'px, '+this.data.h+'px, 0px)';
if(this.data.hasMask){this.svgElement.setAttribute('width',this.data.w);this.svgElement.setAttribute('height',this.data.h);this.transformedElement=this.baseElement;}else{this.transformedElement=this.layerElement;}};HCompElement.prototype.addTo3dContainer=function(elem,pos){var j=0;var nextElement;while(j<pos){if(this.elements[j]&&this.elements[j].getBaseElement){nextElement=this.elements[j].getBaseElement();}j+=1;}if(nextElement){this.layerElement.insertBefore(elem,nextElement);}else{this.layerElement.appendChild(elem);}};/* global createNS, extendPrototype, BaseElement, TransformElement, HSolidElement, SVGShapeElement, HBaseElement,
HierarchyElement, FrameElement, RenderableElement, createNS, bmMin, bmSqrt, bmMin, bmMax, bmPow */function HShapeElement(data,globalData,comp){// List of drawable elements
this.shapes=[];// Full shape data
this.shapesData=data.shapes;// List of styles that will be applied to shapes
this.stylesList=[];// List of modifiers that will be applied to shapes
this.shapeModifiers=[];// List of items in shape tree
this.itemsData=[];// List of items in previous shape tree
this.processedElements=[];// List of animated components
this.animatedContents=[];this.shapesContainer=createNS('g');this.initElement(data,globalData,comp);// Moving any property that doesn't get too much access after initialization because of v8 way of handling more than 10 properties.
// List of elements that have been created
this.prevViewData=[];this.currentBBox={x:999999,y:-999999,h:0,w:0};}extendPrototype([BaseElement,TransformElement,HSolidElement,SVGShapeElement,HBaseElement,HierarchyElement,FrameElement,RenderableElement],HShapeElement);HShapeElement.prototype._renderShapeFrame=HShapeElement.prototype.renderInnerContent;HShapeElement.prototype.createContent=function(){var cont;this.baseElement.style.fontSize=0;if(this.data.hasMask){this.layerElement.appendChild(this.shapesContainer);cont=this.svgElement;}else{cont=createNS('svg');var size=this.comp.data?this.comp.data:this.globalData.compSize;cont.setAttribute('width',size.w);cont.setAttribute('height',size.h);cont.appendChild(this.shapesContainer);this.layerElement.appendChild(cont);}this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.shapesContainer,0,[],true);this.filterUniqueShapes();this.shapeCont=cont;};HShapeElement.prototype.getTransformedPoint=function(transformers,point){var i;var len=transformers.length;for(i=0;i<len;i+=1){point=transformers[i].mProps.v.applyToPointArray(point[0],point[1],0);}return point;};HShapeElement.prototype.calculateShapeBoundingBox=function(item,boundingBox){var shape=item.sh.v;var transformers=item.transformers;var i;var len=shape._length;var vPoint;var oPoint;var nextIPoint;var nextVPoint;if(len<=1){return;}for(i=0;i<len-1;i+=1){vPoint=this.getTransformedPoint(transformers,shape.v[i]);oPoint=this.getTransformedPoint(transformers,shape.o[i]);nextIPoint=this.getTransformedPoint(transformers,shape.i[i+1]);nextVPoint=this.getTransformedPoint(transformers,shape.v[i+1]);this.checkBounds(vPoint,oPoint,nextIPoint,nextVPoint,boundingBox);}if(shape.c){vPoint=this.getTransformedPoint(transformers,shape.v[i]);oPoint=this.getTransformedPoint(transformers,shape.o[i]);nextIPoint=this.getTransformedPoint(transformers,shape.i[0]);nextVPoint=this.getTransformedPoint(transformers,shape.v[0]);this.checkBounds(vPoint,oPoint,nextIPoint,nextVPoint,boundingBox);}};HShapeElement.prototype.checkBounds=function(vPoint,oPoint,nextIPoint,nextVPoint,boundingBox){this.getBoundsOfCurve(vPoint,oPoint,nextIPoint,nextVPoint);var bounds=this.shapeBoundingBox;boundingBox.x=bmMin(bounds.left,boundingBox.x);boundingBox.xMax=bmMax(bounds.right,boundingBox.xMax);boundingBox.y=bmMin(bounds.top,boundingBox.y);boundingBox.yMax=bmMax(bounds.bottom,boundingBox.yMax);};HShapeElement.prototype.shapeBoundingBox={left:0,right:0,top:0,bottom:0};HShapeElement.prototype.tempBoundingBox={x:0,xMax:0,y:0,yMax:0,width:0,height:0};HShapeElement.prototype.getBoundsOfCurve=function(p0,p1,p2,p3){var bounds=[[p0[0],p3[0]],[p0[1],p3[1]]];for(var a,b,c,t,b2ac,t1,t2,i=0;i<2;++i){// eslint-disable-line no-plusplus
b=6*p0[i]-12*p1[i]+6*p2[i];a=-3*p0[i]+9*p1[i]-9*p2[i]+3*p3[i];c=3*p1[i]-3*p0[i];b|=0;// eslint-disable-line no-bitwise
a|=0;// eslint-disable-line no-bitwise
c|=0;// eslint-disable-line no-bitwise
if(a===0&&b===0){//
}else if(a===0){t=-c/b;if(t>0&&t<1){bounds[i].push(this.calculateF(t,p0,p1,p2,p3,i));}}else{b2ac=b*b-4*c*a;if(b2ac>=0){t1=(-b+bmSqrt(b2ac))/(2*a);if(t1>0&&t1<1)bounds[i].push(this.calculateF(t1,p0,p1,p2,p3,i));t2=(-b-bmSqrt(b2ac))/(2*a);if(t2>0&&t2<1)bounds[i].push(this.calculateF(t2,p0,p1,p2,p3,i));}}}this.shapeBoundingBox.left=bmMin.apply(null,bounds[0]);this.shapeBoundingBox.top=bmMin.apply(null,bounds[1]);this.shapeBoundingBox.right=bmMax.apply(null,bounds[0]);this.shapeBoundingBox.bottom=bmMax.apply(null,bounds[1]);};HShapeElement.prototype.calculateF=function(t,p0,p1,p2,p3,i){return bmPow(1-t,3)*p0[i]+3*bmPow(1-t,2)*t*p1[i]+3*(1-t)*bmPow(t,2)*p2[i]+bmPow(t,3)*p3[i];};HShapeElement.prototype.calculateBoundingBox=function(itemsData,boundingBox){var i;var len=itemsData.length;for(i=0;i<len;i+=1){if(itemsData[i]&&itemsData[i].sh){this.calculateShapeBoundingBox(itemsData[i],boundingBox);}else if(itemsData[i]&&itemsData[i].it){this.calculateBoundingBox(itemsData[i].it,boundingBox);}}};HShapeElement.prototype.currentBoxContains=function(box){return this.currentBBox.x<=box.x&&this.currentBBox.y<=box.y&&this.currentBBox.width+this.currentBBox.x>=box.x+box.width&&this.currentBBox.height+this.currentBBox.y>=box.y+box.height;};HShapeElement.prototype.renderInnerContent=function(){this._renderShapeFrame();if(!this.hidden&&(this._isFirstFrame||this._mdf)){var tempBoundingBox=this.tempBoundingBox;var max=999999;tempBoundingBox.x=max;tempBoundingBox.xMax=-max;tempBoundingBox.y=max;tempBoundingBox.yMax=-max;this.calculateBoundingBox(this.itemsData,tempBoundingBox);tempBoundingBox.width=tempBoundingBox.xMax<tempBoundingBox.x?0:tempBoundingBox.xMax-tempBoundingBox.x;tempBoundingBox.height=tempBoundingBox.yMax<tempBoundingBox.y?0:tempBoundingBox.yMax-tempBoundingBox.y;// var tempBoundingBox = this.shapeCont.getBBox();
if(this.currentBoxContains(tempBoundingBox)){return;}var changed=false;if(this.currentBBox.w!==tempBoundingBox.width){this.currentBBox.w=tempBoundingBox.width;this.shapeCont.setAttribute('width',tempBoundingBox.width);changed=true;}if(this.currentBBox.h!==tempBoundingBox.height){this.currentBBox.h=tempBoundingBox.height;this.shapeCont.setAttribute('height',tempBoundingBox.height);changed=true;}if(changed||this.currentBBox.x!==tempBoundingBox.x||this.currentBBox.y!==tempBoundingBox.y){this.currentBBox.w=tempBoundingBox.width;this.currentBBox.h=tempBoundingBox.height;this.currentBBox.x=tempBoundingBox.x;this.currentBBox.y=tempBoundingBox.y;this.shapeCont.setAttribute('viewBox',this.currentBBox.x+' '+this.currentBBox.y+' '+this.currentBBox.w+' '+this.currentBBox.h);var shapeStyle=this.shapeCont.style;var shapeTransform='translate('+this.currentBBox.x+'px,'+this.currentBBox.y+'px)';shapeStyle.transform=shapeTransform;shapeStyle.webkitTransform=shapeTransform;}}};/* global extendPrototype, BaseElement, TransformElement, HBaseElement, HierarchyElement, FrameElement,
RenderableDOMElement, ITextElement, createSizedArray, createTag, styleDiv, createNS */function HTextElement(data,globalData,comp){this.textSpans=[];this.textPaths=[];this.currentBBox={x:999999,y:-999999,h:0,w:0};this.renderType='svg';this.isMasked=false;this.initElement(data,globalData,comp);}extendPrototype([BaseElement,TransformElement,HBaseElement,HierarchyElement,FrameElement,RenderableDOMElement,ITextElement],HTextElement);HTextElement.prototype.createContent=function(){this.isMasked=this.checkMasks();if(this.isMasked){this.renderType='svg';this.compW=this.comp.data.w;this.compH=this.comp.data.h;this.svgElement.setAttribute('width',this.compW);this.svgElement.setAttribute('height',this.compH);var g=createNS('g');this.maskedElement.appendChild(g);this.innerElem=g;}else{this.renderType='html';this.innerElem=this.layerElement;}this.checkParenting();};HTextElement.prototype.buildNewText=function(){var documentData=this.textProperty.currentData;this.renderedLetters=createSizedArray(documentData.l?documentData.l.length:0);var innerElemStyle=this.innerElem.style;var textColor=documentData.fc?this.buildColor(documentData.fc):'rgba(0,0,0,0)';innerElemStyle.fill=textColor;innerElemStyle.color=textColor;if(documentData.sc){innerElemStyle.stroke=this.buildColor(documentData.sc);innerElemStyle.strokeWidth=documentData.sw+'px';}var fontData=this.globalData.fontManager.getFontByName(documentData.f);if(!this.globalData.fontManager.chars){innerElemStyle.fontSize=documentData.finalSize+'px';innerElemStyle.lineHeight=documentData.finalSize+'px';if(fontData.fClass){this.innerElem.className=fontData.fClass;}else{innerElemStyle.fontFamily=fontData.fFamily;var fWeight=documentData.fWeight;var fStyle=documentData.fStyle;innerElemStyle.fontStyle=fStyle;innerElemStyle.fontWeight=fWeight;}}var i;var len;var letters=documentData.l;len=letters.length;var tSpan;var tParent;var tCont;var matrixHelper=this.mHelper;var shapes;var shapeStr='';var cnt=0;for(i=0;i<len;i+=1){if(this.globalData.fontManager.chars){if(!this.textPaths[cnt]){tSpan=createNS('path');tSpan.setAttribute('stroke-linecap','butt');tSpan.setAttribute('stroke-linejoin','round');tSpan.setAttribute('stroke-miterlimit','4');}else{tSpan=this.textPaths[cnt];}if(!this.isMasked){if(this.textSpans[cnt]){tParent=this.textSpans[cnt];tCont=tParent.children[0];}else{tParent=createTag('div');tParent.style.lineHeight=0;tCont=createNS('svg');tCont.appendChild(tSpan);styleDiv(tParent);}}}else if(!this.isMasked){if(this.textSpans[cnt]){tParent=this.textSpans[cnt];tSpan=this.textPaths[cnt];}else{tParent=createTag('span');styleDiv(tParent);tSpan=createTag('span');styleDiv(tSpan);tParent.appendChild(tSpan);}}else{tSpan=this.textPaths[cnt]?this.textPaths[cnt]:createNS('text');}// tSpan.setAttribute('visibility', 'hidden');
if(this.globalData.fontManager.chars){var charData=this.globalData.fontManager.getCharData(documentData.finalText[i],fontData.fStyle,this.globalData.fontManager.getFontByName(documentData.f).fFamily);var shapeData;if(charData){shapeData=charData.data;}else{shapeData=null;}matrixHelper.reset();if(shapeData&&shapeData.shapes){shapes=shapeData.shapes[0].it;matrixHelper.scale(documentData.finalSize/100,documentData.finalSize/100);shapeStr=this.createPathShape(matrixHelper,shapes);tSpan.setAttribute('d',shapeStr);}if(!this.isMasked){this.innerElem.appendChild(tParent);if(shapeData&&shapeData.shapes){// document.body.appendChild is needed to get exact measure of shape
document.body.appendChild(tCont);var boundingBox=tCont.getBBox();tCont.setAttribute('width',boundingBox.width+2);tCont.setAttribute('height',boundingBox.height+2);tCont.setAttribute('viewBox',boundingBox.x-1+' '+(boundingBox.y-1)+' '+(boundingBox.width+2)+' '+(boundingBox.height+2));var tContStyle=tCont.style;var tContTranslation='translate('+(boundingBox.x-1)+'px,'+(boundingBox.y-1)+'px)';tContStyle.transform=tContTranslation;tContStyle.webkitTransform=tContTranslation;letters[i].yOffset=boundingBox.y-1;}else{tCont.setAttribute('width',1);tCont.setAttribute('height',1);}tParent.appendChild(tCont);}else{this.innerElem.appendChild(tSpan);}}else{tSpan.textContent=letters[i].val;tSpan.setAttributeNS('http://www.w3.org/XML/1998/namespace','xml:space','preserve');if(!this.isMasked){this.innerElem.appendChild(tParent);//
var tStyle=tSpan.style;var tSpanTranslation='translate3d(0,'+-documentData.finalSize/1.2+'px,0)';tStyle.transform=tSpanTranslation;tStyle.webkitTransform=tSpanTranslation;}else{this.innerElem.appendChild(tSpan);}}//
if(!this.isMasked){this.textSpans[cnt]=tParent;}else{this.textSpans[cnt]=tSpan;}this.textSpans[cnt].style.display='block';this.textPaths[cnt]=tSpan;cnt+=1;}while(cnt<this.textSpans.length){this.textSpans[cnt].style.display='none';cnt+=1;}};HTextElement.prototype.renderInnerContent=function(){var svgStyle;if(this.data.singleShape){if(!this._isFirstFrame&&!this.lettersChangedFlag){return;}if(this.isMasked&&this.finalTransform._matMdf){// Todo Benchmark if using this is better than getBBox
this.svgElement.setAttribute('viewBox',-this.finalTransform.mProp.p.v[0]+' '+-this.finalTransform.mProp.p.v[1]+' '+this.compW+' '+this.compH);svgStyle=this.svgElement.style;var translation='translate('+-this.finalTransform.mProp.p.v[0]+'px,'+-this.finalTransform.mProp.p.v[1]+'px)';svgStyle.transform=translation;svgStyle.webkitTransform=translation;}}this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag);if(!this.lettersChangedFlag&&!this.textAnimator.lettersChangedFlag){return;}var i;var len;var count=0;var renderedLetters=this.textAnimator.renderedLetters;var letters=this.textProperty.currentData.l;len=letters.length;var renderedLetter;var textSpan;var textPath;for(i=0;i<len;i+=1){if(letters[i].n){count+=1;}else{textSpan=this.textSpans[i];textPath=this.textPaths[i];renderedLetter=renderedLetters[count];count+=1;if(renderedLetter._mdf.m){if(!this.isMasked){textSpan.style.webkitTransform=renderedLetter.m;textSpan.style.transform=renderedLetter.m;}else{textSpan.setAttribute('transform',renderedLetter.m);}}/// /textSpan.setAttribute('opacity',renderedLetter.o);
textSpan.style.opacity=renderedLetter.o;if(renderedLetter.sw&&renderedLetter._mdf.sw){textPath.setAttribute('stroke-width',renderedLetter.sw);}if(renderedLetter.sc&&renderedLetter._mdf.sc){textPath.setAttribute('stroke',renderedLetter.sc);}if(renderedLetter.fc&&renderedLetter._mdf.fc){textPath.setAttribute('fill',renderedLetter.fc);textPath.style.color=renderedLetter.fc;}}}if(this.innerElem.getBBox&&!this.hidden&&(this._isFirstFrame||this._mdf)){var boundingBox=this.innerElem.getBBox();if(this.currentBBox.w!==boundingBox.width){this.currentBBox.w=boundingBox.width;this.svgElement.setAttribute('width',boundingBox.width);}if(this.currentBBox.h!==boundingBox.height){this.currentBBox.h=boundingBox.height;this.svgElement.setAttribute('height',boundingBox.height);}var margin=1;if(this.currentBBox.w!==boundingBox.width+margin*2||this.currentBBox.h!==boundingBox.height+margin*2||this.currentBBox.x!==boundingBox.x-margin||this.currentBBox.y!==boundingBox.y-margin){this.currentBBox.w=boundingBox.width+margin*2;this.currentBBox.h=boundingBox.height+margin*2;this.currentBBox.x=boundingBox.x-margin;this.currentBBox.y=boundingBox.y-margin;this.svgElement.setAttribute('viewBox',this.currentBBox.x+' '+this.currentBBox.y+' '+this.currentBBox.w+' '+this.currentBBox.h);svgStyle=this.svgElement.style;var svgTransform='translate('+this.currentBBox.x+'px,'+this.currentBBox.y+'px)';svgStyle.transform=svgTransform;svgStyle.webkitTransform=svgTransform;}}};/* global extendPrototype, BaseElement, TransformElement, HBaseElement, HSolidElement, HierarchyElement,
FrameElement, RenderableElement, createNS */function HImageElement(data,globalData,comp){this.assetData=globalData.getAssetData(data.refId);this.initElement(data,globalData,comp);}extendPrototype([BaseElement,TransformElement,HBaseElement,HSolidElement,HierarchyElement,FrameElement,RenderableElement],HImageElement);HImageElement.prototype.createContent=function(){var assetPath=this.globalData.getAssetsPath(this.assetData);var img=new Image();if(this.data.hasMask){this.imageElem=createNS('image');this.imageElem.setAttribute('width',this.assetData.w+'px');this.imageElem.setAttribute('height',this.assetData.h+'px');this.imageElem.setAttributeNS('http://www.w3.org/1999/xlink','href',assetPath);this.layerElement.appendChild(this.imageElem);this.baseElement.setAttribute('width',this.assetData.w);this.baseElement.setAttribute('height',this.assetData.h);}else{this.layerElement.appendChild(img);}img.crossOrigin='anonymous';img.src=assetPath;if(this.data.ln){this.baseElement.setAttribute('id',this.data.ln);}};/* global PropertyFactory, degToRads, Matrix, extendPrototype, BaseElement, FrameElement, HierarchyElement */function HCameraElement(data,globalData,comp){this.initFrame();this.initBaseData(data,globalData,comp);this.initHierarchy();var getProp=PropertyFactory.getProp;this.pe=getProp(this,data.pe,0,0,this);if(data.ks.p.s){this.px=getProp(this,data.ks.p.x,1,0,this);this.py=getProp(this,data.ks.p.y,1,0,this);this.pz=getProp(this,data.ks.p.z,1,0,this);}else{this.p=getProp(this,data.ks.p,1,0,this);}if(data.ks.a){this.a=getProp(this,data.ks.a,1,0,this);}if(data.ks.or.k.length&&data.ks.or.k[0].to){var i;var len=data.ks.or.k.length;for(i=0;i<len;i+=1){data.ks.or.k[i].to=null;data.ks.or.k[i].ti=null;}}this.or=getProp(this,data.ks.or,1,degToRads,this);this.or.sh=true;this.rx=getProp(this,data.ks.rx,0,degToRads,this);this.ry=getProp(this,data.ks.ry,0,degToRads,this);this.rz=getProp(this,data.ks.rz,0,degToRads,this);this.mat=new Matrix();this._prevMat=new Matrix();this._isFirstFrame=true;// TODO: find a better way to make the HCamera element to be compatible with the LayerInterface and TransformInterface.
this.finalTransform={mProp:this};}extendPrototype([BaseElement,FrameElement,HierarchyElement],HCameraElement);HCameraElement.prototype.setup=function(){var i;var len=this.comp.threeDElements.length;var comp;var perspectiveStyle;var containerStyle;for(i=0;i<len;i+=1){// [perspectiveElem,container]
comp=this.comp.threeDElements[i];if(comp.type==='3d'){perspectiveStyle=comp.perspectiveElem.style;containerStyle=comp.container.style;var perspective=this.pe.v+'px';var origin='0px 0px 0px';var matrix='matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)';perspectiveStyle.perspective=perspective;perspectiveStyle.webkitPerspective=perspective;containerStyle.transformOrigin=origin;containerStyle.mozTransformOrigin=origin;containerStyle.webkitTransformOrigin=origin;perspectiveStyle.transform=matrix;perspectiveStyle.webkitTransform=matrix;}}};HCameraElement.prototype.createElements=function(){};HCameraElement.prototype.hide=function(){};HCameraElement.prototype.renderFrame=function(){var _mdf=this._isFirstFrame;var i;var len;if(this.hierarchy){len=this.hierarchy.length;for(i=0;i<len;i+=1){_mdf=this.hierarchy[i].finalTransform.mProp._mdf||_mdf;}}if(_mdf||this.pe._mdf||this.p&&this.p._mdf||this.px&&(this.px._mdf||this.py._mdf||this.pz._mdf)||this.rx._mdf||this.ry._mdf||this.rz._mdf||this.or._mdf||this.a&&this.a._mdf){this.mat.reset();if(this.hierarchy){len=this.hierarchy.length-1;for(i=len;i>=0;i-=1){var mTransf=this.hierarchy[i].finalTransform.mProp;this.mat.translate(-mTransf.p.v[0],-mTransf.p.v[1],mTransf.p.v[2]);this.mat.rotateX(-mTransf.or.v[0]).rotateY(-mTransf.or.v[1]).rotateZ(mTransf.or.v[2]);this.mat.rotateX(-mTransf.rx.v).rotateY(-mTransf.ry.v).rotateZ(mTransf.rz.v);this.mat.scale(1/mTransf.s.v[0],1/mTransf.s.v[1],1/mTransf.s.v[2]);this.mat.translate(mTransf.a.v[0],mTransf.a.v[1],mTransf.a.v[2]);}}if(this.p){this.mat.translate(-this.p.v[0],-this.p.v[1],this.p.v[2]);}else{this.mat.translate(-this.px.v,-this.py.v,this.pz.v);}if(this.a){var diffVector;if(this.p){diffVector=[this.p.v[0]-this.a.v[0],this.p.v[1]-this.a.v[1],this.p.v[2]-this.a.v[2]];}else{diffVector=[this.px.v-this.a.v[0],this.py.v-this.a.v[1],this.pz.v-this.a.v[2]];}var mag=Math.sqrt(Math.pow(diffVector[0],2)+Math.pow(diffVector[1],2)+Math.pow(diffVector[2],2));// var lookDir = getNormalizedPoint(getDiffVector(this.a.v,this.p.v));
var lookDir=[diffVector[0]/mag,diffVector[1]/mag,diffVector[2]/mag];var lookLengthOnXZ=Math.sqrt(lookDir[2]*lookDir[2]+lookDir[0]*lookDir[0]);var mRotationX=Math.atan2(lookDir[1],lookLengthOnXZ);var mRotationY=Math.atan2(lookDir[0],-lookDir[2]);this.mat.rotateY(mRotationY).rotateX(-mRotationX);}this.mat.rotateX(-this.rx.v).rotateY(-this.ry.v).rotateZ(this.rz.v);this.mat.rotateX(-this.or.v[0]).rotateY(-this.or.v[1]).rotateZ(this.or.v[2]);this.mat.translate(this.globalData.compSize.w/2,this.globalData.compSize.h/2,0);this.mat.translate(0,0,this.pe.v);var hasMatrixChanged=!this._prevMat.equals(this.mat);if((hasMatrixChanged||this.pe._mdf)&&this.comp.threeDElements){len=this.comp.threeDElements.length;var comp;var perspectiveStyle;var containerStyle;for(i=0;i<len;i+=1){comp=this.comp.threeDElements[i];if(comp.type==='3d'){if(hasMatrixChanged){var matValue=this.mat.toCSS();containerStyle=comp.container.style;containerStyle.transform=matValue;containerStyle.webkitTransform=matValue;}if(this.pe._mdf){perspectiveStyle=comp.perspectiveElem.style;perspectiveStyle.perspective=this.pe.v+'px';perspectiveStyle.webkitPerspective=this.pe.v+'px';}}}this.mat.clone(this._prevMat);}}this._isFirstFrame=false;};HCameraElement.prototype.prepareFrame=function(num){this.prepareProperties(num,true);};HCameraElement.prototype.destroy=function(){};HCameraElement.prototype.getBaseElement=function(){return null;};function HEffects(){}HEffects.prototype.renderFrame=function(){};/* global createTag, AnimationItem *//* exported animationManager */var animationManager=function(){var moduleOb={};var registeredAnimations=[];var initTime=0;var len=0;var playingAnimationsNum=0;var _stopped=true;var _isFrozen=false;function removeElement(ev){var i=0;var animItem=ev.target;while(i<len){if(registeredAnimations[i].animation===animItem){registeredAnimations.splice(i,1);i-=1;len-=1;if(!animItem.isPaused){subtractPlayingCount();}}i+=1;}}function registerAnimation(element,animationData){if(!element){return null;}var i=0;while(i<len){if(registeredAnimations[i].elem===element&&registeredAnimations[i].elem!==null){return registeredAnimations[i].animation;}i+=1;}var animItem=new AnimationItem();setupAnimation(animItem,element);animItem.setData(element,animationData);return animItem;}function getRegisteredAnimations(){var i;var lenAnims=registeredAnimations.length;var animations=[];for(i=0;i<lenAnims;i+=1){animations.push(registeredAnimations[i].animation);}return animations;}function addPlayingCount(){playingAnimationsNum+=1;activate();}function subtractPlayingCount(){playingAnimationsNum-=1;}function setupAnimation(animItem,element){animItem.addEventListener('destroy',removeElement);animItem.addEventListener('_active',addPlayingCount);animItem.addEventListener('_idle',subtractPlayingCount);registeredAnimations.push({elem:element,animation:animItem});len+=1;}function loadAnimation(params){var animItem=new AnimationItem();setupAnimation(animItem,null);animItem.setParams(params);return animItem;}function setSpeed(val,animation){var i;for(i=0;i<len;i+=1){registeredAnimations[i].animation.setSpeed(val,animation);}}function setDirection(val,animation){var i;for(i=0;i<len;i+=1){registeredAnimations[i].animation.setDirection(val,animation);}}function play(animation){var i;for(i=0;i<len;i+=1){registeredAnimations[i].animation.play(animation);}}function resume(nowTime){var elapsedTime=nowTime-initTime;var i;for(i=0;i<len;i+=1){registeredAnimations[i].animation.advanceTime(elapsedTime);}initTime=nowTime;if(playingAnimationsNum&&!_isFrozen){window.requestAnimationFrame(resume);}else{_stopped=true;}}function first(nowTime){initTime=nowTime;window.requestAnimationFrame(resume);}function pause(animation){var i;for(i=0;i<len;i+=1){registeredAnimations[i].animation.pause(animation);}}function goToAndStop(value,isFrame,animation){var i;for(i=0;i<len;i+=1){registeredAnimations[i].animation.goToAndStop(value,isFrame,animation);}}function stop(animation){var i;for(i=0;i<len;i+=1){registeredAnimations[i].animation.stop(animation);}}function togglePause(animation){var i;for(i=0;i<len;i+=1){registeredAnimations[i].animation.togglePause(animation);}}function destroy(animation){var i;for(i=len-1;i>=0;i-=1){registeredAnimations[i].animation.destroy(animation);}}function searchAnimations(animationData,standalone,renderer){var animElements=[].concat([].slice.call(document.getElementsByClassName('lottie')),[].slice.call(document.getElementsByClassName('bodymovin')));var i;var lenAnims=animElements.length;for(i=0;i<lenAnims;i+=1){if(renderer){animElements[i].setAttribute('data-bm-type',renderer);}registerAnimation(animElements[i],animationData);}if(standalone&&lenAnims===0){if(!renderer){renderer='svg';}var body=document.getElementsByTagName('body')[0];body.innerText='';var div=createTag('div');div.style.width='100%';div.style.height='100%';div.setAttribute('data-bm-type',renderer);body.appendChild(div);registerAnimation(div,animationData);}}function resize(){var i;for(i=0;i<len;i+=1){registeredAnimations[i].animation.resize();}}function activate(){if(!_isFrozen&&playingAnimationsNum){if(_stopped){window.requestAnimationFrame(first);_stopped=false;}}}function freeze(){_isFrozen=true;}function unfreeze(){_isFrozen=false;activate();}function setVolume(val,animation){var i;for(i=0;i<len;i+=1){registeredAnimations[i].animation.setVolume(val,animation);}}function mute(animation){var i;for(i=0;i<len;i+=1){registeredAnimations[i].animation.mute(animation);}}function unmute(animation){var i;for(i=0;i<len;i+=1){registeredAnimations[i].animation.unmute(animation);}}moduleOb.registerAnimation=registerAnimation;moduleOb.loadAnimation=loadAnimation;moduleOb.setSpeed=setSpeed;moduleOb.setDirection=setDirection;moduleOb.play=play;moduleOb.pause=pause;moduleOb.stop=stop;moduleOb.togglePause=togglePause;moduleOb.searchAnimations=searchAnimations;moduleOb.resize=resize;// moduleOb.start = start;
moduleOb.goToAndStop=goToAndStop;moduleOb.destroy=destroy;moduleOb.freeze=freeze;moduleOb.unfreeze=unfreeze;moduleOb.setVolume=setVolume;moduleOb.mute=mute;moduleOb.unmute=unmute;moduleOb.getRegisteredAnimations=getRegisteredAnimations;return moduleOb;}();/* global createElementID, subframeEnabled, ProjectInterface, ImagePreloader, audioControllerFactory, extendPrototype, BaseEvent,
CanvasRenderer, SVGRenderer, HybridRenderer, assetLoader, dataManager, expressionsPlugin, BMEnterFrameEvent, BMCompleteLoopEvent,
BMCompleteEvent, BMSegmentStartEvent, BMDestroyEvent, BMEnterFrameEvent, BMCompleteLoopEvent, BMCompleteEvent, BMSegmentStartEvent,
BMDestroyEvent, BMRenderFrameErrorEvent, BMConfigErrorEvent, markerParser */var AnimationItem=function AnimationItem(){this._cbs=[];this.name='';this.path='';this.isLoaded=false;this.currentFrame=0;this.currentRawFrame=0;this.firstFrame=0;this.totalFrames=0;this.frameRate=0;this.frameMult=0;this.playSpeed=1;this.playDirection=1;this.playCount=0;this.animationData={};this.assets=[];this.isPaused=true;this.autoplay=false;this.loop=true;this.renderer=null;this.animationID=createElementID();this.assetsPath='';this.timeCompleted=0;this.segmentPos=0;this.isSubframeEnabled=subframeEnabled;this.segments=[];this._idle=true;this._completedLoop=false;this.projectInterface=ProjectInterface();this.imagePreloader=new ImagePreloader();this.audioController=audioControllerFactory();this.markers=[];};extendPrototype([BaseEvent],AnimationItem);AnimationItem.prototype.setParams=function(params){if(params.wrapper||params.container){this.wrapper=params.wrapper||params.container;}var animType='svg';if(params.animType){animType=params.animType;}else if(params.renderer){animType=params.renderer;}switch(animType){case'canvas':this.renderer=new CanvasRenderer(this,params.rendererSettings);break;case'svg':this.renderer=new SVGRenderer(this,params.rendererSettings);break;default:this.renderer=new HybridRenderer(this,params.rendererSettings);break;}this.imagePreloader.setCacheType(animType,this.renderer.globalData.defs);this.renderer.setProjectInterface(this.projectInterface);this.animType=animType;if(params.loop===''||params.loop===null||params.loop===undefined||params.loop===true){this.loop=true;}else if(params.loop===false){this.loop=false;}else{this.loop=parseInt(params.loop,10);}this.autoplay='autoplay'in params?params.autoplay:true;this.name=params.name?params.name:'';this.autoloadSegments=Object.prototype.hasOwnProperty.call(params,'autoloadSegments')?params.autoloadSegments:true;this.assetsPath=params.assetsPath;this.initialSegment=params.initialSegment;if(params.audioFactory){this.audioController.setAudioFactory(params.audioFactory);}if(params.animationData){this.configAnimation(params.animationData);}else if(params.path){if(params.path.lastIndexOf('\\')!==-1){this.path=params.path.substr(0,params.path.lastIndexOf('\\')+1);}else{this.path=params.path.substr(0,params.path.lastIndexOf('/')+1);}this.fileName=params.path.substr(params.path.lastIndexOf('/')+1);this.fileName=this.fileName.substr(0,this.fileName.lastIndexOf('.json'));assetLoader.load(params.path,this.configAnimation.bind(this),function(){this.trigger('data_failed');}.bind(this));}};AnimationItem.prototype.setData=function(wrapper,animationData){if(animationData){if((typeof animationData==="undefined"?"undefined":_typeof(animationData))!=='object'){animationData=JSON.parse(animationData);}}var params={wrapper:wrapper,animationData:animationData};var wrapperAttributes=wrapper.attributes;params.path=wrapperAttributes.getNamedItem('data-animation-path')// eslint-disable-line no-nested-ternary
?wrapperAttributes.getNamedItem('data-animation-path').value:wrapperAttributes.getNamedItem('data-bm-path')// eslint-disable-line no-nested-ternary
?wrapperAttributes.getNamedItem('data-bm-path').value:wrapperAttributes.getNamedItem('bm-path')?wrapperAttributes.getNamedItem('bm-path').value:'';params.animType=wrapperAttributes.getNamedItem('data-anim-type')// eslint-disable-line no-nested-ternary
?wrapperAttributes.getNamedItem('data-anim-type').value:wrapperAttributes.getNamedItem('data-bm-type')// eslint-disable-line no-nested-ternary
?wrapperAttributes.getNamedItem('data-bm-type').value:wrapperAttributes.getNamedItem('bm-type')// eslint-disable-line no-nested-ternary
?wrapperAttributes.getNamedItem('bm-type').value:wrapperAttributes.getNamedItem('data-bm-renderer')// eslint-disable-line no-nested-ternary
?wrapperAttributes.getNamedItem('data-bm-renderer').value:wrapperAttributes.getNamedItem('bm-renderer')?wrapperAttributes.getNamedItem('bm-renderer').value:'canvas';var loop=wrapperAttributes.getNamedItem('data-anim-loop')// eslint-disable-line no-nested-ternary
?wrapperAttributes.getNamedItem('data-anim-loop').value:wrapperAttributes.getNamedItem('data-bm-loop')// eslint-disable-line no-nested-ternary
?wrapperAttributes.getNamedItem('data-bm-loop').value:wrapperAttributes.getNamedItem('bm-loop')?wrapperAttributes.getNamedItem('bm-loop').value:'';if(loop==='false'){params.loop=false;}else if(loop==='true'){params.loop=true;}else if(loop!==''){params.loop=parseInt(loop,10);}var autoplay=wrapperAttributes.getNamedItem('data-anim-autoplay')// eslint-disable-line no-nested-ternary
?wrapperAttributes.getNamedItem('data-anim-autoplay').value:wrapperAttributes.getNamedItem('data-bm-autoplay')// eslint-disable-line no-nested-ternary
?wrapperAttributes.getNamedItem('data-bm-autoplay').value:wrapperAttributes.getNamedItem('bm-autoplay')?wrapperAttributes.getNamedItem('bm-autoplay').value:true;params.autoplay=autoplay!=='false';params.name=wrapperAttributes.getNamedItem('data-name')// eslint-disable-line no-nested-ternary
?wrapperAttributes.getNamedItem('data-name').value:wrapperAttributes.getNamedItem('data-bm-name')// eslint-disable-line no-nested-ternary
?wrapperAttributes.getNamedItem('data-bm-name').value:wrapperAttributes.getNamedItem('bm-name')?wrapperAttributes.getNamedItem('bm-name').value:'';var prerender=wrapperAttributes.getNamedItem('data-anim-prerender')// eslint-disable-line no-nested-ternary
?wrapperAttributes.getNamedItem('data-anim-prerender').value:wrapperAttributes.getNamedItem('data-bm-prerender')// eslint-disable-line no-nested-ternary
?wrapperAttributes.getNamedItem('data-bm-prerender').value:wrapperAttributes.getNamedItem('bm-prerender')?wrapperAttributes.getNamedItem('bm-prerender').value:'';if(prerender==='false'){params.prerender=false;}this.setParams(params);};AnimationItem.prototype.includeLayers=function(data){if(data.op>this.animationData.op){this.animationData.op=data.op;this.totalFrames=Math.floor(data.op-this.animationData.ip);}var layers=this.animationData.layers;var i;var len=layers.length;var newLayers=data.layers;var j;var jLen=newLayers.length;for(j=0;j<jLen;j+=1){i=0;while(i<len){if(layers[i].id===newLayers[j].id){layers[i]=newLayers[j];break;}i+=1;}}if(data.chars||data.fonts){this.renderer.globalData.fontManager.addChars(data.chars);this.renderer.globalData.fontManager.addFonts(data.fonts,this.renderer.globalData.defs);}if(data.assets){len=data.assets.length;for(i=0;i<len;i+=1){this.animationData.assets.push(data.assets[i]);}}this.animationData.__complete=false;dataManager.completeData(this.animationData,this.renderer.globalData.fontManager);this.renderer.includeLayers(data.layers);if(expressionsPlugin){expressionsPlugin.initExpressions(this);}this.loadNextSegment();};AnimationItem.prototype.loadNextSegment=function(){var segments=this.animationData.segments;if(!segments||segments.length===0||!this.autoloadSegments){this.trigger('data_ready');this.timeCompleted=this.totalFrames;return;}var segment=segments.shift();this.timeCompleted=segment.time*this.frameRate;var segmentPath=this.path+this.fileName+'_'+this.segmentPos+'.json';this.segmentPos+=1;assetLoader.load(segmentPath,this.includeLayers.bind(this),function(){this.trigger('data_failed');}.bind(this));};AnimationItem.prototype.loadSegments=function(){var segments=this.animationData.segments;if(!segments){this.timeCompleted=this.totalFrames;}this.loadNextSegment();};AnimationItem.prototype.imagesLoaded=function(){this.trigger('loaded_images');this.checkLoaded();};AnimationItem.prototype.preloadImages=function(){this.imagePreloader.setAssetsPath(this.assetsPath);this.imagePreloader.setPath(this.path);this.imagePreloader.loadAssets(this.animationData.assets,this.imagesLoaded.bind(this));};AnimationItem.prototype.configAnimation=function(animData){if(!this.renderer){return;}try{this.animationData=animData;if(this.initialSegment){this.totalFrames=Math.floor(this.initialSegment[1]-this.initialSegment[0]);this.firstFrame=Math.round(this.initialSegment[0]);}else{this.totalFrames=Math.floor(this.animationData.op-this.animationData.ip);this.firstFrame=Math.round(this.animationData.ip);}this.renderer.configAnimation(animData);if(!animData.assets){animData.assets=[];}this.assets=this.animationData.assets;this.frameRate=this.animationData.fr;this.frameMult=this.animationData.fr/1000;this.renderer.searchExtraCompositions(animData.assets);this.markers=markerParser(animData.markers||[]);this.trigger('config_ready');this.preloadImages();this.loadSegments();this.updaFrameModifier();this.waitForFontsLoaded();if(this.isPaused){this.audioController.pause();}}catch(error){this.triggerConfigError(error);}};AnimationItem.prototype.waitForFontsLoaded=function(){if(!this.renderer){return;}if(this.renderer.globalData.fontManager.isLoaded){this.checkLoaded();}else{setTimeout(this.waitForFontsLoaded.bind(this),20);}};AnimationItem.prototype.checkLoaded=function(){if(!this.isLoaded&&this.renderer.globalData.fontManager.isLoaded&&(this.imagePreloader.loadedImages()||this.renderer.rendererType!=='canvas')&&this.imagePreloader.loadedFootages()){this.isLoaded=true;dataManager.completeData(this.animationData,this.renderer.globalData.fontManager);if(expressionsPlugin){expressionsPlugin.initExpressions(this);}this.renderer.initItems();setTimeout(function(){this.trigger('DOMLoaded');}.bind(this),0);this.gotoFrame();if(this.autoplay){this.play();}}};AnimationItem.prototype.resize=function(){this.renderer.updateContainerSize();};AnimationItem.prototype.setSubframe=function(flag){this.isSubframeEnabled=!!flag;};AnimationItem.prototype.gotoFrame=function(){this.currentFrame=this.isSubframeEnabled?this.currentRawFrame:~~this.currentRawFrame;// eslint-disable-line no-bitwise
if(this.timeCompleted!==this.totalFrames&&this.currentFrame>this.timeCompleted){this.currentFrame=this.timeCompleted;}this.trigger('enterFrame');this.renderFrame();};AnimationItem.prototype.renderFrame=function(){if(this.isLoaded===false||!this.renderer){return;}try{this.renderer.renderFrame(this.currentFrame+this.firstFrame);}catch(error){this.triggerRenderFrameError(error);}};AnimationItem.prototype.play=function(name){if(name&&this.name!==name){return;}if(this.isPaused===true){this.isPaused=false;this.audioController.resume();if(this._idle){this._idle=false;this.trigger('_active');}}};AnimationItem.prototype.pause=function(name){if(name&&this.name!==name){return;}if(this.isPaused===false){this.isPaused=true;this._idle=true;this.trigger('_idle');this.audioController.pause();}};AnimationItem.prototype.togglePause=function(name){if(name&&this.name!==name){return;}if(this.isPaused===true){this.play();}else{this.pause();}};AnimationItem.prototype.stop=function(name){if(name&&this.name!==name){return;}this.pause();this.playCount=0;this._completedLoop=false;this.setCurrentRawFrameValue(0);};AnimationItem.prototype.getMarkerData=function(markerName){var marker;for(var i=0;i<this.markers.length;i+=1){marker=this.markers[i];if(marker.payload&&marker.payload.name===markerName){return marker;}}return null;};AnimationItem.prototype.goToAndStop=function(value,isFrame,name){if(name&&this.name!==name){return;}var numValue=Number(value);if(isNaN(numValue)){var marker=this.getMarkerData(value);if(marker){this.goToAndStop(marker.time,true);}}else if(isFrame){this.setCurrentRawFrameValue(value);}else{this.setCurrentRawFrameValue(value*this.frameModifier);}this.pause();};AnimationItem.prototype.goToAndPlay=function(value,isFrame,name){if(name&&this.name!==name){return;}var numValue=Number(value);if(isNaN(numValue)){var marker=this.getMarkerData(value);if(marker){if(!marker.duration){this.goToAndStop(marker.time,true);}else{this.playSegments([marker.time,marker.time+marker.duration],true);}}}else{this.goToAndStop(numValue,isFrame,name);}this.play();};AnimationItem.prototype.advanceTime=function(value){if(this.isPaused===true||this.isLoaded===false){return;}var nextValue=this.currentRawFrame+value*this.frameModifier;var _isComplete=false;// Checking if nextValue > totalFrames - 1 for addressing non looping and looping animations.
// If animation won't loop, it should stop at totalFrames - 1. If it will loop it should complete the last frame and then loop.
if(nextValue>=this.totalFrames-1&&this.frameModifier>0){if(!this.loop||this.playCount===this.loop){if(!this.checkSegments(nextValue>this.totalFrames?nextValue%this.totalFrames:0)){_isComplete=true;nextValue=this.totalFrames-1;}}else if(nextValue>=this.totalFrames){this.playCount+=1;if(!this.checkSegments(nextValue%this.totalFrames)){this.setCurrentRawFrameValue(nextValue%this.totalFrames);this._completedLoop=true;this.trigger('loopComplete');}}else{this.setCurrentRawFrameValue(nextValue);}}else if(nextValue<0){if(!this.checkSegments(nextValue%this.totalFrames)){if(this.loop&&!(this.playCount--<=0&&this.loop!==true)){// eslint-disable-line no-plusplus
this.setCurrentRawFrameValue(this.totalFrames+nextValue%this.totalFrames);if(!this._completedLoop){this._completedLoop=true;}else{this.trigger('loopComplete');}}else{_isComplete=true;nextValue=0;}}}else{this.setCurrentRawFrameValue(nextValue);}if(_isComplete){this.setCurrentRawFrameValue(nextValue);this.pause();this.trigger('complete');}};AnimationItem.prototype.adjustSegment=function(arr,offset){this.playCount=0;if(arr[1]<arr[0]){if(this.frameModifier>0){if(this.playSpeed<0){this.setSpeed(-this.playSpeed);}else{this.setDirection(-1);}}this.totalFrames=arr[0]-arr[1];this.timeCompleted=this.totalFrames;this.firstFrame=arr[1];this.setCurrentRawFrameValue(this.totalFrames-0.001-offset);}else if(arr[1]>arr[0]){if(this.frameModifier<0){if(this.playSpeed<0){this.setSpeed(-this.playSpeed);}else{this.setDirection(1);}}this.totalFrames=arr[1]-arr[0];this.timeCompleted=this.totalFrames;this.firstFrame=arr[0];this.setCurrentRawFrameValue(0.001+offset);}this.trigger('segmentStart');};AnimationItem.prototype.setSegment=function(init,end){var pendingFrame=-1;if(this.isPaused){if(this.currentRawFrame+this.firstFrame<init){pendingFrame=init;}else if(this.currentRawFrame+this.firstFrame>end){pendingFrame=end-init;}}this.firstFrame=init;this.totalFrames=end-init;this.timeCompleted=this.totalFrames;if(pendingFrame!==-1){this.goToAndStop(pendingFrame,true);}};AnimationItem.prototype.playSegments=function(arr,forceFlag){if(forceFlag){this.segments.length=0;}if(_typeof(arr[0])==='object'){var i;var len=arr.length;for(i=0;i<len;i+=1){this.segments.push(arr[i]);}}else{this.segments.push(arr);}if(this.segments.length&&forceFlag){this.adjustSegment(this.segments.shift(),0);}if(this.isPaused){this.play();}};AnimationItem.prototype.resetSegments=function(forceFlag){this.segments.length=0;this.segments.push([this.animationData.ip,this.animationData.op]);// this.segments.push([this.animationData.ip*this.frameRate,Math.floor(this.animationData.op - this.animationData.ip+this.animationData.ip*this.frameRate)]);
if(forceFlag){this.checkSegments(0);}};AnimationItem.prototype.checkSegments=function(offset){if(this.segments.length){this.adjustSegment(this.segments.shift(),offset);return true;}return false;};AnimationItem.prototype.destroy=function(name){if(name&&this.name!==name||!this.renderer){return;}this.renderer.destroy();this.imagePreloader.destroy();this.trigger('destroy');this._cbs=null;this.onEnterFrame=null;this.onLoopComplete=null;this.onComplete=null;this.onSegmentStart=null;this.onDestroy=null;this.renderer=null;this.renderer=null;this.imagePreloader=null;this.projectInterface=null;};AnimationItem.prototype.setCurrentRawFrameValue=function(value){this.currentRawFrame=value;this.gotoFrame();};AnimationItem.prototype.setSpeed=function(val){this.playSpeed=val;this.updaFrameModifier();};AnimationItem.prototype.setDirection=function(val){this.playDirection=val<0?-1:1;this.updaFrameModifier();};AnimationItem.prototype.setVolume=function(val,name){if(name&&this.name!==name){return;}this.audioController.setVolume(val);};AnimationItem.prototype.getVolume=function(){return this.audioController.getVolume();};AnimationItem.prototype.mute=function(name){if(name&&this.name!==name){return;}this.audioController.mute();};AnimationItem.prototype.unmute=function(name){if(name&&this.name!==name){return;}this.audioController.unmute();};AnimationItem.prototype.updaFrameModifier=function(){this.frameModifier=this.frameMult*this.playSpeed*this.playDirection;this.audioController.setRate(this.playSpeed*this.playDirection);};AnimationItem.prototype.getPath=function(){return this.path;};AnimationItem.prototype.getAssetsPath=function(assetData){var path='';if(assetData.e){path=assetData.p;}else if(this.assetsPath){var imagePath=assetData.p;if(imagePath.indexOf('images/')!==-1){imagePath=imagePath.split('/')[1];}path=this.assetsPath+imagePath;}else{path=this.path;path+=assetData.u?assetData.u:'';path+=assetData.p;}return path;};AnimationItem.prototype.getAssetData=function(id){var i=0;var len=this.assets.length;while(i<len){if(id===this.assets[i].id){return this.assets[i];}i+=1;}return null;};AnimationItem.prototype.hide=function(){this.renderer.hide();};AnimationItem.prototype.show=function(){this.renderer.show();};AnimationItem.prototype.getDuration=function(isFrame){return isFrame?this.totalFrames:this.totalFrames/this.frameRate;};AnimationItem.prototype.trigger=function(name){if(this._cbs&&this._cbs[name]){switch(name){case'enterFrame':this.triggerEvent(name,new BMEnterFrameEvent(name,this.currentFrame,this.totalFrames,this.frameModifier));break;case'loopComplete':this.triggerEvent(name,new BMCompleteLoopEvent(name,this.loop,this.playCount,this.frameMult));break;case'complete':this.triggerEvent(name,new BMCompleteEvent(name,this.frameMult));break;case'segmentStart':this.triggerEvent(name,new BMSegmentStartEvent(name,this.firstFrame,this.totalFrames));break;case'destroy':this.triggerEvent(name,new BMDestroyEvent(name,this));break;default:this.triggerEvent(name);}}if(name==='enterFrame'&&this.onEnterFrame){this.onEnterFrame.call(this,new BMEnterFrameEvent(name,this.currentFrame,this.totalFrames,this.frameMult));}if(name==='loopComplete'&&this.onLoopComplete){this.onLoopComplete.call(this,new BMCompleteLoopEvent(name,this.loop,this.playCount,this.frameMult));}if(name==='complete'&&this.onComplete){this.onComplete.call(this,new BMCompleteEvent(name,this.frameMult));}if(name==='segmentStart'&&this.onSegmentStart){this.onSegmentStart.call(this,new BMSegmentStartEvent(name,this.firstFrame,this.totalFrames));}if(name==='destroy'&&this.onDestroy){this.onDestroy.call(this,new BMDestroyEvent(name,this));}};AnimationItem.prototype.triggerRenderFrameError=function(nativeError){var error=new BMRenderFrameErrorEvent(nativeError,this.currentFrame);this.triggerEvent('error',error);if(this.onError){this.onError.call(this,error);}};AnimationItem.prototype.triggerConfigError=function(nativeError){var error=new BMConfigErrorEvent(nativeError,this.currentFrame);this.triggerEvent('error',error);if(this.onError){this.onError.call(this,error);}};/* global CompExpressionInterface, expressionsPlugin: writable *//* exported expressionsPlugin */var Expressions=function(){var ob={};ob.initExpressions=initExpressions;function initExpressions(animation){var stackCount=0;var registers=[];function pushExpression(){stackCount+=1;}function popExpression(){stackCount-=1;if(stackCount===0){releaseInstances();}}function registerExpressionProperty(expression){if(registers.indexOf(expression)===-1){registers.push(expression);}}function releaseInstances(){var i;var len=registers.length;for(i=0;i<len;i+=1){registers[i].release();}registers.length=0;}animation.renderer.compInterface=CompExpressionInterface(animation.renderer);animation.renderer.globalData.projectInterface.registerComposition(animation.renderer);animation.renderer.globalData.pushExpression=pushExpression;animation.renderer.globalData.popExpression=popExpression;animation.renderer.globalData.registerExpressionProperty=registerExpressionProperty;}return ob;}();expressionsPlugin=Expressions;/* eslint-disable camelcase, no-unused-vars *//* global BMMath, BezierFactory, createTypedArray, degToRads, shapePool */var ExpressionManager=function(){'use strict';var ob={};var Math=BMMath;var window=null;var document=null;function $bm_isInstanceOfArray(arr){return arr.constructor===Array||arr.constructor===Float32Array;}function isNumerable(tOfV,v){return tOfV==='number'||tOfV==='boolean'||tOfV==='string'||v instanceof Number;}function $bm_neg(a){var tOfA=typeof a==="undefined"?"undefined":_typeof(a);if(tOfA==='number'||tOfA==='boolean'||a instanceof Number){return-a;}if($bm_isInstanceOfArray(a)){var i;var lenA=a.length;var retArr=[];for(i=0;i<lenA;i+=1){retArr[i]=-a[i];}return retArr;}if(a.propType){return a.v;}return-a;}var easeInBez=BezierFactory.getBezierEasing(0.333,0,0.833,0.833,'easeIn').get;var easeOutBez=BezierFactory.getBezierEasing(0.167,0.167,0.667,1,'easeOut').get;var easeInOutBez=BezierFactory.getBezierEasing(0.33,0,0.667,1,'easeInOut').get;function sum(a,b){var tOfA=typeof a==="undefined"?"undefined":_typeof(a);var tOfB=typeof b==="undefined"?"undefined":_typeof(b);if(tOfA==='string'||tOfB==='string'){return a+b;}if(isNumerable(tOfA,a)&&isNumerable(tOfB,b)){return a+b;}if($bm_isInstanceOfArray(a)&&isNumerable(tOfB,b)){a=a.slice(0);a[0]+=b;return a;}if(isNumerable(tOfA,a)&&$bm_isInstanceOfArray(b)){b=b.slice(0);b[0]=a+b[0];return b;}if($bm_isInstanceOfArray(a)&&$bm_isInstanceOfArray(b)){var i=0;var lenA=a.length;var lenB=b.length;var retArr=[];while(i<lenA||i<lenB){if((typeof a[i]==='number'||a[i]instanceof Number)&&(typeof b[i]==='number'||b[i]instanceof Number)){retArr[i]=a[i]+b[i];}else{retArr[i]=b[i]===undefined?a[i]:a[i]||b[i];}i+=1;}return retArr;}return 0;}var add=sum;function sub(a,b){var tOfA=typeof a==="undefined"?"undefined":_typeof(a);var tOfB=typeof b==="undefined"?"undefined":_typeof(b);if(isNumerable(tOfA,a)&&isNumerable(tOfB,b)){if(tOfA==='string'){a=parseInt(a,10);}if(tOfB==='string'){b=parseInt(b,10);}return a-b;}if($bm_isInstanceOfArray(a)&&isNumerable(tOfB,b)){a=a.slice(0);a[0]-=b;return a;}if(isNumerable(tOfA,a)&&$bm_isInstanceOfArray(b)){b=b.slice(0);b[0]=a-b[0];return b;}if($bm_isInstanceOfArray(a)&&$bm_isInstanceOfArray(b)){var i=0;var lenA=a.length;var lenB=b.length;var retArr=[];while(i<lenA||i<lenB){if((typeof a[i]==='number'||a[i]instanceof Number)&&(typeof b[i]==='number'||b[i]instanceof Number)){retArr[i]=a[i]-b[i];}else{retArr[i]=b[i]===undefined?a[i]:a[i]||b[i];}i+=1;}return retArr;}return 0;}function mul(a,b){var tOfA=typeof a==="undefined"?"undefined":_typeof(a);var tOfB=typeof b==="undefined"?"undefined":_typeof(b);var arr;if(isNumerable(tOfA,a)&&isNumerable(tOfB,b)){return a*b;}var i;var len;if($bm_isInstanceOfArray(a)&&isNumerable(tOfB,b)){len=a.length;arr=createTypedArray('float32',len);for(i=0;i<len;i+=1){arr[i]=a[i]*b;}return arr;}if(isNumerable(tOfA,a)&&$bm_isInstanceOfArray(b)){len=b.length;arr=createTypedArray('float32',len);for(i=0;i<len;i+=1){arr[i]=a*b[i];}return arr;}return 0;}function div(a,b){var tOfA=typeof a==="undefined"?"undefined":_typeof(a);var tOfB=typeof b==="undefined"?"undefined":_typeof(b);var arr;if(isNumerable(tOfA,a)&&isNumerable(tOfB,b)){return a/b;}var i;var len;if($bm_isInstanceOfArray(a)&&isNumerable(tOfB,b)){len=a.length;arr=createTypedArray('float32',len);for(i=0;i<len;i+=1){arr[i]=a[i]/b;}return arr;}if(isNumerable(tOfA,a)&&$bm_isInstanceOfArray(b)){len=b.length;arr=createTypedArray('float32',len);for(i=0;i<len;i+=1){arr[i]=a/b[i];}return arr;}return 0;}function mod(a,b){if(typeof a==='string'){a=parseInt(a,10);}if(typeof b==='string'){b=parseInt(b,10);}return a%b;}var $bm_sum=sum;var $bm_sub=sub;var $bm_mul=mul;var $bm_div=div;var $bm_mod=mod;function clamp(num,min,max){if(min>max){var mm=max;max=min;min=mm;}return Math.min(Math.max(num,min),max);}function radiansToDegrees(val){return val/degToRads;}var radians_to_degrees=radiansToDegrees;function degreesToRadians(val){return val*degToRads;}var degrees_to_radians=radiansToDegrees;var helperLengthArray=[0,0,0,0,0,0];function length(arr1,arr2){if(typeof arr1==='number'||arr1 instanceof Number){arr2=arr2||0;return Math.abs(arr1-arr2);}if(!arr2){arr2=helperLengthArray;}var i;var len=Math.min(arr1.length,arr2.length);var addedLength=0;for(i=0;i<len;i+=1){addedLength+=Math.pow(arr2[i]-arr1[i],2);}return Math.sqrt(addedLength);}function normalize(vec){return div(vec,length(vec));}function rgbToHsl(val){var r=val[0];var g=val[1];var b=val[2];var max=Math.max(r,g,b);var min=Math.min(r,g,b);var h;var s;var l=(max+min)/2;if(max===min){h=0;// achromatic
s=0;// achromatic
}else{var d=max-min;s=l>0.5?d/(2-max-min):d/(max+min);switch(max){case r:h=(g-b)/d+(g<b?6:0);break;case g:h=(b-r)/d+2;break;case b:h=(r-g)/d+4;break;default:break;}h/=6;}return[h,s,l,val[3]];}function hue2rgb(p,q,t){if(t<0)t+=1;if(t>1)t-=1;if(t<1/6)return p+(q-p)*6*t;if(t<1/2)return q;if(t<2/3)return p+(q-p)*(2/3-t)*6;return p;}function hslToRgb(val){var h=val[0];var s=val[1];var l=val[2];var r;var g;var b;if(s===0){r=l;// achromatic
b=l;// achromatic
g=l;// achromatic
}else{var q=l<0.5?l*(1+s):l+s-l*s;var p=2*l-q;r=hue2rgb(p,q,h+1/3);g=hue2rgb(p,q,h);b=hue2rgb(p,q,h-1/3);}return[r,g,b,val[3]];}function linear(t,tMin,tMax,value1,value2){if(value1===undefined||value2===undefined){value1=tMin;value2=tMax;tMin=0;tMax=1;}if(tMax<tMin){var _tMin=tMax;tMax=tMin;tMin=_tMin;}if(t<=tMin){return value1;}if(t>=tMax){return value2;}var perc=tMax===tMin?0:(t-tMin)/(tMax-tMin);if(!value1.length){return value1+(value2-value1)*perc;}var i;var len=value1.length;var arr=createTypedArray('float32',len);for(i=0;i<len;i+=1){arr[i]=value1[i]+(value2[i]-value1[i])*perc;}return arr;}function random(min,max){if(max===undefined){if(min===undefined){min=0;max=1;}else{max=min;min=undefined;}}if(max.length){var i;var len=max.length;if(!min){min=createTypedArray('float32',len);}var arr=createTypedArray('float32',len);var rnd=BMMath.random();for(i=0;i<len;i+=1){arr[i]=min[i]+rnd*(max[i]-min[i]);}return arr;}if(min===undefined){min=0;}var rndm=BMMath.random();return min+rndm*(max-min);}function createPath(points,inTangents,outTangents,closed){var i;var len=points.length;var path=shapePool.newElement();path.setPathData(!!closed,len);var arrPlaceholder=[0,0];var inVertexPoint;var outVertexPoint;for(i=0;i<len;i+=1){inVertexPoint=inTangents&&inTangents[i]?inTangents[i]:arrPlaceholder;outVertexPoint=outTangents&&outTangents[i]?outTangents[i]:arrPlaceholder;path.setTripleAt(points[i][0],points[i][1],outVertexPoint[0]+points[i][0],outVertexPoint[1]+points[i][1],inVertexPoint[0]+points[i][0],inVertexPoint[1]+points[i][1],i,true);}return path;}function initiateExpression(elem,data,property){var val=data.x;var needsVelocity=/velocity(?![\w\d])/.test(val);var _needsRandom=val.indexOf('random')!==-1;var elemType=elem.data.ty;var transform;var $bm_transform;var content;var effect;var thisProperty=property;thisProperty.valueAtTime=thisProperty.getValueAtTime;Object.defineProperty(thisProperty,'value',{get:function get(){return thisProperty.v;}});elem.comp.frameDuration=1/elem.comp.globalData.frameRate;elem.comp.displayStartTime=0;var inPoint=elem.data.ip/elem.comp.globalData.frameRate;var outPoint=elem.data.op/elem.comp.globalData.frameRate;var width=elem.data.sw?elem.data.sw:0;var height=elem.data.sh?elem.data.sh:0;var name=elem.data.nm;var loopIn;var loop_in;var loopOut;var loop_out;var smooth;var toWorld;var fromWorld;var fromComp;var toComp;var fromCompToSurface;var position;var rotation;var anchorPoint;var scale;var thisLayer;var thisComp;var mask;var valueAtTime;var velocityAtTime;var scoped_bm_rt;var expression_function=eval('[function _expression_function(){'+val+';scoped_bm_rt=$bm_rt}]')[0];// eslint-disable-line no-eval
var numKeys=property.kf?data.k.length:0;var active=!this.data||this.data.hd!==true;var wiggle=function wiggle(freq,amp){var iWiggle;var j;var lenWiggle=this.pv.length?this.pv.length:1;var addedAmps=createTypedArray('float32',lenWiggle);freq=5;var iterations=Math.floor(time*freq);iWiggle=0;j=0;while(iWiggle<iterations){// var rnd = BMMath.random();
for(j=0;j<lenWiggle;j+=1){addedAmps[j]+=-amp+amp*2*BMMath.random();// addedAmps[j] += -amp + amp*2*rnd;
}iWiggle+=1;}// var rnd2 = BMMath.random();
var periods=time*freq;var perc=periods-Math.floor(periods);var arr=createTypedArray('float32',lenWiggle);if(lenWiggle>1){for(j=0;j<lenWiggle;j+=1){arr[j]=this.pv[j]+addedAmps[j]+(-amp+amp*2*BMMath.random())*perc;// arr[j] = this.pv[j] + addedAmps[j] + (-amp + amp*2*rnd)*perc;
// arr[i] = this.pv[i] + addedAmp + amp1*perc + amp2*(1-perc);
}return arr;}return this.pv+addedAmps[0]+(-amp+amp*2*BMMath.random())*perc;}.bind(this);if(thisProperty.loopIn){loopIn=thisProperty.loopIn.bind(thisProperty);loop_in=loopIn;}if(thisProperty.loopOut){loopOut=thisProperty.loopOut.bind(thisProperty);loop_out=loopOut;}if(thisProperty.smooth){smooth=thisProperty.smooth.bind(thisProperty);}function loopInDuration(type,duration){return loopIn(type,duration,true);}function loopOutDuration(type,duration){return loopOut(type,duration,true);}if(this.getValueAtTime){valueAtTime=this.getValueAtTime.bind(this);}if(this.getVelocityAtTime){velocityAtTime=this.getVelocityAtTime.bind(this);}var comp=elem.comp.globalData.projectInterface.bind(elem.comp.globalData.projectInterface);function lookAt(elem1,elem2){var fVec=[elem2[0]-elem1[0],elem2[1]-elem1[1],elem2[2]-elem1[2]];var pitch=Math.atan2(fVec[0],Math.sqrt(fVec[1]*fVec[1]+fVec[2]*fVec[2]))/degToRads;var yaw=-Math.atan2(fVec[1],fVec[2])/degToRads;return[yaw,pitch,0];}function easeOut(t,tMin,tMax,val1,val2){return applyEase(easeOutBez,t,tMin,tMax,val1,val2);}function easeIn(t,tMin,tMax,val1,val2){return applyEase(easeInBez,t,tMin,tMax,val1,val2);}function ease(t,tMin,tMax,val1,val2){return applyEase(easeInOutBez,t,tMin,tMax,val1,val2);}function applyEase(fn,t,tMin,tMax,val1,val2){if(val1===undefined){val1=tMin;val2=tMax;}else{t=(t-tMin)/(tMax-tMin);}if(t>1){t=1;}else if(t<0){t=0;}var mult=fn(t);if($bm_isInstanceOfArray(val1)){var iKey;var lenKey=val1.length;var arr=createTypedArray('float32',lenKey);for(iKey=0;iKey<lenKey;iKey+=1){arr[iKey]=(val2[iKey]-val1[iKey])*mult+val1[iKey];}return arr;}return(val2-val1)*mult+val1;}function nearestKey(time){var iKey;var lenKey=data.k.length;var index;var keyTime;if(!data.k.length||typeof data.k[0]==='number'){index=0;keyTime=0;}else{index=-1;time*=elem.comp.globalData.frameRate;if(time<data.k[0].t){index=1;keyTime=data.k[0].t;}else{for(iKey=0;iKey<lenKey-1;iKey+=1){if(time===data.k[iKey].t){index=iKey+1;keyTime=data.k[iKey].t;break;}else if(time>data.k[iKey].t&&time<data.k[iKey+1].t){if(time-data.k[iKey].t>data.k[iKey+1].t-time){index=iKey+2;keyTime=data.k[iKey+1].t;}else{index=iKey+1;keyTime=data.k[iKey].t;}break;}}if(index===-1){index=iKey+1;keyTime=data.k[iKey].t;}}}var obKey={};obKey.index=index;obKey.time=keyTime/elem.comp.globalData.frameRate;return obKey;}function key(ind){var obKey;var iKey;var lenKey;if(!data.k.length||typeof data.k[0]==='number'){throw new Error('The property has no keyframe at index '+ind);}ind-=1;obKey={time:data.k[ind].t/elem.comp.globalData.frameRate,value:[]};var arr=Object.prototype.hasOwnProperty.call(data.k[ind],'s')?data.k[ind].s:data.k[ind-1].e;lenKey=arr.length;for(iKey=0;iKey<lenKey;iKey+=1){obKey[iKey]=arr[iKey];obKey.value[iKey]=arr[iKey];}return obKey;}function framesToTime(frames,fps){if(!fps){fps=elem.comp.globalData.frameRate;}return frames/fps;}function timeToFrames(t,fps){if(!t&&t!==0){t=time;}if(!fps){fps=elem.comp.globalData.frameRate;}return t*fps;}function seedRandom(seed){BMMath.seedrandom(randSeed+seed);}function sourceRectAtTime(){return elem.sourceRectAtTime();}function substring(init,end){if(typeof value==='string'){if(end===undefined){return value.substring(init);}return value.substring(init,end);}return'';}function substr(init,end){if(typeof value==='string'){if(end===undefined){return value.substr(init);}return value.substr(init,end);}return'';}function posterizeTime(framesPerSecond){time=framesPerSecond===0?0:Math.floor(time*framesPerSecond)/framesPerSecond;value=valueAtTime(time);}var time;var velocity;var value;var text;var textIndex;var textTotal;var selectorValue;var index=elem.data.ind;var hasParent=!!(elem.hierarchy&&elem.hierarchy.length);var parent;var randSeed=Math.floor(Math.random()*1000000);var globalData=elem.globalData;function executeExpression(_value){// globalData.pushExpression();
value=_value;if(_needsRandom){seedRandom(randSeed);}if(this.frameExpressionId===elem.globalData.frameId&&this.propType!=='textSelector'){return value;}if(this.propType==='textSelector'){textIndex=this.textIndex;textTotal=this.textTotal;selectorValue=this.selectorValue;}if(!thisLayer){text=elem.layerInterface.text;thisLayer=elem.layerInterface;thisComp=elem.comp.compInterface;toWorld=thisLayer.toWorld.bind(thisLayer);fromWorld=thisLayer.fromWorld.bind(thisLayer);fromComp=thisLayer.fromComp.bind(thisLayer);toComp=thisLayer.toComp.bind(thisLayer);mask=thisLayer.mask?thisLayer.mask.bind(thisLayer):null;fromCompToSurface=fromComp;}if(!transform){transform=elem.layerInterface('ADBE Transform Group');$bm_transform=transform;if(transform){anchorPoint=transform.anchorPoint;/* position = transform.position;
                    rotation = transform.rotation;
                    scale = transform.scale; */}}if(elemType===4&&!content){content=thisLayer('ADBE Root Vectors Group');}if(!effect){effect=thisLayer(4);}hasParent=!!(elem.hierarchy&&elem.hierarchy.length);if(hasParent&&!parent){parent=elem.hierarchy[0].layerInterface;}time=this.comp.renderedFrame/this.comp.globalData.frameRate;if(needsVelocity){velocity=velocityAtTime(time);}expression_function();this.frameExpressionId=elem.globalData.frameId;// TODO: Check if it's possible to return on ShapeInterface the .v value
if(scoped_bm_rt.propType==='shape'){scoped_bm_rt=scoped_bm_rt.v;}// globalData.popExpression();
return scoped_bm_rt;}return executeExpression;}ob.initiateExpression=initiateExpression;return ob;}();/* global ExpressionManager, createTypedArray *//* exported expressionHelpers */var expressionHelpers=function(){function searchExpressions(elem,data,prop){if(data.x){prop.k=true;prop.x=true;prop.initiateExpression=ExpressionManager.initiateExpression;prop.effectsSequence.push(prop.initiateExpression(elem,data,prop).bind(prop));}}function getValueAtTime(frameNum){frameNum*=this.elem.globalData.frameRate;frameNum-=this.offsetTime;if(frameNum!==this._cachingAtTime.lastFrame){this._cachingAtTime.lastIndex=this._cachingAtTime.lastFrame<frameNum?this._cachingAtTime.lastIndex:0;this._cachingAtTime.value=this.interpolateValue(frameNum,this._cachingAtTime);this._cachingAtTime.lastFrame=frameNum;}return this._cachingAtTime.value;}function getSpeedAtTime(frameNum){var delta=-0.01;var v1=this.getValueAtTime(frameNum);var v2=this.getValueAtTime(frameNum+delta);var speed=0;if(v1.length){var i;for(i=0;i<v1.length;i+=1){speed+=Math.pow(v2[i]-v1[i],2);}speed=Math.sqrt(speed)*100;}else{speed=0;}return speed;}function getVelocityAtTime(frameNum){if(this.vel!==undefined){return this.vel;}var delta=-0.001;// frameNum += this.elem.data.st;
var v1=this.getValueAtTime(frameNum);var v2=this.getValueAtTime(frameNum+delta);var velocity;if(v1.length){velocity=createTypedArray('float32',v1.length);var i;for(i=0;i<v1.length;i+=1){// removing frameRate
// if needed, don't add it here
// velocity[i] = this.elem.globalData.frameRate*((v2[i] - v1[i])/delta);
velocity[i]=(v2[i]-v1[i])/delta;}}else{velocity=(v2-v1)/delta;}return velocity;}function getStaticValueAtTime(){return this.pv;}function setGroupProperty(propertyGroup){this.propertyGroup=propertyGroup;}return{searchExpressions:searchExpressions,getSpeedAtTime:getSpeedAtTime,getVelocityAtTime:getVelocityAtTime,getValueAtTime:getValueAtTime,getStaticValueAtTime:getStaticValueAtTime,setGroupProperty:setGroupProperty};}();/* global createTypedArray, Matrix, TransformPropertyFactory, expressionHelpers, PropertyFactory, expressionHelpers,
initialDefaultFrame, shapePool, ShapePropertyFactory, bez, extendPrototype, ExpressionManager, createSizedArray */(function addPropertyDecorator(){function loopOut(type,duration,durationFlag){if(!this.k||!this.keyframes){return this.pv;}type=type?type.toLowerCase():'';var currentFrame=this.comp.renderedFrame;var keyframes=this.keyframes;var lastKeyFrame=keyframes[keyframes.length-1].t;if(currentFrame<=lastKeyFrame){return this.pv;}var cycleDuration;var firstKeyFrame;if(!durationFlag){if(!duration||duration>keyframes.length-1){duration=keyframes.length-1;}firstKeyFrame=keyframes[keyframes.length-1-duration].t;cycleDuration=lastKeyFrame-firstKeyFrame;}else{if(!duration){cycleDuration=Math.max(0,lastKeyFrame-this.elem.data.ip);}else{cycleDuration=Math.abs(lastKeyFrame-this.elem.comp.globalData.frameRate*duration);}firstKeyFrame=lastKeyFrame-cycleDuration;}var i;var len;var ret;if(type==='pingpong'){var iterations=Math.floor((currentFrame-firstKeyFrame)/cycleDuration);if(iterations%2!==0){return this.getValueAtTime((cycleDuration-(currentFrame-firstKeyFrame)%cycleDuration+firstKeyFrame)/this.comp.globalData.frameRate,0);// eslint-disable-line
}}else if(type==='offset'){var initV=this.getValueAtTime(firstKeyFrame/this.comp.globalData.frameRate,0);var endV=this.getValueAtTime(lastKeyFrame/this.comp.globalData.frameRate,0);var current=this.getValueAtTime(((currentFrame-firstKeyFrame)%cycleDuration+firstKeyFrame)/this.comp.globalData.frameRate,0);// eslint-disable-line
var repeats=Math.floor((currentFrame-firstKeyFrame)/cycleDuration);if(this.pv.length){ret=new Array(initV.length);len=ret.length;for(i=0;i<len;i+=1){ret[i]=(endV[i]-initV[i])*repeats+current[i];}return ret;}return(endV-initV)*repeats+current;}else if(type==='continue'){var lastValue=this.getValueAtTime(lastKeyFrame/this.comp.globalData.frameRate,0);var nextLastValue=this.getValueAtTime((lastKeyFrame-0.001)/this.comp.globalData.frameRate,0);if(this.pv.length){ret=new Array(lastValue.length);len=ret.length;for(i=0;i<len;i+=1){ret[i]=lastValue[i]+(lastValue[i]-nextLastValue[i])*((currentFrame-lastKeyFrame)/this.comp.globalData.frameRate)/0.0005;// eslint-disable-line
}return ret;}return lastValue+(lastValue-nextLastValue)*((currentFrame-lastKeyFrame)/0.001);}return this.getValueAtTime(((currentFrame-firstKeyFrame)%cycleDuration+firstKeyFrame)/this.comp.globalData.frameRate,0);// eslint-disable-line
}function loopIn(type,duration,durationFlag){if(!this.k){return this.pv;}type=type?type.toLowerCase():'';var currentFrame=this.comp.renderedFrame;var keyframes=this.keyframes;var firstKeyFrame=keyframes[0].t;if(currentFrame>=firstKeyFrame){return this.pv;}var cycleDuration;var lastKeyFrame;if(!durationFlag){if(!duration||duration>keyframes.length-1){duration=keyframes.length-1;}lastKeyFrame=keyframes[duration].t;cycleDuration=lastKeyFrame-firstKeyFrame;}else{if(!duration){cycleDuration=Math.max(0,this.elem.data.op-firstKeyFrame);}else{cycleDuration=Math.abs(this.elem.comp.globalData.frameRate*duration);}lastKeyFrame=firstKeyFrame+cycleDuration;}var i;var len;var ret;if(type==='pingpong'){var iterations=Math.floor((firstKeyFrame-currentFrame)/cycleDuration);if(iterations%2===0){return this.getValueAtTime(((firstKeyFrame-currentFrame)%cycleDuration+firstKeyFrame)/this.comp.globalData.frameRate,0);// eslint-disable-line
}}else if(type==='offset'){var initV=this.getValueAtTime(firstKeyFrame/this.comp.globalData.frameRate,0);var endV=this.getValueAtTime(lastKeyFrame/this.comp.globalData.frameRate,0);var current=this.getValueAtTime((cycleDuration-(firstKeyFrame-currentFrame)%cycleDuration+firstKeyFrame)/this.comp.globalData.frameRate,0);var repeats=Math.floor((firstKeyFrame-currentFrame)/cycleDuration)+1;if(this.pv.length){ret=new Array(initV.length);len=ret.length;for(i=0;i<len;i+=1){ret[i]=current[i]-(endV[i]-initV[i])*repeats;}return ret;}return current-(endV-initV)*repeats;}else if(type==='continue'){var firstValue=this.getValueAtTime(firstKeyFrame/this.comp.globalData.frameRate,0);var nextFirstValue=this.getValueAtTime((firstKeyFrame+0.001)/this.comp.globalData.frameRate,0);if(this.pv.length){ret=new Array(firstValue.length);len=ret.length;for(i=0;i<len;i+=1){ret[i]=firstValue[i]+(firstValue[i]-nextFirstValue[i])*(firstKeyFrame-currentFrame)/0.001;}return ret;}return firstValue+(firstValue-nextFirstValue)*(firstKeyFrame-currentFrame)/0.001;}return this.getValueAtTime((cycleDuration-((firstKeyFrame-currentFrame)%cycleDuration+firstKeyFrame))/this.comp.globalData.frameRate,0);// eslint-disable-line
}function smooth(width,samples){if(!this.k){return this.pv;}width=(width||0.4)*0.5;samples=Math.floor(samples||5);if(samples<=1){return this.pv;}var currentTime=this.comp.renderedFrame/this.comp.globalData.frameRate;var initFrame=currentTime-width;var endFrame=currentTime+width;var sampleFrequency=samples>1?(endFrame-initFrame)/(samples-1):1;var i=0;var j=0;var value;if(this.pv.length){value=createTypedArray('float32',this.pv.length);}else{value=0;}var sampleValue;while(i<samples){sampleValue=this.getValueAtTime(initFrame+i*sampleFrequency);if(this.pv.length){for(j=0;j<this.pv.length;j+=1){value[j]+=sampleValue[j];}}else{value+=sampleValue;}i+=1;}if(this.pv.length){for(j=0;j<this.pv.length;j+=1){value[j]/=samples;}}else{value/=samples;}return value;}function getTransformValueAtTime(time){if(!this._transformCachingAtTime){this._transformCachingAtTime={v:new Matrix()};}/// /
var matrix=this._transformCachingAtTime.v;matrix.cloneFromProps(this.pre.props);if(this.appliedTransformations<1){var anchor=this.a.getValueAtTime(time);matrix.translate(-anchor[0]*this.a.mult,-anchor[1]*this.a.mult,anchor[2]*this.a.mult);}if(this.appliedTransformations<2){var scale=this.s.getValueAtTime(time);matrix.scale(scale[0]*this.s.mult,scale[1]*this.s.mult,scale[2]*this.s.mult);}if(this.sk&&this.appliedTransformations<3){var skew=this.sk.getValueAtTime(time);var skewAxis=this.sa.getValueAtTime(time);matrix.skewFromAxis(-skew*this.sk.mult,skewAxis*this.sa.mult);}if(this.r&&this.appliedTransformations<4){var rotation=this.r.getValueAtTime(time);matrix.rotate(-rotation*this.r.mult);}else if(!this.r&&this.appliedTransformations<4){var rotationZ=this.rz.getValueAtTime(time);var rotationY=this.ry.getValueAtTime(time);var rotationX=this.rx.getValueAtTime(time);var orientation=this.or.getValueAtTime(time);matrix.rotateZ(-rotationZ*this.rz.mult).rotateY(rotationY*this.ry.mult).rotateX(rotationX*this.rx.mult).rotateZ(-orientation[2]*this.or.mult).rotateY(orientation[1]*this.or.mult).rotateX(orientation[0]*this.or.mult);}if(this.data.p&&this.data.p.s){var positionX=this.px.getValueAtTime(time);var positionY=this.py.getValueAtTime(time);if(this.data.p.z){var positionZ=this.pz.getValueAtTime(time);matrix.translate(positionX*this.px.mult,positionY*this.py.mult,-positionZ*this.pz.mult);}else{matrix.translate(positionX*this.px.mult,positionY*this.py.mult,0);}}else{var position=this.p.getValueAtTime(time);matrix.translate(position[0]*this.p.mult,position[1]*this.p.mult,-position[2]*this.p.mult);}return matrix;/// /
}function getTransformStaticValueAtTime(){return this.v.clone(new Matrix());}var getTransformProperty=TransformPropertyFactory.getTransformProperty;TransformPropertyFactory.getTransformProperty=function(elem,data,container){var prop=getTransformProperty(elem,data,container);if(prop.dynamicProperties.length){prop.getValueAtTime=getTransformValueAtTime.bind(prop);}else{prop.getValueAtTime=getTransformStaticValueAtTime.bind(prop);}prop.setGroupProperty=expressionHelpers.setGroupProperty;return prop;};var propertyGetProp=PropertyFactory.getProp;PropertyFactory.getProp=function(elem,data,type,mult,container){var prop=propertyGetProp(elem,data,type,mult,container);// prop.getVelocityAtTime = getVelocityAtTime;
// prop.loopOut = loopOut;
// prop.loopIn = loopIn;
if(prop.kf){prop.getValueAtTime=expressionHelpers.getValueAtTime.bind(prop);}else{prop.getValueAtTime=expressionHelpers.getStaticValueAtTime.bind(prop);}prop.setGroupProperty=expressionHelpers.setGroupProperty;prop.loopOut=loopOut;prop.loopIn=loopIn;prop.smooth=smooth;prop.getVelocityAtTime=expressionHelpers.getVelocityAtTime.bind(prop);prop.getSpeedAtTime=expressionHelpers.getSpeedAtTime.bind(prop);prop.numKeys=data.a===1?data.k.length:0;prop.propertyIndex=data.ix;var value=0;if(type!==0){value=createTypedArray('float32',data.a===1?data.k[0].s.length:data.k.length);}prop._cachingAtTime={lastFrame:initialDefaultFrame,lastIndex:0,value:value};expressionHelpers.searchExpressions(elem,data,prop);if(prop.k){container.addDynamicProperty(prop);}return prop;};function getShapeValueAtTime(frameNum){// For now this caching object is created only when needed instead of creating it when the shape is initialized.
if(!this._cachingAtTime){this._cachingAtTime={shapeValue:shapePool.clone(this.pv),lastIndex:0,lastTime:initialDefaultFrame};}frameNum*=this.elem.globalData.frameRate;frameNum-=this.offsetTime;if(frameNum!==this._cachingAtTime.lastTime){this._cachingAtTime.lastIndex=this._cachingAtTime.lastTime<frameNum?this._caching.lastIndex:0;this._cachingAtTime.lastTime=frameNum;this.interpolateShape(frameNum,this._cachingAtTime.shapeValue,this._cachingAtTime);}return this._cachingAtTime.shapeValue;}var ShapePropertyConstructorFunction=ShapePropertyFactory.getConstructorFunction();var KeyframedShapePropertyConstructorFunction=ShapePropertyFactory.getKeyframedConstructorFunction();function ShapeExpressions(){}ShapeExpressions.prototype={vertices:function vertices(prop,time){if(this.k){this.getValue();}var shapePath=this.v;if(time!==undefined){shapePath=this.getValueAtTime(time,0);}var i;var len=shapePath._length;var vertices=shapePath[prop];var points=shapePath.v;var arr=createSizedArray(len);for(i=0;i<len;i+=1){if(prop==='i'||prop==='o'){arr[i]=[vertices[i][0]-points[i][0],vertices[i][1]-points[i][1]];}else{arr[i]=[vertices[i][0],vertices[i][1]];}}return arr;},points:function points(time){return this.vertices('v',time);},inTangents:function inTangents(time){return this.vertices('i',time);},outTangents:function outTangents(time){return this.vertices('o',time);},isClosed:function isClosed(){return this.v.c;},pointOnPath:function pointOnPath(perc,time){var shapePath=this.v;if(time!==undefined){shapePath=this.getValueAtTime(time,0);}if(!this._segmentsLength){this._segmentsLength=bez.getSegmentsLength(shapePath);}var segmentsLength=this._segmentsLength;var lengths=segmentsLength.lengths;var lengthPos=segmentsLength.totalLength*perc;var i=0;var len=lengths.length;var accumulatedLength=0;var pt;while(i<len){if(accumulatedLength+lengths[i].addedLength>lengthPos){var initIndex=i;var endIndex=shapePath.c&&i===len-1?0:i+1;var segmentPerc=(lengthPos-accumulatedLength)/lengths[i].addedLength;pt=bez.getPointInSegment(shapePath.v[initIndex],shapePath.v[endIndex],shapePath.o[initIndex],shapePath.i[endIndex],segmentPerc,lengths[i]);break;}else{accumulatedLength+=lengths[i].addedLength;}i+=1;}if(!pt){pt=shapePath.c?[shapePath.v[0][0],shapePath.v[0][1]]:[shapePath.v[shapePath._length-1][0],shapePath.v[shapePath._length-1][1]];}return pt;},vectorOnPath:function vectorOnPath(perc,time,vectorType){// perc doesn't use triple equality because it can be a Number object as well as a primitive.
if(perc==1){// eslint-disable-line eqeqeq
perc=this.v.c;}else if(perc==0){// eslint-disable-line eqeqeq
perc=0.999;}var pt1=this.pointOnPath(perc,time);var pt2=this.pointOnPath(perc+0.001,time);var xLength=pt2[0]-pt1[0];var yLength=pt2[1]-pt1[1];var magnitude=Math.sqrt(Math.pow(xLength,2)+Math.pow(yLength,2));if(magnitude===0){return[0,0];}var unitVector=vectorType==='tangent'?[xLength/magnitude,yLength/magnitude]:[-yLength/magnitude,xLength/magnitude];return unitVector;},tangentOnPath:function tangentOnPath(perc,time){return this.vectorOnPath(perc,time,'tangent');},normalOnPath:function normalOnPath(perc,time){return this.vectorOnPath(perc,time,'normal');},setGroupProperty:expressionHelpers.setGroupProperty,getValueAtTime:expressionHelpers.getStaticValueAtTime};extendPrototype([ShapeExpressions],ShapePropertyConstructorFunction);extendPrototype([ShapeExpressions],KeyframedShapePropertyConstructorFunction);KeyframedShapePropertyConstructorFunction.prototype.getValueAtTime=getShapeValueAtTime;KeyframedShapePropertyConstructorFunction.prototype.initiateExpression=ExpressionManager.initiateExpression;var propertyGetShapeProp=ShapePropertyFactory.getShapeProp;ShapePropertyFactory.getShapeProp=function(elem,data,type,arr,trims){var prop=propertyGetShapeProp(elem,data,type,arr,trims);prop.propertyIndex=data.ix;prop.lock=false;if(type===3){expressionHelpers.searchExpressions(elem,data.pt,prop);}else if(type===4){expressionHelpers.searchExpressions(elem,data.ks,prop);}if(prop.k){elem.addDynamicProperty(prop);}return prop;};})();/* global ExpressionManager, TextProperty */(function addDecorator(){function searchExpressions(){if(this.data.d.x){this.calculateExpression=ExpressionManager.initiateExpression.bind(this)(this.elem,this.data.d,this);this.addEffect(this.getExpressionValue.bind(this));return true;}return null;}TextProperty.prototype.getExpressionValue=function(currentValue,text){var newValue=this.calculateExpression(text);if(currentValue.t!==newValue){var newData={};this.copyData(newData,currentValue);newData.t=newValue.toString();newData.__complete=false;return newData;}return currentValue;};TextProperty.prototype.searchProperty=function(){var isKeyframed=this.searchKeyframes();var hasExpressions=this.searchExpressions();this.kf=isKeyframed||hasExpressions;return this.kf;};TextProperty.prototype.searchExpressions=searchExpressions;})();/* global propertyGroupFactory, PropertyInterface *//* exported ShapePathInterface */var ShapePathInterface=function(){return function pathInterfaceFactory(shape,view,propertyGroup){var prop=view.sh;function interfaceFunction(val){if(val==='Shape'||val==='shape'||val==='Path'||val==='path'||val==='ADBE Vector Shape'||val===2){return interfaceFunction.path;}return null;}var _propertyGroup=propertyGroupFactory(interfaceFunction,propertyGroup);prop.setGroupProperty(PropertyInterface('Path',_propertyGroup));Object.defineProperties(interfaceFunction,{path:{get:function get(){if(prop.k){prop.getValue();}return prop;}},shape:{get:function get(){if(prop.k){prop.getValue();}return prop;}},_name:{value:shape.nm},ix:{value:shape.ix},propertyIndex:{value:shape.ix},mn:{value:shape.mn},propertyGroup:{value:propertyGroup}});return interfaceFunction;};}();/* exported propertyGroupFactory */var propertyGroupFactory=function(){return function(interfaceFunction,parentPropertyGroup){return function(val){val=val===undefined?1:val;if(val<=0){return interfaceFunction;}return parentPropertyGroup(val-1);};};}();/* exported PropertyInterface */var PropertyInterface=function(){return function(propertyName,propertyGroup){var interfaceFunction={_name:propertyName};function _propertyGroup(val){val=val===undefined?1:val;if(val<=0){return interfaceFunction;}return propertyGroup(val-1);}return _propertyGroup;};}();/* global ExpressionPropertyInterface, PropertyInterface, propertyGroupFactory, ShapePathInterface *//* exported ShapeExpressionInterface */var ShapeExpressionInterface=function(){function iterateElements(shapes,view,propertyGroup){var arr=[];var i;var len=shapes?shapes.length:0;for(i=0;i<len;i+=1){if(shapes[i].ty==='gr'){arr.push(groupInterfaceFactory(shapes[i],view[i],propertyGroup));}else if(shapes[i].ty==='fl'){arr.push(fillInterfaceFactory(shapes[i],view[i],propertyGroup));}else if(shapes[i].ty==='st'){arr.push(strokeInterfaceFactory(shapes[i],view[i],propertyGroup));}else if(shapes[i].ty==='tm'){arr.push(trimInterfaceFactory(shapes[i],view[i],propertyGroup));}else if(shapes[i].ty==='tr'){// arr.push(transformInterfaceFactory(shapes[i],view[i],propertyGroup));
}else if(shapes[i].ty==='el'){arr.push(ellipseInterfaceFactory(shapes[i],view[i],propertyGroup));}else if(shapes[i].ty==='sr'){arr.push(starInterfaceFactory(shapes[i],view[i],propertyGroup));}else if(shapes[i].ty==='sh'){arr.push(ShapePathInterface(shapes[i],view[i],propertyGroup));}else if(shapes[i].ty==='rc'){arr.push(rectInterfaceFactory(shapes[i],view[i],propertyGroup));}else if(shapes[i].ty==='rd'){arr.push(roundedInterfaceFactory(shapes[i],view[i],propertyGroup));}else if(shapes[i].ty==='rp'){arr.push(repeaterInterfaceFactory(shapes[i],view[i],propertyGroup));}}return arr;}function contentsInterfaceFactory(shape,view,propertyGroup){var interfaces;var interfaceFunction=function _interfaceFunction(value){var i=0;var len=interfaces.length;while(i<len){if(interfaces[i]._name===value||interfaces[i].mn===value||interfaces[i].propertyIndex===value||interfaces[i].ix===value||interfaces[i].ind===value){return interfaces[i];}i+=1;}if(typeof value==='number'){return interfaces[value-1];}return null;};interfaceFunction.propertyGroup=propertyGroupFactory(interfaceFunction,propertyGroup);interfaces=iterateElements(shape.it,view.it,interfaceFunction.propertyGroup);interfaceFunction.numProperties=interfaces.length;var transformInterface=transformInterfaceFactory(shape.it[shape.it.length-1],view.it[view.it.length-1],interfaceFunction.propertyGroup);interfaceFunction.transform=transformInterface;interfaceFunction.propertyIndex=shape.cix;interfaceFunction._name=shape.nm;return interfaceFunction;}function groupInterfaceFactory(shape,view,propertyGroup){var interfaceFunction=function _interfaceFunction(value){switch(value){case'ADBE Vectors Group':case'Contents':case 2:return interfaceFunction.content;// Not necessary for now. Keeping them here in case a new case appears
// case 'ADBE Vector Transform Group':
// case 3:
default:return interfaceFunction.transform;}};interfaceFunction.propertyGroup=propertyGroupFactory(interfaceFunction,propertyGroup);var content=contentsInterfaceFactory(shape,view,interfaceFunction.propertyGroup);var transformInterface=transformInterfaceFactory(shape.it[shape.it.length-1],view.it[view.it.length-1],interfaceFunction.propertyGroup);interfaceFunction.content=content;interfaceFunction.transform=transformInterface;Object.defineProperty(interfaceFunction,'_name',{get:function get(){return shape.nm;}});// interfaceFunction.content = interfaceFunction;
interfaceFunction.numProperties=shape.np;interfaceFunction.propertyIndex=shape.ix;interfaceFunction.nm=shape.nm;interfaceFunction.mn=shape.mn;return interfaceFunction;}function fillInterfaceFactory(shape,view,propertyGroup){function interfaceFunction(val){if(val==='Color'||val==='color'){return interfaceFunction.color;}if(val==='Opacity'||val==='opacity'){return interfaceFunction.opacity;}return null;}Object.defineProperties(interfaceFunction,{color:{get:ExpressionPropertyInterface(view.c)},opacity:{get:ExpressionPropertyInterface(view.o)},_name:{value:shape.nm},mn:{value:shape.mn}});view.c.setGroupProperty(PropertyInterface('Color',propertyGroup));view.o.setGroupProperty(PropertyInterface('Opacity',propertyGroup));return interfaceFunction;}function strokeInterfaceFactory(shape,view,propertyGroup){var _propertyGroup=propertyGroupFactory(interfaceFunction,propertyGroup);var _dashPropertyGroup=propertyGroupFactory(dashOb,_propertyGroup);function addPropertyToDashOb(i){Object.defineProperty(dashOb,shape.d[i].nm,{get:ExpressionPropertyInterface(view.d.dataProps[i].p)});}var i;var len=shape.d?shape.d.length:0;var dashOb={};for(i=0;i<len;i+=1){addPropertyToDashOb(i);view.d.dataProps[i].p.setGroupProperty(_dashPropertyGroup);}function interfaceFunction(val){if(val==='Color'||val==='color'){return interfaceFunction.color;}if(val==='Opacity'||val==='opacity'){return interfaceFunction.opacity;}if(val==='Stroke Width'||val==='stroke width'){return interfaceFunction.strokeWidth;}return null;}Object.defineProperties(interfaceFunction,{color:{get:ExpressionPropertyInterface(view.c)},opacity:{get:ExpressionPropertyInterface(view.o)},strokeWidth:{get:ExpressionPropertyInterface(view.w)},dash:{get:function get(){return dashOb;}},_name:{value:shape.nm},mn:{value:shape.mn}});view.c.setGroupProperty(PropertyInterface('Color',_propertyGroup));view.o.setGroupProperty(PropertyInterface('Opacity',_propertyGroup));view.w.setGroupProperty(PropertyInterface('Stroke Width',_propertyGroup));return interfaceFunction;}function trimInterfaceFactory(shape,view,propertyGroup){function interfaceFunction(val){if(val===shape.e.ix||val==='End'||val==='end'){return interfaceFunction.end;}if(val===shape.s.ix){return interfaceFunction.start;}if(val===shape.o.ix){return interfaceFunction.offset;}return null;}var _propertyGroup=propertyGroupFactory(interfaceFunction,propertyGroup);interfaceFunction.propertyIndex=shape.ix;view.s.setGroupProperty(PropertyInterface('Start',_propertyGroup));view.e.setGroupProperty(PropertyInterface('End',_propertyGroup));view.o.setGroupProperty(PropertyInterface('Offset',_propertyGroup));interfaceFunction.propertyIndex=shape.ix;interfaceFunction.propertyGroup=propertyGroup;Object.defineProperties(interfaceFunction,{start:{get:ExpressionPropertyInterface(view.s)},end:{get:ExpressionPropertyInterface(view.e)},offset:{get:ExpressionPropertyInterface(view.o)},_name:{value:shape.nm}});interfaceFunction.mn=shape.mn;return interfaceFunction;}function transformInterfaceFactory(shape,view,propertyGroup){function interfaceFunction(value){if(shape.a.ix===value||value==='Anchor Point'){return interfaceFunction.anchorPoint;}if(shape.o.ix===value||value==='Opacity'){return interfaceFunction.opacity;}if(shape.p.ix===value||value==='Position'){return interfaceFunction.position;}if(shape.r.ix===value||value==='Rotation'||value==='ADBE Vector Rotation'){return interfaceFunction.rotation;}if(shape.s.ix===value||value==='Scale'){return interfaceFunction.scale;}if(shape.sk&&shape.sk.ix===value||value==='Skew'){return interfaceFunction.skew;}if(shape.sa&&shape.sa.ix===value||value==='Skew Axis'){return interfaceFunction.skewAxis;}return null;}var _propertyGroup=propertyGroupFactory(interfaceFunction,propertyGroup);view.transform.mProps.o.setGroupProperty(PropertyInterface('Opacity',_propertyGroup));view.transform.mProps.p.setGroupProperty(PropertyInterface('Position',_propertyGroup));view.transform.mProps.a.setGroupProperty(PropertyInterface('Anchor Point',_propertyGroup));view.transform.mProps.s.setGroupProperty(PropertyInterface('Scale',_propertyGroup));view.transform.mProps.r.setGroupProperty(PropertyInterface('Rotation',_propertyGroup));if(view.transform.mProps.sk){view.transform.mProps.sk.setGroupProperty(PropertyInterface('Skew',_propertyGroup));view.transform.mProps.sa.setGroupProperty(PropertyInterface('Skew Angle',_propertyGroup));}view.transform.op.setGroupProperty(PropertyInterface('Opacity',_propertyGroup));Object.defineProperties(interfaceFunction,{opacity:{get:ExpressionPropertyInterface(view.transform.mProps.o)},position:{get:ExpressionPropertyInterface(view.transform.mProps.p)},anchorPoint:{get:ExpressionPropertyInterface(view.transform.mProps.a)},scale:{get:ExpressionPropertyInterface(view.transform.mProps.s)},rotation:{get:ExpressionPropertyInterface(view.transform.mProps.r)},skew:{get:ExpressionPropertyInterface(view.transform.mProps.sk)},skewAxis:{get:ExpressionPropertyInterface(view.transform.mProps.sa)},_name:{value:shape.nm}});interfaceFunction.ty='tr';interfaceFunction.mn=shape.mn;interfaceFunction.propertyGroup=propertyGroup;return interfaceFunction;}function ellipseInterfaceFactory(shape,view,propertyGroup){function interfaceFunction(value){if(shape.p.ix===value){return interfaceFunction.position;}if(shape.s.ix===value){return interfaceFunction.size;}return null;}var _propertyGroup=propertyGroupFactory(interfaceFunction,propertyGroup);interfaceFunction.propertyIndex=shape.ix;var prop=view.sh.ty==='tm'?view.sh.prop:view.sh;prop.s.setGroupProperty(PropertyInterface('Size',_propertyGroup));prop.p.setGroupProperty(PropertyInterface('Position',_propertyGroup));Object.defineProperties(interfaceFunction,{size:{get:ExpressionPropertyInterface(prop.s)},position:{get:ExpressionPropertyInterface(prop.p)},_name:{value:shape.nm}});interfaceFunction.mn=shape.mn;return interfaceFunction;}function starInterfaceFactory(shape,view,propertyGroup){function interfaceFunction(value){if(shape.p.ix===value){return interfaceFunction.position;}if(shape.r.ix===value){return interfaceFunction.rotation;}if(shape.pt.ix===value){return interfaceFunction.points;}if(shape.or.ix===value||value==='ADBE Vector Star Outer Radius'){return interfaceFunction.outerRadius;}if(shape.os.ix===value){return interfaceFunction.outerRoundness;}if(shape.ir&&(shape.ir.ix===value||value==='ADBE Vector Star Inner Radius')){return interfaceFunction.innerRadius;}if(shape.is&&shape.is.ix===value){return interfaceFunction.innerRoundness;}return null;}var _propertyGroup=propertyGroupFactory(interfaceFunction,propertyGroup);var prop=view.sh.ty==='tm'?view.sh.prop:view.sh;interfaceFunction.propertyIndex=shape.ix;prop.or.setGroupProperty(PropertyInterface('Outer Radius',_propertyGroup));prop.os.setGroupProperty(PropertyInterface('Outer Roundness',_propertyGroup));prop.pt.setGroupProperty(PropertyInterface('Points',_propertyGroup));prop.p.setGroupProperty(PropertyInterface('Position',_propertyGroup));prop.r.setGroupProperty(PropertyInterface('Rotation',_propertyGroup));if(shape.ir){prop.ir.setGroupProperty(PropertyInterface('Inner Radius',_propertyGroup));prop.is.setGroupProperty(PropertyInterface('Inner Roundness',_propertyGroup));}Object.defineProperties(interfaceFunction,{position:{get:ExpressionPropertyInterface(prop.p)},rotation:{get:ExpressionPropertyInterface(prop.r)},points:{get:ExpressionPropertyInterface(prop.pt)},outerRadius:{get:ExpressionPropertyInterface(prop.or)},outerRoundness:{get:ExpressionPropertyInterface(prop.os)},innerRadius:{get:ExpressionPropertyInterface(prop.ir)},innerRoundness:{get:ExpressionPropertyInterface(prop.is)},_name:{value:shape.nm}});interfaceFunction.mn=shape.mn;return interfaceFunction;}function rectInterfaceFactory(shape,view,propertyGroup){function interfaceFunction(value){if(shape.p.ix===value){return interfaceFunction.position;}if(shape.r.ix===value){return interfaceFunction.roundness;}if(shape.s.ix===value||value==='Size'||value==='ADBE Vector Rect Size'){return interfaceFunction.size;}return null;}var _propertyGroup=propertyGroupFactory(interfaceFunction,propertyGroup);var prop=view.sh.ty==='tm'?view.sh.prop:view.sh;interfaceFunction.propertyIndex=shape.ix;prop.p.setGroupProperty(PropertyInterface('Position',_propertyGroup));prop.s.setGroupProperty(PropertyInterface('Size',_propertyGroup));prop.r.setGroupProperty(PropertyInterface('Rotation',_propertyGroup));Object.defineProperties(interfaceFunction,{position:{get:ExpressionPropertyInterface(prop.p)},roundness:{get:ExpressionPropertyInterface(prop.r)},size:{get:ExpressionPropertyInterface(prop.s)},_name:{value:shape.nm}});interfaceFunction.mn=shape.mn;return interfaceFunction;}function roundedInterfaceFactory(shape,view,propertyGroup){function interfaceFunction(value){if(shape.r.ix===value||value==='Round Corners 1'){return interfaceFunction.radius;}return null;}var _propertyGroup=propertyGroupFactory(interfaceFunction,propertyGroup);var prop=view;interfaceFunction.propertyIndex=shape.ix;prop.rd.setGroupProperty(PropertyInterface('Radius',_propertyGroup));Object.defineProperties(interfaceFunction,{radius:{get:ExpressionPropertyInterface(prop.rd)},_name:{value:shape.nm}});interfaceFunction.mn=shape.mn;return interfaceFunction;}function repeaterInterfaceFactory(shape,view,propertyGroup){function interfaceFunction(value){if(shape.c.ix===value||value==='Copies'){return interfaceFunction.copies;}if(shape.o.ix===value||value==='Offset'){return interfaceFunction.offset;}return null;}var _propertyGroup=propertyGroupFactory(interfaceFunction,propertyGroup);var prop=view;interfaceFunction.propertyIndex=shape.ix;prop.c.setGroupProperty(PropertyInterface('Copies',_propertyGroup));prop.o.setGroupProperty(PropertyInterface('Offset',_propertyGroup));Object.defineProperties(interfaceFunction,{copies:{get:ExpressionPropertyInterface(prop.c)},offset:{get:ExpressionPropertyInterface(prop.o)},_name:{value:shape.nm}});interfaceFunction.mn=shape.mn;return interfaceFunction;}return function(shapes,view,propertyGroup){var interfaces;function _interfaceFunction(value){if(typeof value==='number'){value=value===undefined?1:value;if(value===0){return propertyGroup;}return interfaces[value-1];}var i=0;var len=interfaces.length;while(i<len){if(interfaces[i]._name===value){return interfaces[i];}i+=1;}return null;}function parentGroupWrapper(){return propertyGroup;}_interfaceFunction.propertyGroup=propertyGroupFactory(_interfaceFunction,parentGroupWrapper);interfaces=iterateElements(shapes,view,_interfaceFunction.propertyGroup);_interfaceFunction.numProperties=interfaces.length;_interfaceFunction._name='Contents';return _interfaceFunction;};}();/* exported TextExpressionInterface */var TextExpressionInterface=function(){return function(elem){var _prevValue;var _sourceText;function _thisLayerFunction(name){switch(name){case'ADBE Text Document':return _thisLayerFunction.sourceText;default:return null;}}Object.defineProperty(_thisLayerFunction,'sourceText',{get:function get(){elem.textProperty.getValue();var stringValue=elem.textProperty.currentData.t;if(stringValue!==_prevValue){elem.textProperty.currentData.t=_prevValue;_sourceText=new String(stringValue);// eslint-disable-line no-new-wrappers
// If stringValue is an empty string, eval returns undefined, so it has to be returned as a String primitive
_sourceText.value=stringValue||new String(stringValue);// eslint-disable-line no-new-wrappers
}return _sourceText;}});return _thisLayerFunction;};}();/* global Matrix, MaskManagerInterface, TransformExpressionInterface, getDescriptor *//* exported LayerExpressionInterface */var LayerExpressionInterface=function(){function getMatrix(time){var toWorldMat=new Matrix();if(time!==undefined){var propMatrix=this._elem.finalTransform.mProp.getValueAtTime(time);propMatrix.clone(toWorldMat);}else{var transformMat=this._elem.finalTransform.mProp;transformMat.applyToMatrix(toWorldMat);}return toWorldMat;}function toWorldVec(arr,time){var toWorldMat=this.getMatrix(time);toWorldMat.props[12]=0;toWorldMat.props[13]=0;toWorldMat.props[14]=0;return this.applyPoint(toWorldMat,arr);}function toWorld(arr,time){var toWorldMat=this.getMatrix(time);return this.applyPoint(toWorldMat,arr);}function fromWorldVec(arr,time){var toWorldMat=this.getMatrix(time);toWorldMat.props[12]=0;toWorldMat.props[13]=0;toWorldMat.props[14]=0;return this.invertPoint(toWorldMat,arr);}function fromWorld(arr,time){var toWorldMat=this.getMatrix(time);return this.invertPoint(toWorldMat,arr);}function applyPoint(matrix,arr){if(this._elem.hierarchy&&this._elem.hierarchy.length){var i;var len=this._elem.hierarchy.length;for(i=0;i<len;i+=1){this._elem.hierarchy[i].finalTransform.mProp.applyToMatrix(matrix);}}return matrix.applyToPointArray(arr[0],arr[1],arr[2]||0);}function invertPoint(matrix,arr){if(this._elem.hierarchy&&this._elem.hierarchy.length){var i;var len=this._elem.hierarchy.length;for(i=0;i<len;i+=1){this._elem.hierarchy[i].finalTransform.mProp.applyToMatrix(matrix);}}return matrix.inversePoint(arr);}function fromComp(arr){var toWorldMat=new Matrix();toWorldMat.reset();this._elem.finalTransform.mProp.applyToMatrix(toWorldMat);if(this._elem.hierarchy&&this._elem.hierarchy.length){var i;var len=this._elem.hierarchy.length;for(i=0;i<len;i+=1){this._elem.hierarchy[i].finalTransform.mProp.applyToMatrix(toWorldMat);}return toWorldMat.inversePoint(arr);}return toWorldMat.inversePoint(arr);}function sampleImage(){return[1,1,1,1];}return function(elem){var transformInterface;function _registerMaskInterface(maskManager){_thisLayerFunction.mask=new MaskManagerInterface(maskManager,elem);}function _registerEffectsInterface(effects){_thisLayerFunction.effect=effects;}function _thisLayerFunction(name){switch(name){case'ADBE Root Vectors Group':case'Contents':case 2:return _thisLayerFunction.shapeInterface;case 1:case 6:case'Transform':case'transform':case'ADBE Transform Group':return transformInterface;case 4:case'ADBE Effect Parade':case'effects':case'Effects':return _thisLayerFunction.effect;case'ADBE Text Properties':return _thisLayerFunction.textInterface;default:return null;}}_thisLayerFunction.getMatrix=getMatrix;_thisLayerFunction.invertPoint=invertPoint;_thisLayerFunction.applyPoint=applyPoint;_thisLayerFunction.toWorld=toWorld;_thisLayerFunction.toWorldVec=toWorldVec;_thisLayerFunction.fromWorld=fromWorld;_thisLayerFunction.fromWorldVec=fromWorldVec;_thisLayerFunction.toComp=toWorld;_thisLayerFunction.fromComp=fromComp;_thisLayerFunction.sampleImage=sampleImage;_thisLayerFunction.sourceRectAtTime=elem.sourceRectAtTime.bind(elem);_thisLayerFunction._elem=elem;transformInterface=TransformExpressionInterface(elem.finalTransform.mProp);var anchorPointDescriptor=getDescriptor(transformInterface,'anchorPoint');Object.defineProperties(_thisLayerFunction,{hasParent:{get:function get(){return elem.hierarchy.length;}},parent:{get:function get(){return elem.hierarchy[0].layerInterface;}},rotation:getDescriptor(transformInterface,'rotation'),scale:getDescriptor(transformInterface,'scale'),position:getDescriptor(transformInterface,'position'),opacity:getDescriptor(transformInterface,'opacity'),anchorPoint:anchorPointDescriptor,anchor_point:anchorPointDescriptor,transform:{get:function get(){return transformInterface;}},active:{get:function get(){return elem.isInRange;}}});_thisLayerFunction.startTime=elem.data.st;_thisLayerFunction.index=elem.data.ind;_thisLayerFunction.source=elem.data.refId;_thisLayerFunction.height=elem.data.ty===0?elem.data.h:100;_thisLayerFunction.width=elem.data.ty===0?elem.data.w:100;_thisLayerFunction.inPoint=elem.data.ip/elem.comp.globalData.frameRate;_thisLayerFunction.outPoint=elem.data.op/elem.comp.globalData.frameRate;_thisLayerFunction._name=elem.data.nm;_thisLayerFunction.registerMaskInterface=_registerMaskInterface;_thisLayerFunction.registerEffectsInterface=_registerEffectsInterface;return _thisLayerFunction;};}();/* global *//* exported FootageInterface */var FootageInterface=function(){var outlineInterfaceFactory=function outlineInterfaceFactory(elem){var currentPropertyName='';var currentProperty=elem.getFootageData();function init(){currentPropertyName='';currentProperty=elem.getFootageData();return searchProperty;}function searchProperty(value){if(currentProperty[value]){currentPropertyName=value;currentProperty=currentProperty[value];if((typeof currentProperty==="undefined"?"undefined":_typeof(currentProperty))==='object'){return searchProperty;}return currentProperty;}var propertyNameIndex=value.indexOf(currentPropertyName);if(propertyNameIndex!==-1){var index=parseInt(value.substr(propertyNameIndex+currentPropertyName.length),10);currentProperty=currentProperty[index];if((typeof currentProperty==="undefined"?"undefined":_typeof(currentProperty))==='object'){return searchProperty;}return currentProperty;}return'';}return init;};var dataInterfaceFactory=function dataInterfaceFactory(elem){function interfaceFunction(value){if(value==='Outline'){return interfaceFunction.outlineInterface();}return null;}interfaceFunction._name='Outline';interfaceFunction.outlineInterface=outlineInterfaceFactory(elem);return interfaceFunction;};return function(elem){function _interfaceFunction(value){if(value==='Data'){return _interfaceFunction.dataInterface;}return null;}_interfaceFunction._name='Data';_interfaceFunction.dataInterface=dataInterfaceFactory(elem);return _interfaceFunction;};}();/* exported CompExpressionInterface */var CompExpressionInterface=function(){return function(comp){function _thisLayerFunction(name){var i=0;var len=comp.layers.length;while(i<len){if(comp.layers[i].nm===name||comp.layers[i].ind===name){return comp.elements[i].layerInterface;}i+=1;}return null;// return {active:false};
}Object.defineProperty(_thisLayerFunction,'_name',{value:comp.data.nm});_thisLayerFunction.layer=_thisLayerFunction;_thisLayerFunction.pixelAspect=1;_thisLayerFunction.height=comp.data.h||comp.globalData.compSize.h;_thisLayerFunction.width=comp.data.w||comp.globalData.compSize.w;_thisLayerFunction.pixelAspect=1;_thisLayerFunction.frameDuration=1/comp.globalData.frameRate;_thisLayerFunction.displayStartTime=0;_thisLayerFunction.numLayers=comp.layers.length;return _thisLayerFunction;};}();/* global ExpressionPropertyInterface *//* exported TransformExpressionInterface */var TransformExpressionInterface=function(){return function(transform){function _thisFunction(name){switch(name){case'scale':case'Scale':case'ADBE Scale':case 6:return _thisFunction.scale;case'rotation':case'Rotation':case'ADBE Rotation':case'ADBE Rotate Z':case 10:return _thisFunction.rotation;case'ADBE Rotate X':return _thisFunction.xRotation;case'ADBE Rotate Y':return _thisFunction.yRotation;case'position':case'Position':case'ADBE Position':case 2:return _thisFunction.position;case'ADBE Position_0':return _thisFunction.xPosition;case'ADBE Position_1':return _thisFunction.yPosition;case'ADBE Position_2':return _thisFunction.zPosition;case'anchorPoint':case'AnchorPoint':case'Anchor Point':case'ADBE AnchorPoint':case 1:return _thisFunction.anchorPoint;case'opacity':case'Opacity':case 11:return _thisFunction.opacity;default:return null;}}Object.defineProperty(_thisFunction,'rotation',{get:ExpressionPropertyInterface(transform.r||transform.rz)});Object.defineProperty(_thisFunction,'zRotation',{get:ExpressionPropertyInterface(transform.rz||transform.r)});Object.defineProperty(_thisFunction,'xRotation',{get:ExpressionPropertyInterface(transform.rx)});Object.defineProperty(_thisFunction,'yRotation',{get:ExpressionPropertyInterface(transform.ry)});Object.defineProperty(_thisFunction,'scale',{get:ExpressionPropertyInterface(transform.s)});var _px;var _py;var _pz;var _transformFactory;if(transform.p){_transformFactory=ExpressionPropertyInterface(transform.p);}else{_px=ExpressionPropertyInterface(transform.px);_py=ExpressionPropertyInterface(transform.py);if(transform.pz){_pz=ExpressionPropertyInterface(transform.pz);}}Object.defineProperty(_thisFunction,'position',{get:function get(){if(transform.p){return _transformFactory();}return[_px(),_py(),_pz?_pz():0];}});Object.defineProperty(_thisFunction,'xPosition',{get:ExpressionPropertyInterface(transform.px)});Object.defineProperty(_thisFunction,'yPosition',{get:ExpressionPropertyInterface(transform.py)});Object.defineProperty(_thisFunction,'zPosition',{get:ExpressionPropertyInterface(transform.pz)});Object.defineProperty(_thisFunction,'anchorPoint',{get:ExpressionPropertyInterface(transform.a)});Object.defineProperty(_thisFunction,'opacity',{get:ExpressionPropertyInterface(transform.o)});Object.defineProperty(_thisFunction,'skew',{get:ExpressionPropertyInterface(transform.sk)});Object.defineProperty(_thisFunction,'skewAxis',{get:ExpressionPropertyInterface(transform.sa)});Object.defineProperty(_thisFunction,'orientation',{get:ExpressionPropertyInterface(transform.or)});return _thisFunction;};}();/* exported ProjectInterface */var ProjectInterface=function(){function registerComposition(comp){this.compositions.push(comp);}return function(){function _thisProjectFunction(name){var i=0;var len=this.compositions.length;while(i<len){if(this.compositions[i].data&&this.compositions[i].data.nm===name){if(this.compositions[i].prepareFrame&&this.compositions[i].data.xt){this.compositions[i].prepareFrame(this.currentFrame);}return this.compositions[i].compInterface;}i+=1;}return null;}_thisProjectFunction.compositions=[];_thisProjectFunction.currentFrame=0;_thisProjectFunction.registerComposition=registerComposition;return _thisProjectFunction;};}();/* global propertyGroupFactory, ExpressionPropertyInterface, PropertyInterface *//* exported EffectsExpressionInterface */var EffectsExpressionInterface=function(){var ob={createEffectsInterface:createEffectsInterface};function createEffectsInterface(elem,propertyGroup){if(elem.effectsManager){var effectElements=[];var effectsData=elem.data.ef;var i;var len=elem.effectsManager.effectElements.length;for(i=0;i<len;i+=1){effectElements.push(createGroupInterface(effectsData[i],elem.effectsManager.effectElements[i],propertyGroup,elem));}var effects=elem.data.ef||[];var groupInterface=function groupInterface(name){i=0;len=effects.length;while(i<len){if(name===effects[i].nm||name===effects[i].mn||name===effects[i].ix){return effectElements[i];}i+=1;}return null;};Object.defineProperty(groupInterface,'numProperties',{get:function get(){return effects.length;}});return groupInterface;}return null;}function createGroupInterface(data,elements,propertyGroup,elem){function groupInterface(name){var effects=data.ef;var i=0;var len=effects.length;while(i<len){if(name===effects[i].nm||name===effects[i].mn||name===effects[i].ix){if(effects[i].ty===5){return effectElements[i];}return effectElements[i]();}i+=1;}throw new Error();}var _propertyGroup=propertyGroupFactory(groupInterface,propertyGroup);var effectElements=[];var i;var len=data.ef.length;for(i=0;i<len;i+=1){if(data.ef[i].ty===5){effectElements.push(createGroupInterface(data.ef[i],elements.effectElements[i],elements.effectElements[i].propertyGroup,elem));}else{effectElements.push(createValueInterface(elements.effectElements[i],data.ef[i].ty,elem,_propertyGroup));}}if(data.mn==='ADBE Color Control'){Object.defineProperty(groupInterface,'color',{get:function get(){return effectElements[0]();}});}Object.defineProperties(groupInterface,{numProperties:{get:function get(){return data.np;}},_name:{value:data.nm},propertyGroup:{value:_propertyGroup}});groupInterface.enabled=data.en!==0;groupInterface.active=groupInterface.enabled;return groupInterface;}function createValueInterface(element,type,elem,propertyGroup){var expressionProperty=ExpressionPropertyInterface(element.p);function interfaceFunction(){if(type===10){return elem.comp.compInterface(element.p.v);}return expressionProperty();}if(element.p.setGroupProperty){element.p.setGroupProperty(PropertyInterface('',propertyGroup));}return interfaceFunction;}return ob;}();/* global createSizedArray *//* exported MaskManagerInterface */var MaskManagerInterface=function(){function MaskInterface(mask,data){this._mask=mask;this._data=data;}Object.defineProperty(MaskInterface.prototype,'maskPath',{get:function get(){if(this._mask.prop.k){this._mask.prop.getValue();}return this._mask.prop;}});Object.defineProperty(MaskInterface.prototype,'maskOpacity',{get:function get(){if(this._mask.op.k){this._mask.op.getValue();}return this._mask.op.v*100;}});var MaskManager=function MaskManager(maskManager){var _masksInterfaces=createSizedArray(maskManager.viewData.length);var i;var len=maskManager.viewData.length;for(i=0;i<len;i+=1){_masksInterfaces[i]=new MaskInterface(maskManager.viewData[i],maskManager.masksProperties[i]);}var maskFunction=function maskFunction(name){i=0;while(i<len){if(maskManager.masksProperties[i].nm===name){return _masksInterfaces[i];}i+=1;}return null;};return maskFunction;};return MaskManager;}();/* global createTypedArray *//* exported ExpressionPropertyInterface */var ExpressionPropertyInterface=function(){var defaultUnidimensionalValue={pv:0,v:0,mult:1};var defaultMultidimensionalValue={pv:[0,0,0],v:[0,0,0],mult:1};function completeProperty(expressionValue,property,type){Object.defineProperty(expressionValue,'velocity',{get:function get(){return property.getVelocityAtTime(property.comp.currentFrame);}});expressionValue.numKeys=property.keyframes?property.keyframes.length:0;expressionValue.key=function(pos){if(!expressionValue.numKeys){return 0;}var value='';if('s'in property.keyframes[pos-1]){value=property.keyframes[pos-1].s;}else if('e'in property.keyframes[pos-2]){value=property.keyframes[pos-2].e;}else{value=property.keyframes[pos-2].s;}var valueProp=type==='unidimensional'?new Number(value):Object.assign({},value);// eslint-disable-line no-new-wrappers
valueProp.time=property.keyframes[pos-1].t/property.elem.comp.globalData.frameRate;valueProp.value=type==='unidimensional'?value[0]:value;return valueProp;};expressionValue.valueAtTime=property.getValueAtTime;expressionValue.speedAtTime=property.getSpeedAtTime;expressionValue.velocityAtTime=property.getVelocityAtTime;expressionValue.propertyGroup=property.propertyGroup;}function UnidimensionalPropertyInterface(property){if(!property||!('pv'in property)){property=defaultUnidimensionalValue;}var mult=1/property.mult;var val=property.pv*mult;var expressionValue=new Number(val);// eslint-disable-line no-new-wrappers
expressionValue.value=val;completeProperty(expressionValue,property,'unidimensional');return function(){if(property.k){property.getValue();}val=property.v*mult;if(expressionValue.value!==val){expressionValue=new Number(val);// eslint-disable-line no-new-wrappers
expressionValue.value=val;completeProperty(expressionValue,property,'unidimensional');}return expressionValue;};}function MultidimensionalPropertyInterface(property){if(!property||!('pv'in property)){property=defaultMultidimensionalValue;}var mult=1/property.mult;var len=property.data&&property.data.l||property.pv.length;var expressionValue=createTypedArray('float32',len);var arrValue=createTypedArray('float32',len);expressionValue.value=arrValue;completeProperty(expressionValue,property,'multidimensional');return function(){if(property.k){property.getValue();}for(var i=0;i<len;i+=1){arrValue[i]=property.v[i]*mult;expressionValue[i]=arrValue[i];}return expressionValue;};}// TODO: try to avoid using this getter
function defaultGetter(){return defaultUnidimensionalValue;}return function(property){if(!property){return defaultGetter;}if(property.propType==='unidimensional'){return UnidimensionalPropertyInterface(property);}return MultidimensionalPropertyInterface(property);};}();/* global expressionHelpers, TextSelectorProp, ExpressionManager *//* exported TextExpressionSelectorProp */(function(){var TextExpressionSelectorProp=function(){// eslint-disable-line no-unused-vars
function getValueProxy(index,total){this.textIndex=index+1;this.textTotal=total;this.v=this.getValue()*this.mult;return this.v;}return function TextExpressionSelectorPropFactory(elem,data){this.pv=1;this.comp=elem.comp;this.elem=elem;this.mult=0.01;this.propType='textSelector';this.textTotal=data.totalChars;this.selectorValue=100;this.lastValue=[1,1,1];this.k=true;this.x=true;this.getValue=ExpressionManager.initiateExpression.bind(this)(elem,data,this);this.getMult=getValueProxy;this.getVelocityAtTime=expressionHelpers.getVelocityAtTime;if(this.kf){this.getValueAtTime=expressionHelpers.getValueAtTime.bind(this);}else{this.getValueAtTime=expressionHelpers.getStaticValueAtTime.bind(this);}this.setGroupProperty=expressionHelpers.setGroupProperty;};}();var propertyGetTextProp=TextSelectorProp.getTextSelectorProp;TextSelectorProp.getTextSelectorProp=function(elem,data,arr){if(data.t===1){return new TextExpressionSelectorPropFactory(elem,data,arr);// eslint-disable-line no-undef
}return propertyGetTextProp(elem,data,arr);};})();/* global PropertyFactory *//* exported SliderEffect, AngleEffect, ColorEffect, PointEffect, LayerIndexEffect, MaskIndexEffect, CheckboxEffect, NoValueEffect */function SliderEffect(data,elem,container){this.p=PropertyFactory.getProp(elem,data.v,0,0,container);}function AngleEffect(data,elem,container){this.p=PropertyFactory.getProp(elem,data.v,0,0,container);}function ColorEffect(data,elem,container){this.p=PropertyFactory.getProp(elem,data.v,1,0,container);}function PointEffect(data,elem,container){this.p=PropertyFactory.getProp(elem,data.v,1,0,container);}function LayerIndexEffect(data,elem,container){this.p=PropertyFactory.getProp(elem,data.v,0,0,container);}function MaskIndexEffect(data,elem,container){this.p=PropertyFactory.getProp(elem,data.v,0,0,container);}function CheckboxEffect(data,elem,container){this.p=PropertyFactory.getProp(elem,data.v,0,0,container);}function NoValueEffect(){this.p={};}/* global extendPrototype, SliderEffect, AngleEffect, ColorEffect, PointEffect, CheckboxEffect, LayerIndexEffect,
MaskIndexEffect, NoValueEffect, DynamicPropertyContainer */function EffectsManager(data,element){var effects=data.ef||[];this.effectElements=[];var i;var len=effects.length;var effectItem;for(i=0;i<len;i+=1){effectItem=new GroupEffect(effects[i],element);this.effectElements.push(effectItem);}}function GroupEffect(data,element){this.init(data,element);}extendPrototype([DynamicPropertyContainer],GroupEffect);GroupEffect.prototype.getValue=GroupEffect.prototype.iterateDynamicProperties;GroupEffect.prototype.init=function(data,element){this.data=data;this.effectElements=[];this.initDynamicPropertyContainer(element);var i;var len=this.data.ef.length;var eff;var effects=this.data.ef;for(i=0;i<len;i+=1){eff=null;switch(effects[i].ty){case 0:eff=new SliderEffect(effects[i],element,this);break;case 1:eff=new AngleEffect(effects[i],element,this);break;case 2:eff=new ColorEffect(effects[i],element,this);break;case 3:eff=new PointEffect(effects[i],element,this);break;case 4:case 7:eff=new CheckboxEffect(effects[i],element,this);break;case 10:eff=new LayerIndexEffect(effects[i],element,this);break;case 11:eff=new MaskIndexEffect(effects[i],element,this);break;case 5:eff=new EffectsManager(effects[i],element,this);break;// case 6:
default:eff=new NoValueEffect(effects[i],element,this);break;}if(eff){this.effectElements.push(eff);}}};var lottie={};function setLocationHref(href){locationHref=href;}function searchAnimations(){if(standalone===true){animationManager.searchAnimations(animationData,standalone,renderer);}else{animationManager.searchAnimations();}}function setSubframeRendering(flag){subframeEnabled=flag;}function loadAnimation(params){if(standalone===true){params.animationData=JSON.parse(animationData);}return animationManager.loadAnimation(params);}function setQuality(value){if(typeof value==='string'){switch(value){case'high':defaultCurveSegments=200;break;default:case'medium':defaultCurveSegments=50;break;case'low':defaultCurveSegments=10;break;}}else if(!isNaN(value)&&value>1){defaultCurveSegments=value;}if(defaultCurveSegments>=50){roundValues(false);}else{roundValues(true);}}function inBrowser(){return typeof navigator!=='undefined';}function installPlugin(type,plugin){if(type==='expressions'){expressionsPlugin=plugin;}}function getFactory(name){switch(name){case'propertyFactory':return PropertyFactory;case'shapePropertyFactory':return ShapePropertyFactory;case'matrix':return Matrix;default:return null;}}lottie.play=animationManager.play;lottie.pause=animationManager.pause;lottie.setLocationHref=setLocationHref;lottie.togglePause=animationManager.togglePause;lottie.setSpeed=animationManager.setSpeed;lottie.setDirection=animationManager.setDirection;lottie.stop=animationManager.stop;lottie.searchAnimations=searchAnimations;lottie.registerAnimation=animationManager.registerAnimation;lottie.loadAnimation=loadAnimation;lottie.setSubframeRendering=setSubframeRendering;lottie.resize=animationManager.resize;// lottie.start = start;
lottie.goToAndStop=animationManager.goToAndStop;lottie.destroy=animationManager.destroy;lottie.setQuality=setQuality;lottie.inBrowser=inBrowser;lottie.installPlugin=installPlugin;lottie.freeze=animationManager.freeze;lottie.unfreeze=animationManager.unfreeze;lottie.setVolume=animationManager.setVolume;lottie.mute=animationManager.mute;lottie.unmute=animationManager.unmute;lottie.getRegisteredAnimations=animationManager.getRegisteredAnimations;lottie.__getFactory=getFactory;lottie.version='5.7.8';function checkReady(){if(document.readyState==='complete'){clearInterval(readyStateCheckInterval);searchAnimations();}}function getQueryVariable(variable){var vars=queryString.split('&');for(var i=0;i<vars.length;i+=1){var pair=vars[i].split('=');if(decodeURIComponent(pair[0])==variable){// eslint-disable-line eqeqeq
return decodeURIComponent(pair[1]);}}return null;}var standalone='__[STANDALONE]__';var animationData='__[ANIMATIONDATA]__';var renderer='';var queryString;if(standalone){var scripts=document.getElementsByTagName('script');var index=scripts.length-1;var myScript=scripts[index]||{src:''};queryString=myScript.src.replace(/^[^\?]+\??/,'');// eslint-disable-line no-useless-escape
renderer=getQueryVariable('renderer');}var readyStateCheckInterval=setInterval(checkReady,100);return lottie;});

/***/ }),
/* 365 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var __ = wp.i18n.__;
var _wp$blockEditor = wp.blockEditor,
    BlockIcon = _wp$blockEditor.BlockIcon,
    MediaPlaceholder = _wp$blockEditor.MediaPlaceholder;
var _wp$components = wp.components,
    Button = _wp$components.Button,
    ExternalLink = _wp$components.ExternalLink,
    Modal = _wp$components.Modal,
    Placeholder = _wp$components.Placeholder;
var _wp$element = wp.element,
    Fragment = _wp$element.Fragment,
    useState = _wp$element.useState;


var BlockPlaceholder = function BlockPlaceholder(_ref) {
    var className = _ref.className,
        isJSONAllowed = _ref.isJSONAllowed,
        onSelectURL = _ref.onSelectURL,
        onSelect = _ref.onSelect,
        value = _ref.value;

    var _useState = useState(value),
        _useState2 = _slicedToArray(_useState, 2),
        url = _useState2[0],
        setURL = _useState2[1];

    var _useState3 = useState(false),
        _useState4 = _slicedToArray(_useState3, 2),
        isOpen = _useState4[0],
        setOpen = _useState4[1];

    var onChangeValue = function onChangeValue(e) {
        if (e) {
            e.preventDefault();
        }
        return onSelectURL(url);
    };

    if (isJSONAllowed) {
        return React.createElement(MediaPlaceholder, {
            labels: {
                title: __('Lottie', 'premium-blocks-for-gutenberg'),
                instructions: __('Add Lottie animations and files to your website.', 'premium-blocks-for-gutenberg')
            },
            accept: ['application/json'],
            allowedTypes: ['application/json'],
            value: value,
            onSelectURL: onSelectURL,
            onSelect: onSelect
        });
    }

    return React.createElement(
        Fragment,
        null,
        React.createElement(
            Placeholder,
            {
                label: __('Lottie', 'premium-blocks-for-gutenberg'),
                instructions: __('Add Lottie animations and files to your website.', 'premium-blocks-for-gutenberg'),
                className: className
            },
            React.createElement(
                'form',
                { onSubmit: onChangeValue },
                React.createElement('input', {
                    type: 'url',
                    value: url,
                    className: 'components-placeholder__input',
                    'aria-label': __('Lottie', 'premium-blocks-for-gutenberg'),
                    placeholder: __('Enter URL to embed here…', 'premium-blocks-for-gutenberg'),
                    onChange: function onChange(e) {
                        return setURL(e.target.value);
                    }
                }),
                React.createElement(
                    Button,
                    {
                        isPrimary: true,
                        disabled: !url,
                        type: 'submit'
                    },
                    __('Embed', 'premium-blocks-for-gutenberg')
                ),
                !isJSONAllowed && React.createElement(
                    Button,
                    {
                        isSecondary: true,
                        onClick: function onClick() {
                            return setOpen(true);
                        }
                    },
                    __('Upload', 'premium-blocks-for-gutenberg')
                )
            )
        ),
        isOpen && React.createElement(
            Modal,
            {
                title: __('Allow JSON Uploads', 'premium-blocks-for-gutenberg'),
                closeLabel: __('Close'),
                onRequestClose: function onRequestClose() {
                    return setOpen(false);
                },
                overlayClassName: 'wp-block-themeisle-blocks-lottie-modal'
            },
            __('This file type is not permitted for security reasons. Would you still like to enable JSON uploads?', 'premium-blocks-for-gutenberg'),
            React.createElement('br', null),
            React.createElement('br', null),
            React.createElement(
                ExternalLink,
                { href: window.PremiumBlocksSettings.settingPath },
                __('You can enable JSON uploads from Settings.', 'premium-blocks-for-gutenberg')
            ),
            React.createElement('br', null),
            React.createElement('br', null),
            __('You will have to refresh the page after changing JSON upload settings.', 'premium-blocks-for-gutenberg')
        )
    );
};

exports.default = BlockPlaceholder;

/***/ }),
/* 366 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = save;

var _classnames = __webpack_require__(0);

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function save(props) {
    var attributes = props.attributes,
        className = props.className;
    var lottieId = attributes.lottieId,
        block_id = attributes.block_id,
        lottieURl = attributes.lottieURl,
        lottieJson = attributes.lottieJson,
        loop = attributes.loop,
        reverse = attributes.reverse,
        speed = attributes.speed,
        trigger = attributes.trigger,
        bottom = attributes.bottom,
        top = attributes.top,
        scrollSpeed = attributes.scrollSpeed,
        rotate = attributes.rotate,
        align = attributes.align,
        link = attributes.link,
        url = attributes.url,
        target = attributes.target,
        render = attributes.render,
        hideDesktop = attributes.hideDesktop,
        hideTablet = attributes.hideTablet,
        hideMobile = attributes.hideMobile,
        lottieStyles = attributes.lottieStyles,
        borderTop = attributes.borderTop,
        borderRight = attributes.borderRight,
        borderBottom = attributes.borderBottom,
        borderLeft = attributes.borderLeft;

    var mainClasses = (0, _classnames2.default)(className, 'premium-lottie-wrap');

    return React.createElement(
        'div',
        { id: 'premium-lottie-' + block_id, className: 'premium-lottie-' + block_id + ' ' + mainClasses + ' ' + hideDesktop + ' ' + hideTablet + ' ' + hideMobile

        },
        React.createElement(
            'div',
            { className: 'premium-lottie-animation premium-lottie-' + render, 'data-lottieURl': lottieURl, 'data-trigger': trigger, 'data-start': bottom, 'data-end': top, 'data-speed': speed,
                'data-loop': loop, 'data-render': render, 'data-reverse': reverse, 'data-scrollSpeed': scrollSpeed
            },
            link && url !== ' ' && React.createElement('a', { rel: 'noopener noreferrer', target: target ? "_blank" : "_self", href: url })
        ),
        React.createElement('style', {
            dangerouslySetInnerHTML: {
                __html: ['#premium-lottie-' + block_id + '{', 'text-align:' + align + ';', "}", '#premium-lottie-' + block_id + '  .premium-lottie-animation  {', 'background-color:' + lottieStyles[0].backColor + ';', 'opacity : ' + lottieStyles[0].backOpacity + ';', 'filter: brightness( ' + lottieStyles[0].bright + '% ) contrast( ' + lottieStyles[0].contrast + '% ) saturate( ' + lottieStyles[0].saturation + '% ) blur( ' + lottieStyles[0].blur + 'px ) hue-rotate( ' + lottieStyles[0].hue + 'deg );', 'border-style : ' + lottieStyles[0].borderType + ';', 'border-width : ' + borderTop + 'px ' + borderRight + 'px ' + borderBottom + 'px ' + borderLeft + 'px ;', 'border-radius : ' + lottieStyles[0].borderRadius + 'px;', 'border-color : ' + lottieStyles[0].borderColor + '; ', 'transform: rotate(' + rotate + 'deg) !important;', "}", '#premium-lottie-' + block_id + '  .premium-lottie-animation:hover {', 'background-color:' + lottieStyles[0].backHColor + ';', 'opacity:' + lottieStyles[0].backHOpacity + ';', 'filter: brightness( ' + lottieStyles[0].brightH + '% ) contrast( ' + lottieStyles[0].contrastH + '% ) saturate( ' + lottieStyles[0].saturationH + '% ) blur( ' + lottieStyles[0].blurH + 'px ) hue-rotate( ' + lottieStyles[0].hueH + 'deg ) !important;', "}"].join("\n")
            }
        })
    );
}

/***/ }),
/* 367 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classnames = __webpack_require__(0);

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var LottieAttr = {
    lottieId: {
        type: "string"
    },
    block_id: {
        type: "string"
    },
    classMigrate: {
        type: "boolean",
        default: false
    },
    lottieURl: {
        type: "string",
        default: ""
    },
    lottieJson: {
        type: "object"
    },
    loop: {
        type: 'boolean',
        default: true
    },
    reverse: {
        type: "boolean",
        default: false
    },
    speed: {
        type: "number",
        default: "1"
    },
    trigger: {
        type: 'string',
        default: 'none'
    },
    bottom: {
        type: "number",
        default: "0"
    },
    top: {
        type: "number",
        default: "100"
    },
    scrollSpeed: {
        type: "number",
        default: "4"
    },
    size: {
        type: "number",
        default: "200"
    },
    sizeUnit: {
        type: "string",
        default: 'px'
    },
    sizeMobile: {
        type: "number",
        default: "200"
    },
    sizeTablet: {
        type: "number",
        default: "200"
    },
    rotate: {
        type: "number",
        default: 0
    },
    align: {
        type: "string",
        default: "center"
    },
    link: {
        type: "boolean",
        default: false
    },
    url: {
        type: "string"
    },
    target: {
        type: "boolean",
        default: false
    },
    render: {
        type: 'string',
        default: 'svg'
    },
    backColor: {
        type: "string"
    },
    backOpacity: {
        type: "number",
        default: "1"
    },
    backHColor: {
        type: "string"
    },
    backHOpacity: {
        type: "number",
        default: 1
    },
    blur: {
        type: "number",
        default: "0"
    },
    bright: {
        type: "number",
        default: "100"
    },
    contrast: {
        type: "number",
        default: "100"
    },
    saturation: {
        type: "number",
        default: "100"
    },
    hue: {
        type: "number",
        default: "0"
    },
    blurH: {
        type: "number",
        default: "0"
    },
    brightH: {
        type: "number",
        default: "100"
    },
    contrastH: {
        type: "number",
        default: "100"
    },
    saturationH: {
        type: "number",
        default: "100"
    },
    hueH: {
        type: "number",
        default: "0"

    },
    borderType: {
        type: "string",
        default: 'none'
    },
    borderTop: {
        type: "number",
        default: 0
    },
    borderRight: {
        type: "number",
        default: 0
    },
    borderBottom: {
        type: "number",
        default: 0
    },
    borderLeft: {
        type: "number",
        default: 0
    },
    borderColor: {
        type: "string"
    },
    borderRadius: {
        type: "number",
        default: "0"
    },
    paddingT: {
        type: "number",
        default: "0"
    },
    paddingR: {
        type: "number",
        default: "0"
    },
    paddingB: {
        type: "number",
        default: "0"
    },
    paddingL: {
        type: "number",
        default: "0"
    },
    paddingU: {
        type: "string",
        default: "px"
    },
    hideDesktop: {
        type: 'boolean',
        default: false
    },
    hideTablet: {
        type: 'boolean',
        default: false
    },
    hideMobile: {
        type: 'boolean',
        default: false
    }

};
var deprecated = [{
    attributes: LottieAttr,
    migrate: function migrate(attributes) {
        var newAttributes = {
            lottieStyles: [{
                size: attributes.size,
                sizeUnit: attributes.sizeUnit,
                sizeMobile: attributes.sizeMobile,
                sizeTablet: attributes.sizeTablet,
                backColor: attributes.backColor,
                backOpacity: attributes.backOpacity,
                backHColor: attributes.backHColor,
                backHOpacity: attributes.backHOpacity,
                blur: attributes.blur,
                bright: attributes.bright,
                contrast: attributes.contrast,
                saturation: attributes.saturation,
                hue: attributes.hue,
                blurH: attributes.blurH,
                brightH: attributes.brightH,
                contrastH: attributes.contrastH,
                saturationH: attributes.saturationH,
                hueH: attributes.hueH,
                borderType: attributes.borderType,
                borderColor: attributes.borderColor,
                borderRadius: attributes.borderRadius,
                paddingU: attributes.paddingU
            }],
            paddingTTablet: '',
            paddingRTablet: '',
            paddingBTablet: '',
            paddingLTablet: '',
            paddingTMobile: '',
            paddingRMobile: '',
            paddingBMobile: '',
            paddingLMobile: ''
        };
        return Object.assign(attributes, newAttributes);
    },
    save: function save(props) {
        var attributes = props.attributes,
            className = props.className;
        var block_id = attributes.block_id,
            lottieURl = attributes.lottieURl,
            loop = attributes.loop,
            reverse = attributes.reverse,
            speed = attributes.speed,
            trigger = attributes.trigger,
            bottom = attributes.bottom,
            top = attributes.top,
            scrollSpeed = attributes.scrollSpeed,
            rotate = attributes.rotate,
            align = attributes.align,
            link = attributes.link,
            url = attributes.url,
            render = attributes.render,
            backColor = attributes.backColor,
            backOpacity = attributes.backOpacity,
            backHColor = attributes.backHColor,
            backHOpacity = attributes.backHOpacity,
            blur = attributes.blur,
            hue = attributes.hue,
            contrast = attributes.contrast,
            saturation = attributes.saturation,
            bright = attributes.bright,
            blurH = attributes.blurH,
            hueH = attributes.hueH,
            target = attributes.target,
            contrastH = attributes.contrastH,
            saturationH = attributes.saturationH,
            brightH = attributes.brightH,
            borderType = attributes.borderType,
            borderTop = attributes.borderTop,
            borderRight = attributes.borderRight,
            borderBottom = attributes.borderBottom,
            borderLeft = attributes.borderLeft,
            borderColor = attributes.borderColor,
            borderRadius = attributes.borderRadius,
            paddingT = attributes.paddingT,
            paddingR = attributes.paddingR,
            paddingB = attributes.paddingB,
            paddingL = attributes.paddingL,
            paddingU = attributes.paddingU,
            hideDesktop = attributes.hideDesktop,
            hideTablet = attributes.hideTablet,
            hideMobile = attributes.hideMobile;

        var mainClasses = (0, _classnames2.default)(className, 'premium-lottie-wrap');

        return React.createElement(
            "div",
            { id: "premium-lottie-" + block_id, className: "premium-lottie-" + block_id + " " + mainClasses + " " + hideDesktop + " " + hideTablet + " " + hideMobile

            },
            React.createElement(
                "div",
                { className: "premium-lottie-animation premium-lottie-" + render, "data-lottieURl": lottieURl, "data-trigger": trigger, "data-start": bottom, "data-end": top, "data-speed": speed,
                    "data-loop": loop, "data-render": render, "data-reverse": reverse, "data-scrollSpeed": scrollSpeed
                },
                link && url !== ' ' && React.createElement("a", { rel: "noopener noreferrer", target: target ? "_blank" : "_self", href: url })
            ),
            React.createElement("style", {
                dangerouslySetInnerHTML: {
                    __html: ["#premium-lottie-" + block_id + "{", "text-align:" + align + ";", "}", "#premium-lottie-" + block_id + "  .premium-lottie-animation  {", "background-color:" + backColor + ";", "opacity : " + backOpacity + ";", "filter: brightness( " + bright + "% ) contrast( " + contrast + "% ) saturate( " + saturation + "% ) blur( " + blur + "px ) hue-rotate( " + hue + "deg );", "border-style : " + borderType + ";", "border-width : " + borderTop + "px " + borderRight + "px " + borderBottom + "px " + borderLeft + "px ;", "border-radius : " + borderRadius + "px;", "border-color : " + borderColor + "; ", "padding-top : " + paddingT + paddingU + ";", "padding-right : " + paddingR + paddingU + ";", "padding-bottom : " + paddingB + paddingU + ";", "padding-left : " + paddingL + paddingU + ";", "transform: rotate(" + rotate + "deg) !important;", "}", "#premium-lottie-" + block_id + "  .premium-lottie-animation:hover {", "background-color:" + backHColor + ";", "opacity:" + backHOpacity + ";", "filter: brightness( " + brightH + "% ) contrast( " + contrastH + "% ) saturate( " + saturationH + "% ) blur( " + blurH + "px ) hue-rotate( " + hueH + "deg ) !important;", "}"].join("\n")
                }
            })
        );
    }
}];
exports.default = deprecated;

/***/ }),
/* 368 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
var LottieAttr = {
    lottieId: {
        type: "string"
    },
    block_id: {
        type: "string"
    },
    classMigrate: {
        type: "boolean",
        default: false
    },
    lottieURl: {
        type: "string",
        default: ""
    },
    lottieJson: {
        type: "object"
    },
    loop: {
        type: 'boolean',
        default: true
    },
    reverse: {
        type: "boolean",
        default: false
    },
    speed: {
        type: "number",
        default: "1"
    },
    trigger: {
        type: 'string',
        default: 'none'
    },
    bottom: {
        type: "number",
        default: "0"
    },
    top: {
        type: "number",
        default: "100"
    },
    scrollSpeed: {
        type: "number",
        default: "4"
    },

    rotate: {
        type: "number",
        default: 0
    },
    align: {
        type: "string",
        default: "center"
    },
    link: {
        type: "boolean",
        default: false
    },
    url: {
        type: "string"
    },
    target: {
        type: "boolean",
        default: false
    },
    render: {
        type: 'string',
        default: 'svg'
    },
    hideDesktop: {
        type: 'boolean',
        default: false
    },
    hideTablet: {
        type: 'boolean',
        default: false
    },
    hideMobile: {
        type: 'boolean',
        default: false
    },
    lottieStyles: {
        type: "array",
        default: [{
            size: "200",
            sizeUnit: 'px',
            sizeMobile: "200",
            sizeTablet: "200",
            backColor: '',
            backOpacity: 1,
            backHColor: '',
            backHOpacity: 1,
            blur: '0',
            bright: '100',
            contrast: '100',
            saturation: '100',
            hue: '0',
            blurH: '0',
            brightH: '100',
            contrastH: '100',
            saturationH: '100',
            hueH: '0',
            borderType: 'none',
            borderColor: '',
            borderRadius: '0',
            paddingU: 'px'
        }]
    },
    paddingT: {
        type: 'number'
    },
    paddingR: {
        type: 'number'
    },
    paddingB: {
        type: 'number'
    },
    paddingL: {
        type: 'number'
    },
    borderTop: {
        type: 'number'
    },
    borderRight: {
        type: 'number'
    },
    borderBottom: {
        type: 'number'
    },
    borderLeft: {
        type: 'number'
    },
    paddingTTablet: {
        type: 'number'
    },
    paddingRTablet: {
        type: 'number'
    },
    paddingBTablet: {
        type: 'number'
    },
    paddingLTablet: {
        type: 'number'
    },
    paddingTMobile: {
        type: 'number'
    },
    paddingRMobile: {
        type: 'number'
    },
    paddingBMobile: {
        type: 'number'
    },
    paddingLMobile: {
        type: 'number'
    },
    lottieWidth: {
        type: "object",
        default: {
            Desktop: '200',
            unit: 'px'
        }
    }
};
exports.default = LottieAttr;

/***/ }),
/* 369 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _settings = __webpack_require__(1);

var _icons = __webpack_require__(4);

var _icons2 = _interopRequireDefault(_icons);

var _edit = __webpack_require__(370);

var _edit2 = _interopRequireDefault(_edit);

var _attributes = __webpack_require__(372);

var _attributes2 = _interopRequireDefault(_attributes);

var _save = __webpack_require__(373);

var _save2 = _interopRequireDefault(_save);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __ = wp.i18n.__;
var registerBlockType = wp.blocks.registerBlockType;


registerBlockType("premium/modal", {
    title: __("Modal Box"),
    icon: React.createElement(_icons2.default, { icon: "" }),
    category: "premium-blocks",
    attributes: _attributes2.default,
    supports: {
        inserter: _settings.modal
    },
    example: {},
    edit: _edit2.default,
    save: _save2.default
});

/***/ }),
/* 370 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _classnames = __webpack_require__(0);

var _classnames2 = _interopRequireDefault(_classnames);

var _reactLottieWithSegments = __webpack_require__(71);

var _reactLottieWithSegments2 = _interopRequireDefault(_reactLottieWithSegments);

var _inspector = __webpack_require__(371);

var _inspector2 = _interopRequireDefault(_inspector);

var _fontLoader = __webpack_require__(22);

var _fontLoader2 = _interopRequireDefault(_fontLoader);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __ = wp.i18n.__;
var withSelect = wp.data.withSelect;
var _wp$element = wp.element,
    Fragment = _wp$element.Fragment,
    useEffect = _wp$element.useEffect,
    useState = _wp$element.useState;
var _wp$blockEditor = wp.blockEditor,
    InnerBlocks = _wp$blockEditor.InnerBlocks,
    MediaPlaceholder = _wp$blockEditor.MediaPlaceholder;


function getPreviewSize(device, desktopSize, tabletSize, mobileSize) {
    if (device === 'Mobile') {
        if (undefined !== mobileSize && '' !== mobileSize) {
            return mobileSize;
        } else if (undefined !== tabletSize && '' !== tabletSize) {
            return tabletSize;
        }
    } else if (device === 'Tablet') {
        if (undefined !== tabletSize && '' !== tabletSize) {
            return tabletSize;
        }
    }
    return desktopSize;
}

var edit = function edit(props) {
    var _useState = useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        openModal = _useState2[0],
        setOpenModal = _useState2[1];

    var isSelected = props.isSelected,
        setAttributes = props.setAttributes,
        className = props.className;
    var _props$attributes = props.attributes,
        block_id = _props$attributes.block_id,
        contentStyles = _props$attributes.contentStyles,
        triggerSettings = _props$attributes.triggerSettings,
        triggerStyles = _props$attributes.triggerStyles,
        triggerBorderTop = _props$attributes.triggerBorderTop,
        triggerBorderRight = _props$attributes.triggerBorderRight,
        triggerBorderBottom = _props$attributes.triggerBorderBottom,
        triggerBorderLeft = _props$attributes.triggerBorderLeft,
        triggerBorderTopH = _props$attributes.triggerBorderTopH,
        triggerBorderRightH = _props$attributes.triggerBorderRightH,
        triggerBorderBottomH = _props$attributes.triggerBorderBottomH,
        triggerBorderLeftH = _props$attributes.triggerBorderLeftH,
        triggerPaddingT = _props$attributes.triggerPaddingT,
        triggerPaddingR = _props$attributes.triggerPaddingR,
        triggerPaddingB = _props$attributes.triggerPaddingB,
        triggerPaddingL = _props$attributes.triggerPaddingL,
        triggerPaddingTTablet = _props$attributes.triggerPaddingTTablet,
        triggerPaddingRTablet = _props$attributes.triggerPaddingRTablet,
        triggerPaddingBTablet = _props$attributes.triggerPaddingBTablet,
        triggerPaddingLTablet = _props$attributes.triggerPaddingLTablet,
        triggerPaddingTMobile = _props$attributes.triggerPaddingTMobile,
        triggerPaddingRMobile = _props$attributes.triggerPaddingRMobile,
        triggerPaddingBMobile = _props$attributes.triggerPaddingBMobile,
        triggerPaddingLMobile = _props$attributes.triggerPaddingLMobile,
        headerStyles = _props$attributes.headerStyles,
        headerBorderTop = _props$attributes.headerBorderTop,
        headerBorderRight = _props$attributes.headerBorderRight,
        headerBorderBottom = _props$attributes.headerBorderBottom,
        headerBorderLeft = _props$attributes.headerBorderLeft,
        upperStyles = _props$attributes.upperStyles,
        upperBorderTop = _props$attributes.upperBorderTop,
        upperBorderRight = _props$attributes.upperBorderRight,
        upperBorderBottom = _props$attributes.upperBorderBottom,
        upperBorderLeft = _props$attributes.upperBorderLeft,
        upperPaddingT = _props$attributes.upperPaddingT,
        upperPaddingR = _props$attributes.upperPaddingR,
        upperPaddingB = _props$attributes.upperPaddingB,
        upperPaddingL = _props$attributes.upperPaddingL,
        upperPaddingTTablet = _props$attributes.upperPaddingTTablet,
        upperPaddingRTablet = _props$attributes.upperPaddingRTablet,
        upperPaddingBTablet = _props$attributes.upperPaddingBTablet,
        upperPaddingLTablet = _props$attributes.upperPaddingLTablet,
        upperPaddingTMobile = _props$attributes.upperPaddingTMobile,
        upperPaddingRMobile = _props$attributes.upperPaddingRMobile,
        upperPaddingBMobile = _props$attributes.upperPaddingBMobile,
        upperPaddingLMobile = _props$attributes.upperPaddingLMobile,
        lowerStyles = _props$attributes.lowerStyles,
        lowerBorderTop = _props$attributes.lowerBorderTop,
        lowerBorderRight = _props$attributes.lowerBorderRight,
        lowerBorderBottom = _props$attributes.lowerBorderBottom,
        lowerBorderLeft = _props$attributes.lowerBorderLeft,
        lowerPaddingT = _props$attributes.lowerPaddingT,
        lowerPaddingR = _props$attributes.lowerPaddingR,
        lowerPaddingB = _props$attributes.lowerPaddingB,
        lowerPaddingL = _props$attributes.lowerPaddingL,
        lowerPaddingTTablet = _props$attributes.lowerPaddingTTablet,
        lowerPaddingRTablet = _props$attributes.lowerPaddingRTablet,
        lowerPaddingBTablet = _props$attributes.lowerPaddingBTablet,
        lowerPaddingLTablet = _props$attributes.lowerPaddingLTablet,
        lowerPaddingTMobile = _props$attributes.lowerPaddingTMobile,
        lowerPaddingRMobile = _props$attributes.lowerPaddingRMobile,
        lowerPaddingBMobile = _props$attributes.lowerPaddingBMobile,
        lowerPaddingLMobile = _props$attributes.lowerPaddingLMobile,
        modalStyles = _props$attributes.modalStyles,
        backgroundType = _props$attributes.backgroundType,
        modalBorderTop = _props$attributes.modalBorderTop,
        modalBorderRight = _props$attributes.modalBorderRight,
        modalBorderBottom = _props$attributes.modalBorderBottom,
        modalBorderLeft = _props$attributes.modalBorderLeft,
        modalMarginT = _props$attributes.modalMarginT,
        modalMarginR = _props$attributes.modalMarginR,
        modalMarginB = _props$attributes.modalMarginB,
        modalMarginL = _props$attributes.modalMarginL,
        modalMarginTTablet = _props$attributes.modalMarginTTablet,
        modalMarginRTablet = _props$attributes.modalMarginRTablet,
        modalMarginBTablet = _props$attributes.modalMarginBTablet,
        modalMarginLTablet = _props$attributes.modalMarginLTablet,
        modalMarginTMobile = _props$attributes.modalMarginTMobile,
        modalMarginRMobile = _props$attributes.modalMarginRMobile,
        modalMarginBMobile = _props$attributes.modalMarginBMobile,
        modalMarginLMobile = _props$attributes.modalMarginLMobile,
        modalPaddingT = _props$attributes.modalPaddingT,
        modalPaddingR = _props$attributes.modalPaddingR,
        modalPaddingB = _props$attributes.modalPaddingB,
        modalPaddingL = _props$attributes.modalPaddingL,
        modalPaddingTTablet = _props$attributes.modalPaddingTTablet,
        modalPaddingRTablet = _props$attributes.modalPaddingRTablet,
        modalPaddingBTablet = _props$attributes.modalPaddingBTablet,
        modalPaddingLTablet = _props$attributes.modalPaddingLTablet,
        modalPaddingTMobile = _props$attributes.modalPaddingTMobile,
        modalPaddingRMobile = _props$attributes.modalPaddingRMobile,
        modalPaddingBMobile = _props$attributes.modalPaddingBMobile,
        modalPaddingLMobile = _props$attributes.modalPaddingLMobile;


    useEffect(function () {
        setAttributes({ block_id: props.clientId });
    }, []);
    var saveTriggerSettings = function saveTriggerSettings(value) {
        var newUpdate = triggerSettings.map(function (item, index) {
            if (0 === index) {
                item = _extends({}, item, value);
            }
            return item;
        });
        setAttributes({
            triggerSettings: newUpdate
        });
    };

    var renderCss = React.createElement(
        "style",
        null,
        "\n            #premium-modal-box-" + block_id + " .premium-modal-trigger-container button.premium-modal-trigger-btn:hover {\n              background-color: " + triggerStyles[0].triggerHoverBack + " !important;\n              border-style: " + triggerStyles[0].borderTypeH + " !important;\n              border-top-width: " + triggerBorderTopH + "px !important;\n              border-right-width: " + triggerBorderRightH + "px !important;\n              border-bottom-width: " + triggerBorderBottomH + "px !important;\n              border-left-width: " + triggerBorderLeftH + "px !important;\n              border-color: " + triggerStyles[0].borderColorH + " !important;\n              border-radius: " + triggerStyles[0].borderRadiusH + "px !important;\n            }\n            #premium-modal-box-" + block_id + " .premium-modal-trigger-container button.premium-modal-trigger-btn:hover i{\n                color:" + triggerStyles[0].iconHoverColor + " !important;\n            }\n            #premium-modal-box-" + block_id + " .premium-modal-trigger-container button.premium-modal-trigger-btn:hover span{\n                color:" + triggerStyles[0].hoverColor + " !important;\n            }\n             #premium-modal-box-" + block_id + " .premium-modal-trigger-container:hover .premium-modal-trigger-text {\n                color:" + triggerStyles[0].hoverColor + " !important;\n            }\n            #premium-modal-box-" + block_id + " .premium-modal-trigger-container .premium-lottie-animation{\n            filter: brightness( " + triggerStyles[0].bright + "% ) contrast( " + triggerStyles[0].contrast + "% ) saturate( " + triggerStyles[0].saturation + "% ) blur( " + triggerStyles[0].blur + "px ) hue-rotate( " + triggerStyles[0].hue + "deg );\n            }\n            #premium-modal-box-" + block_id + " .premium-modal-trigger-container:hover .premium-lottie-animation{\n            filter: brightness( " + triggerStyles[0].brightH + "% ) contrast( " + triggerStyles[0].contrastH + "% ) saturate( " + triggerStyles[0].saturationH + "% ) blur( " + triggerStyles[0].blurH + "px ) hue-rotate( " + triggerStyles[0].hueH + "deg ) !important;\n            }\n            #premium-modal-box-" + block_id + " .premium-modal-trigger-container img:hover {\n              border-style: " + triggerStyles[0].borderTypeH + " !important;\n              border-top-width: " + triggerBorderTopH + "px !important;\n              border-right-width: " + triggerBorderRightH + "px !important;\n              border-bottom-width: " + triggerBorderBottomH + "px !important;\n              border-left-width: " + triggerBorderLeftH + "px !important;\n              border-color: " + triggerStyles[0].borderColorH + " !important;\n              border-radius: " + triggerStyles[0].borderRadiusH + "px !important;\n            }\n             #premium-modal-box-" + block_id + " .premium-modal-trigger-container:hover .premium-modal-trigger-text {\n              border-style: " + triggerStyles[0].borderTypeH + " !important;\n              border-top-width: " + triggerBorderTopH + "px !important;\n              border-right-width: " + triggerBorderRightH + "px !important;\n              border-bottom-width: " + triggerBorderBottomH + "px !important;\n              border-left-width: " + triggerBorderLeftH + "px !important;\n              border-color: " + triggerStyles[0].borderColorH + " !important;\n              border-radius: " + triggerStyles[0].borderRadiusH + "px !important;\n            }\n\n        "
    );
    var headerIconSize = getPreviewSize(props.deviceType, contentStyles[0].iconSize, contentStyles[0].iconSizeTablet, contentStyles[0].iconSizeMobile);
    var triggerFontSize = getPreviewSize(props.deviceType, triggerStyles[0].triggerSize, triggerStyles[0].triggerSizeTablet, triggerStyles[0].triggerSizeMobile);
    var triggerPaddingTop = getPreviewSize(props.deviceType, triggerPaddingT, triggerPaddingTTablet, triggerPaddingTMobile);
    var triggerPaddingRight = getPreviewSize(props.deviceType, triggerPaddingR, triggerPaddingRTablet, triggerPaddingRMobile);
    var triggerPaddingBottom = getPreviewSize(props.deviceType, triggerPaddingB, triggerPaddingBTablet, triggerPaddingBMobile);
    var triggerPaddingLeft = getPreviewSize(props.deviceType, triggerPaddingL, triggerPaddingLTablet, triggerPaddingLMobile);
    var headerFontSize = getPreviewSize(props.deviceType, headerStyles[0].headerSize, headerStyles[0].headerSizeTablet, headerStyles[0].headerSizeMobile);
    var upperPaddingTop = getPreviewSize(props.deviceType, upperPaddingT, upperPaddingTTablet, upperPaddingTMobile);
    var upperPaddingRight = getPreviewSize(props.deviceType, upperPaddingR, upperPaddingRTablet, upperPaddingRMobile);
    var upperPaddingBottom = getPreviewSize(props.deviceType, upperPaddingB, upperPaddingBTablet, upperPaddingBMobile);
    var upperPaddingLeft = getPreviewSize(props.deviceType, upperPaddingL, upperPaddingLTablet, upperPaddingLMobile);
    var lowerFontSize = getPreviewSize(props.deviceType, lowerStyles[0].lowerSize, lowerStyles[0].lowerSizeTablet, lowerStyles[0].lowerSizeMobile);
    var lowerPaddingTop = getPreviewSize(props.deviceType, lowerPaddingT, lowerPaddingTTablet, lowerPaddingTMobile);
    var lowerPaddingRight = getPreviewSize(props.deviceType, lowerPaddingR, lowerPaddingRTablet, lowerPaddingRMobile);
    var lowerPaddingBottom = getPreviewSize(props.deviceType, lowerPaddingB, lowerPaddingBTablet, lowerPaddingBMobile);
    var lowerPaddingLeft = getPreviewSize(props.deviceType, lowerPaddingL, lowerPaddingLTablet, lowerPaddingLMobile);
    var modalWidth = getPreviewSize(props.deviceType, modalStyles[0].modalWidth, modalStyles[0].modalWidthTablet, modalStyles[0].modalWidthMobile);
    var modalMaxHeight = getPreviewSize(props.deviceType, modalStyles[0].modalHeight, modalStyles[0].modalHeightTablet, modalStyles[0].modalHeightMobile);
    var modalFontSize = getPreviewSize(props.deviceType, modalStyles[0].modalSize, modalStyles[0].modalSizeTablet, modalStyles[0].modalSizeMobile);
    var modalPaddingTop = getPreviewSize(props.deviceType, modalPaddingT, modalPaddingTTablet, modalPaddingTMobile);
    var modalPaddingRight = getPreviewSize(props.deviceType, modalPaddingR, modalPaddingRTablet, modalPaddingRMobile);
    var modalPaddingBottom = getPreviewSize(props.deviceType, modalPaddingB, modalPaddingBTablet, modalPaddingBMobile);
    var modalPaddingLeft = getPreviewSize(props.deviceType, modalPaddingL, modalPaddingLTablet, modalPaddingLMobile);
    var modalMarginTop = getPreviewSize(props.deviceType, modalMarginT, modalMarginTTablet, modalMarginTMobile);
    var modalMarginRight = getPreviewSize(props.deviceType, modalMarginR, modalMarginRTablet, modalMarginRMobile);
    var modalMarginBottom = getPreviewSize(props.deviceType, modalMarginB, modalMarginBTablet, modalMarginBMobile);
    var modalMarginLeft = getPreviewSize(props.deviceType, modalMarginL, modalMarginLTablet, modalMarginLMobile);
    var triggerSize = getPreviewSize(props.deviceType, triggerSettings[0].imageWidth, triggerSettings[0].imageWidthTablet, triggerSettings[0].imageWidthMobile);

    var btnGrad = void 0,
        btnGrad2 = void 0,
        btnbg = void 0;
    if (undefined !== backgroundType && 'gradient' === backgroundType) {
        btnGrad = 'transparent' === modalStyles[0].containerBack || undefined === modalStyles[0].containerBack ? 'rgba(255,255,255,0)' : modalStyles[0].containerBack;
        btnGrad2 = undefined !== modalStyles[0].gradientColorTwo && undefined !== modalStyles[0].gradientColorTwo && '' !== modalStyles[0].gradientColorTwo ? modalStyles[0].gradientColorTwo : '#777';
        if ('radial' === modalStyles[0].gradientType) {
            btnbg = "radial-gradient(at " + modalStyles[0].gradientPosition + ", " + btnGrad + " " + modalStyles[0].gradientLocationOne + "%, " + btnGrad2 + " " + modalStyles[0].gradientLocationTwo + "%)";
        } else if ('radial' !== modalStyles[0].gradientType) {
            btnbg = "linear-gradient(" + modalStyles[0].gradientAngle + "deg, " + btnGrad + " " + modalStyles[0].gradientLocationOne + "%, " + btnGrad2 + " " + modalStyles[0].gradientLocationTwo + "%)";
        }
    } else {
        btnbg = modalStyles[0].backgroundImageURL ? "url('" + modalStyles[0].backgroundImageURL + "')" : '';
    }
    var loadTriggerGoogleFonts = void 0;
    var loadHeaderGoogleFonts = void 0;
    var loadModalGoogleFonts = void 0;
    if (triggerStyles[0].triggerFamily !== 'Default') {
        var triggerConfig = {
            google: {
                families: [triggerStyles[0].triggerFamily]
            }
        };
        loadTriggerGoogleFonts = React.createElement(_fontLoader2.default, { config: triggerConfig });
    }
    if (headerStyles[0].headerFamily !== 'Default') {
        var headerConfig = {
            google: {
                families: [headerStyles[0].headerFamily]
            }
        };
        loadHeaderGoogleFonts = React.createElement(_fontLoader2.default, { config: headerConfig });
    }
    if (modalStyles[0].modalFamily !== 'Default') {
        var modalConfig = {
            google: {
                families: [modalStyles[0].modalFamily]
            }
        };
        loadModalGoogleFonts = React.createElement(_fontLoader2.default, { config: modalConfig });
    }
    return [isSelected && React.createElement(_inspector2.default, {
        attributes: props.attributes,
        setAttributes: setAttributes

    }), renderCss, React.createElement(
        "div",
        { id: "premium-modal-box-" + block_id, className: (0, _classnames2.default)(className, "premium-modal-box"), "data-trigger": triggerSettings[0].triggerType },
        React.createElement(
            "div",
            { className: "premium-modal-trigger-container", style: { textAlign: triggerSettings[0].align } },
            (triggerSettings[0].triggerType === "button" || triggerSettings[0].triggerType === "load") && React.createElement(
                "button",
                { className: " premium-modal-trigger-btn premium-button__" + triggerSettings[0].btnSize + " ", onClick: function onClick() {
                        return setOpenModal(true);
                    }, style: {
                        fontSize: "" + triggerFontSize + triggerStyles[0].triggerSizeUnit,
                        paddingTop: triggerPaddingTop + "px",
                        paddingRight: triggerPaddingRight + "px",
                        paddingBottom: triggerPaddingBottom + "px",
                        paddingLeft: triggerPaddingLeft + "px",
                        backgroundColor: triggerStyles[0].triggerBack,
                        borderStyle: triggerStyles[0].borderType,
                        borderTopWidth: triggerBorderTop + "px",
                        borderRightWidth: triggerBorderRight + "px",
                        borderBottomWidth: triggerBorderBottom + "px",
                        borderLeftWidth: triggerBorderLeft + "px",
                        borderColor: triggerStyles[0].borderColor,
                        borderRadius: triggerStyles[0].borderRadius + "px",
                        boxShadow: triggerStyles[0].triggerShadowHorizontal + "px " + triggerStyles[0].triggerShadowVertical + "px " + triggerStyles[0].triggerShadowBlur + "px " + triggerStyles[0].triggerShadowColor + " " + triggerStyles[0].triggerShadowPosition
                    } },
                triggerSettings[0].showIcon && triggerSettings[0].iconPosition == "before" && React.createElement("i", { className: " premium-modal-box-icon " + triggerSettings[0].icon, style: { fontSize: triggerSettings[0].iconSize + "px", marginRight: triggerSettings[0].iconSpacing + "px", color: triggerStyles[0].iconColor } }),
                React.createElement(
                    "span",
                    { style: { color: triggerStyles[0].color, fontFamily: triggerStyles[0].triggerFamily, fontWeight: triggerStyles[0].triggerWeight, fontStyle: triggerStyles[0].triggerStyle, letterSpacing: triggerStyles[0].triggerSpacing } },
                    " ",
                    triggerSettings[0].btnText
                ),
                triggerSettings[0].showIcon && triggerSettings[0].iconPosition == "after" && React.createElement("i", { className: " premium-modal-box-icon " + triggerSettings[0].icon, style: { fontSize: triggerSettings[0].iconSize + "px", marginLeft: triggerSettings[0].iconSpacing + "px", color: triggerStyles[0].iconColor } })
            ),
            triggerSettings[0].triggerType === "image" && React.createElement(
                Fragment,
                null,
                triggerSettings[0].triggerImgURL ? React.createElement("img", { className: "premium-modal-trigger-img", onClick: function onClick() {
                        return setOpenModal(true);
                    }, src: triggerSettings[0].triggerImgURL, style: {
                        width: triggerSize + "px",
                        height: triggerSize + "px",
                        borderStyle: triggerStyles[0].borderType,
                        borderTopWidth: triggerBorderTop + "px",
                        borderRightWidth: triggerBorderRight + "px",
                        borderBottomWidth: triggerBorderBottom + "px",
                        borderLeftWidth: triggerBorderLeft + "px",
                        borderColor: triggerStyles[0].borderColor,
                        borderRadius: triggerStyles[0].borderRadius + "px",
                        boxShadow: triggerStyles[0].triggerShadowHorizontal + "px " + triggerStyles[0].triggerShadowVertical + "px " + triggerStyles[0].triggerShadowBlur + "px " + triggerStyles[0].triggerShadowColor + " " + triggerStyles[0].triggerShadowPosition
                    } }) : React.createElement(MediaPlaceholder, {
                    labels: {
                        title: __('Premium Modal ', 'premium-blocks-for-gutenberg'),
                        instructions: __('Upload an image file, pick one from your media library, or add one with a URL.', 'premium-blocks-for-gutenberg')
                    },
                    accept: ['image'],
                    allowedTypes: ['image'],
                    value: triggerSettings[0].triggerImgURL,
                    onSelectURL: function onSelectURL(value) {
                        return saveTriggerSettings({ triggerImgURL: value });
                    },
                    onSelect: function onSelect(media) {
                        saveTriggerSettings({
                            triggerImgID: media.id,
                            triggerImgURL: media.url
                        });
                    }
                })
            ),
            triggerSettings[0].triggerType === "text" && React.createElement(
                "span",
                { onClick: function onClick() {
                        return setOpenModal(true);
                    }, className: "premium-modal-trigger-text", style: {
                        color: triggerStyles[0].color,
                        fontSize: "" + triggerFontSize + triggerStyles[0].triggerSizeUnit,
                        paddingTop: triggerPaddingTop + "px",
                        paddingRight: triggerPaddingRight + "px",
                        paddingBottom: triggerPaddingBottom + "px",
                        paddingLeft: triggerPaddingLeft + "px",
                        borderStyle: triggerStyles[0].borderType,
                        borderTopWidth: triggerBorderTop + "px",
                        borderRightWidth: triggerBorderRight + "px",
                        borderBottomWidth: triggerBorderBottom + "px",
                        borderLeftWidth: triggerBorderLeft + "px",
                        borderColor: triggerStyles[0].borderColor,
                        borderRadius: triggerStyles[0].borderRadius + "px",
                        textShadow: triggerStyles[0].textShadowHorizontal + "px " + triggerStyles[0].textShadowVertical + "px " + triggerStyles[0].textShadowBlur + "px " + triggerStyles[0].textShadowColor,
                        fontFamily: triggerStyles[0].triggerFamily,
                        fontWeight: triggerStyles[0].triggerWeight,
                        fontStyle: triggerStyles[0].triggerStyle,
                        letterSpacing: triggerStyles[0].triggerSpacing
                    } },
                triggerSettings[0].triggerText
            ),
            triggerSettings[0].triggerType === "lottie" && React.createElement(
                Fragment,
                null,
                triggerSettings[0].lottieTriggerURL ? React.createElement(
                    "div",
                    { onClick: function onClick() {
                            return setOpenModal(true);
                        }, className: "premium-lottie-animation" },
                    React.createElement(_reactLottieWithSegments2.default, {
                        height: triggerSize,
                        width: triggerSize,
                        options: {
                            loop: triggerSettings[0].triggerLoopLottie,
                            path: triggerSettings[0].lottieTriggerURL,
                            rendererSettings: {
                                preserveAspectRatio: 'xMidYMid',
                                className: "premium-lottie-inner"
                            }
                        },
                        isClickToPauseDisabled: true,
                        direction: triggerSettings[0].triggerReverseLottie ? -1 : 1
                    }),
                    " "
                ) : React.createElement(MediaPlaceholder, {
                    labels: {
                        title: __('Lottie', 'premium-blocks-for-gutenberg'),
                        instructions: __('Add Lottie animations and files to your website.', 'premium-blocks-for-gutenberg')
                    },
                    accept: ['application/json'],
                    allowedTypes: ['application/json'],
                    value: triggerSettings[0].lottieTriggerURL,
                    onSelectURL: function onSelectURL(value) {
                        return saveTriggerSettings({ lottieTriggerURL: value });
                    },
                    onSelect: function onSelect(media) {
                        return saveTriggerSettings({
                            lottieTriggerURL: media.url
                        });
                    }
                })
            )
        ),
        openModal && React.createElement(
            "div",
            { className: "premium-popup__modal_wrap", role: "dialog" },
            React.createElement("div", { role: "presentation", className: "premium-popup__modal_wrap_overlay", onClick: function onClick() {
                    return setOpenModal(false);
                }, style: {
                    backgroundColor: backgroundType === "solid" ? modalStyles[0].containerBack : '',
                    backgroundImage: btnbg,
                    backgroundRepeat: modalStyles[0].backgroundRepeat,
                    backgroundPosition: modalStyles[0].backgroundPosition,
                    backgroundSize: modalStyles[0].backgroundSize,
                    backgroundAttachment: modalStyles[0].fixed ? "fixed" : "unset"
                } }),
            React.createElement(
                "div",
                { className: "premium-popup__modal_content animated animation-" + contentStyles[0].animationType + " animation-" + contentStyles[0].animationSpeed,
                    "data-delay": triggerSettings[0].delayTime,
                    "data-animation": contentStyles[0].animationType + " " + contentStyles[0].animationSpeed,
                    style: {
                        width: "" + modalWidth + modalStyles[0].modalWidthUnit,
                        maxHeight: "" + modalMaxHeight + modalStyles[0].modalHeightUnit,
                        marginTop: modalMarginTop + "px",
                        marginRight: modalMarginRight + "px",
                        marginBottom: modalMarginBottom + "px",
                        marginLeft: modalMarginLeft + "px",
                        borderStyle: "" + modalStyles[0].borderType,
                        borderColor: "" + modalStyles[0].borderColor,
                        borderTopWidth: modalBorderTop + "px",
                        borderRightWidth: modalBorderRight + "px",
                        borderBottomWidth: modalBorderBottom + "px",
                        borderLeftWidth: modalBorderLeft + "px",
                        borderRadius: modalStyles[0].borderRadius + "px",
                        boxShadow: modalStyles[0].modalShadowHorizontal + "px " + modalStyles[0].modalShadowVertical + "px " + modalStyles[0].modalShadowBlur + "px " + modalStyles[0].modalShadowColor + " " + modalStyles[0].modalShadowPosition
                    } },
                contentStyles[0].showHeader && React.createElement(
                    "div",
                    { className: "premium-modal-box-modal-header", style: {
                            backgroundColor: headerStyles[0].backColor,
                            borderStyle: headerStyles[0].borderType,
                            borderTopWidth: headerBorderTop + "px",
                            borderRightWidth: headerBorderRight + "px",
                            borderBottomWidth: headerBorderBottom + "px",
                            borderLeftWidth: headerBorderLeft + "px",
                            borderColor: "" + headerStyles[0].borderColor,
                            borderRadius: headerStyles[0].borderRadius + "px"
                        } },
                    React.createElement(
                        "h3",
                        { className: "premium-modal-box-modal-title", style: {
                                color: headerStyles[0].color,
                                fontFamily: headerStyles[0].headerFamily,
                                fontStyle: headerStyles[0].headerStyle,
                                letterSpacing: headerStyles[0].headerSpacing,
                                fontWeight: headerStyles[0].headerWeight,
                                fontSize: "" + headerFontSize + headerStyles[0].headerSizeUnit
                            } },
                        contentStyles[0].iconType === "icon" && React.createElement("i", { className: contentStyles[0].contentIcon, style: { fontSize: "" + headerIconSize + contentStyles[0].iconSizeUnit } }),
                        contentStyles[0].iconType === "image" && React.createElement("img", { src: contentStyles[0].contentImgURL, style: {
                                width: "" + headerIconSize + contentStyles[0].iconSizeUnit,
                                height: "" + headerIconSize + contentStyles[0].iconSizeUnit
                            } }),
                        contentStyles[0].iconType === "lottie" && React.createElement(
                            "div",
                            { className: "premium-lottie-animation",
                                style: {
                                    width: "" + headerIconSize + contentStyles[0].iconSizeUnit,
                                    height: "" + headerIconSize + contentStyles[0].iconSizeUnit
                                }
                            },
                            React.createElement(_reactLottieWithSegments2.default, {
                                options: {
                                    loop: contentStyles[0].loopLottie,
                                    path: contentStyles[0].lottieURL,
                                    rendererSettings: {
                                        preserveAspectRatio: 'xMidYMid',
                                        className: "premium-lottie-inner"
                                    }
                                },
                                direction: contentStyles[0].reverseLottie ? -1 : 1
                            })
                        ),
                        contentStyles[0].titleText
                    ),
                    contentStyles[0].showUpperClose && contentStyles[0].showHeader && React.createElement(
                        "div",
                        { className: "premium-modal-box-close-button-container", style: {
                                backgroundColor: "" + upperStyles[0].backColor,
                                borderStyle: "" + upperStyles[0].borderType,
                                borderTopWidth: upperBorderTop + "px",
                                borderRightWidth: upperBorderRight + "px",
                                borderBottomWidth: upperBorderBottom + "px",
                                borderLeftWidth: upperBorderLeft + "px",
                                borderColor: "" + upperStyles[0].borderColor,
                                borderRadius: upperStyles[0].borderRadius + "px",
                                paddingTop: upperPaddingTop + "px",
                                paddingRight: upperPaddingRight + "px",
                                paddingBottom: upperPaddingBottom + "px",
                                paddingLeft: upperPaddingLeft + "px"
                            } },
                        React.createElement(
                            "button",
                            { role: "button", className: "premium-modal-box-modal-close close-button", onClick: function onClick() {
                                    return setOpenModal(false);
                                },
                                style: {
                                    fontSize: "" + upperStyles[0].iconWidth + upperStyles[0].iconWidthUnit,
                                    color: "" + upperStyles[0].color

                                }, "data-dismiss": "premium-modal" },
                            "\xD7"
                        )
                    )
                ),
                React.createElement(
                    "div",
                    { className: "premium-modal-box-modal-body", style: {
                            background: modalStyles[0].textBackColor,
                            paddingTop: modalPaddingTop + "px",
                            paddingRight: modalPaddingRight + "px",
                            paddingBottom: modalPaddingBottom + "px",
                            paddingLeft: modalPaddingLeft + "px"
                        } },
                    modalStyles[0].contentType === "text" ? React.createElement(
                        "p",
                        { style: {
                                fontSize: "" + modalFontSize + modalStyles[0].modalSizeUnit,
                                color: modalStyles[0].textColor,
                                fontWeight: modalStyles[0].modalWeight,
                                fontFamily: modalStyles[0].modalFamily,
                                letterSpacing: modalStyles[0].modalSpacing,
                                fontStyle: modalStyles[0].modalStyle
                            } },
                        modalStyles[0].contentText
                    ) : React.createElement(InnerBlocks, null)
                ),
                contentStyles[0].showLowerClose && React.createElement(
                    "div",
                    { className: "premium-modal-box-modal-footer", style: {
                            backgroundColor: modalStyles[0].footerBackColor
                        } },
                    React.createElement(
                        "button",
                        { className: "premium-modal-box-modal-lower-close close-button", role: "button", "data-dismiss": "premium-modal",
                            onClick: function onClick() {
                                return setOpenModal(false);
                            },
                            style: {
                                fontStyle: lowerStyles[0].lowerStyle,
                                fontWeight: lowerStyles[0].lowerWeight,
                                letterSpacing: lowerStyles[0].lowerSpacing,
                                fontSize: "" + lowerFontSize + lowerStyles[0].lowerSizeUnit,
                                width: "" + lowerStyles[0].iconWidth + lowerStyles[0].iconWidthUnit,
                                color: "" + lowerStyles[0].color,
                                backgroundColor: "" + lowerStyles[0].backColor,
                                borderStyle: "" + lowerStyles[0].borderType,
                                borderTopWidth: lowerBorderTop + "px",
                                borderRightWidth: lowerBorderRight + "px",
                                borderBottomWidth: lowerBorderBottom + "px",
                                borderLeftWidth: lowerBorderLeft + "px",
                                borderColor: "" + lowerStyles[0].borderColor,
                                borderRadius: lowerStyles[0].borderRadius + "px",
                                paddingTop: lowerPaddingTop + "px",
                                paddingRight: lowerPaddingRight + "px",
                                paddingBottom: lowerPaddingBottom + "px",
                                paddingLeft: lowerPaddingLeft + "px"
                            }
                        },
                        contentStyles[0].lowerCloseText
                    )
                )
            )
        ),
        loadTriggerGoogleFonts,
        loadHeaderGoogleFonts,
        loadModalGoogleFonts
    )];
};
exports.default = withSelect(function (select, props) {
    var _select = select('core/edit-post'),
        _select$__experimenta = _select.__experimentalGetPreviewDeviceType,
        __experimentalGetPreviewDeviceType = _select$__experimenta === undefined ? null : _select$__experimenta;

    var deviceType = __experimentalGetPreviewDeviceType ? __experimentalGetPreviewDeviceType() : null;

    return {
        deviceType: deviceType
    };
})(edit);

/***/ }),
/* 371 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _reactFonticonpicker = __webpack_require__(24);

var _reactFonticonpicker2 = _interopRequireDefault(_reactFonticonpicker);

var _premiumIconsList = __webpack_require__(31);

var _premiumIconsList2 = _interopRequireDefault(_premiumIconsList);

var _ColorComponent = __webpack_require__(2);

var _ColorComponent2 = _interopRequireDefault(_ColorComponent);

var _premiumBorder = __webpack_require__(6);

var _premiumBorder2 = _interopRequireDefault(_premiumBorder);

var _PremiumResponsivePadding = __webpack_require__(16);

var _PremiumResponsivePadding2 = _interopRequireDefault(_PremiumResponsivePadding);

var _singleRangeControl = __webpack_require__(3);

var _singleRangeControl2 = _interopRequireDefault(_singleRangeControl);

var _radioControl = __webpack_require__(10);

var _radioControl2 = _interopRequireDefault(_radioControl);

var _premiumTypo = __webpack_require__(7);

var _premiumTypo2 = _interopRequireDefault(_premiumTypo);

var _premiumMediaUpload = __webpack_require__(12);

var _premiumMediaUpload2 = _interopRequireDefault(_premiumMediaUpload);

var _PremiumResponsiveMargin = __webpack_require__(52);

var _PremiumResponsiveMargin2 = _interopRequireDefault(_PremiumResponsiveMargin);

var _PremiumShadow = __webpack_require__(5);

var _PremiumShadow2 = _interopRequireDefault(_PremiumShadow);

var _responsiveRangeControl = __webpack_require__(19);

var _responsiveRangeControl2 = _interopRequireDefault(_responsiveRangeControl);

var _PremiumBackgroundControl = __webpack_require__(23);

var _PremiumBackgroundControl2 = _interopRequireDefault(_PremiumBackgroundControl);

var _premiumFilters = __webpack_require__(30);

var _premiumFilters2 = _interopRequireDefault(_premiumFilters);

var _settings = __webpack_require__(1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __ = wp.i18n.__;
var _wp$components = wp.components,
    PanelBody = _wp$components.PanelBody,
    SelectControl = _wp$components.SelectControl,
    ToggleControl = _wp$components.ToggleControl,
    TextControl = _wp$components.TextControl,
    TabPanel = _wp$components.TabPanel,
    ExternalLink = _wp$components.ExternalLink;
var _wp$blockEditor = wp.blockEditor,
    InspectorControls = _wp$blockEditor.InspectorControls,
    URLInput = _wp$blockEditor.URLInput;
var _wp$element = wp.element,
    Fragment = _wp$element.Fragment,
    useEffect = _wp$element.useEffect,
    useRef = _wp$element.useRef;
var _wp$blockEditor2 = wp.blockEditor,
    InnerBlocks = _wp$blockEditor2.InnerBlocks,
    MediaPlaceholder = _wp$blockEditor2.MediaPlaceholder;

var Inspector = function Inspector(_ref) {
    var attributes = _ref.attributes,
        setAttributes = _ref.setAttributes;
    var block_id = attributes.block_id,
        contentStyles = attributes.contentStyles,
        triggerSettings = attributes.triggerSettings,
        triggerStyles = attributes.triggerStyles,
        triggerBorderTop = attributes.triggerBorderTop,
        triggerBorderRight = attributes.triggerBorderRight,
        triggerBorderBottom = attributes.triggerBorderBottom,
        triggerBorderLeft = attributes.triggerBorderLeft,
        triggerBorderTopH = attributes.triggerBorderTopH,
        triggerBorderRightH = attributes.triggerBorderRightH,
        triggerBorderBottomH = attributes.triggerBorderBottomH,
        triggerBorderLeftH = attributes.triggerBorderLeftH,
        triggerPaddingT = attributes.triggerPaddingT,
        triggerPaddingR = attributes.triggerPaddingR,
        triggerPaddingB = attributes.triggerPaddingB,
        triggerPaddingL = attributes.triggerPaddingL,
        triggerPaddingTTablet = attributes.triggerPaddingTTablet,
        triggerPaddingRTablet = attributes.triggerPaddingRTablet,
        triggerPaddingBTablet = attributes.triggerPaddingBTablet,
        triggerPaddingLTablet = attributes.triggerPaddingLTablet,
        triggerPaddingTMobile = attributes.triggerPaddingTMobile,
        triggerPaddingRMobile = attributes.triggerPaddingRMobile,
        triggerPaddingBMobile = attributes.triggerPaddingBMobile,
        triggerPaddingLMobile = attributes.triggerPaddingLMobile,
        headerStyles = attributes.headerStyles,
        headerBorderTop = attributes.headerBorderTop,
        headerBorderRight = attributes.headerBorderRight,
        headerBorderBottom = attributes.headerBorderBottom,
        headerBorderLeft = attributes.headerBorderLeft,
        upperStyles = attributes.upperStyles,
        upperBorderTop = attributes.upperBorderTop,
        upperBorderRight = attributes.upperBorderRight,
        upperBorderBottom = attributes.upperBorderBottom,
        upperBorderLeft = attributes.upperBorderLeft,
        upperPaddingT = attributes.upperPaddingT,
        upperPaddingR = attributes.upperPaddingR,
        upperPaddingB = attributes.upperPaddingB,
        upperPaddingL = attributes.upperPaddingL,
        upperPaddingTTablet = attributes.upperPaddingTTablet,
        upperPaddingRTablet = attributes.upperPaddingRTablet,
        upperPaddingBTablet = attributes.upperPaddingBTablet,
        upperPaddingLTablet = attributes.upperPaddingLTablet,
        upperPaddingTMobile = attributes.upperPaddingTMobile,
        upperPaddingRMobile = attributes.upperPaddingRMobile,
        upperPaddingBMobile = attributes.upperPaddingBMobile,
        upperPaddingLMobile = attributes.upperPaddingLMobile,
        lowerStyles = attributes.lowerStyles,
        lowerBorderTop = attributes.lowerBorderTop,
        lowerBorderRight = attributes.lowerBorderRight,
        lowerBorderBottom = attributes.lowerBorderBottom,
        lowerBorderLeft = attributes.lowerBorderLeft,
        lowerPaddingT = attributes.lowerPaddingT,
        lowerPaddingR = attributes.lowerPaddingR,
        lowerPaddingB = attributes.lowerPaddingB,
        lowerPaddingL = attributes.lowerPaddingL,
        lowerPaddingTTablet = attributes.lowerPaddingTTablet,
        lowerPaddingRTablet = attributes.lowerPaddingRTablet,
        lowerPaddingBTablet = attributes.lowerPaddingBTablet,
        lowerPaddingLTablet = attributes.lowerPaddingLTablet,
        lowerPaddingTMobile = attributes.lowerPaddingTMobile,
        lowerPaddingRMobile = attributes.lowerPaddingRMobile,
        lowerPaddingBMobile = attributes.lowerPaddingBMobile,
        lowerPaddingLMobile = attributes.lowerPaddingLMobile,
        modalStyles = attributes.modalStyles,
        backgroundType = attributes.backgroundType,
        modalBorderTop = attributes.modalBorderTop,
        modalBorderRight = attributes.modalBorderRight,
        modalBorderBottom = attributes.modalBorderBottom,
        modalBorderLeft = attributes.modalBorderLeft,
        modalMarginT = attributes.modalMarginT,
        modalMarginR = attributes.modalMarginR,
        modalMarginB = attributes.modalMarginB,
        modalMarginL = attributes.modalMarginL,
        modalMarginTTablet = attributes.modalMarginTTablet,
        modalMarginRTablet = attributes.modalMarginRTablet,
        modalMarginBTablet = attributes.modalMarginBTablet,
        modalMarginLTablet = attributes.modalMarginLTablet,
        modalMarginTMobile = attributes.modalMarginTMobile,
        modalMarginRMobile = attributes.modalMarginRMobile,
        modalMarginBMobile = attributes.modalMarginBMobile,
        modalMarginLMobile = attributes.modalMarginLMobile,
        modalPaddingT = attributes.modalPaddingT,
        modalPaddingR = attributes.modalPaddingR,
        modalPaddingB = attributes.modalPaddingB,
        modalPaddingL = attributes.modalPaddingL,
        modalPaddingTTablet = attributes.modalPaddingTTablet,
        modalPaddingRTablet = attributes.modalPaddingRTablet,
        modalPaddingBTablet = attributes.modalPaddingBTablet,
        modalPaddingLTablet = attributes.modalPaddingLTablet,
        modalPaddingTMobile = attributes.modalPaddingTMobile,
        modalPaddingRMobile = attributes.modalPaddingRMobile,
        modalPaddingBMobile = attributes.modalPaddingBMobile,
        modalPaddingLMobile = attributes.modalPaddingLMobile;

    var saveContentStyle = function saveContentStyle(value) {
        var newUpdate = contentStyles.map(function (item, index) {
            if (0 === index) {
                item = _extends({}, item, value);
            }
            return item;
        });
        setAttributes({
            contentStyles: newUpdate
        });
    };
    var saveTriggerSettings = function saveTriggerSettings(value) {
        var newUpdate = triggerSettings.map(function (item, index) {
            if (0 === index) {
                item = _extends({}, item, value);
            }
            return item;
        });
        setAttributes({
            triggerSettings: newUpdate
        });
    };
    var saveTriggerStyles = function saveTriggerStyles(value) {
        var newUpdate = triggerStyles.map(function (item, index) {
            if (0 === index) {
                item = _extends({}, item, value);
            }
            return item;
        });
        setAttributes({
            triggerStyles: newUpdate
        });
    };
    var saveHeaderStyles = function saveHeaderStyles(value) {
        var newUpdate = headerStyles.map(function (item, index) {
            if (0 === index) {
                item = _extends({}, item, value);
            }
            return item;
        });
        setAttributes({
            headerStyles: newUpdate
        });
    };
    var saveUpperStyles = function saveUpperStyles(value) {
        var newUpdate = upperStyles.map(function (item, index) {
            if (0 === index) {
                item = _extends({}, item, value);
            }
            return item;
        });
        setAttributes({
            upperStyles: newUpdate
        });
    };
    var saveLowerStyles = function saveLowerStyles(value) {
        var newUpdate = lowerStyles.map(function (item, index) {
            if (0 === index) {
                item = _extends({}, item, value);
            }
            return item;
        });
        setAttributes({
            lowerStyles: newUpdate
        });
    };
    var saveModalStyles = function saveModalStyles(value) {
        var newUpdate = modalStyles.map(function (item, index) {
            if (0 === index) {
                item = _extends({}, item, value);
            }
            return item;
        });
        setAttributes({
            modalStyles: newUpdate
        });
    };
    return React.createElement(
        InspectorControls,
        { key: "inspector" },
        React.createElement(
            PanelBody,
            {
                title: __("Content", 'premium-blocks-for-gutenberg'),
                className: "premium-panel-body",
                initialOpen: true
            },
            React.createElement(ToggleControl, {
                label: __('Header', 'premium-blocks-for-gutenberg'),
                checked: contentStyles[0].showHeader,
                onChange: function onChange(value) {
                    return saveContentStyle({ showHeader: value });
                }
            }),
            contentStyles[0].showHeader && React.createElement(
                Fragment,
                null,
                React.createElement(SelectControl, {
                    label: __('Icon Type', 'premium-blocks-for-gutenberg'),
                    options: [{ label: __("None", "premium-blocks-for-gutenberg"), value: 'none' }, { label: __("Icon", "premium-blocks-for-gutenberg"), value: 'icon' }, { label: __('Custom Image', 'premium-blocks-for-gutenberg'), value: 'image' }, { label: __('Lottie Animations', 'premium-blocks-for-gutenberg'), value: 'lottie' }],
                    value: contentStyles[0].iconType,
                    onChange: function onChange(value) {
                        return saveContentStyle({ iconType: value });
                    }
                }),
                contentStyles[0].iconType === "icon" && React.createElement(
                    Fragment,
                    null,
                    React.createElement(
                        "p",
                        { className: "premium-editor-paragraph" },
                        __("Select Icon", 'premium-blocks-for-gutenberg')
                    ),
                    React.createElement(_reactFonticonpicker2.default, {
                        icons: _premiumIconsList2.default,
                        onChange: function onChange(newIcon) {
                            return saveContentStyle({ contentIcon: newIcon });
                        },
                        value: contentStyles[0].contentIcon,
                        isMulti: false,
                        appendTo: "body",
                        noSelectedPlaceholder: __("Select Icon", 'premium-blocks-for-gutenberg')
                    })
                ),
                contentStyles[0].iconType === "image" && React.createElement(_premiumMediaUpload2.default, {
                    type: "image",
                    imageID: contentStyles[0].contentImgID,
                    imageURL: contentStyles[0].contentImgURL,
                    onSelectMedia: function onSelectMedia(media) {
                        saveContentStyle({
                            contentImgID: media.id,
                            contentImgURL: media.url
                        });
                    },
                    onRemoveImage: function onRemoveImage() {
                        return saveContentStyle({
                            contentImgID: "",
                            contentImgURL: ""
                        });
                    }
                }),
                contentStyles[0].iconType === "lottie" && React.createElement(
                    Fragment,
                    null,
                    _settings.JsonUploadEnabled == 1 ? '' : React.createElement(
                        "p",
                        null,
                        __('Make Sure that allow "JSON file Upload " from '),
                        " ",
                        React.createElement(
                            ExternalLink,
                            { href: window.PremiumBlocksSettings.settingPath },
                            "plugin Settings"
                        )
                    ),
                    React.createElement(TextControl, {
                        label: __("Animation JSON URL", "premium-blocks-for-gutenberg"),
                        value: contentStyles[0].lottieURL,
                        onChange: function onChange(value) {
                            return saveContentStyle({ lottieURL: value });
                        }
                    }),
                    React.createElement(ToggleControl, {
                        label: __("Loop", 'premium-blocks-for-gutenberg'),
                        checked: contentStyles[0].loopLottie,
                        onChange: function onChange(value) {
                            return saveContentStyle({ loopLottie: value });
                        }
                    }),
                    React.createElement(ToggleControl, {
                        label: __("Reverse", 'premium-blocks-for-gutenberg'),
                        checked: contentStyles[0].reverseLottie,
                        onChange: function onChange(value) {
                            return saveContentStyle({ reverseLottie: value });
                        }
                    })
                ),
                contentStyles[0].iconType !== "none" && React.createElement(_responsiveRangeControl2.default, {
                    label: __('Icon Size', 'premium-blocks-for-gutenberg'),
                    value: contentStyles[0].iconSize,
                    onChange: function onChange(value) {
                        return saveContentStyle({ iconSize: value });
                    },
                    tabletValue: contentStyles[0].iconSizeTablet,
                    onChangeTablet: function onChangeTablet(value) {
                        return saveContentStyle({ iconSizeTablet: value });
                    },
                    mobileValue: contentStyles[0].iconSizeMobile,
                    onChangeMobile: function onChangeMobile(value) {
                        return saveContentStyle({ iconSizeMobile: value });
                    },
                    min: 0,
                    max: 100,
                    step: 1,
                    onChangeUnit: function onChangeUnit(newValue) {
                        return saveContentStyle({ iconSizeUnit: newValue });
                    },
                    unit: contentStyles[0].iconSizeUnit,
                    showUnit: true,
                    units: ['px', 'em'],
                    defaultValue: 0
                }),
                React.createElement(TextControl, {
                    label: __("Title", 'premium-blocks-for-gutenberg'),
                    value: contentStyles[0].titleText,
                    onChange: function onChange(value) {
                        return saveContentStyle({ titleText: value });
                    }
                })
            ),
            React.createElement("hr", null),
            React.createElement(SelectControl, {
                label: __("Content to Show", 'premium-blocks-for-gutenberg'),
                value: modalStyles[0].contentType,
                onChange: function onChange(value) {
                    return saveModalStyles({ contentType: value });
                },
                options: [{
                    value: "text",
                    label: __("Text", 'premium-blocks-for-gutenberg')
                }, {
                    value: "block",
                    label: __("Gutenberg Block", 'premium-blocks-for-gutenberg')
                }]
            }),
            modalStyles[0].contentType == "text" && React.createElement(TextControl, {
                label: __("Text", "premium-blocks-for-gutenberg"),
                value: modalStyles[0].contentText,
                onChange: function onChange(value) {
                    return saveModalStyles({ contentText: value });
                }
            }),
            contentStyles[0].showHeader && React.createElement(ToggleControl, {
                label: __("Upper Close Button", 'premium-blocks-for-gutenberg'),
                checked: contentStyles[0].showUpperClose,
                onChange: function onChange(value) {
                    return saveContentStyle({ showUpperClose: value });
                }
            }),
            React.createElement(ToggleControl, {
                label: __("Lower Close Button", 'premium-blocks-for-gutenberg'),
                checked: contentStyles[0].showLowerClose,
                onChange: function onChange(value) {
                    return saveContentStyle({ showLowerClose: value });
                }
            }),
            contentStyles[0].showLowerClose && React.createElement(TextControl, {
                label: __("Text", 'premium-blocks-for-gutenberg'),
                value: contentStyles[0].lowerCloseText,
                onChange: function onChange(value) {
                    return saveContentStyle({ lowerCloseText: value });
                }
            }),
            React.createElement(SelectControl, {
                label: __("Animation"),
                value: contentStyles[0].animationType,
                onChange: function onChange(value) {
                    return saveContentStyle({ animationType: value });
                },
                options: [{ value: "none", label: __("None", 'premium-blocks-for-gutenberg') }, { value: "fadeInDown", label: __("Fade In Down", 'premium-blocks-for-gutenberg') }, { value: "fadeInUp", label: __("Fade In Up", 'premium-blocks-for-gutenberg') }, { value: "fadeIn", label: __("Fade In", 'premium-blocks-for-gutenberg') }, { value: "fadeInLeft", label: __("Fade In Left", 'premium-blocks-for-gutenberg') }, { value: "fadeInRight", label: __("Fade In Right", 'premium-blocks-for-gutenberg') }, { value: "zoomInDown", label: __("Zoom In Down", 'premium-blocks-for-gutenberg') }, { value: "zoomInUp", label: __("Zoom In Up", 'premium-blocks-for-gutenberg') }, { value: "zoomIn", label: __("Zoom In", 'premium-blocks-for-gutenberg') }, { value: "zoomInLeft", label: __("Zoom In Left", 'premium-blocks-for-gutenberg') }, { value: "zoomInRight", label: __("Zoom In Right", 'premium-blocks-for-gutenberg') }, { value: "bounceInDown", label: __("Bouncing In Down", 'premium-blocks-for-gutenberg') }, { value: "bounceInUp", label: __("Bouncing In Up", 'premium-blocks-for-gutenberg') }, { value: "bounceIn", label: __("Bouncing In", 'premium-blocks-for-gutenberg') }, { value: "bounceInLeft", label: __("Bouncing In Left", 'premium-blocks-for-gutenberg') }, { value: "bounceInRight", label: __("Bouncing In Right", 'premium-blocks-for-gutenberg') }, { value: "slideInUp", label: __("Slide In Up", 'premium-blocks-for-gutenberg') }, { value: "slideInLeft", label: __("Slide In Left", 'premium-blocks-for-gutenberg') }, { value: "slideInRight", label: __("Slide In Right", 'premium-blocks-for-gutenberg') }, { value: "slideInDown", label: __("Slide In Down", 'premium-blocks-for-gutenberg') }, { value: "rotateInUpLeft", label: __("Rotating Up Left", 'premium-blocks-for-gutenberg') }, { value: "rotateInUpRight", label: __("Rotating Up Right", 'premium-blocks-for-gutenberg') }, { value: "rotateIn", label: __("Rotating In", 'premium-blocks-for-gutenberg') }, { value: "rotateInDownLeft", label: __("Rotating In Left", 'premium-blocks-for-gutenberg') }, { value: "rotateInDownRight", label: __("Rotating In Right", 'premium-blocks-for-gutenberg') }, { value: "bounce", label: __("Bounce", 'premium-blocks-for-gutenberg') }, { value: "flash", label: __("Flash", 'premium-blocks-for-gutenberg') }, { value: "pulse", label: __("Pulse", 'premium-blocks-for-gutenberg') }, { value: "rubberBand", label: __("Rubber Band", 'premium-blocks-for-gutenberg') }, { value: "headShake", label: __("Head Shake", 'premium-blocks-for-gutenberg') }, { value: "swing", label: __("Swing", 'premium-blocks-for-gutenberg') }, { value: "tada", label: __("Tada", 'premium-blocks-for-gutenberg') }, { value: "wobble", label: __("Wobble", 'premium-blocks-for-gutenberg') }, { value: "jello", label: __("Jolle", 'premium-blocks-for-gutenberg') }, { value: "lightSpeedIn", label: __("Light Speed", 'premium-blocks-for-gutenberg') }, { value: "rollIn", label: __("Roll In", 'premium-blocks-for-gutenberg') }]
            }),
            React.createElement(SelectControl, {
                label: __("Animation Duration", 'premium-blocks-for-gutenberg'),
                value: contentStyles[0].animationSpeed,
                options: [{
                    label: __("Fast", 'premium-blocks-for-gutenberg'),
                    value: "fast"
                }, {
                    label: __("Normal", 'premium-blocks-for-gutenberg'),
                    value: "normal"
                }, {
                    label: __("Slow", 'premium-blocks-for-gutenberg'),
                    value: 'slow'
                }],
                onChange: function onChange(value) {
                    return saveContentStyle({ animationSpeed: value });
                }
            })
        ),
        React.createElement(
            PanelBody,
            {
                title: __("Trigger Option", 'premium-blocks-for-gutenberg'),
                className: "premium-panel-body",
                initialOpen: false
            },
            React.createElement(SelectControl, {
                label: __("Trigger", "premium-blocks-for-gutenberg"),
                value: triggerSettings[0].triggerType,
                options: [{ label: __("Button", 'premium-blocks-for-gutenberg'), value: 'button' }, { label: __("Image", 'premium-blocks-for-gutenberg'), value: 'image' }, { label: __("Text", 'premium-blocks-for-gutenberg'), value: 'text' }, { label: __("Lottie Animation", 'premium-blocks-for-gutenberg'), value: 'lottie' }, { label: __("On Page Load", 'premium-blocks-for-gutenberg'), value: 'load' }],
                onChange: function onChange(value) {
                    return saveTriggerSettings({ triggerType: value });
                }
            }),
            triggerSettings[0].triggerType === "button" && React.createElement(
                Fragment,
                null,
                React.createElement(TextControl, {
                    label: __("Button text", 'premium-blocks-for-gutenberg'),
                    value: triggerSettings[0].btnText,
                    onChange: function onChange(newValue) {
                        return saveTriggerSettings({ btnText: newValue });
                    }
                }),
                React.createElement(ToggleControl, {
                    label: __("Icon", 'premium-blocks-for-gutenberg'),
                    checked: triggerSettings[0].showIcon,
                    onChange: function onChange(newValue) {
                        return saveTriggerSettings({ showIcon: newValue });
                    }
                }),
                triggerSettings[0].showIcon && React.createElement(
                    Fragment,
                    null,
                    React.createElement(_reactFonticonpicker2.default, {
                        icons: _premiumIconsList2.default,
                        onChange: function onChange(newIcon) {
                            return saveTriggerSettings({ icon: newIcon });
                        },
                        value: triggerSettings[0].icon,
                        isMulti: false,
                        appendTo: "body",
                        noSelectedPlaceholder: __("Select Icon", 'premium-blocks-for-gutenberg')
                    }),
                    React.createElement(SelectControl, {
                        label: __('Icon Position', 'premium-blocks-for-gutenberg'),
                        value: triggerSettings[0].iconPosition,
                        options: [{
                            label: __("Before", "premium-blocks-for-gutenberg"),
                            value: 'before'
                        }, {
                            label: __("After", "premium-blocks-for-gutenberg"),
                            value: 'after'
                        }],
                        onChange: function onChange(newValue) {
                            return saveTriggerSettings({ iconPosition: newValue });
                        }
                    }),
                    React.createElement(_singleRangeControl2.default, {
                        label: __("Icon Size", 'premium-blocks-for-gutenberg'),
                        value: triggerSettings[0].iconSize,
                        min: "1",
                        max: "100",
                        onChange: function onChange(newValue) {
                            return saveTriggerSettings({ iconSize: newValue });
                        },
                        defaultValue: 0,
                        showUnit: false
                    }),
                    React.createElement(_singleRangeControl2.default, {
                        label: __("Icon Spacing", 'premium-blocks-for-gutenberg'),
                        value: triggerSettings[0].iconSpacing,
                        min: "1",
                        max: "100",
                        onChange: function onChange(newValue) {
                            return saveTriggerSettings({ iconSpacing: newValue });
                        },
                        defaultValue: 0,
                        showUnit: false
                    })
                ),
                React.createElement(SelectControl, {
                    label: __("Button Size", "premium-blocks-for-gutenberg"),
                    value: triggerSettings[0].btnSize,
                    options: [{ label: __("Small", "premium-blocks-for-gutenberg"), value: 'sm' }, { label: __("Medium", "premium-blocks-for-gutenberg"), value: 'md' }, { label: __("Large", "premium-blocks-for-gutenberg"), value: 'lg' }, { label: __("Block", "premium-blocks-for-gutenberg"), value: 'block' }],
                    onChange: function onChange(newValue) {
                        return saveTriggerSettings({ btnSize: newValue });
                    }
                })
            ),
            triggerSettings[0].triggerType === "image" && React.createElement(
                Fragment,
                null,
                React.createElement(_premiumMediaUpload2.default, {
                    type: "image",
                    imageID: triggerSettings[0].triggerImgID,
                    imageURL: triggerSettings[0].triggerImgURL,
                    onSelectMedia: function onSelectMedia(media) {
                        saveTriggerSettings({
                            triggerImgID: media.id,
                            triggerImgURL: media.url
                        });
                    },
                    onRemoveImage: function onRemoveImage() {
                        return saveTriggerSettings({
                            triggerImgID: "",
                            triggerImgURL: ""
                        });
                    }
                })
            ),
            triggerSettings[0].triggerType === "text" && React.createElement(TextControl, {
                label: __("Text", 'premium-blocks-for-gutenberg'),
                value: triggerSettings[0].triggerText,
                onChange: function onChange(value) {
                    return saveTriggerSettings({ triggerText: value });
                }
            }),
            triggerSettings[0].triggerType === "lottie" && React.createElement(
                Fragment,
                null,
                _settings.JsonUploadEnabled == 1 ? '' : React.createElement(
                    "p",
                    null,
                    __('Make Sure that allow "JSON file Upload " from '),
                    " ",
                    React.createElement(
                        ExternalLink,
                        { href: window.PremiumBlocksSettings.settingPath },
                        "plugin Settings"
                    )
                ),
                React.createElement(ToggleControl, {
                    label: __("Loop", 'premium-blocks-for-gutenberg'),
                    checked: triggerSettings[0].triggerLoopLottie,
                    onChange: function onChange(value) {
                        return saveTriggerSettings({ triggerLoopLottie: value });
                    }
                }),
                React.createElement(ToggleControl, {
                    label: __("Reverse", 'premium-blocks-for-gutenberg'),
                    checked: triggerSettings[0].triggerReverseLottie,
                    onChange: function onChange(value) {
                        return saveTriggerSettings({ triggerReverseLottie: value });
                    }
                }),
                React.createElement(ToggleControl, {
                    label: __("Only Play on Hover", 'premium-blocks-for-gutenberg'),
                    checked: triggerSettings[0].triggerPlayLottie,
                    onChange: function onChange(value) {
                        return saveTriggerSettings({ triggerPlayLottie: value });
                    }
                })
            ),
            (triggerSettings[0].triggerType === "image" || triggerSettings[0].triggerType === "lottie") && React.createElement(_responsiveRangeControl2.default, {
                label: __('Size', 'premium-blocks-for-gutenberg'),
                value: triggerSettings[0].imageWidth,
                onChange: function onChange(value) {
                    return saveTriggerSettings({ imageWidth: value });
                },
                tabletValue: triggerSettings[0].imageWidthTablet,
                onChangeTablet: function onChangeTablet(value) {
                    return saveTriggerSettings({ imageWidthTablet: value });
                },
                mobileValue: triggerSettings[0].imageWidthMobile,
                onChangeMobile: function onChangeMobile(value) {
                    return saveTriggerSettings({ imageWidthMobile: value });
                },
                min: 0,
                max: 800,
                step: 1,
                showUnit: false,
                defaultValue: 0
            }),
            triggerSettings[0].triggerType === "load" && React.createElement(
                Fragment,
                null,
                React.createElement(
                    "p",
                    null,
                    __('the Button will be removed in the preview mode ', "premium-blocks-for-gutenberg")
                ),
                React.createElement(_singleRangeControl2.default, {
                    label: __("Delay in Popup Display (Sec)", 'premium-blocks-for-gutenberg'),
                    value: triggerSettings[0].delayTime,
                    min: "1",
                    max: "100",
                    onChange: function onChange(newValue) {
                        return saveTriggerSettings({ delayTime: newValue });
                    },
                    defaultValue: 0,
                    showUnit: false
                })
            ),
            triggerSettings[0].triggerType !== "load" && React.createElement(_radioControl2.default, {
                choices: ["right", "center", "left"],
                value: triggerSettings[0].align,
                onChange: function onChange(newValue) {
                    return saveTriggerSettings({ align: newValue });
                },
                label: __("Align", 'premium-blocks-for-gutenberg')
            })
        ),
        triggerSettings[0].triggerType !== "load" && React.createElement(
            PanelBody,
            {
                title: __("Triger", 'premium-blocks-for-gutenberg'),
                className: "premium-panel-body",
                initialOpen: false
            },
            (triggerSettings[0].triggerType === "button" || triggerSettings[0].triggerType === 'text') && React.createElement(
                Fragment,
                null,
                React.createElement(_ColorComponent2.default, {
                    label: __("Color", 'premium-blocks-for-gutenberg'),
                    colorValue: triggerStyles[0].color,
                    colorDefault: '',
                    onColorChange: function onColorChange(newValue) {
                        return saveTriggerStyles({ color: newValue });
                    }
                }),
                React.createElement(_ColorComponent2.default, {
                    label: __("Hover Color", 'premium-blocks-for-gutenberg'),
                    colorValue: triggerStyles[0].hoverColor,
                    colorDefault: '',
                    onColorChange: function onColorChange(newValue) {
                        return saveTriggerStyles({ hoverColor: newValue });
                    }
                })
            ),
            triggerSettings[0].triggerType === "button" && React.createElement(
                Fragment,
                null,
                React.createElement(_ColorComponent2.default, {
                    label: __("Icon Color", 'premium-blocks-for-gutenberg'),
                    colorValue: triggerStyles[0].iconColor,
                    colorDefault: '',
                    onColorChange: function onColorChange(newValue) {
                        return saveTriggerStyles({ iconColor: newValue });
                    }
                }),
                React.createElement(_ColorComponent2.default, {
                    label: __("Icon Hover Color", 'premium-blocks-for-gutenberg'),
                    colorValue: triggerStyles[0].iconHoverColor,
                    colorDefault: '',
                    onColorChange: function onColorChange(newValue) {
                        return saveTriggerStyles({ iconHoverColor: newValue });
                    }
                })
            ),
            (triggerSettings[0].triggerType === "button" || triggerSettings[0].triggerType === 'text') && React.createElement(
                Fragment,
                null,
                React.createElement(_premiumTypo2.default, {
                    components: ["responsiveSize", "weight", "spacing", "style", "upper", "family"],
                    setAttributes: saveTriggerStyles,
                    fontSizeType: {
                        value: triggerStyles[0].triggerSizeUnit,
                        label: __("triggerSizeUnit", 'premium-blocks-for-gutenberg')
                    },
                    fontSize: triggerStyles[0].triggerSize,
                    fontSizeMobile: triggerStyles[0].triggerSizeMobile,
                    fontSizeTablet: triggerStyles[0].triggerSizeTablet,
                    onChangeSize: function onChangeSize(newSize) {
                        return saveTriggerStyles({ triggerSize: newSize });
                    },
                    onChangeTabletSize: function onChangeTabletSize(newSize) {
                        return saveTriggerStyles({ triggerSizeTablet: newSize });
                    },
                    onChangeMobileSize: function onChangeMobileSize(newSize) {
                        return saveTriggerStyles({ triggerSizeMobile: newSize });
                    },
                    fontFamily: triggerStyles[0].triggerFamily,
                    weight: triggerStyles[0].triggerWeight,
                    style: triggerStyles[0].triggerStyle,
                    spacing: triggerStyles[0].triggerSpacing,
                    upper: triggerStyles[0].triggerUpper,
                    onChangeWeight: function onChangeWeight(newWeight) {
                        return saveTriggerStyles({ triggerWeight: newWeight });
                    },
                    onChangeStyle: function onChangeStyle(newStyle) {
                        return saveTriggerStyles({ triggerStyle: newStyle });
                    },
                    onChangeSpacing: function onChangeSpacing(newValue) {
                        return saveTriggerStyles({ triggerSpacing: newValue });
                    },
                    onChangeFamily: function onChangeFamily(fontFamily) {
                        return saveTriggerStyles({ triggerFamily: fontFamily });
                    },
                    onChangeUpper: function onChangeUpper(check) {
                        return saveTriggerStyles({ triggerUpper: check });
                    }
                })
            ),
            (triggerSettings[0].triggerType === "button" || triggerSettings[0].triggerType === 'text' || triggerSettings[0].triggerType === 'image') && React.createElement(
                Fragment,
                null,
                React.createElement(
                    TabPanel,
                    {
                        className: "premium-color-tabpanel",
                        activeClass: "active-tab",
                        tabs: [{
                            name: "normal",
                            title: "Normal",
                            className: "premium-tab"
                        }, {
                            name: "hover",
                            title: "Hover",
                            className: "premium-tab"
                        }]
                    },
                    function (tab) {
                        var tabout = void 0;
                        if ("normal" === tab.name) {
                            tabout = React.createElement(
                                Fragment,
                                null,
                                triggerSettings[0].triggerType === 'button' && React.createElement(_ColorComponent2.default, {
                                    label: __("Background Color", 'premium-blocks-for-gutenberg'),
                                    colorValue: triggerStyles[0].triggerBack,
                                    colorDefault: '',
                                    onColorChange: function onColorChange(newValue) {
                                        return saveTriggerStyles({ triggerBack: newValue || "transparent" });
                                    }
                                }),
                                React.createElement(_premiumBorder2.default, {
                                    borderType: triggerStyles[0].borderType,
                                    top: triggerBorderTop,
                                    right: triggerBorderRight,
                                    bottom: triggerBorderBottom,
                                    left: triggerBorderLeft,
                                    borderColor: triggerStyles[0].borderColor,
                                    borderRadius: triggerStyles[0].borderRadius,
                                    onChangeType: function onChangeType(newType) {
                                        return saveTriggerStyles({ borderType: newType });
                                    },
                                    onChangeWidth: function onChangeWidth(_ref2) {
                                        var top = _ref2.top,
                                            right = _ref2.right,
                                            bottom = _ref2.bottom,
                                            left = _ref2.left;
                                        return setAttributes({
                                            triggerBorderTop: top,
                                            triggerBorderRight: right,
                                            triggerBorderBottom: bottom,
                                            triggerBorderLeft: left
                                        });
                                    },
                                    onChangeColor: function onChangeColor(colorValue) {
                                        return saveTriggerStyles({ borderColor: colorValue });
                                    },
                                    onChangeRadius: function onChangeRadius(newRadius) {
                                        return saveTriggerStyles({ borderRadius: newRadius });
                                    }
                                })
                            );
                        }
                        if ("hover" === tab.name) {
                            tabout = React.createElement(
                                Fragment,
                                null,
                                triggerSettings[0].triggerType === 'button' && React.createElement(_ColorComponent2.default, {
                                    label: __("Background Hover Color", 'premium-blocks-for-gutenberg'),
                                    colorValue: triggerStyles[0].triggerHoverBack,
                                    colorDefault: '',
                                    onColorChange: function onColorChange(newValue) {
                                        return saveTriggerStyles({ triggerHoverBack: newValue || "transparent" });
                                    }
                                }),
                                React.createElement(_premiumBorder2.default, {
                                    borderType: triggerStyles[0].borderTypeH,
                                    top: triggerBorderTopH,
                                    right: triggerBorderRightH,
                                    bottom: triggerBorderBottomH,
                                    left: triggerBorderLeftH,
                                    borderColor: triggerStyles[0].borderColorH,
                                    borderRadius: triggerStyles[0].borderRadiusH,
                                    onChangeType: function onChangeType(newType) {
                                        return saveTriggerStyles({ borderTypeH: newType });
                                    },
                                    onChangeWidth: function onChangeWidth(_ref3) {
                                        var top = _ref3.top,
                                            right = _ref3.right,
                                            bottom = _ref3.bottom,
                                            left = _ref3.left;
                                        return setAttributes({
                                            triggerBorderTopH: top,
                                            triggerBorderRightH: right,
                                            triggerBorderBottomH: bottom,
                                            triggerBorderLeftH: left
                                        });
                                    },
                                    onChangeColor: function onChangeColor(colorValue) {
                                        return saveTriggerStyles({ borderColorH: colorValue });
                                    },
                                    onChangeRadius: function onChangeRadius(newRadius) {
                                        return saveTriggerStyles({ borderRadiusH: newRadius });
                                    }
                                })
                            );
                        }
                        return React.createElement(
                            "div",
                            null,
                            tabout,
                            React.createElement("hr", null)
                        );
                    }
                )
            ),
            (triggerSettings[0].triggerType === "button" || triggerSettings[0].triggerType === 'text') && React.createElement(
                Fragment,
                null,
                React.createElement(_PremiumResponsivePadding2.default, {
                    paddingT: triggerPaddingT,
                    paddingR: triggerPaddingR,
                    paddingB: triggerPaddingB,
                    paddingL: triggerPaddingL,
                    paddingTTablet: triggerPaddingTTablet,
                    paddingRTablet: triggerPaddingRTablet,
                    paddingBTablet: triggerPaddingBTablet,
                    paddingLTablet: triggerPaddingLTablet,
                    paddingTMobile: triggerPaddingTMobile,
                    paddingRMobile: triggerPaddingRMobile,
                    paddingBMobile: triggerPaddingBMobile,
                    paddingLMobile: triggerPaddingLMobile,
                    onChangePaddingTop: function onChangePaddingTop(device, newValue) {
                        if (device === "desktop") {
                            setAttributes({ triggerPaddingT: newValue });
                        } else if (device === "tablet") {
                            setAttributes({ triggerPaddingTTablet: newValue });
                        } else {
                            setAttributes({ triggerPaddingTMobile: newValue });
                        }
                    },
                    onChangePaddingRight: function onChangePaddingRight(device, newValue) {
                        if (device === "desktop") {
                            setAttributes({ triggerPaddingR: newValue });
                        } else if (device === "tablet") {
                            setAttributes({ triggerPaddingRTablet: newValue });
                        } else {
                            setAttributes({ triggerPaddingRMobile: newValue });
                        }
                    },
                    onChangePaddingBottom: function onChangePaddingBottom(device, newValue) {
                        if (device === "desktop") {
                            setAttributes({ triggerPaddingB: newValue });
                        } else if (device === "tablet") {
                            setAttributes({ triggerPaddingBTablet: newValue });
                        } else {
                            setAttributes({ triggerPaddingBMobile: newValue });
                        }
                    },
                    onChangePaddingLeft: function onChangePaddingLeft(device, newValue) {
                        if (device === "desktop") {
                            setAttributes({ triggerPaddingL: newValue });
                        } else if (device === "tablet") {
                            setAttributes({ triggerPaddingLTablet: newValue });
                        } else {
                            setAttributes({ triggerPaddingLMobile: newValue });
                        }
                    }
                })
            ),
            (triggerSettings[0].triggerType === "image" || triggerSettings[0].triggerType === "button") && React.createElement(_PremiumShadow2.default, {
                boxShadow: true,
                color: triggerStyles[0].triggerShadowColor,
                blur: triggerStyles[0].triggerShadowBlur,
                horizontal: triggerStyles[0].triggerShadowHorizontal,
                vertical: triggerStyles[0].triggerShadowVertical,
                position: triggerStyles[0].triggerShadowPosition,
                onChangeColor: function onChangeColor(newColor) {
                    return saveTriggerStyles({ triggerShadowColor: newColor });
                },
                onChangeBlur: function onChangeBlur(newBlur) {
                    return saveTriggerStyles({ triggerShadowBlur: newBlur });
                },
                onChangehHorizontal: function onChangehHorizontal(newValue) {
                    return saveTriggerStyles({ triggerShadowHorizontal: newValue });
                },
                onChangeVertical: function onChangeVertical(newValue) {
                    return saveTriggerStyles({ triggerShadowVertical: newValue });
                },
                onChangePosition: function onChangePosition(newValue) {
                    return saveTriggerStyles({ triggerShadowPosition: newValue });
                }
            }),
            triggerSettings[0].triggerType === "text" && React.createElement(_PremiumShadow2.default, {
                label: __("Text Shadow", 'premium-blocks-for-gutenberg'),
                color: triggerStyles[0].textShadowColor,
                blur: triggerStyles[0].textShadowBlur,
                horizontal: triggerStyles[0].textShadowHorizontal,
                vertical: triggerStyles[0].textShadowVertical,
                onChangeColor: function onChangeColor(newColor) {
                    return saveTriggerStyles({ textShadowColor: newColor || "transparent" });
                },
                onChangeBlur: function onChangeBlur(newBlur) {
                    return saveTriggerStyles({ textShadowBlur: newBlur || "0" });
                },
                onChangehHorizontal: function onChangehHorizontal(newValue) {
                    return saveTriggerStyles({ textShadowHorizontal: newValue || "0" });
                },
                onChangeVertical: function onChangeVertical(newValue) {
                    return saveTriggerStyles({ textShadowVertical: newValue || "0" });
                }
            }),
            triggerSettings[0].triggerType === "lottie" && React.createElement(
                Fragment,
                null,
                React.createElement(_premiumFilters2.default, {
                    blur: triggerStyles[0].blur,
                    bright: triggerStyles[0].bright,
                    contrast: triggerStyles[0].contrast,
                    saturation: triggerStyles[0].saturation,
                    hue: triggerStyles[0].hue,
                    onChangeBlur: function onChangeBlur(value) {
                        return saveTriggerStyles({ blur: value });
                    },
                    onChangeBright: function onChangeBright(value) {
                        return saveTriggerStyles({ bright: value });
                    },
                    onChangeContrast: function onChangeContrast(value) {
                        return saveTriggerStyles({ contrast: value });
                    },
                    onChangeSat: function onChangeSat(value) {
                        return saveTriggerStyles({ saturation: value });
                    },
                    onChangeHue: function onChangeHue(value) {
                        return saveTriggerStyles({ hue: value });
                    }
                }),
                React.createElement(_premiumFilters2.default, {
                    blur: triggerStyles[0].blurH,
                    bright: triggerStyles[0].brightH,
                    contrast: triggerStyles[0].contrastH,
                    saturation: triggerStyles[0].saturationH,
                    hue: triggerStyles[0].hueH,
                    onChangeBlur: function onChangeBlur(value) {
                        return saveTriggerStyles({ blurH: value });
                    },
                    onChangeBright: function onChangeBright(value) {
                        return saveTriggerStyles({ brightH: value });
                    },
                    onChangeContrast: function onChangeContrast(value) {
                        return saveTriggerStyles({ contrastH: value });
                    },
                    onChangeSat: function onChangeSat(value) {
                        return saveTriggerStyles({ saturationH: value });
                    },
                    onChangeHue: function onChangeHue(value) {
                        return saveTriggerStyles({ hueH: value });
                    }
                })
            )
        ),
        contentStyles[0].showHeader && React.createElement(
            PanelBody,
            {
                title: __("Header", 'premium-blocks-for-gutenberg'),
                className: "premium-panel-body",
                initialOpen: false
            },
            React.createElement(_ColorComponent2.default, {
                label: __("Color", 'premium-blocks-for-gutenberg'),
                colorValue: headerStyles[0].color,
                colorDefault: '',
                onColorChange: function onColorChange(newValue) {
                    return saveHeaderStyles({ color: newValue });
                }
            }),
            React.createElement(_ColorComponent2.default, {
                label: __("Background Color", 'premium-blocks-for-gutenberg'),
                colorValue: headerStyles[0].backColor,
                colorDefault: '',
                onColorChange: function onColorChange(newValue) {
                    return saveHeaderStyles({ backColor: newValue });
                }
            }),
            React.createElement(_premiumTypo2.default, {
                components: ["responsiveSize", "weight", "spacing", "style", "upper", "family"],
                setAttributes: saveHeaderStyles,
                fontSizeType: {
                    value: headerStyles[0].headerSizeUnit,
                    label: __("headerSizeUnit", 'premium-blocks-for-gutenberg')
                },
                fontSize: headerStyles[0].headerSize,
                fontSizeMobile: headerStyles[0].headerSizeMobile,
                fontSizeTablet: headerStyles[0].headerSizeTablet,
                onChangeSize: function onChangeSize(newSize) {
                    return saveHeaderStyles({ headerSize: newSize });
                },
                onChangeTabletSize: function onChangeTabletSize(newSize) {
                    return saveHeaderStyles({ headerSizeTablet: newSize });
                },
                onChangeMobileSize: function onChangeMobileSize(newSize) {
                    return saveHeaderStyles({ headerSizeMobile: newSize });
                },
                fontFamily: headerStyles[0].headerFamily,
                weight: headerStyles[0].headerWeight,
                style: headerStyles[0].headerStyle,
                spacing: headerStyles[0].headerSpacing,
                upper: headerStyles[0].headerUpper,
                onChangeWeight: function onChangeWeight(newWeight) {
                    return saveHeaderStyles({ headerWeight: newWeight });
                },
                onChangeStyle: function onChangeStyle(newStyle) {
                    return saveHeaderStyles({ headerStyle: newStyle });
                },
                onChangeSpacing: function onChangeSpacing(newValue) {
                    return saveHeaderStyles({ headerSpacing: newValue });
                },
                onChangeFamily: function onChangeFamily(fontFamily) {
                    return saveHeaderStyles({ headerFamily: fontFamily });
                },
                onChangeUpper: function onChangeUpper(check) {
                    return saveHeaderStyles({ headerUpper: check });
                }
            }),
            React.createElement(_premiumBorder2.default, {
                borderType: headerStyles[0].borderType,
                top: headerBorderTop,
                right: headerBorderRight,
                bottom: headerBorderBottom,
                left: headerBorderLeft,
                borderColor: headerStyles[0].borderColor,
                borderRadius: headerStyles[0].borderRadius,
                onChangeType: function onChangeType(newType) {
                    return saveHeaderStyles({ borderType: newType });
                },
                onChangeWidth: function onChangeWidth(_ref4) {
                    var top = _ref4.top,
                        right = _ref4.right,
                        bottom = _ref4.bottom,
                        left = _ref4.left;
                    return setAttributes({
                        headerBorderTop: top,
                        headerBorderRight: right,
                        headerBorderBottom: bottom,
                        headerBorderLeft: left
                    });
                },
                onChangeColor: function onChangeColor(colorValue) {
                    return saveHeaderStyles({ borderColor: colorValue });
                },
                onChangeRadius: function onChangeRadius(newRadius) {
                    return saveHeaderStyles({ borderRadius: newRadius });
                }
            })
        ),
        contentStyles[0].showUpperClose && contentStyles[0].showHeader && React.createElement(
            PanelBody,
            {
                title: __("Upper Close Button", 'premium-blocks-for-gutenberg'),
                className: "premium-panel-body",
                initialOpen: false
            },
            React.createElement(_singleRangeControl2.default, {
                label: __("Width", 'premium-blocks-for-gutenberg'),
                value: upperStyles[0].iconWidth,
                onChange: function onChange(newValue) {
                    return saveUpperStyles({ iconWidth: newValue });
                },
                units: ['px', '%', 'em'],
                defaultValue: 0,
                onChangeUnit: function onChangeUnit(newValue) {
                    return saveUpperStyles({ iconWidthUnit: newValue });
                },
                showUnit: true,
                unit: upperStyles[0].iconWidthUnit
            }),
            React.createElement(_ColorComponent2.default, {
                label: __("Color", 'premium-blocks-for-gutenberg'),
                colorValue: upperStyles[0].color,
                colorDefault: '',
                onColorChange: function onColorChange(newValue) {
                    return saveUpperStyles({ color: newValue || "transparent" });
                }
            }),
            React.createElement(_ColorComponent2.default, {
                label: __("Background Color"),
                colorValue: upperStyles[0].backColor,
                onColorChange: function onColorChange(newvalue) {
                    return saveUpperStyles({ backColor: newvalue });
                },
                colorDefault: ""
            }),
            React.createElement(_premiumBorder2.default, {
                borderType: upperStyles[0].borderType,
                top: upperBorderTop,
                right: upperBorderRight,
                bottom: upperBorderBottom,
                left: upperBorderLeft,
                borderColor: upperStyles[0].borderColor,
                borderRadius: upperStyles[0].borderRadius,
                onChangeType: function onChangeType(newType) {
                    return saveUpperStyles({ borderType: newType });
                },
                onChangeWidth: function onChangeWidth(_ref5) {
                    var top = _ref5.top,
                        right = _ref5.right,
                        bottom = _ref5.bottom,
                        left = _ref5.left;
                    return setAttributes({
                        upperBorderTop: top,
                        upperBorderRight: right,
                        upperBorderBottom: bottom,
                        upperBorderLeft: left
                    });
                },
                onChangeColor: function onChangeColor(colorValue) {
                    return saveUpperStyles({ borderColor: colorValue });
                },
                onChangeRadius: function onChangeRadius(newRadius) {
                    return saveUpperStyles({ borderRadius: newRadius });
                }
            }),
            React.createElement(_PremiumResponsivePadding2.default, {
                paddingT: upperPaddingT,
                paddingR: upperPaddingR,
                paddingB: upperPaddingB,
                paddingL: upperPaddingL,
                paddingTTablet: upperPaddingTTablet,
                paddingRTablet: upperPaddingRTablet,
                paddingBTablet: upperPaddingBTablet,
                paddingLTablet: upperPaddingLTablet,
                paddingTMobile: upperPaddingTMobile,
                paddingRMobile: upperPaddingRMobile,
                paddingBMobile: upperPaddingBMobile,
                paddingLMobile: upperPaddingLMobile,
                onChangePaddingTop: function onChangePaddingTop(device, newValue) {
                    if (device === "desktop") {
                        setAttributes({ upperPaddingT: newValue });
                    } else if (device === "tablet") {
                        setAttributes({ upperPaddingTTablet: newValue });
                    } else {
                        setAttributes({ upperPaddingTMobile: newValue });
                    }
                },
                onChangePaddingRight: function onChangePaddingRight(device, newValue) {
                    if (device === "desktop") {
                        setAttributes({ upperPaddingR: newValue });
                    } else if (device === "tablet") {
                        setAttributes({ upperPaddingRTablet: newValue });
                    } else {
                        setAttributes({ upperPaddingRMobile: newValue });
                    }
                },
                onChangePaddingBottom: function onChangePaddingBottom(device, newValue) {
                    if (device === "desktop") {
                        setAttributes({ upperPaddingB: newValue });
                    } else if (device === "tablet") {
                        setAttributes({ upperPaddingBTablet: newValue });
                    } else {
                        setAttributes({ upperPaddingBMobile: newValue });
                    }
                },
                onChangePaddingLeft: function onChangePaddingLeft(device, newValue) {
                    if (device === "desktop") {
                        setAttributes({ upperPaddingL: newValue });
                    } else if (device === "tablet") {
                        setAttributes({ upperPaddingLTablet: newValue });
                    } else {
                        setAttributes({ upperPaddingLMobile: newValue });
                    }
                }
            })
        ),
        contentStyles[0].showLowerClose && React.createElement(
            PanelBody,
            {
                title: __("Lower Close Button", 'premium-blocks-for-gutenberg'),
                className: "premium-panel-body",
                initialOpen: false
            },
            React.createElement(_premiumTypo2.default, {
                components: ["responsiveSize", "weight", "spacing", "style"],
                setAttributes: saveLowerStyles,
                fontSizeType: {
                    value: lowerStyles[0].lowerSizeUnit,
                    label: __("lowerSizeUnit", 'premium-blocks-for-gutenberg')
                },
                fontSize: lowerStyles[0].lowerSize,
                fontSizeMobile: lowerStyles[0].lowerSizeMobile,
                fontSizeTablet: lowerStyles[0].lowerSizeTablet,
                onChangeSize: function onChangeSize(newSize) {
                    return saveLowerStyles({ lowerSize: newSize });
                },
                onChangeTabletSize: function onChangeTabletSize(newSize) {
                    return saveLowerStyles({ lowerSizeTablet: newSize });
                },
                onChangeMobileSize: function onChangeMobileSize(newSize) {
                    return saveLowerStyles({ lowerSizeMobile: newSize });
                },
                weight: lowerStyles[0].lowerWeight,
                style: lowerStyles[0].lowerStyle,
                spacing: lowerStyles[0].lowerSpacing,
                onChangeWeight: function onChangeWeight(newWeight) {
                    return saveLowerStyles({ lowerWeight: newWeight });
                },
                onChangeStyle: function onChangeStyle(newStyle) {
                    return saveLowerStyles({ lowerStyle: newStyle });
                },
                onChangeSpacing: function onChangeSpacing(newValue) {
                    return saveLowerStyles({ lowerSpacing: newValue });
                }
            }),
            React.createElement(_singleRangeControl2.default, {
                label: __("Width", 'premium-blocks-for-gutenberg'),
                value: lowerStyles[0].iconWidth,
                onChange: function onChange(newValue) {
                    return saveLowerStyles({ iconWidth: newValue });
                },
                units: ['px', '%', 'em'],
                defaultValue: 0,
                onChangeUnit: function onChangeUnit(newValue) {
                    return saveLowerStyles({ iconWidthUnit: newValue });
                },
                min: 1,
                max: 500,
                showUnit: true,
                unit: lowerStyles[0].iconWidthUnit
            }),
            React.createElement(_ColorComponent2.default, {
                label: __("Color", 'premium-blocks-for-gutenberg'),
                colorValue: lowerStyles[0].color,
                colorDefault: '',
                onColorChange: function onColorChange(newValue) {
                    return saveLowerStyles({ color: newValue || "transparent" });
                }
            }),
            React.createElement(_ColorComponent2.default, {
                label: __("Background Color", 'premium-blocks-for-gutenberg'),
                colorValue: lowerStyles[0].backColor,
                onColorChange: function onColorChange(newvalue) {
                    return saveLowerStyles({ backColor: newvalue });
                },
                colorDefault: ""
            }),
            React.createElement(_premiumBorder2.default, {
                borderType: lowerStyles[0].borderType,
                top: lowerBorderTop,
                right: lowerBorderRight,
                bottom: lowerBorderBottom,
                left: lowerBorderLeft,
                borderColor: lowerStyles[0].borderColor,
                borderRadius: lowerStyles[0].borderRadius,
                onChangeType: function onChangeType(newType) {
                    return saveLowerStyles({ borderType: newType });
                },
                onChangeWidth: function onChangeWidth(_ref6) {
                    var top = _ref6.top,
                        right = _ref6.right,
                        bottom = _ref6.bottom,
                        left = _ref6.left;
                    return setAttributes({
                        lowerBorderTop: top,
                        lowerBorderRight: right,
                        lowerBorderBottom: bottom,
                        lowerBorderLeft: left
                    });
                },
                onChangeColor: function onChangeColor(colorValue) {
                    return saveLowerStyles({ borderColor: colorValue });
                },
                onChangeRadius: function onChangeRadius(newRadius) {
                    return saveLowerStyles({ borderRadius: newRadius });
                }
            }),
            React.createElement(_PremiumResponsivePadding2.default, {
                paddingT: lowerPaddingT,
                paddingR: lowerPaddingR,
                paddingB: lowerPaddingB,
                paddingL: lowerPaddingL,
                paddingTTablet: lowerPaddingTTablet,
                paddingRTablet: lowerPaddingRTablet,
                paddingBTablet: lowerPaddingBTablet,
                paddingLTablet: lowerPaddingLTablet,
                paddingTMobile: lowerPaddingTMobile,
                paddingRMobile: lowerPaddingRMobile,
                paddingBMobile: lowerPaddingBMobile,
                paddingLMobile: lowerPaddingLMobile,
                onChangePaddingTop: function onChangePaddingTop(device, newValue) {
                    if (device === "desktop") {
                        setAttributes({ lowerPaddingT: newValue });
                    } else if (device === "tablet") {
                        setAttributes({ lowerPaddingTTablet: newValue });
                    } else {
                        setAttributes({ lowerPaddingTMobile: newValue });
                    }
                },
                onChangePaddingRight: function onChangePaddingRight(device, newValue) {
                    if (device === "desktop") {
                        setAttributes({ lowerPaddingR: newValue });
                    } else if (device === "tablet") {
                        setAttributes({ lowerPaddingRTablet: newValue });
                    } else {
                        setAttributes({ lowerPaddingRMobile: newValue });
                    }
                },
                onChangePaddingBottom: function onChangePaddingBottom(device, newValue) {
                    if (device === "desktop") {
                        setAttributes({ lowerPaddingB: newValue });
                    } else if (device === "tablet") {
                        setAttributes({ lowerPaddingBTablet: newValue });
                    } else {
                        setAttributes({ lowerPaddingBMobile: newValue });
                    }
                },
                onChangePaddingLeft: function onChangePaddingLeft(device, newValue) {
                    if (device === "desktop") {
                        setAttributes({ lowerPaddingL: newValue });
                    } else if (device === "tablet") {
                        setAttributes({ lowerPaddingLTablet: newValue });
                    } else {
                        setAttributes({ lowerPaddingLMobile: newValue });
                    }
                }
            })
        ),
        React.createElement(
            PanelBody,
            {
                title: __("Modal Body", 'premium-blocks-for-gutenberg'),
                className: "premium-panel-body",
                initialOpen: false
            },
            "text" == modalStyles[0].contentType && React.createElement(
                Fragment,
                null,
                React.createElement(_ColorComponent2.default, {
                    label: __("Text Color", 'premium-blocks-for-gutenberg'),
                    colorValue: modalStyles[0].textColor,
                    colorDefault: '',
                    onColorChange: function onColorChange(newValue) {
                        return saveModalStyles({ textColor: newValue });
                    }
                }),
                React.createElement(_ColorComponent2.default, {
                    label: __("Content Background Color", 'premium-blocks-for-gutenberg'),
                    colorValue: modalStyles[0].textBackColor,
                    colorDefault: '',
                    onColorChange: function onColorChange(newValue) {
                        return saveModalStyles({ textBackColor: newValue });
                    }
                }),
                React.createElement(_premiumTypo2.default, {
                    components: ["responsiveSize", "weight", "spacing", "style", "upper", "family"],
                    setAttributes: saveModalStyles,
                    fontSizeType: {
                        value: modalStyles[0].modalSizeUnit,
                        label: __("modalSizeUnit", 'premium-blocks-for-gutenberg')
                    },
                    fontSize: modalStyles[0].modalSize,
                    fontSizeMobile: modalStyles[0].modalSizeMobile,
                    fontSizeTablet: modalStyles[0].modalSizeTablet,
                    onChangeSize: function onChangeSize(newSize) {
                        return saveModalStyles({ modalSize: newSize });
                    },
                    onChangeTabletSize: function onChangeTabletSize(newSize) {
                        return saveModalStyles({ modalSizeTablet: newSize });
                    },
                    onChangeMobileSize: function onChangeMobileSize(newSize) {
                        return saveModalStyles({ modalSizeMobile: newSize });
                    },
                    fontFamily: modalStyles[0].modalFamily,
                    weight: modalStyles[0].modalWeight,
                    style: modalStyles[0].modalStyle,
                    spacing: modalStyles[0].modalSpacing,
                    upper: modalStyles[0].modalUpper,
                    onChangeWeight: function onChangeWeight(newWeight) {
                        return saveModalStyles({ modalWeight: newWeight });
                    },
                    onChangeStyle: function onChangeStyle(newStyle) {
                        return saveModalStyles({ modalStyle: newStyle });
                    },
                    onChangeSpacing: function onChangeSpacing(newValue) {
                        return saveModalStyles({ modalSpacing: newValue });
                    },
                    onChangeFamily: function onChangeFamily(fontFamily) {
                        return saveModalStyles({ modalFamily: fontFamily });
                    },
                    onChangeUpper: function onChangeUpper(check) {
                        return saveModalStyles({ modalUpper: check });
                    }
                }),
                React.createElement("hr", null)
            ),
            React.createElement(_responsiveRangeControl2.default, {
                label: __('Width', 'premium-blocks-for-gutenberg'),
                value: modalStyles[0].modalWidth,
                onChange: function onChange(value) {
                    return saveModalStyles({ modalWidth: value !== "" ? value : 200 });
                },
                tabletValue: modalStyles[0].modalWidthTablet,
                onChangeTablet: function onChangeTablet(value) {
                    return saveModalStyles({ modalWidthTablet: value !== "" ? value : 200 });
                },
                mobileValue: modalStyles[0].modalWidthMobile,
                onChangeMobile: function onChangeMobile(value) {
                    return saveModalStyles({ modalWidthMobile: value !== "" ? value : 200 });
                },
                min: 0,
                max: 1500,
                step: 1,
                onChangeUnit: function onChangeUnit(newValue) {
                    return saveModalStyles({ modalWidthUnit: newValue });
                },
                unit: modalStyles[0].modalWidthUnit,
                showUnit: true,
                units: ['px', '%', 'em'],
                defaultValue: 0
            }),
            React.createElement(_responsiveRangeControl2.default, {
                label: __('Max Height', 'premium-blocks-for-gutenberg'),
                value: modalStyles[0].modalHeight,
                onChange: function onChange(value) {
                    return saveModalStyles({ modalHeight: value !== "" ? value : 200 });
                },
                tabletValue: modalStyles[0].modalHeightTablet,
                onChangeTablet: function onChangeTablet(value) {
                    return saveModalStyles({ modalHeightTablet: value !== "" ? value : 200 });
                },
                mobileValue: modalStyles[0].modalHeightMobile,
                onChangeMobile: function onChangeMobile(value) {
                    return saveModalStyles({ modalHeightMobile: value !== "" ? value : 200 });
                },
                min: 0,
                max: 1500,
                step: 1,
                onChangeUnit: function onChangeUnit(newValue) {
                    return saveModalStyles({ modalHeightUnit: newValue });
                },
                unit: modalStyles[0].modalHeightUnit,
                showUnit: true,
                units: ['px', '%', 'em'],
                defaultValue: 0
            }),
            React.createElement(_PremiumBackgroundControl2.default, {
                setAttributes: setAttributes,
                saveContainerStyle: saveModalStyles,
                backgroundType: backgroundType,
                backgroundColor: modalStyles[0].containerBack,
                backgroundImageID: modalStyles[0].backgroundImageID,
                backgroundImageURL: modalStyles[0].backgroundImageURL,
                backgroundPosition: modalStyles[0].backgroundPosition,
                backgroundRepeat: modalStyles[0].backgroundRepeat,
                backgroundSize: modalStyles[0].backgroundSize,
                fixed: modalStyles[0].fixed,
                gradientLocationOne: modalStyles[0].gradientLocationOne,
                gradientColorTwo: modalStyles[0].gradientColorTwo,
                gradientLocationTwo: modalStyles[0].gradientLocationTwo,
                gradientAngle: modalStyles[0].gradientAngle,
                gradientPosition: modalStyles[0].gradientPosition,
                gradientType: modalStyles[0].gradientType
            }),
            React.createElement(_ColorComponent2.default, {
                label: __("Footer Background Color", 'premium-blocks-for-gutenberg'),
                colorValue: modalStyles[0].footerBackColor,
                colorDefault: '',
                onColorChange: function onColorChange(newValue) {
                    return saveModalStyles({ footerBackColor: newValue });
                }
            }),
            React.createElement(_premiumBorder2.default, {
                borderType: modalStyles[0].borderType,
                borderWidth: modalStyles[0].borderWidth,
                top: modalBorderTop,
                right: modalBorderRight,
                bottom: modalBorderBottom,
                left: modalBorderLeft,
                borderColor: modalStyles[0].borderColor,
                borderRadius: modalStyles[0].borderRadius,
                onChangeType: function onChangeType(newType) {
                    return saveModalStyles({ borderType: newType });
                },
                onChangeWidth: function onChangeWidth(_ref7) {
                    var top = _ref7.top,
                        right = _ref7.right,
                        bottom = _ref7.bottom,
                        left = _ref7.left;
                    return setAttributes({
                        modalBorderTop: top,
                        modalBorderRight: right,
                        modalBorderBottom: bottom,
                        modalBorderLeft: left
                    });
                },
                onChangeColor: function onChangeColor(colorValue) {
                    return saveModalStyles({ borderColor: colorValue });
                },
                onChangeRadius: function onChangeRadius(newRadius) {
                    return saveModalStyles({ borderRadius: newRadius });
                }
            }),
            React.createElement(_PremiumShadow2.default, {
                boxShadow: true,
                color: modalStyles[0].modalShadowColor,
                blur: modalStyles[0].modalShadowBlur,
                horizontal: modalStyles[0].modalShadowHorizontal,
                vertical: modalStyles[0].modalShadowVertical,
                position: modalStyles[0].modalShadowPosition,
                onChangeColor: function onChangeColor(newColor) {
                    return saveModalStyles({ modalShadowColor: newColor });
                },
                onChangeBlur: function onChangeBlur(newBlur) {
                    return saveModalStyles({ modalShadowBlur: newBlur });
                },
                onChangehHorizontal: function onChangehHorizontal(newValue) {
                    return saveModalStyles({ modalShadowHorizontal: newValue });
                },
                onChangeVertical: function onChangeVertical(newValue) {
                    return saveModalStyles({ modalShadowVertical: newValue });
                },
                onChangePosition: function onChangePosition(newValue) {
                    return saveModalStyles({ modalShadowPosition: newValue });
                }
            }),
            React.createElement(_PremiumResponsiveMargin2.default, {
                directions: ["all"],
                marginTop: modalMarginT,
                marginRight: modalMarginR,
                marginBottom: modalMarginB,
                marginLeft: modalMarginL,
                marginTopTablet: modalMarginTTablet,
                marginRightTablet: modalMarginRTablet,
                marginBottomTablet: modalMarginBTablet,
                marginLeftTablet: modalMarginLTablet,
                marginTopMobile: modalMarginTMobile,
                marginRightMobile: modalMarginRMobile,
                marginBottomMobile: modalMarginBMobile,
                marginLeftMobile: modalMarginLMobile,
                onChangeMarginTop: function onChangeMarginTop(device, newValue) {
                    if (device === "desktop") {
                        setAttributes({ modalMarginT: newValue });
                    } else if (device === "tablet") {
                        setAttributes({ modalMarginTTablet: newValue });
                    } else {
                        setAttributes({ modalMarginTMobile: newValue });
                    }
                },
                onChangeMarginRight: function onChangeMarginRight(device, newValue) {
                    if (device === "desktop") {
                        setAttributes({ modalMarginR: newValue });
                    } else if (device === "tablet") {
                        setAttributes({ modalMarginRTablet: newValue });
                    } else {
                        setAttributes({ modalMarginRMobile: newValue });
                    }
                },
                onChangeMarginBottom: function onChangeMarginBottom(device, newValue) {
                    if (device === "desktop") {
                        setAttributes({ modalMarginB: newValue });
                    } else if (device === "tablet") {
                        setAttributes({ modalMarginBTablet: newValue });
                    } else {
                        setAttributes({ modalMarginBMobile: newValue });
                    }
                },
                onChangeMarginLeft: function onChangeMarginLeft(device, newValue) {
                    if (device === "desktop") {
                        setAttributes({ modalMarginL: newValue });
                    } else if (device === "tablet") {
                        setAttributes({ modalMarginLTablet: newValue });
                    } else {
                        setAttributes({ modalMarginLMobile: newValue });
                    }
                }
            }),
            React.createElement(_PremiumResponsivePadding2.default, {
                paddingT: modalPaddingT,
                paddingR: modalPaddingR,
                paddingB: modalPaddingB,
                paddingL: modalPaddingL,
                paddingTTablet: modalPaddingTTablet,
                paddingRTablet: modalPaddingRTablet,
                paddingBTablet: modalPaddingBTablet,
                paddingLTablet: modalPaddingLTablet,
                paddingTMobile: modalPaddingTMobile,
                paddingRMobile: modalPaddingRMobile,
                paddingBMobile: modalPaddingBMobile,
                paddingLMobile: modalPaddingLMobile,
                onChangePaddingTop: function onChangePaddingTop(device, newValue) {
                    if (device === "desktop") {
                        setAttributes({ modalPaddingT: newValue });
                    } else if (device === "tablet") {
                        setAttributes({ modalPaddingTTablet: newValue });
                    } else {
                        setAttributes({ modalPaddingTMobile: newValue });
                    }
                },
                onChangePaddingRight: function onChangePaddingRight(device, newValue) {
                    if (device === "desktop") {
                        setAttributes({ modalPaddingR: newValue });
                    } else if (device === "tablet") {
                        setAttributes({ modalPaddingRTablet: newValue });
                    } else {
                        setAttributes({ modalPaddingRMobile: newValue });
                    }
                },
                onChangePaddingBottom: function onChangePaddingBottom(device, newValue) {
                    if (device === "desktop") {
                        setAttributes({ modalPaddingB: newValue });
                    } else if (device === "tablet") {
                        setAttributes({ modalPaddingBTablet: newValue });
                    } else {
                        setAttributes({ modalPaddingBMobile: newValue });
                    }
                },
                onChangePaddingLeft: function onChangePaddingLeft(device, newValue) {
                    if (device === "desktop") {
                        setAttributes({ modalPaddingL: newValue });
                    } else if (device === "tablet") {
                        setAttributes({ modalPaddingLTablet: newValue });
                    } else {
                        setAttributes({ modalPaddingLMobile: newValue });
                    }
                }
            })
        )
    );
};
exports.default = Inspector;

/***/ }),
/* 372 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _ref;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var __ = wp.i18n.__;


var attributes = {
    block_id: {
        type: 'string'
    },
    contentStyles: {
        type: 'array',
        default: [{
            showHeader: true,
            iconType: 'none',
            contentIcon: '',
            contentImgID: '',
            contentImgURL: '',
            lottieURL: '',
            loopLottie: true,
            reverseLottie: false,
            iconSize: '',
            iconSizeTablet: '',
            iconSizeMobile: '',
            iconSizeUnit: 'px',
            titleText: __('Modal Box Title', 'premium-blocks-for-gutenberg'),
            showUpperClose: true,
            showLowerClose: true,
            lowerCloseText: __('Close', 'premium-blocks-for-gutenberg'),
            animationType: 'fadeInDown',
            animationSpeed: 'normal'
        }]
    },
    triggerSettings: {
        type: "array",
        default: [{
            triggerType: 'button',
            btnText: __('Premium Blocks', 'premium-blocks-for-gutenberg'),
            showIcon: false,
            icon: '',
            iconPosition: 'before',
            iconSize: '50',
            iconSpacing: '',
            btnSize: 'md',
            triggerImgID: '',
            triggerImgURL: '',
            triggerText: __('Premium Blocks', 'premium-blocks-for-gutenberg'),
            lottieTriggerURL: '',
            triggerLoopLottie: true,
            triggerReverseLottie: false,
            triggerPlayLottie: false,
            imageWidth: '',
            imageWidthTablet: '',
            imageWidthMobile: '',
            align: 'center',
            delayTime: 1
        }]
    },
    triggerStyles: {
        type: 'array',
        default: [{
            color: '',
            hoverColor: '',
            iconColor: '',
            iconHoverColor: '',
            triggerSizeUnit: 'px',
            triggerSize: '',
            triggerSizeMobile: '',
            triggerSizeTablet: '',
            triggerFamily: '',
            triggerWeight: '',
            triggerStyle: '',
            triggerSpacing: '',
            triggerUpper: '',
            triggerBack: '',
            borderType: 'none',
            borderColor: '',
            borderRadius: '',
            triggerHoverBack: '',
            borderTypeH: 'none',
            borderColorH: '',
            borderRadiusH: '',
            triggerShadowColor: '',
            triggerShadowBlur: '',
            triggerShadowHorizontal: '',
            triggerShadowVertical: '',
            triggerShadowPosition: '',
            textShadowColor: '',
            textShadowBlur: '',
            textShadowHorizontal: '',
            textShadowVertical: '',
            blur: '',
            bright: '',
            contrast: '',
            saturation: '',
            hue: '',
            blurH: '',
            brightH: '',
            contrastH: '',
            saturationH: '',
            hueH: ''
        }]
    },
    triggerBorderTop: {
        type: 'number'
    },
    triggerBorderRight: {
        type: 'number'
    },
    triggerBorderBottom: {
        type: 'number'
    },
    triggerBorderLeft: {
        type: 'number'
    },
    triggerBorderTopH: {
        type: 'number'
    },
    triggerBorderRightH: {
        type: 'number'
    },
    triggerBorderBottomH: {
        type: 'number'
    },
    triggerBorderLeftH: {
        type: 'number'
    },
    triggerPaddingT: {
        type: 'number'
    },
    triggerPaddingR: {
        type: 'number'
    },
    triggerPaddingB: {
        type: 'number'
    },
    triggerPaddingL: {
        type: 'number'
    },
    triggerPaddingTTablet: {
        type: 'number'
    },
    triggerPaddingRTablet: {
        type: 'number'
    },
    triggerPaddingBTablet: {
        type: 'number'
    },
    triggerPaddingLTablet: {
        type: 'number'
    },
    triggerPaddingTMobile: {
        type: 'number'
    },
    triggerPaddingRMobile: {
        type: 'number'
    },
    triggerPaddingBMobile: {
        type: 'number'
    },
    triggerPaddingLMobile: {
        type: 'number'
    },
    headerStyles: {
        type: 'array',
        default: [{
            color: '',
            backColor: '',
            headerSizeUnit: 'px',
            headerSize: '',
            headerSizeTablet: '',
            headerSizeMobile: '',
            headerFamily: 'Default',
            headerWeight: '',
            headerStyle: '',
            headerSpacing: '',
            headerUpper: '',
            borderType: 'none',
            borderColor: '',
            borderRadius: ''

        }]
    },
    headerBorderTop: {
        type: 'number'
    },
    headerBorderRight: {
        type: 'number'
    },
    headerBorderBottom: {
        type: 'number'
    },
    headerBorderLeft: {
        type: 'number'
    },
    upperStyles: {
        type: "array",
        default: [{
            iconWidth: '',
            iconWidthUnit: 'px',
            color: '',
            backColor: '',
            borderType: 'none',
            borderColor: '',
            borderRadius: ''

        }]
    },
    upperBorderTop: {
        type: 'number'
    },
    upperBorderRight: {
        type: 'number'
    },
    upperBorderBottom: {
        type: 'number'
    },
    upperBorderLeft: {
        type: 'number'
    },
    upperPaddingT: {
        type: 'number'
    },
    upperPaddingR: {
        type: 'number'
    },
    upperPaddingB: {
        type: 'number'
    },
    upperPaddingL: {
        type: 'number'
    },
    upperPaddingTTablet: {
        type: 'number'
    },
    upperPaddingRTablet: {
        type: 'number'
    },
    upperPaddingBTablet: {
        type: 'number'
    },
    upperPaddingLTablet: {
        type: 'number'
    },
    upperPaddingTMobile: {
        type: 'number'
    },
    upperPaddingRMobile: {
        type: 'number'
    },
    upperPaddingBMobile: {
        type: 'number'
    },
    upperPaddingLMobile: {
        type: 'number'
    },
    lowerStyles: {
        type: 'array',
        default: [{
            lowerSizeUnit: 'px',
            lowerSize: '',
            lowerSizeMobile: '',
            lowerSizeTablet: '',
            lowerWeight: '',
            lowerStyle: '',
            lowerSpacing: '',
            iconWidth: '',
            iconWidthUnit: 'px',
            color: '',
            backColor: '',
            borderType: 'none',
            borderColor: '',
            borderRadius: ''
        }]
    },
    lowerBorderTop: {
        type: 'number'
    },
    lowerBorderRight: {
        type: 'number'
    },
    lowerBorderBottom: {
        type: 'number'
    },
    lowerBorderLeft: {
        type: 'number'
    },
    lowerPaddingT: {
        type: 'number'
    },
    lowerPaddingR: {
        type: 'number'
    },
    lowerPaddingB: {
        type: 'number'
    },
    lowerPaddingL: {
        type: 'number'
    },
    lowerPaddingTTablet: {
        type: 'number'
    },
    lowerPaddingRTablet: {
        type: 'number'
    },
    lowerPaddingBTablet: {
        type: 'number'
    },
    lowerPaddingLTablet: {
        type: 'number'
    },
    lowerPaddingTMobile: {
        type: 'number'
    },
    lowerPaddingRMobile: {
        type: 'number'
    },
    lowerPaddingBMobile: {
        type: 'number'
    },
    lowerPaddingLMobile: {
        type: 'number'
    },
    modalStyles: {
        type: "array",
        default: [(_ref = {
            contentType: 'text',
            contentText: __('Modal Box Content', 'premium-blocks-for-gutenberg'),
            textColor: '',
            textBackColor: '',
            modalSizeUnit: 'px',
            modalSize: '',
            modalSizeMobile: '',
            modalSizeTablet: '',
            modalFamily: '',
            modalWeight: '',
            modalStyle: '',
            modalSpacing: '',
            modalUpper: '',
            modalWidth: '',
            modalWidthTablet: '',
            modalWidthMobile: '',
            modalWidthUnit: 'px',
            modalHeight: '',
            modalHeightTablet: '',
            modalHeightMobile: '',
            modalHeightUnit: 'px',
            containerBack: '',
            backgroundImageID: '',
            backgroundImageURL: '',
            backgroundPosition: 'center center',
            backgroundRepeat: 'no-repeat',
            backgroundSize: 'auto',
            fixed: false,
            gradientLocationOne: '0',
            gradientColorTwo: '',
            gradientLocationTwo: '100',
            gradientType: 'linear',
            gradientAngle: '180',
            gradientPosition: 'center center'
        }, _defineProperty(_ref, 'gradientType', ''), _defineProperty(_ref, 'footerBackColor', ''), _defineProperty(_ref, 'borderType', 'none'), _defineProperty(_ref, 'borderColor', ''), _defineProperty(_ref, 'borderRadius', ''), _defineProperty(_ref, 'modalShadowColor', ''), _defineProperty(_ref, 'modalShadowBlur', ''), _defineProperty(_ref, 'modalShadowHorizontal', ''), _defineProperty(_ref, 'modalShadowVertical', ''), _defineProperty(_ref, 'modalShadowPosition', ''), _ref)]
    },
    backgroundType: {
        type: "string"
    },
    modalBorderTop: {
        type: 'number'
    },
    modalBorderRight: {
        type: 'number'
    },
    modalBorderBottom: {
        type: 'number'
    },
    modalBorderLeft: {
        type: 'number'
    },
    modalMarginT: {
        type: 'number'
    },
    modalMarginR: {
        type: 'number'
    },
    modalMarginB: {
        type: 'number'
    },
    modalMarginL: {
        type: 'number'
    },
    modalMarginTTablet: {
        type: 'number'
    },
    modalMarginRTablet: {
        type: 'number'
    },
    modalMarginBTablet: {
        type: 'number'
    },
    modalMarginLTablet: {
        type: 'number'
    },
    modalMarginTMobile: {
        type: 'number'
    },
    modalMarginRMobile: {
        type: 'number'
    },
    modalMarginBMobile: {
        type: 'number'
    },
    modalMarginLMobile: {
        type: 'number'
    },
    modalPaddingT: {
        type: 'number'
    },
    modalPaddingR: {
        type: 'number'
    },
    modalPaddingB: {
        type: 'number'
    },
    modalPaddingL: {
        type: 'number'
    },
    modalPaddingTTablet: {
        type: 'number'
    },
    modalPaddingRTablet: {
        type: 'number'
    },
    modalPaddingBTablet: {
        type: 'number'
    },
    modalPaddingLTablet: {
        type: 'number'
    },
    modalPaddingTMobile: {
        type: 'number'
    },
    modalPaddingRMobile: {
        type: 'number'
    },
    modalPaddingBMobile: {
        type: 'number'
    },
    modalPaddingLMobile: {
        type: 'number'
    }

};
exports.default = attributes;

/***/ }),
/* 373 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classnames = __webpack_require__(0);

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var InnerBlocks = wp.blockEditor.InnerBlocks;


var save = function save(props) {
    var className = props.className;
    var _props$attributes = props.attributes,
        block_id = _props$attributes.block_id,
        contentStyles = _props$attributes.contentStyles,
        triggerSettings = _props$attributes.triggerSettings,
        triggerStyles = _props$attributes.triggerStyles,
        triggerBorderTop = _props$attributes.triggerBorderTop,
        triggerBorderRight = _props$attributes.triggerBorderRight,
        triggerBorderBottom = _props$attributes.triggerBorderBottom,
        triggerBorderLeft = _props$attributes.triggerBorderLeft,
        headerStyles = _props$attributes.headerStyles,
        headerBorderTop = _props$attributes.headerBorderTop,
        headerBorderRight = _props$attributes.headerBorderRight,
        headerBorderBottom = _props$attributes.headerBorderBottom,
        headerBorderLeft = _props$attributes.headerBorderLeft,
        upperStyles = _props$attributes.upperStyles,
        upperBorderTop = _props$attributes.upperBorderTop,
        upperBorderRight = _props$attributes.upperBorderRight,
        upperBorderBottom = _props$attributes.upperBorderBottom,
        upperBorderLeft = _props$attributes.upperBorderLeft,
        lowerStyles = _props$attributes.lowerStyles,
        lowerBorderTop = _props$attributes.lowerBorderTop,
        lowerBorderRight = _props$attributes.lowerBorderRight,
        lowerBorderBottom = _props$attributes.lowerBorderBottom,
        lowerBorderLeft = _props$attributes.lowerBorderLeft,
        modalStyles = _props$attributes.modalStyles,
        backgroundType = _props$attributes.backgroundType,
        modalBorderTop = _props$attributes.modalBorderTop,
        modalBorderRight = _props$attributes.modalBorderRight,
        modalBorderBottom = _props$attributes.modalBorderBottom,
        modalBorderLeft = _props$attributes.modalBorderLeft;

    var renderCss = React.createElement(
        'style',
        null,
        '\n            #premium-modal-box-' + block_id + ' .premium-modal-trigger-container button:hover {\n              background-color: ' + triggerStyles[0].triggerHoverBack + ' !important;\n              border-style: ' + triggerStyles[0].borderTypeH + ' !important;\n            \n              border-color: ' + triggerStyles[0].borderColorH + ' !important;\n              border-radius: ' + triggerStyles[0].borderRadiusH + 'px !important;\n            }\n            #premium-modal-box-' + block_id + ' .premium-modal-trigger-container button:hover i{\n                color:' + triggerStyles[0].iconHoverColor + ' !important;\n            }\n            #premium-modal-box-' + block_id + ' .premium-modal-trigger-container button:hover span{\n                color:' + triggerStyles[0].hoverColor + ' !important;\n            }\n             #premium-modal-box-' + block_id + ' .premium-modal-trigger-container:hover .premium-modal-trigger-text {\n                color:' + triggerStyles[0].hoverColor + ' !important;\n            }\n            #premium-modal-box-' + block_id + ' .premium-modal-trigger-container .premium-lottie-animation{\n            filter: brightness( ' + triggerStyles[0].bright + '% ) contrast( ' + triggerStyles[0].contrast + '% ) saturate( ' + triggerStyles[0].saturation + '% ) blur( ' + triggerStyles[0].blur + 'px ) hue-rotate( ' + triggerStyles[0].hue + 'deg );\n            }\n            #premium-modal-box-' + block_id + ' .premium-modal-trigger-container:hover .premium-lottie-animation{\n            filter: brightness( ' + triggerStyles[0].brightH + '% ) contrast( ' + triggerStyles[0].contrastH + '% ) saturate( ' + triggerStyles[0].saturationH + '% ) blur( ' + triggerStyles[0].blurH + 'px ) hue-rotate( ' + triggerStyles[0].hueH + 'deg ) !important;\n            }\n            #premium-modal-box-' + block_id + ' .premium-modal-trigger-container img:hover {\n              border-style: ' + triggerStyles[0].borderTypeH + ' !important;\n              border-color: ' + triggerStyles[0].borderColorH + ' !important;\n              border-radius: ' + triggerStyles[0].borderRadiusH + 'px !important;\n            }\n             #premium-modal-box-' + block_id + ' .premium-modal-trigger-container:hover .premium-modal-trigger-text {\n              border-style: ' + triggerStyles[0].borderTypeH + ' !important;\n              border-color: ' + triggerStyles[0].borderColorH + ' !important;\n              border-radius: ' + triggerStyles[0].borderRadiusH + 'px !important;\n            }\n\n        '
    );

    var btnGrad = void 0,
        btnGrad2 = void 0,
        btnbg = void 0;
    if (undefined !== backgroundType && 'gradient' === backgroundType) {
        btnGrad = 'transparent' === modalStyles[0].containerBack || undefined === modalStyles[0].containerBack ? 'rgba(255,255,255,0)' : modalStyles[0].containerBack;
        btnGrad2 = undefined !== modalStyles[0].gradientColorTwo && undefined !== modalStyles[0].gradientColorTwo && '' !== modalStyles[0].gradientColorTwo ? modalStyles[0].gradientColorTwo : '#777';
        if ('radial' === modalStyles[0].gradientType) {
            btnbg = 'radial-gradient(at ' + modalStyles[0].gradientPosition + ', ' + btnGrad + ' ' + modalStyles[0].gradientLocationOne + '%, ' + btnGrad2 + ' ' + modalStyles[0].gradientLocationTwo + '%)';
        } else if ('radial' !== modalStyles[0].gradientType) {
            btnbg = 'linear-gradient(' + modalStyles[0].gradientAngle + 'deg, ' + btnGrad + ' ' + modalStyles[0].gradientLocationOne + '%, ' + btnGrad2 + ' ' + modalStyles[0].gradientLocationTwo + '%)';
        }
    } else {
        btnbg = modalStyles[0].backgroundImageURL ? 'url(\'' + modalStyles[0].backgroundImageURL + '\')' : '';
    }

    return React.createElement(
        'div',
        { id: 'premium-modal-box-' + block_id, className: (0, _classnames2.default)(className, "premium-modal-box"), 'data-trigger': triggerSettings[0].triggerType },
        renderCss,
        React.createElement(
            'div',
            { className: 'premium-modal-trigger-container', style: { textAlign: triggerSettings[0].align } },
            triggerSettings[0].triggerType === "button" && React.createElement(
                'button',
                { className: ' premium-modal-trigger-btn premium-button__' + triggerSettings[0].btnSize + ' ', style: {
                        backgroundColor: triggerStyles[0].triggerBack,
                        borderStyle: triggerStyles[0].borderType,
                        borderTopWidth: triggerBorderTop + 'px',
                        borderRightWidth: triggerBorderRight + 'px',
                        borderBottomWidth: triggerBorderBottom + 'px',
                        borderLeftWidth: triggerBorderLeft + 'px',
                        borderColor: triggerStyles[0].borderColor,
                        borderRadius: triggerStyles[0].borderRadius + 'px',
                        boxShadow: triggerStyles[0].triggerShadowHorizontal + 'px ' + triggerStyles[0].triggerShadowVertical + 'px ' + triggerStyles[0].triggerShadowBlur + 'px ' + triggerStyles[0].triggerShadowColor + ' ' + triggerStyles[0].triggerShadowPosition
                    } },
                triggerSettings[0].showIcon && triggerSettings[0].iconPosition == "before" && React.createElement('i', { className: ' premium-modal-box-icon ' + triggerSettings[0].icon, style: { fontSize: triggerSettings[0].iconSize + 'px', marginRight: triggerSettings[0].iconSpacing + 'px', color: triggerStyles[0].iconColor } }),
                React.createElement(
                    'span',
                    { style: { color: triggerStyles[0].color, fontFamily: triggerStyles[0].triggerFamily, fontWeight: triggerStyles[0].triggerWeight, fontStyle: triggerStyles[0].triggerStyle, letterSpacing: triggerStyles[0].triggerSpacing } },
                    ' ',
                    triggerSettings[0].btnText
                ),
                triggerSettings[0].showIcon && triggerSettings[0].iconPosition == "after" && React.createElement('i', { className: 'premium-modal-box-icon ' + triggerSettings[0].icon, style: { fontSize: triggerSettings[0].iconSize + 'px', marginLeft: triggerSettings[0].iconSpacing + 'px', color: triggerStyles[0].iconColor } })
            ),
            triggerSettings[0].triggerType === "image" && React.createElement('img', { src: triggerSettings[0].triggerImgURL, className: 'premium-modal-trigger-img',
                style: {
                    borderStyle: triggerStyles[0].borderType,
                    borderTopWidth: triggerBorderTop + 'px',
                    borderRightWidth: triggerBorderRight + 'px',
                    borderBottomWidth: triggerBorderBottom + 'px',
                    borderLeftWidth: triggerBorderLeft + 'px',
                    borderColor: triggerStyles[0].borderColor,
                    borderRadius: triggerStyles[0].borderRadius + 'px',
                    boxShadow: triggerStyles[0].triggerShadowHorizontal + 'px ' + triggerStyles[0].triggerShadowVertical + 'px ' + triggerStyles[0].triggerShadowBlur + 'px ' + triggerStyles[0].triggerShadowColor + ' ' + triggerStyles[0].triggerShadowPosition
                } }),
            triggerSettings[0].triggerType === "text" && React.createElement(
                'span',
                { className: 'premium-modal-trigger-text', style: {
                        color: triggerStyles[0].color,
                        borderStyle: triggerStyles[0].borderType,
                        borderTopWidth: triggerBorderTop + 'px',
                        borderRightWidth: triggerBorderRight + 'px',
                        borderBottomWidth: triggerBorderBottom + 'px',
                        borderLeftWidth: triggerBorderLeft + 'px',
                        borderColor: triggerStyles[0].borderColor,
                        borderRadius: triggerStyles[0].borderRadius + 'px',
                        textShadow: triggerStyles[0].textShadowHorizontal + 'px ' + triggerStyles[0].textShadowVertical + 'px ' + triggerStyles[0].textShadowBlur + 'px ' + triggerStyles[0].textShadowColor,
                        fontFamily: triggerStyles[0].triggerFamily,
                        fontWeight: triggerStyles[0].triggerWeight,
                        fontStyle: triggerStyles[0].triggerStyle,
                        letterSpacing: triggerStyles[0].triggerSpacing
                    } },
                triggerSettings[0].triggerText
            ),
            triggerSettings[0].triggerType === "lottie" && React.createElement('div', { className: 'premium-lottie-animation',
                'data-lottieurl': triggerSettings[0].lottieTriggerURL,
                'data-loop': triggerSettings[0].triggerLoopLottie,
                'data-reverse': triggerSettings[0].triggerReverseLottie,
                'data-trigger': triggerSettings[0].triggerPlayLottie ? "hover" : "none"
            })
        ),
        React.createElement(
            'div',
            { className: 'premium-popup__modal_wrap', style: { display: "none" }, role: 'dialog' },
            React.createElement('div', { role: 'presentation', className: 'premium-popup__modal_wrap_overlay', style: {
                    backgroundColor: backgroundType === "solid" ? modalStyles[0].containerBack : '',
                    backgroundImage: btnbg,
                    backgroundRepeat: modalStyles[0].backgroundRepeat,
                    backgroundPosition: modalStyles[0].backgroundPosition,
                    backgroundSize: modalStyles[0].backgroundSize,
                    backgroundAttachment: modalStyles[0].fixed ? "fixed" : "unset"
                } }),
            React.createElement(
                'div',
                { className: 'premium-popup__modal_content animated animation-' + contentStyles[0].animationType + ' animation-' + contentStyles[0].animationSpeed,
                    'data-delay': triggerSettings[0].delayTime,
                    'data-animation': contentStyles[0].animationType + ' ' + contentStyles[0].animationSpeed,
                    style: {

                        borderStyle: '' + modalStyles[0].borderType,
                        borderColor: '' + modalStyles[0].borderColor,
                        borderTopWidth: modalBorderTop + 'px',
                        borderRightWidth: modalBorderRight + 'px',
                        borderBottomWidth: modalBorderBottom + 'px',
                        borderLeftWidth: modalBorderLeft + 'px',
                        borderRadius: modalStyles[0].borderRadius + 'px',
                        boxShadow: modalStyles[0].modalShadowHorizontal + 'px ' + modalStyles[0].modalShadowVertical + 'px ' + modalStyles[0].modalShadowBlur + 'px ' + modalStyles[0].modalShadowColor + ' ' + modalStyles[0].modalShadowPosition
                    } },
                contentStyles[0].showHeader && React.createElement(
                    'div',
                    { className: 'premium-modal-box-modal-header', style: {
                            backgroundColor: headerStyles[0].backColor,
                            borderStyle: headerStyles[0].borderType,
                            borderTopWidth: headerBorderTop + 'px',
                            borderRightWidth: headerBorderRight + 'px',
                            borderBottomWidth: headerBorderBottom + 'px',
                            borderLeftWidth: headerBorderLeft + 'px',
                            borderColor: '' + headerStyles[0].borderColor,
                            borderRadius: headerStyles[0].borderRadius + 'px'
                        } },
                    React.createElement(
                        'h3',
                        { className: 'premium-modal-box-modal-title', style: {
                                color: headerStyles[0].color,
                                fontFamily: headerStyles[0].headerFamily,
                                fontStyle: headerStyles[0].headerStyle,
                                letterSpacing: headerStyles[0].headerSpacing,
                                fontWeight: headerStyles[0].headerWeight
                            } },
                        contentStyles[0].iconType === "icon" && React.createElement('i', { className: contentStyles[0].contentIcon }),
                        contentStyles[0].iconType === "image" && React.createElement('img', { src: contentStyles[0].contentImgURL, style: {} }),
                        contentStyles[0].iconType === "lottie" && React.createElement('div', { className: 'premium-lottie-animation',
                            'data-lottieurl': contentStyles[0].lottieURL,
                            'data-loop': contentStyles[0].loopLottie,
                            'data-reverse': contentStyles[0].reverseLottie,
                            'data-trigger': "none"
                        }),
                        contentStyles[0].titleText
                    ),
                    contentStyles[0].showUpperClose && contentStyles[0].showHeader && React.createElement(
                        'div',
                        { className: 'premium-modal-box-close-button-container', style: {
                                backgroundColor: '' + upperStyles[0].backColor,
                                borderStyle: '' + upperStyles[0].borderType,
                                borderTopWidth: upperBorderTop + 'px',
                                borderRightWidth: upperBorderRight + 'px',
                                borderBottomWidth: upperBorderBottom + 'px',
                                borderLeftWidth: upperBorderLeft + 'px',
                                borderColor: '' + upperStyles[0].borderColor,
                                borderRadius: upperStyles[0].borderRadius + 'px'

                            } },
                        React.createElement(
                            'button',
                            { type: 'button', className: 'premium-modal-box-modal-close close-button',
                                style: {
                                    fontSize: '' + upperStyles[0].iconWidth + upperStyles[0].iconWidthUnit,
                                    color: '' + upperStyles[0].color

                                }, 'data-dismiss': 'premium-modal' },
                            '\xD7'
                        )
                    )
                ),
                React.createElement(
                    'div',
                    { className: 'premium-modal-box-modal-body', style: {
                            background: modalStyles[0].textBackColor
                        } },
                    modalStyles[0].contentType === "text" ? React.createElement(
                        'p',
                        { style: {
                                color: modalStyles[0].textColor,
                                fontWeight: modalStyles[0].modalWeight,
                                fontFamily: modalStyles[0].modalFamily,
                                letterSpacing: modalStyles[0].modalSpacing,
                                fontStyle: modalStyles[0].modalStyle
                            } },
                        modalStyles[0].contentText
                    ) : React.createElement(InnerBlocks.Content, null)
                ),
                contentStyles[0].showLowerClose && React.createElement(
                    'div',
                    { className: 'premium-modal-box-modal-footer', style: {
                            backgroundColor: modalStyles[0].footerBackColor
                        } },
                    React.createElement(
                        'button',
                        { className: 'premium-modal-box-modal-lower-close close-button', role: 'button', 'data-dismiss': 'premium-modal',
                            style: {
                                fontStyle: lowerStyles[0].lowerStyle,
                                fontWeight: lowerStyles[0].lowerWeight,
                                letterSpacing: lowerStyles[0].lowerSpacing,
                                width: '' + lowerStyles[0].iconWidth + lowerStyles[0].iconWidthUnit,
                                color: '' + lowerStyles[0].color,
                                backgroundColor: '' + lowerStyles[0].backColor,
                                borderStyle: '' + lowerStyles[0].borderType,
                                borderTopWidth: lowerBorderTop + 'px',
                                borderRightWidth: lowerBorderRight + 'px',
                                borderBottomWidth: lowerBorderBottom + 'px',
                                borderLeftWidth: lowerBorderLeft + 'px',
                                borderColor: '' + lowerStyles[0].borderColor,
                                borderRadius: lowerStyles[0].borderRadius + 'px'
                            }
                        },
                        contentStyles[0].lowerCloseText
                    )
                )
            )
        )
    );
};

exports.default = save;

/***/ }),
/* 374 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _settings = __webpack_require__(1);

var _save = __webpack_require__(375);

var _save2 = _interopRequireDefault(_save);

var _edit = __webpack_require__(376);

var _edit2 = _interopRequireDefault(_edit);

var _icons = __webpack_require__(4);

var _icons2 = _interopRequireDefault(_icons);

var _attributes = __webpack_require__(377);

var _attributes2 = _interopRequireDefault(_attributes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __ = wp.i18n.__;
var registerBlockType = wp.blocks.registerBlockType;

registerBlockType("premium/image-separator", {
    title: __("Image Separator"),
    icon: React.createElement(_icons2.default, { icon: "image" }),
    category: "premium-blocks",
    attributes: _attributes2.default,
    supports: { inserter: _settings.imageSeparator },
    edit: _edit2.default,
    save: _save2.default
});

/***/ }),
/* 375 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = save;

var _classnames = __webpack_require__(0);

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function save(props) {
    var attributes = props.attributes,
        className = props.className;
    var block_id = attributes.block_id,
        align = attributes.align,
        iconType = attributes.iconType,
        icon = attributes.icon,
        imageURL = attributes.imageURL,
        imageID = attributes.imageID,
        link = attributes.link,
        url = attributes.url,
        gutter = attributes.gutter,
        blur = attributes.blur,
        bright = attributes.bright,
        contrast = attributes.contrast,
        saturation = attributes.saturation,
        hue = attributes.hue,
        blurHover = attributes.blurHover,
        brightHover = attributes.brightHover,
        contrastHover = attributes.contrastHover,
        saturationHover = attributes.saturationHover,
        hueHover = attributes.hueHover,
        linkTarget = attributes.linkTarget,
        iconStyles = attributes.iconStyles,
        imgFit = attributes.imgFit,
        imgMaskURL = attributes.imgMaskURL,
        maskSize = attributes.maskSize,
        maskPosition = attributes.maskPosition;


    var target = linkTarget ? "_blank" : "_self";

    return React.createElement(
        "div",
        {
            className: (0, _classnames2.default)(className, "premium-block-" + block_id),
            style: { textAlign: align } },
        React.createElement(
            "div",
            { className: "premium-image-separator-container", style: {
                    textAlign: align,
                    transform: "translateY(" + gutter + "%)",
                    filter: iconType === 'image' ? "brightness( " + bright + "% ) contrast( " + contrast + "% ) saturate( " + saturation + "% ) blur( " + blur + "px ) hue-rotate( " + hue + "deg )" : ""
                }
            },
            iconType === 'icon' && React.createElement("i", { className: "" + icon, style: {
                    color: iconStyles[0].iconColor,
                    backgroundColor: iconStyles[0].iconBGColor,
                    textShadow: iconStyles[0].iconShadowHorizontal + "px " + iconStyles[0].iconShadowVertical + "px " + iconStyles[0].iconShadowBlur + "px " + iconStyles[0].iconShadowColor
                } }),
            iconType === 'image' && React.createElement("img", {
                src: imageURL,
                style: {
                    maskSize: "" + maskSize,
                    maskPosition: "" + maskPosition,
                    maskImage: imgMaskURL ? "url(\"" + imgMaskURL + "\")" : '',
                    WebkitMaskImage: imgMaskURL ? "url(\"" + imgMaskURL + "\")" : '',
                    WebkitMaskSize: "" + maskSize,
                    WebkitMaskPosition: "" + maskPosition,
                    objectFit: "" + imgFit
                } }),
            link && React.createElement("a", { className: "premium-image-separator-link", href: "" + url, target: target, rel: "noopener noreferrer" })
        )
    );
}

/***/ }),
/* 376 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _classnames = __webpack_require__(0);

var _classnames2 = _interopRequireDefault(_classnames);

var _premiumIconsList = __webpack_require__(31);

var _premiumIconsList2 = _interopRequireDefault(_premiumIconsList);

var _reactFonticonpicker = __webpack_require__(24);

var _reactFonticonpicker2 = _interopRequireDefault(_reactFonticonpicker);

var _responsiveRangeControl = __webpack_require__(19);

var _responsiveRangeControl2 = _interopRequireDefault(_responsiveRangeControl);

var _ColorComponent = __webpack_require__(2);

var _ColorComponent2 = _interopRequireDefault(_ColorComponent);

var _premiumFilters = __webpack_require__(30);

var _premiumFilters2 = _interopRequireDefault(_premiumFilters);

var _premiumMediaUpload = __webpack_require__(12);

var _premiumMediaUpload2 = _interopRequireDefault(_premiumMediaUpload);

var _radioControl = __webpack_require__(10);

var _radioControl2 = _interopRequireDefault(_radioControl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var __ = wp.i18n.__;
var _wp$element = wp.element,
    Component = _wp$element.Component,
    Fragment = _wp$element.Fragment;
var _wp$editor = wp.editor,
    MediaPlaceholder = _wp$editor.MediaPlaceholder,
    InspectorControls = _wp$editor.InspectorControls;
var _wp$components = wp.components,
    PanelBody = _wp$components.PanelBody,
    SelectControl = _wp$components.SelectControl,
    TextControl = _wp$components.TextControl,
    ToggleControl = _wp$components.ToggleControl;
var withSelect = wp.data.withSelect;

var edit = function (_Component) {
    _inherits(edit, _Component);

    function edit() {
        _classCallCheck(this, edit);

        return _possibleConstructorReturn(this, (edit.__proto__ || Object.getPrototypeOf(edit)).apply(this, arguments));
    }

    _createClass(edit, [{
        key: "componentDidMount",
        value: function componentDidMount() {
            // Assigning id in the attribute.
            this.props.setAttributes({ block_id: this.props.clientId });
            this.getPreviewSize = this.getPreviewSize.bind(this);
        }
    }, {
        key: "getPreviewSize",
        value: function getPreviewSize(device, desktopSize, tabletSize, mobileSize) {
            if (device === "Mobile") {
                if (undefined !== mobileSize && "" !== mobileSize) {
                    return mobileSize;
                } else if (undefined !== tabletSize && "" !== tabletSize) {
                    return tabletSize;
                }
            } else if (device === "Tablet") {
                if (undefined !== tabletSize && "" !== tabletSize) {
                    return tabletSize;
                }
            }
            return desktopSize;
        }
    }, {
        key: "render",
        value: function render() {
            var _props = this.props,
                attributes = _props.attributes,
                setAttributes = _props.setAttributes,
                isSelected = _props.isSelected;
            var align = attributes.align,
                className = attributes.className,
                iconType = attributes.iconType,
                icon = attributes.icon,
                imageURL = attributes.imageURL,
                imageID = attributes.imageID,
                link = attributes.link,
                url = attributes.url,
                gutter = attributes.gutter,
                blur = attributes.blur,
                bright = attributes.bright,
                contrast = attributes.contrast,
                saturation = attributes.saturation,
                hue = attributes.hue,
                blurHover = attributes.blurHover,
                brightHover = attributes.brightHover,
                contrastHover = attributes.contrastHover,
                saturationHover = attributes.saturationHover,
                hueHover = attributes.hueHover,
                linkTarget = attributes.linkTarget,
                iconStyles = attributes.iconStyles,
                imgHeight = attributes.imgHeight,
                imgHeightTablet = attributes.imgHeightTablet,
                imgHeightMobile = attributes.imgHeightMobile,
                imgFit = attributes.imgFit,
                imgMask = attributes.imgMask,
                imgMaskID = attributes.imgMaskID,
                imgMaskURL = attributes.imgMaskURL,
                maskSize = attributes.maskSize,
                maskPosition = attributes.maskPosition;


            var ICON = [{
                value: "icon",
                label: __("Icon", "premium-blocks-for-gutenberg")
            }, {
                value: "image",
                label: __("Image", "premium-blocks-for-gutenberg")
            }];

            var saveIconStyle = function saveIconStyle(value) {
                var newUpdate = iconStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({ iconStyles: newUpdate });
            };

            var iconSize = this.getPreviewSize(this.props.deviceType, iconStyles[0].iconSize, iconStyles[0].iconSizeTablet, iconStyles[0].iconSizeMobile);

            var iconBorderRadius = this.getPreviewSize(this.props.deviceType, iconStyles[0].iconBorderRadius, iconStyles[0].iconBorderRadiusTablet, iconStyles[0].iconBorderRadiusMobile);

            var iconPadding = this.getPreviewSize(this.props.deviceType, iconStyles[0].iconPadding, iconStyles[0].iconPaddingTablet, iconStyles[0].iconPaddingMobile);

            var imageHeight = this.getPreviewSize(this.props.deviceType, imgHeight, imgHeightTablet, imgHeightMobile);

            var renderCss = React.createElement(
                "style",
                null,
                "\n        .premium-block-" + this.props.clientId + " .premium-image-separator-container:hover img{\n         filter:  brightness( " + brightHover + "% ) contrast( " + contrastHover + "% ) saturate( " + saturationHover + "% ) blur( " + blurHover + "px ) hue-rotate( " + hueHover + "deg ) !important ;\n        }\n        .premium-block-" + this.props.clientId + " .premium-image-separator-container i:hover {\n          color: " + iconStyles[0].iconColorHover + " !important;\n          background-color: " + iconStyles[0].iconBGColorHover + " !important;\n        }\n            "
            );

            return [isSelected && React.createElement(
                InspectorControls,
                null,
                React.createElement(
                    PanelBody,
                    {
                        title: __("Image Settings"),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(SelectControl, {
                        label: __("Separator Type"),
                        value: iconType,
                        onChange: function onChange(newSelect) {
                            return setAttributes({ iconType: newSelect });
                        },
                        options: ICON
                    }),
                    iconType === "icon" ? React.createElement(
                        Fragment,
                        null,
                        React.createElement(
                            "p",
                            null,
                            __("Icon")
                        ),
                        React.createElement(_reactFonticonpicker2.default, {
                            icons: _premiumIconsList2.default,
                            value: iconStyles[0].icon,
                            onChange: function onChange(value) {
                                return setAttributes({ icon: value });
                            },
                            isMulti: false,
                            appendTo: "body",
                            noSelectedPlaceholder: __("Select Icon")
                        })
                    ) : React.createElement(
                        Fragment,
                        null,
                        imageURL && React.createElement(
                            "button",
                            {
                                className: "lottie-remove",
                                onClick: function onClick(e) {
                                    e.preventDefault();
                                    setAttributes(_defineProperty({
                                        imageURL: ""
                                    }, "imageURL", ""));
                                }
                            },
                            __("Remove Image", "premium-blocks-for-gutenberg")
                        )
                    ),
                    React.createElement(_responsiveRangeControl2.default, {
                        label: __("Width/Size", "premium-blocks-for-gutenberg"),
                        value: iconStyles[0].iconSize,
                        onChange: function onChange(value) {
                            return saveIconStyle({ iconSize: value });
                        },
                        tabletValue: iconStyles[0].iconSizeTablet,
                        onChangeTablet: function onChangeTablet(value) {
                            return saveIconStyle({ iconSizeTablet: value });
                        },
                        mobileValue: iconStyles[0].iconSizeMobile,
                        onChangeMobile: function onChangeMobile(value) {
                            return saveIconStyle({ iconSizeMobile: value });
                        },
                        onChangeUnit: function onChangeUnit(key) {
                            return saveIconStyle({ iconSizeType: key });
                        },
                        unit: iconStyles[0].iconSizeType,
                        showUnit: true,
                        defaultValue: 200,
                        units: ["px", "em"],
                        min: 1,
                        max: 1000
                    }),
                    iconType === "image" && React.createElement(
                        Fragment,
                        null,
                        React.createElement(_responsiveRangeControl2.default, {
                            label: __("Height", "premium-blocks-for-gutenberg"),
                            value: imgHeight,
                            onChange: function onChange(value) {
                                return setAttributes({ imgHeight: value });
                            },
                            tabletValue: imgHeightTablet,
                            onChangeTablet: function onChangeTablet(value) {
                                return setAttributes({
                                    imgHeightTablet: value
                                });
                            },
                            mobileValue: imgHeightMobile,
                            onChangeMobile: function onChangeMobile(value) {
                                return setAttributes({
                                    imgHeightMobile: value
                                });
                            },
                            onChangeUnit: function onChangeUnit(key) {
                                return saveIconStyle({ imgHeightType: key });
                            },
                            unit: iconStyles[0].imgHeightType,
                            showUnit: true,
                            defaultValue: 200,
                            units: ["px", "em"],
                            min: 1,
                            max: 1000
                        }),
                        React.createElement(SelectControl, {
                            label: __("Image Fit"),
                            value: imgFit,
                            onChange: function onChange(newSelect) {
                                return setAttributes({ imgFit: newSelect });
                            },
                            options: [{
                                label: __("Cover", "premium-blocks-for-gutenberg"),
                                value: "cover"
                            }, {
                                label: __("Fill", "premium-blocks-for-gutenberg"),
                                value: "fill"
                            }, {
                                label: __("Contain", "premium-blocks-for-gutenberg"),
                                value: "contain"
                            }]
                        })
                    ),
                    React.createElement(TextControl, {
                        label: __("Gutter (%)"),
                        type: "Number",
                        value: gutter,
                        onChange: function onChange(newValue) {
                            return setAttributes({ gutter: parseInt(newValue) });
                        },
                        help: "-50% is default. Increase to push the image outside or decrease to pull the image inside."
                    }),
                    React.createElement(_radioControl2.default, {
                        choices: ["left", "center", "right"],
                        label: __("Alignment "),
                        onChange: function onChange(value) {
                            return setAttributes({ align: value });
                        },
                        value: align
                    }),
                    React.createElement(ToggleControl, {
                        label: __("Link"),
                        checked: link,
                        onChange: function onChange(value) {
                            return setAttributes({ link: value });
                        }
                    }),
                    link && React.createElement(
                        Fragment,
                        null,
                        React.createElement(
                            "p",
                            null,
                            __("URL")
                        ),
                        React.createElement(TextControl, {
                            value: url,
                            onChange: function onChange(value) {
                                return setAttributes({ url: value });
                            },
                            placeholder: __("Enter URL")
                        }),
                        React.createElement(ToggleControl, {
                            label: __("Open links in new tab"),
                            checked: linkTarget,
                            onChange: function onChange(newValue) {
                                return setAttributes({ linkTarget: newValue });
                            }
                        })
                    ),
                    iconType === "image" && React.createElement(
                        Fragment,
                        null,
                        React.createElement(ToggleControl, {
                            label: __("Mask Image Shape"),
                            checked: imgMask,
                            onChange: function onChange(newValue) {
                                return setAttributes({ imgMask: newValue });
                            }
                        }),
                        imgMask && React.createElement(
                            Fragment,
                            null,
                            React.createElement(_premiumMediaUpload2.default, {
                                type: "image",
                                imageID: imgMaskID,
                                imageURL: imgMaskURL,
                                onSelectMedia: function onSelectMedia(media) {
                                    setAttributes({
                                        imgMaskID: media.id,
                                        imgMaskURL: media.url
                                    });
                                },
                                onRemoveImage: function onRemoveImage() {
                                    return setAttributes({
                                        imgMaskURL: "",
                                        imgMaskID: ""
                                    });
                                }
                            }),
                            React.createElement(SelectControl, {
                                label: __("Mask Size"),
                                value: maskSize,
                                onChange: function onChange(newSelect) {
                                    return setAttributes({
                                        maskSize: newSelect
                                    });
                                },
                                options: [{
                                    label: "Contain",
                                    value: "contain"
                                }, {
                                    label: "Cover",
                                    value: "cover"
                                }]
                            }),
                            React.createElement(SelectControl, {
                                label: __("Mask Position"),
                                value: maskPosition,
                                onChange: function onChange(newSelect) {
                                    return setAttributes({
                                        maskPosition: newSelect
                                    });
                                },
                                options: [{
                                    label: "Center Center",
                                    value: "center center"
                                }, {
                                    label: "Top Center",
                                    value: "top center"
                                }, {
                                    label: "Bottom Center",
                                    value: "bottom center"
                                }]
                            })
                        )
                    )
                ),
                React.createElement(
                    PanelBody,
                    {
                        title: __("Separator"),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    iconType === "image" ? React.createElement(
                        Fragment,
                        null,
                        React.createElement(_premiumFilters2.default, {
                            blur: blur,
                            bright: bright,
                            contrast: contrast,
                            saturation: saturation,
                            hue: hue,
                            onChangeBlur: function onChangeBlur(newSize) {
                                return setAttributes({
                                    blur: newSize,
                                    change: true
                                });
                            },
                            onChangeBright: function onChangeBright(newSize) {
                                return setAttributes({
                                    bright: newSize,
                                    change: true
                                });
                            },
                            onChangeContrast: function onChangeContrast(newSize) {
                                return setAttributes({
                                    contrast: newSize,
                                    change: true
                                });
                            },
                            onChangeSat: function onChangeSat(newSize) {
                                return setAttributes({
                                    saturation: newSize,
                                    change: true
                                });
                            },
                            onChangeHue: function onChangeHue(newSize) {
                                return setAttributes({
                                    hue: newSize,
                                    change: true
                                });
                            }
                        }),
                        React.createElement(_premiumFilters2.default, {
                            label: __("Hover CSS Filters"),
                            blur: blurHover,
                            bright: brightHover,
                            contrast: contrastHover,
                            saturation: saturationHover,
                            hue: hueHover,
                            onChangeBlur: function onChangeBlur(newSize) {
                                return setAttributes({
                                    blurHover: newSize,
                                    change: true
                                });
                            },
                            onChangeBright: function onChangeBright(newSize) {
                                return setAttributes({
                                    brightHover: newSize,
                                    change: true
                                });
                            },
                            onChangeContrast: function onChangeContrast(newSize) {
                                return setAttributes({
                                    contrastHover: newSize,
                                    change: true
                                });
                            },
                            onChangeSat: function onChangeSat(newSize) {
                                return setAttributes({
                                    saturationHover: newSize,
                                    change: true
                                });
                            },
                            onChangeHue: function onChangeHue(newSize) {
                                return setAttributes({
                                    hueHover: newSize,
                                    change: true
                                });
                            }
                        })
                    ) : React.createElement(
                        Fragment,
                        null,
                        React.createElement(_ColorComponent2.default, {
                            label: __("Color", "premium-blocks-for-gutenberg"),
                            colorDefault: "",
                            colorValue: iconStyles[0].iconColor,
                            onColorChange: function onColorChange(newValue) {
                                return saveIconStyle({ iconColor: newValue });
                            }
                        }),
                        React.createElement(_ColorComponent2.default, {
                            label: __("Background Color", "premium-blocks-for-gutenberg"),
                            colorDefault: "",
                            colorValue: iconStyles[0].iconBGColor,
                            onColorChange: function onColorChange(newValue) {
                                return saveIconStyle({ iconBGColor: newValue });
                            }
                        }),
                        React.createElement(_ColorComponent2.default, {
                            label: __("Hover Color", "premium-blocks-for-gutenberg"),
                            colorValue: iconStyles[0].iconColorHover,
                            onColorChange: function onColorChange(newValue) {
                                return saveIconStyle({ iconColorHover: newValue });
                            },
                            colorDefault: ""
                        }),
                        React.createElement(_ColorComponent2.default, {
                            label: __("Hover Background Color", "premium-blocks-for-gutenberg"),
                            colorValue: iconStyles[0].iconBGColorHover,
                            onColorChange: function onColorChange(newValue) {
                                return saveIconStyle({ iconBGColorHover: newValue });
                            },
                            colorDefault: ""
                        }),
                        React.createElement(PremiumShadow, {
                            label: __("Text Shadow", "premium-blocks-for-gutenberg"),
                            color: iconStyles[0].iconShadowColor,
                            blur: iconStyles[0].iconShadowBlur,
                            horizontal: iconStyles[0].iconShadowHorizontal,
                            vertical: iconStyles[0].iconShadowVertical,
                            onChangeColor: function onChangeColor(newColor) {
                                return saveIconStyle({ iconShadowColor: newColor.hex });
                            },
                            onChangeBlur: function onChangeBlur(newBlur) {
                                return saveIconStyle({ iconShadowBlur: newBlur });
                            },
                            onChangehHorizontal: function onChangehHorizontal(newValue) {
                                return saveIconStyle({ iconShadowHorizontal: newValue });
                            },
                            onChangeVertical: function onChangeVertical(newValue) {
                                return saveIconStyle({ iconShadowVertical: newValue });
                            }
                        }),
                        React.createElement(_responsiveRangeControl2.default, {
                            label: __("Padding", "premium-blocks-for-gutenberg"),
                            value: iconStyles[0].iconPadding,
                            onChange: function onChange(value) {
                                return saveIconStyle({ iconPadding: value });
                            },
                            tabletValue: iconStyles[0].iconPaddingTablet,
                            onChangeTablet: function onChangeTablet(value) {
                                return saveIconStyle({ iconPaddingTablet: value });
                            },
                            mobileValue: iconStyles[0].iconPaddingMobile,
                            onChangeMobile: function onChangeMobile(value) {
                                return saveIconStyle({ iconPaddingMobile: value });
                            },
                            onChangeUnit: function onChangeUnit(key) {
                                return saveIconStyle({ iconPaddingType: key });
                            },
                            unit: iconStyles[0].iconPaddingType,
                            showUnit: true,
                            defaultValue: 1,
                            min: 1,
                            max: 100
                        })
                    ),
                    !iconStyles[0].advancedBorder && React.createElement(_responsiveRangeControl2.default, {
                        label: __("Border Radius", "premium-blocks-for-gutenberg"),
                        value: iconStyles[0].iconBorderRadius,
                        onChange: function onChange(value) {
                            return saveIconStyle({ iconBorderRadius: value });
                        },
                        tabletValue: iconStyles[0].iconBorderRadiusTablet,
                        onChangeTablet: function onChangeTablet(value) {
                            return saveIconStyle({ iconBorderRadiusTablet: value });
                        },
                        mobileValue: iconStyles[0].iconBorderRadiusMobile,
                        onChangeMobile: function onChangeMobile(value) {
                            return saveIconStyle({ iconBorderRadiusMobile: value });
                        },
                        onChangeUnit: function onChangeUnit(key) {
                            return saveIconStyle({ iconBorderRadiusType: key });
                        },
                        unit: iconStyles[0].iconBorderRadiusType,
                        showUnit: true,
                        defaultValue: 1,
                        min: 1,
                        max: 100
                    }),
                    React.createElement(ToggleControl, {
                        label: __("Advanced Border Radius", "premium-blocks-for-gutenberg"),
                        checked: iconStyles[0].advancedBorder,
                        onChange: function onChange(value) {
                            return saveIconStyle({ advancedBorder: value });
                        }
                    }),
                    React.createElement(
                        "div",
                        null,
                        __("Apply custom radius values. Get the radius value from here", "premium-blocks-for-gutenberg"),
                        React.createElement(
                            "a",
                            {
                                target: "_blank",
                                href: "https://9elements.github.io/fancy-border-radius/"
                            },
                            " ",
                            "Here"
                        )
                    ),
                    iconStyles[0].advancedBorder && React.createElement(TextControl, {
                        label: __("Border Radius", "premium-blocks-for-gutenberg"),
                        value: iconStyles[0].advancedBorderValue,
                        onChange: function onChange(value) {
                            return saveIconStyle({ advancedBorderValue: value });
                        }
                    })
                )
            ), renderCss, React.createElement(
                "div",
                {
                    className: (0, _classnames2.default)(className, "premium-block-" + this.props.clientId),
                    style: { textAlign: align }
                },
                React.createElement(
                    "div",
                    {
                        className: "premium-image-separator-container",
                        style: {
                            textAlign: align,
                            transform: "translateY(" + gutter + "%)",
                            filter: iconType === "image" ? "brightness( " + bright + "% ) contrast( " + contrast + "% ) saturate( " + saturation + "% ) blur( " + blur + "px ) hue-rotate( " + hue + "deg )" : ""
                        }
                    },
                    iconType === "icon" && React.createElement("i", {
                        className: "" + icon,
                        style: {
                            fontSize: "" + iconSize + iconStyles[0].iconSizeType,
                            padding: "" + iconPadding + iconStyles[0].iconPaddingType,
                            color: iconStyles[0].iconColor,
                            backgroundColor: iconStyles[0].iconBGColor,
                            textShadow: iconStyles[0].iconShadowHorizontal + "px " + iconStyles[0].iconShadowVertical + "px " + iconStyles[0].iconShadowBlur + "px " + iconStyles[0].iconShadowColor,
                            borderRadius: iconStyles[0].advancedBorder ? iconStyles[0].advancedBorderValue : "" + iconBorderRadius + iconStyles[0].iconBorderRadiusType

                        }
                    }),
                    iconType === "image" && React.createElement(
                        Fragment,
                        null,
                        imageURL ? React.createElement("img", {
                            src: imageURL,
                            style: {
                                maskSize: "" + maskSize,
                                maskPosition: "" + maskPosition,
                                maskImage: imgMaskURL ? "url(\"" + imgMaskURL + "\")" : '',
                                WebkitMaskImage: imgMaskURL ? "url(\"" + imgMaskURL + "\")" : '',
                                WebkitMaskSize: "" + maskSize,
                                WebkitMaskPosition: "" + maskPosition,
                                objectFit: "" + imgFit,
                                height: "" + imageHeight + iconStyles[0].imgHeightType,
                                width: "" + iconSize + iconStyles[0].iconSizeType,
                                borderRadius: iconStyles[0].advancedBorder ? iconStyles[0].advancedBorderValue : "" + iconBorderRadius + iconStyles[0].iconBorderRadiusType
                            }
                        }) : React.createElement(MediaPlaceholder, {
                            labels: {
                                title: __("Premium Image Separator", "premium-blocks-for-gutenberg"),
                                instructions: __("Upload an image file, pick one from your media library, or add one with a URL.", "premium-blocks-for-gutenberg")
                            },
                            accept: ["image"],
                            allowedTypes: ["image"],
                            value: imageURL,
                            onSelectURL: function onSelectURL(value) {
                                return setAttributes({ imageURL: value });
                            },
                            onSelect: function onSelect(media) {
                                setAttributes({
                                    imageID: media.id,
                                    imageURL: media.url
                                });
                            }
                        })
                    ),
                    link && React.createElement("a", {
                        className: "premium-image-separator-link",
                        href: "" + url
                    })
                )
            )];
        }
    }]);

    return edit;
}(Component);

exports.default = withSelect(function (select, props) {
    var _select = select("core/edit-post"),
        _select$__experimenta = _select.__experimentalGetPreviewDeviceType,
        __experimentalGetPreviewDeviceType = _select$__experimenta === undefined ? null : _select$__experimenta;

    var deviceType = __experimentalGetPreviewDeviceType ? __experimentalGetPreviewDeviceType() : null;

    return {
        deviceType: deviceType
    };
})(edit);

/***/ }),
/* 377 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
var imageSeparatorAttrs = {
    block_id: {
        type: "string"
    },
    classMigrate: {
        type: "boolean",
        default: false
    },
    align: {
        type: "string",
        default: "center"
    },
    iconType: {
        type: "string",
        default: "image"
    },

    imageID: {
        type: "number"
    },
    imageURL: {
        type: "string",
        source: "attribute",
        attribute: "src",
        selector: ".premium-image-separator-container img"
    },
    link: {
        type: "boolean",
        default: false
    },
    url: {
        type: "string",
        default: "#"
    },
    gutter: {
        type: "number",
        default: -50
    },
    blur: {
        type: "number",
        default: "0"
    },
    bright: {
        type: "number",
        default: "100"
    },
    contrast: {
        type: "number",
        default: "100"
    },
    saturation: {
        type: "number",
        default: "100"
    },
    hue: {
        type: "number",
        default: "0"
    },
    blurHover: {
        type: "number",
        default: "0"
    },
    brightHover: {
        type: "number",
        default: "100"
    },
    contrastHover: {
        type: "number",
        default: "100"
    },
    saturationHover: {
        type: "number",
        default: "100"
    },
    hueHover: {
        type: "number",
        default: "0"
    },

    linkTarget: {
        type: "boolean",
        default: false
    },
    imgHeight: {
        type: "number",
        default: "200"
    },
    imgHeightTablet: {
        type: "number",
        default: "200"
    },
    imgHeightMobile: {
        type: "number",
        default: "200"
    },
    imgFit: {
        type: "string",
        value: 'fill'
    },
    imgMask: {
        type: 'boolean',
        default: false
    },
    imgMaskURL: {
        type: "string"

    },
    imgMaskID: {
        type: "number"
    },
    maskSize: {
        type: "string",
        default: "contain"
    },
    maskPosition: {
        type: "string",
        default: "center center"
    },
    iconStyles: {
        type: "array",
        default: [{
            iconSize: "200",
            iconSizeType: "px",
            iconSizeMobile: "200",
            iconSizeTablet: "200",
            icon: "fa fa-bars",
            iconBorderRadius: "0",
            iconBorderRadiusType: "px",
            iconBorderRadiusMobile: "0",
            iconBorderRadiusTablet: "0",
            iconColor: "#6ec1e4",
            iconBGColor: "#54595f",
            iconColorHover: '',
            iconBGColorHover: '',
            iconShadowColor: '',
            iconShadowBlur: "0",
            iconShadowHorizontal: "0",
            iconShadowVertical: "0",
            iconPadding: ".1",
            iconPaddingTablet: ".1",
            iconPaddingType: "em",
            iconPaddingMobile: ".1",
            advancedBorder: false,
            advancedBorderValue: '',
            imgHeightType: "px"
        }]
    }
};
exports.default = imageSeparatorAttrs;

/***/ }),
/* 378 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _settings = __webpack_require__(1);

var _save = __webpack_require__(379);

var _save2 = _interopRequireDefault(_save);

var _edit = __webpack_require__(380);

var _edit2 = _interopRequireDefault(_edit);

var _icons = __webpack_require__(4);

var _icons2 = _interopRequireDefault(_icons);

var _attributes = __webpack_require__(382);

var _attributes2 = _interopRequireDefault(_attributes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __ = wp.i18n.__;
var registerBlockType = wp.blocks.registerBlockType;


registerBlockType("premium/bullet-list", {
    title: __("Bullet List"),
    icon: React.createElement(_icons2.default, { icon: "bullet-list" }),
    category: "premium-blocks",
    attributes: _attributes2.default,
    supports: {
        inserter: _settings.bulletList
    },
    edit: _edit2.default,
    save: _save2.default
});

/***/ }),
/* 379 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = save;

var _classnames = __webpack_require__(0);

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Fragment = wp.element.Fragment;
var RichText = wp.blockEditor.RichText;
function save(props) {
    var attributes = props.attributes,
        className = props.className;
    var block_id = attributes.block_id,
        layoutPos = attributes.layoutPos,
        iconPosition = attributes.iconPosition,
        align = attributes.align,
        repeaterBulletList = attributes.repeaterBulletList,
        bulletAlign = attributes.bulletAlign,
        bulletIconStyles = attributes.bulletIconStyles,
        bulletIconBorderUpdated = attributes.bulletIconBorderUpdated,
        bulletIconBorderTop = attributes.bulletIconBorderTop,
        bulletIconBorderRight = attributes.bulletIconBorderRight,
        bulletIconBorderBottom = attributes.bulletIconBorderBottom,
        bulletIconBorderLeft = attributes.bulletIconBorderLeft,
        bulletIconBorderWidth = attributes.bulletIconBorderWidth,
        titleStyles = attributes.titleStyles,
        generalStyles = attributes.generalStyles,
        generalBorderWidth = attributes.generalBorderWidth,
        generalBorderTop = attributes.generalBorderTop,
        generalBorderRight = attributes.generalBorderRight,
        generalBorderBottom = attributes.generalBorderBottom,
        generalBorderLeft = attributes.generalBorderLeft,
        generalBorderUpdated = attributes.generalBorderUpdated,
        titleFont = attributes.titleFont,
        dividerStyles = attributes.dividerStyles,
        divider = attributes.divider,
        dividerStyle = attributes.dividerStyle;


    return React.createElement(
        "div",
        { className: (0, _classnames2.default)(className, "premium-bullet-list-" + block_id),
            id: "premium-bullet-list-" + block_id,
            style: {
                textAlign: align
            } },
        React.createElement("style", {
            dangerouslySetInnerHTML: {
                __html: ["#premium-bullet-list-" + block_id + " .premium-bullet-list__content-icon i:hover {", "color: " + bulletIconStyles[0].bulletIconHoverColor + " !important;", "background-color: " + bulletIconStyles[0].bulletIconHoverBackgroundColor + " !important;", "}", "#premium-bullet-list-" + block_id + " .premium-bullet-list__label-wrap .premium-bullet-list__label:hover {", "color: " + titleStyles[0].titleHoverColor + " !important;", "}", "#premium-bullet-list-" + block_id + " .premium-bullet-list__wrapper:hover {", "background-color: " + generalStyles[0].generalHoverBackgroundColor + " !important;", "box-shadow: " + generalStyles[0].generalHoverShadowHorizontal + "px " + generalStyles[0].generalHoverShadowVertical + "px " + generalStyles[0].generalHoverShadowBlur + "px " + generalStyles[0].generalHoverShadowColor + " " + generalStyles[0].generalHoverShadowPosition + " !important;", "}", "#premium-bullet-list-" + block_id + " .premium-bullet-list-divider-block:not(:last-child)::after {", "border-top-style: " + dividerStyle + ";", "border-top-color: " + dividerStyles[0].dividerColor + ";", "}", "#premium-bullet-list-" + block_id + " .premium-bullet-list-divider-inline:not(:last-child)::after {", "border-left-style: " + dividerStyle + ";", "border-left-color: " + dividerStyles[0].dividerColor + ";", "}"].join("\n")
            }
        }),
        React.createElement(
            "ul",
            { className: "premium-bullet-list-" + layoutPos + " premium-bullet-list",
                style: {
                    textAlign: align,
                    justifyContent: align == "right" ? "flex-end" : align
                } },
            repeaterBulletList.map(function (icon, index) {

                var image_icon_html = "";
                if (icon.showBulletIcon) {
                    if (icon.image_icon == "icon") {
                        if (icon.icon) {
                            image_icon_html = React.createElement(
                                "span",
                                { className: "premium-bullet-list__content-icon", key: index },
                                React.createElement("i", {
                                    className: "" + icon.icon,
                                    style: {
                                        overflow: 'hidden',
                                        color: bulletIconStyles[0].bulletIconColor,
                                        backgroundColor: bulletIconStyles[0].bulletIconBackgroundColor,
                                        borderStyle: bulletIconStyles[0].bulletIconborderType,
                                        borderWidth: bulletIconBorderUpdated ? bulletIconBorderTop + "px " + bulletIconBorderRight + "px " + bulletIconBorderBottom + "px " + bulletIconBorderLeft + "px" : bulletIconBorderWidth + "px",
                                        borderRadius: bulletIconStyles[0].bulletIconborderRadius || 0 + "px",
                                        borderColor: bulletIconStyles[0].bulletIconborderColor,
                                        verticalAlign: bulletAlign == 'flex-start' ? 'top' : bulletAlign == 'flex-end' ? 'bottom' : 'middle'
                                    }
                                })
                            );
                        }
                    } else {
                        if (icon.imageURL) {
                            image_icon_html = React.createElement("img", {
                                src: icon.imageURL,
                                key: index,
                                style: {
                                    width: '20px',
                                    height: '20px',
                                    overflow: 'hidden',
                                    borderStyle: bulletIconStyles[0].bulletIconborderType,
                                    borderWidth: bulletIconBorderUpdated ? bulletIconBorderTop + "px " + bulletIconBorderRight + "px " + bulletIconBorderBottom + "px " + bulletIconBorderLeft + "px" : bulletIconBorderWidth + "px",
                                    borderRadius: bulletIconStyles[0].bulletIconborderRadius || 0 + "px",
                                    borderColor: bulletIconStyles[0].bulletIconborderColor,
                                    verticalAlign: bulletAlign == 'flex-start' ? 'top' : bulletAlign == 'flex-end' ? 'bottom' : 'middle'
                                }
                            });
                        }
                    }
                }

                var target = icon.linkTarget ? "_blank" : "_self";
                var link_url = icon.disableLink ? icon.link : "/";

                if (!icon.disableLink) {
                    var _ref;

                    return React.createElement(
                        Fragment,
                        null,
                        React.createElement(
                            "li",
                            {
                                className: (0, _classnames2.default)("premium-bullet-list-content" + index, "premium-bullet-list__wrapper"),
                                key: index,
                                style: {
                                    textAlign: align,
                                    overflow: 'hidden',
                                    justifyContent: align == "right" ? "flex-end" : align,
                                    backgroundColor: generalStyles[0].generalBackgroundColor,
                                    borderStyle: generalStyles[0].generalborderType,
                                    borderWidth: generalBorderUpdated ? generalBorderTop + "px " + generalBorderRight + "px " + generalBorderBottom + "px " + generalBorderLeft + "px" : generalBorderWidth + "px",
                                    borderRadius: generalStyles[0].generalborderRadius || 0 + "px",
                                    borderColor: generalStyles[0].generalborderColor,
                                    boxShadow: generalStyles[0].generalShadowHorizontal + "px " + generalStyles[0].generalShadowVertical + "px " + generalStyles[0].generalShadowBlur + "px " + generalStyles[0].generalShadowColor + " " + generalStyles[0].generalShadowPosition
                                }
                            },
                            React.createElement(
                                "div",
                                { className: "premium-bullet-list__content-wrap premium-bullet-list__content-wrap-" + bulletAlign, style: {
                                        justifyContent: align == "right" ? align : align,
                                        display: iconPosition == "before" ? "flex" : "inline-flex",
                                        flexDirection: iconPosition == "top" ? align == "right" ? "column" : "column" : iconPosition == "after" ? 'row-reverse' : ""
                                    } },
                                React.createElement(
                                    "span",
                                    { className: "premium-bullet-list__icon-wrap",
                                        style: {
                                            overflow: repeaterBulletList[index].image_icon == 'image' ? "hidden" : "",
                                            alignSelf: bulletAlign == 'left' ? 'flex-start' : bulletAlign == 'right' ? 'flex-end' : 'center',
                                            textAlign: bulletAlign,
                                            justifyContent: bulletAlign,
                                            alignItems: bulletAlign == 'left' ? 'flex-start' : bulletAlign == 'right' ? 'flex-end' : 'center'
                                        }
                                    },
                                    image_icon_html
                                ),
                                React.createElement(
                                    "div",
                                    { className: "premium-bullet-list__label-wrap" },
                                    React.createElement(RichText.Content, {
                                        tagName: "span",
                                        value: repeaterBulletList[index].label,
                                        className: "premium-bullet-list__label",
                                        style: (_ref = {
                                            fontFamily: titleFont,
                                            fontWeight: titleStyles[0].titleWeight,
                                            letterSpacing: titleStyles[0].titleLetter + "px",
                                            lineHeight: titleStyles[0].titleLine + "px",
                                            fontStyle: titleStyles[0].titleStyle,
                                            textTransform: titleStyles[0].titleUpper ? "uppercase" : "none"
                                        }, _defineProperty(_ref, "fontFamily", titleStyles[0].titleFontFamily), _defineProperty(_ref, "color", titleStyles[0].titleColor), _defineProperty(_ref, "textShadow", titleStyles[0].titleshadowHorizontal + "px " + titleStyles[0].titleshadowVertical + "px " + titleStyles[0].titleshadowBlur + "px " + titleStyles[0].titleshadowColor), _ref) })
                                )
                            )
                        ),
                        divider && React.createElement("div", { className: "premium-bullet-list-divider-" + layoutPos })
                    );
                } else {
                    var _ref2;

                    return React.createElement(
                        Fragment,
                        null,
                        React.createElement(
                            "li",
                            {
                                className: (0, _classnames2.default)("premium-bullet-list-content" + index, "premium-bullet-list__wrapper"),
                                key: index,
                                style: {
                                    listStyleType: 'none',
                                    overflow: 'hidden',
                                    textAlign: align,
                                    justifyContent: align == "right" ? "flex-end" : align,
                                    backgroundColor: generalStyles[0].generalBackgroundColor,
                                    borderStyle: generalStyles[0].generalborderType,
                                    borderWidth: generalBorderUpdated ? generalBorderTop + "px " + generalBorderRight + "px " + generalBorderBottom + "px " + generalBorderLeft + "px" : generalBorderWidth + "px",
                                    borderRadius: generalStyles[0].generalborderRadius || 0 + "px",
                                    borderColor: generalStyles[0].generalborderColor,
                                    boxShadow: generalStyles[0].generalShadowHorizontal + "px " + generalStyles[0].generalShadowVertical + "px " + generalStyles[0].generalShadowBlur + "px " + generalStyles[0].generalShadowColor + " " + generalStyles[0].generalShadowPosition
                                }
                            },
                            React.createElement(
                                "a",
                                {
                                    href: link_url,
                                    target: target,
                                    rel: "noopener noreferrer"
                                },
                                React.createElement(
                                    "div",
                                    { className: "premium-bullet-list__content-wrap premium-bullet-list__content-wrap-" + bulletAlign, style: {
                                            justifyContent: align == "right" ? align : align,
                                            display: iconPosition == "before" ? "flex" : "inline-flex",
                                            flexDirection: iconPosition == "top" ? align == "right" ? "column" : "column" : iconPosition == "after" ? 'row-reverse' : ""
                                        } },
                                    React.createElement(
                                        "span",
                                        { className: "premium-bullet-list__icon-wrap",
                                            style: {
                                                overflow: repeaterBulletList[index].image_icon == 'image' ? "hidden" : "",
                                                alignSelf: bulletAlign == 'left' ? 'flex-start' : bulletAlign == 'right' ? 'flex-end' : 'center',
                                                textAlign: bulletAlign,
                                                justifyContent: bulletAlign,
                                                alignItems: bulletAlign == 'left' ? 'flex-start' : bulletAlign == 'right' ? 'flex-end' : 'center'
                                            }
                                        },
                                        image_icon_html
                                    ),
                                    React.createElement(
                                        "div",
                                        { className: "premium-bullet-list__label-wrap" },
                                        React.createElement(RichText.Content, {
                                            tagName: "span",
                                            value: repeaterBulletList[index].label,
                                            className: "premium-bullet-list__label",
                                            style: (_ref2 = {
                                                fontFamily: titleFont,
                                                fontWeight: titleStyles[0].titleWeight,
                                                letterSpacing: titleStyles[0].titleLetter + "px",
                                                lineHeight: titleStyles[0].titleLine + "px",
                                                fontStyle: titleStyles[0].titleStyle,
                                                textTransform: titleStyles[0].titleUpper ? "uppercase" : "none"
                                            }, _defineProperty(_ref2, "fontFamily", titleStyles[0].titleFontFamily), _defineProperty(_ref2, "color", titleStyles[0].titleColor), _defineProperty(_ref2, "textShadow", titleStyles[0].titleshadowHorizontal + "px " + titleStyles[0].titleshadowVertical + "px " + titleStyles[0].titleshadowBlur + "px " + titleStyles[0].titleshadowColor), _ref2) })
                                    )
                                )
                            )
                        ),
                        divider && React.createElement("div", { className: "premium-bullet-list-divider-" + layoutPos })
                    );
                }
            })
        )
    );
}

/***/ }),
/* 380 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _classnames = __webpack_require__(0);

var _classnames2 = _interopRequireDefault(_classnames);

var _reactFonticonpicker = __webpack_require__(24);

var _reactFonticonpicker2 = _interopRequireDefault(_reactFonticonpicker);

var _premiumIconsList = __webpack_require__(31);

var _premiumIconsList2 = _interopRequireDefault(_premiumIconsList);

var _premiumTypo = __webpack_require__(7);

var _premiumTypo2 = _interopRequireDefault(_premiumTypo);

var _premiumBorder = __webpack_require__(6);

var _premiumBorder2 = _interopRequireDefault(_premiumBorder);

var _ColorComponent = __webpack_require__(2);

var _ColorComponent2 = _interopRequireDefault(_ColorComponent);

var _PremiumResponsiveMargin = __webpack_require__(52);

var _PremiumResponsiveMargin2 = _interopRequireDefault(_PremiumResponsiveMargin);

var _PremiumResponsivePadding = __webpack_require__(16);

var _PremiumResponsivePadding2 = _interopRequireDefault(_PremiumResponsivePadding);

var _premiumMediaUpload = __webpack_require__(12);

var _premiumMediaUpload2 = _interopRequireDefault(_premiumMediaUpload);

var _responsiveRangeControl = __webpack_require__(19);

var _responsiveRangeControl2 = _interopRequireDefault(_responsiveRangeControl);

var _reactSortableHoc = __webpack_require__(70);

var _align = __webpack_require__(381);

var _align2 = _interopRequireDefault(_align);

var _PremiumShadow = __webpack_require__(5);

var _PremiumShadow2 = _interopRequireDefault(_PremiumShadow);

var _fontLoader = __webpack_require__(22);

var _fontLoader2 = _interopRequireDefault(_fontLoader);

var _radioControl = __webpack_require__(10);

var _radioControl2 = _interopRequireDefault(_radioControl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var withSelect = wp.data.withSelect;
var __ = wp.i18n.__;
var _wp$element = wp.element,
    Component = _wp$element.Component,
    Fragment = _wp$element.Fragment;
var _wp$blockEditor = wp.blockEditor,
    BlockControls = _wp$blockEditor.BlockControls,
    AlignmentToolbar = _wp$blockEditor.AlignmentToolbar,
    InspectorControls = _wp$blockEditor.InspectorControls,
    RichText = _wp$blockEditor.RichText;
var _wp$components = wp.components,
    PanelBody = _wp$components.PanelBody,
    SelectControl = _wp$components.SelectControl,
    Toolbar = _wp$components.Toolbar,
    TextControl = _wp$components.TextControl,
    ToggleControl = _wp$components.ToggleControl,
    Tooltip = _wp$components.Tooltip;


var ICONTYPE = [{
    label: __("Icon", 'premium-blocks-for-gutenberg'), value: "icon"
}, {
    label: __("Image", 'premium-blocks-for-gutenberg'), value: "image"
}];

var SortableItem = (0, _reactSortableHoc.SortableElement)(function (_ref) {
    var onRemove = _ref.onRemove,
        newIndex = _ref.newIndex,
        value = _ref.value,
        showContent = _ref.showContent,
        changeLabel = _ref.changeLabel,
        toggleShowBulletIcon = _ref.toggleShowBulletIcon,
        selectIconType = _ref.selectIconType,
        changeIcons = _ref.changeIcons,
        selectImage = _ref.selectImage,
        removeImage = _ref.removeImage,
        toggleIconLink = _ref.toggleIconLink,
        saveLink = _ref.saveLink,
        openLink = _ref.openLink;
    return React.createElement(
        "li",
        { tabIndex: 0, key: newIndex, style: { listStyle: 'none' } },
        React.createElement(
            "span",
            { className: "premium-bulletList__container" },
            React.createElement("span", { className: "premium-bulletList__dragHandle" }),
            React.createElement(
                "div",
                { className: "premium-bulletList__content", onClick: function onClick() {
                        return showContent(newIndex);
                    } },
                value.showBulletIcon && React.createElement("i", { className: "" + value.icon }),
                React.createElement("span", { className: "premium-bulletList__label" }),
                value.label
            ),
            React.createElement("button", { className: "premium-bulletList__trashicon fa fa-trash", onClick: function onClick() {
                    return onRemove(newIndex, value);
                } })
        ),
        value.showContent && React.createElement(
            "div",
            { className: "premium-bulletList__link" },
            React.createElement(TextControl, {
                placeholder: __("Enter " + value.label + " link"),
                value: value.label,
                onChange: function onChange(val) {
                    return changeLabel(val, newIndex);
                }
            }),
            React.createElement(ToggleControl, {
                label: __("Show Bullet"),
                checked: value.showBulletIcon,
                onChange: function onChange(value) {
                    return toggleShowBulletIcon(value, newIndex);
                }
            }),
            value.showBulletIcon && React.createElement(
                "div",
                null,
                React.createElement(SelectControl, {
                    label: __("Icon Type", 'premium-blocks-for-gutenberg'),
                    options: ICONTYPE,
                    value: value.image_icon,
                    onChange: function onChange(value) {
                        return selectIconType(value, newIndex);
                    }
                }),
                "icon" == value.image_icon && React.createElement(
                    Fragment,
                    null,
                    React.createElement(
                        "p",
                        null,
                        __("Icon", 'premium-blocks-for-gutenberg')
                    ),
                    React.createElement(_reactFonticonpicker2.default, {
                        icons: _premiumIconsList2.default,
                        value: value.icon,
                        onChange: function onChange(value) {
                            return changeIcons(value, newIndex);
                        },
                        isMulti: false,
                        appendTo: "body",
                        noSelectedPlaceholder: __("Select Icon", 'premium-blocks-for-gutenberg')
                    })
                ),
                "image" == value.image_icon && React.createElement(
                    Fragment,
                    null,
                    React.createElement(_premiumMediaUpload2.default, {
                        type: "image",
                        imageID: value.imageID,
                        imageURL: value.imageURL,
                        onSelectMedia: function onSelectMedia(media) {
                            return selectImage(media, newIndex);
                        },
                        onRemoveImage: function onRemoveImage() {
                            return removeImage(newIndex);
                        }
                    })
                )
            ),
            React.createElement("hr", null),
            React.createElement(ToggleControl, {
                label: __("Link", 'premium-blocks-for-gutenberg'),
                checked: value.disableLink,
                onChange: function onChange(value) {
                    return toggleIconLink(value, newIndex);
                }
            }),
            value.disableLink && React.createElement(
                Fragment,
                null,
                React.createElement(
                    "p",
                    null,
                    __("URL", 'premium-blocks-for-gutenberg')
                ),
                React.createElement(TextControl, {
                    value: value.link,
                    onChange: function onChange(value) {
                        return saveLink(value, newIndex);
                    },
                    placeholder: __("Enter URL")
                }),
                React.createElement(ToggleControl, {
                    label: __("Open links in new tab", 'premium-blocks-for-gutenberg'),
                    checked: value.linkTarget,
                    onChange: function onChange(value) {
                        return openLink(value, newIndex);
                    }
                })
            )
        )
    );
});

var SortableList = (0, _reactSortableHoc.SortableContainer)(function (_ref2) {
    var items = _ref2.items,
        onRemove = _ref2.onRemove,
        showContent = _ref2.showContent,
        changeLabel = _ref2.changeLabel,
        toggleShowBulletIcon = _ref2.toggleShowBulletIcon,
        selectIconType = _ref2.selectIconType,
        changeIcons = _ref2.changeIcons,
        selectImage = _ref2.selectImage,
        removeImage = _ref2.removeImage,
        toggleIconLink = _ref2.toggleIconLink,
        saveLink = _ref2.saveLink,
        openLink = _ref2.openLink;

    return React.createElement(
        "div",
        null,
        " ",
        items.map(function (value, index) {
            return React.createElement(SortableItem, { key: "item-" + value,
                index: index,
                newIndex: index,
                value: value,
                onRemove: onRemove,
                showContent: showContent,
                changeLabel: changeLabel,
                toggleShowBulletIcon: toggleShowBulletIcon,
                selectIconType: selectIconType,
                changeIcons: changeIcons,
                selectImage: selectImage,
                removeImage: removeImage,
                toggleIconLink: toggleIconLink,
                saveLink: saveLink,
                openLink: openLink,
                items: items
            });
        }),
        " "
    );
});

var edit = function (_Component) {
    _inherits(edit, _Component);

    function edit() {
        _classCallCheck(this, edit);

        return _possibleConstructorReturn(this, (edit.__proto__ || Object.getPrototypeOf(edit)).apply(this, arguments));
    }

    _createClass(edit, [{
        key: "componentDidMount",
        value: function componentDidMount() {
            if (!this.props.attributes.classMigrate) {
                this.props.setAttributes({
                    repeaterBulletList: [{
                        id: 1,
                        label: "Title #" + 1,
                        image_icon: "icon",
                        icon: "fa fa-arrow-circle-right",
                        imageURL: "",
                        imageID: '',
                        icon_color: "#6EC1E4",
                        label_color: "#6EC1E4",
                        icon_hover_color: "",
                        label_hover_color: "",
                        icon_bg_color: "",
                        icon_bg_hover_color: "",
                        item_bg_color: "",
                        item_bg_hover_color: "",
                        link: "#",
                        target: false,
                        disableLink: false,
                        showContent: false,
                        showBulletIcon: true,
                        linkTarget: false
                    }, {
                        id: 2,
                        label: "Title #" + 2,
                        image_icon: "icon",
                        icon: "fa fa-arrow-circle-right",
                        imageURL: "",
                        imageID: '',
                        icon_color: "#6EC1E4",
                        label_color: "#6EC1E4",
                        icon_hover_color: "",
                        label_hover_color: "",
                        icon_bg_color: "",
                        icon_bg_hover_color: "",
                        item_bg_color: "",
                        item_bg_hover_color: "",
                        link: "#",
                        target: false,
                        disableLink: false,
                        showContent: false,
                        showBulletIcon: true,
                        linkTarget: false
                    }, {
                        id: 3,
                        label: "Title #" + 3,
                        image_icon: "icon",
                        icon: "fa fa-arrow-circle-right",
                        imageURL: "",
                        imageID: '',
                        icon_color: "#6EC1E4",
                        label_color: "#6EC1E4",
                        icon_hover_color: "",
                        label_hover_color: "",
                        icon_bg_color: "",
                        icon_bg_hover_color: "",
                        item_bg_color: "",
                        item_bg_hover_color: "",
                        link: "#",
                        target: false,
                        disableLink: false,
                        showContent: false,
                        showBulletIcon: true,
                        linkTarget: false
                    }]
                });
            }

            // Assigning id in the attribute.
            this.props.setAttributes({ block_id: this.props.clientId });
            this.props.setAttributes({ classMigrate: true });
            this.getPreviewSize = this.getPreviewSize.bind(this);
        }
    }, {
        key: "getPreviewSize",
        value: function getPreviewSize(device, desktopSize, tabletSize, mobileSize) {
            if (device === 'Mobile') {
                if (undefined !== mobileSize && '' !== mobileSize) {
                    return mobileSize;
                } else if (undefined !== tabletSize && '' !== tabletSize) {
                    return tabletSize;
                }
            } else if (device === 'Tablet') {
                if (undefined !== tabletSize && '' !== tabletSize) {
                    return tabletSize;
                }
            }
            return desktopSize;
        }
    }, {
        key: "render",
        value: function render() {
            var _props = this.props,
                attributes = _props.attributes,
                setAttributes = _props.setAttributes,
                isSelected = _props.isSelected;
            var layoutPos = attributes.layoutPos,
                iconPosition = attributes.iconPosition,
                align = attributes.align,
                className = attributes.className,
                repeaterBulletList = attributes.repeaterBulletList,
                bulletAlign = attributes.bulletAlign,
                bulletIconStyles = attributes.bulletIconStyles,
                bulletIconBorderUpdated = attributes.bulletIconBorderUpdated,
                bulletIconBorderTop = attributes.bulletIconBorderTop,
                bulletIconBorderRight = attributes.bulletIconBorderRight,
                bulletIconBorderBottom = attributes.bulletIconBorderBottom,
                bulletIconBorderLeft = attributes.bulletIconBorderLeft,
                bulletIconBorderWidth = attributes.bulletIconBorderWidth,
                bulletIconmarginT = attributes.bulletIconmarginT,
                bulletIconmarginR = attributes.bulletIconmarginR,
                bulletIconmarginB = attributes.bulletIconmarginB,
                bulletIconmarginL = attributes.bulletIconmarginL,
                bulletIconmarginTTablet = attributes.bulletIconmarginTTablet,
                bulletIconmarginRTablet = attributes.bulletIconmarginRTablet,
                bulletIconmarginBTablet = attributes.bulletIconmarginBTablet,
                bulletIconmarginLTablet = attributes.bulletIconmarginLTablet,
                bulletIconmarginTMobile = attributes.bulletIconmarginTMobile,
                bulletIconmarginRMobile = attributes.bulletIconmarginRMobile,
                bulletIconmarginBMobile = attributes.bulletIconmarginBMobile,
                bulletIconmarginLMobile = attributes.bulletIconmarginLMobile,
                bulletIconpaddingTop = attributes.bulletIconpaddingTop,
                bulletIconpaddingRight = attributes.bulletIconpaddingRight,
                bulletIconpaddingBottom = attributes.bulletIconpaddingBottom,
                bulletIconpaddingLeft = attributes.bulletIconpaddingLeft,
                bulletIconpaddingTTablet = attributes.bulletIconpaddingTTablet,
                bulletIconpaddingRTablet = attributes.bulletIconpaddingRTablet,
                bulletIconpaddingBTablet = attributes.bulletIconpaddingBTablet,
                bulletIconpaddingLTablet = attributes.bulletIconpaddingLTablet,
                bulletIconpaddingTMobile = attributes.bulletIconpaddingTMobile,
                bulletIconpaddingRMobile = attributes.bulletIconpaddingRMobile,
                bulletIconpaddingBMobile = attributes.bulletIconpaddingBMobile,
                bulletIconpaddingLMobile = attributes.bulletIconpaddingLMobile,
                titleStyles = attributes.titleStyles,
                titlemarginT = attributes.titlemarginT,
                titlemarginR = attributes.titlemarginR,
                titlemarginB = attributes.titlemarginB,
                titlemarginL = attributes.titlemarginL,
                titlemarginTTablet = attributes.titlemarginTTablet,
                titlemarginRTablet = attributes.titlemarginRTablet,
                titlemarginBTablet = attributes.titlemarginBTablet,
                titlemarginLTablet = attributes.titlemarginLTablet,
                titlemarginTMobile = attributes.titlemarginTMobile,
                titlemarginRMobile = attributes.titlemarginRMobile,
                titlemarginBMobile = attributes.titlemarginBMobile,
                titlemarginLMobile = attributes.titlemarginLMobile,
                generalStyles = attributes.generalStyles,
                generalBorderWidth = attributes.generalBorderWidth,
                generalBorderTop = attributes.generalBorderTop,
                generalBorderRight = attributes.generalBorderRight,
                generalBorderBottom = attributes.generalBorderBottom,
                generalBorderLeft = attributes.generalBorderLeft,
                generalBorderUpdated = attributes.generalBorderUpdated,
                generalmarginT = attributes.generalmarginT,
                generalmarginR = attributes.generalmarginR,
                generalmarginB = attributes.generalmarginB,
                generalmarginL = attributes.generalmarginL,
                generalmarginTTablet = attributes.generalmarginTTablet,
                generalmarginRTablet = attributes.generalmarginRTablet,
                generalmarginBTablet = attributes.generalmarginBTablet,
                generalmarginLTablet = attributes.generalmarginLTablet,
                generalmarginTMobile = attributes.generalmarginTMobile,
                generalmarginRMobile = attributes.generalmarginRMobile,
                generalmarginBMobile = attributes.generalmarginBMobile,
                generalmarginLMobile = attributes.generalmarginLMobile,
                generalpaddingTop = attributes.generalpaddingTop,
                generalpaddingRight = attributes.generalpaddingRight,
                generalpaddingBottom = attributes.generalpaddingBottom,
                generalpaddingLeft = attributes.generalpaddingLeft,
                generalpaddingTTablet = attributes.generalpaddingTTablet,
                generalpaddingRTablet = attributes.generalpaddingRTablet,
                generalpaddingBTablet = attributes.generalpaddingBTablet,
                generalpaddingLTablet = attributes.generalpaddingLTablet,
                generalpaddingTMobile = attributes.generalpaddingTMobile,
                generalpaddingRMobile = attributes.generalpaddingRMobile,
                generalpaddingBMobile = attributes.generalpaddingBMobile,
                generalpaddingLMobile = attributes.generalpaddingLMobile,
                titleFont = attributes.titleFont,
                divider = attributes.divider,
                dividerStyle = attributes.dividerStyle,
                dividerStyles = attributes.dividerStyles;


            var LAYOUT = [{
                label: __("Block", 'premium-blocks-for-gutenberg'),
                value: "block"
            }, {
                label: __("Inline", 'premium-blocks-for-gutenberg'),
                value: "inline"
            }];

            var POSITION = [{
                label: __("After", 'premium-blocks-for-gutenberg'),
                value: "after"
            }, {
                label: __("Before", 'premium-blocks-for-gutenberg'),
                value: "before"
            }, {
                label: __("Top", 'premium-blocks-for-gutenberg'),
                value: "top"
            }];

            var DividerStyle = [{
                label: __("Solid", 'premium-blocks-for-gutenberg'),
                value: "solid"
            }, {
                label: __("Double", 'premium-blocks-for-gutenberg'),
                value: "double"
            }, {
                label: __("Dotted", 'premium-blocks-for-gutenberg'),
                value: "dotted"
            }, {
                label: __("Dashed", 'premium-blocks-for-gutenberg'),
                value: "dashed"
            }, {
                label: __("Groove", 'premium-blocks-for-gutenberg'),
                value: "groove"
            }];

            var ALIGNS = ["left", "center", "right"];

            var BulletIconSize = this.getPreviewSize(this.props.deviceType, bulletIconStyles[0].bulletListfontSize, bulletIconStyles[0].bulletListfontSizeTablet, bulletIconStyles[0].bulletListfontSizeMobile);
            var BulletIconMarginTop = this.getPreviewSize(this.props.deviceType, bulletIconmarginT, bulletIconmarginTTablet, bulletIconmarginTMobile);
            var BulletIconMarginRight = this.getPreviewSize(this.props.deviceType, bulletIconmarginR, bulletIconmarginRTablet, bulletIconmarginRMobile);
            var BulletIconMarginBottom = this.getPreviewSize(this.props.deviceType, bulletIconmarginB, bulletIconmarginBTablet, bulletIconmarginBMobile);
            var BulletIconMarginLeft = this.getPreviewSize(this.props.deviceType, bulletIconmarginL, bulletIconmarginLTablet, bulletIconmarginLMobile);
            var BulletIconPaddingTop = this.getPreviewSize(this.props.deviceType, bulletIconpaddingTop, bulletIconpaddingTTablet, bulletIconpaddingTMobile);
            var BulletIconPaddingRight = this.getPreviewSize(this.props.deviceType, bulletIconpaddingRight, bulletIconpaddingRTablet, bulletIconpaddingRMobile);
            var BulletIconPaddingBottom = this.getPreviewSize(this.props.deviceType, bulletIconpaddingBottom, bulletIconpaddingBTablet, bulletIconpaddingBMobile);
            var BulletIconPaddingLeft = this.getPreviewSize(this.props.deviceType, bulletIconpaddingLeft, bulletIconpaddingLTablet, bulletIconpaddingLMobile);
            var TitleSize = this.getPreviewSize(this.props.deviceType, titleStyles[0].titleSize, titleStyles[0].titlefontSizeTablet, titleStyles[0].titlefontSizeMobile);
            var TitleMarginTop = this.getPreviewSize(this.props.deviceType, titlemarginT, titlemarginTTablet, titlemarginTMobile);
            var TitleMarginRight = this.getPreviewSize(this.props.deviceType, titlemarginR, titlemarginRTablet, titlemarginRMobile);
            var TitleMarginBottom = this.getPreviewSize(this.props.deviceType, titlemarginB, titlemarginBTablet, titlemarginBMobile);
            var TitleMarginLeft = this.getPreviewSize(this.props.deviceType, titlemarginL, titlemarginLTablet, titlemarginLMobile);
            var GeneralMarginTop = this.getPreviewSize(this.props.deviceType, generalmarginT, generalmarginTTablet, generalmarginTMobile);
            var GeneralMarginRight = this.getPreviewSize(this.props.deviceType, generalmarginR, generalmarginRTablet, generalmarginRMobile);
            var GeneralMarginBottom = this.getPreviewSize(this.props.deviceType, generalmarginB, generalmarginBTablet, generalmarginBMobile);
            var GeneralMarginLeft = this.getPreviewSize(this.props.deviceType, generalmarginL, generalmarginLTablet, generalmarginLMobile);
            var GeneralPaddingTop = this.getPreviewSize(this.props.deviceType, generalpaddingTop, generalpaddingTTablet, generalpaddingTMobile);
            var GeneralPaddingRight = this.getPreviewSize(this.props.deviceType, generalpaddingRight, generalpaddingRTablet, generalpaddingRMobile);
            var GeneralPaddingBottom = this.getPreviewSize(this.props.deviceType, generalpaddingBottom, generalpaddingBTablet, generalpaddingBMobile);
            var GeneralPaddingLeft = this.getPreviewSize(this.props.deviceType, generalpaddingLeft, generalpaddingLTablet, generalpaddingLMobile);
            var DividerWidth = this.getPreviewSize(this.props.deviceType, dividerStyles[0].dividerWidth, dividerStyles[0].dividerWidthTablet, dividerStyles[0].dividerWidthMobile);
            var DividerHeight = this.getPreviewSize(this.props.deviceType, dividerStyles[0].dividerHeight, dividerStyles[0].dividerHeightTablet, dividerStyles[0].dividerHeightMobile);

            var addNewBulletList = function addNewBulletList() {
                var cloneIcons = [].concat(_toConsumableArray(repeaterBulletList));
                cloneIcons.push({
                    id: cloneIcons.length + 1,
                    label: "Title ",
                    image_icon: "icon",
                    icon: "fa fa-arrow-circle-right",
                    imageURL: "",
                    imageID: '',
                    icon_color: "#6EC1E4",
                    label_color: "#6EC1E4",
                    icon_hover_color: "",
                    label_hover_color: "",
                    icon_bg_color: "",
                    icon_bg_hover_color: "",
                    item_bg_color: "",
                    item_bg_hover_color: "",
                    link: "#",
                    target: false,
                    disableLink: false,
                    showContent: false,
                    showBulletIcon: true,
                    linkTarget: false
                });
                setAttributes({ repeaterBulletList: cloneIcons });
            };

            var _onRemove = function _onRemove(index, item) {
                var array = repeaterBulletList.map(function (bulletList, currIndex) {
                    return bulletList;
                }).filter(function (f, i) {
                    return i != index;
                });

                var active = array.map(function (arr, index) {
                    return arr.default;
                }).filter(function (f, i) {
                    return f != false;
                });
                if (active.length == 0) {}
                // setAttributes({ tabIndex: index })

                // activeTab(index == 0 ? index : index - 1)
                setAttributes({
                    repeaterBulletList: array
                });
            };

            var onRepeaterChange = function onRepeaterChange(attr, value, index) {
                var items = repeaterBulletList;
                return items.map(function (item, currIndex) {
                    if (index == currIndex) {
                        item[attr] = value;
                    }
                    return item;
                });
            };

            var _showContent = function _showContent(index, item) {
                return repeaterBulletList.map(function (item, i) {
                    if (index == i) {
                        setAttributes({
                            repeatertabs: onRepeaterChange("showContent", item.showContent ? false : true, index)
                        });
                    } else {
                        setAttributes({
                            repeaterBulletList: onRepeaterChange("showContent", false, i)
                        });
                    }
                });
            };

            var _changeLabel = function _changeLabel(item, index) {
                setAttributes({
                    repeaterBulletList: onRepeaterChange("label", item, index)
                });
            };

            var _toggleShowBulletIcon = function _toggleShowBulletIcon(value, index) {
                setAttributes({
                    repeaterBulletList: onRepeaterChange("showBulletIcon", value, index)
                });
            };

            var _selectIconType = function _selectIconType(value, index) {
                setAttributes({
                    repeaterBulletList: onRepeaterChange("image_icon", value, index)
                });
            };

            var _changeIcons = function _changeIcons(value, index) {
                setAttributes({
                    repeaterBulletList: onRepeaterChange("icon", value, index)
                });
            };

            var _selectImage = function _selectImage(value, index) {
                setAttributes(_defineProperty({
                    repeaterBulletList: onRepeaterChange("imageURL", value.url, index)
                }, "repeaterBulletList", onRepeaterChange("imageID", value.id, index)));
            };

            var _removeImage = function _removeImage(index) {
                setAttributes(_defineProperty({
                    repeaterBulletList: onRepeaterChange("imageURL", '', index)
                }, "repeaterBulletList", onRepeaterChange("imageID", '', index)));
            };

            var _toggleIconLink = function _toggleIconLink(value, index) {
                setAttributes({
                    repeaterBulletList: onRepeaterChange("disableLink", value, index)
                });
            };

            var _saveLink = function _saveLink(value, index) {
                setAttributes({
                    repeaterBulletList: onRepeaterChange("link", value, index)
                });
            };

            var _openLink = function _openLink(value, index) {
                setAttributes({
                    repeaterBulletList: onRepeaterChange("linkTarget", value, index)
                });
            };

            var onSortEndSingle = function onSortEndSingle(_ref3) {
                var oldIndex = _ref3.oldIndex,
                    newIndex = _ref3.newIndex;

                var arrayItem = repeaterBulletList.map(function (cont) {
                    return cont;
                });
                var array = (0, _reactSortableHoc.arrayMove)(arrayItem, oldIndex, newIndex);
                setAttributes({
                    repeaterBulletList: array
                });
            };

            var shouldCancelStart = function shouldCancelStart(e) {
                // Prevent sorting from being triggered if target is input or button
                if (['button', 'div', 'input', 'i', 'select', 'option'].indexOf(e.target.tagName.toLowerCase()) !== -1) {
                    return true; // Return true to cancel sorting
                }
            };

            var saveBulletIconStyles = function saveBulletIconStyles(value) {
                var newUpdate = bulletIconStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({
                    bulletIconStyles: newUpdate
                });
            };

            var saveTitleStyles = function saveTitleStyles(value) {
                var newUpdate = titleStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({
                    titleStyles: newUpdate
                });
            };

            var saveGeneralStyles = function saveGeneralStyles(value) {
                var newUpdate = generalStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({
                    generalStyles: newUpdate
                });
            };

            var saveDividerStyles = function saveDividerStyles(value) {
                var newUpdate = dividerStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({
                    dividerStyles: newUpdate
                });
            };

            var mainClasses = (0, _classnames2.default)(className, "premium-bullet-list");

            var loadTitleGoogleFonts = void 0;

            if (titleStyles[0].titleFontFamily !== "Default") {
                var titleConfig = {
                    google: {
                        families: [titleStyles[0].titleFontFamily]
                    }
                };
                loadTitleGoogleFonts = React.createElement(_fontLoader2.default, { config: titleConfig });
            }
            return [isSelected && React.createElement(
                BlockControls,
                null,
                React.createElement(AlignmentToolbar, {
                    value: align,
                    onChange: function onChange(value) {
                        setAttributes({ align: value });
                    }
                })
            ), isSelected && React.createElement(
                InspectorControls,
                null,
                React.createElement(
                    PanelBody,
                    {
                        title: __("General Settings"),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(SortableList, {
                        items: repeaterBulletList,
                        onSortEnd: function onSortEnd(o, n) {
                            return onSortEndSingle(o, n);
                        },
                        onRemove: function onRemove(value) {
                            return _onRemove(value);
                        },
                        showContent: function showContent(value, i) {
                            return _showContent(value, i);
                        },
                        changeLabel: function changeLabel(value, i) {
                            return _changeLabel(value, i);
                        },
                        toggleShowBulletIcon: function toggleShowBulletIcon(value, i) {
                            return _toggleShowBulletIcon(value, i);
                        },
                        selectIconType: function selectIconType(value, i) {
                            return _selectIconType(value, i);
                        },
                        changeIcons: function changeIcons(value, i) {
                            return _changeIcons(value, i);
                        },
                        selectImage: function selectImage(value, i) {
                            return _selectImage(value, i);
                        },
                        removeImage: function removeImage(value, i) {
                            return _removeImage(value, i);
                        },
                        toggleIconLink: function toggleIconLink(value, i) {
                            return _toggleIconLink(value, i);
                        },
                        saveLink: function saveLink(value, i) {
                            return _saveLink(value, i);
                        },
                        openLink: function openLink(value, i) {
                            return _openLink(value, i);
                        },
                        shouldCancelStart: shouldCancelStart
                    }),
                    React.createElement(
                        "div",
                        { className: "premium-bullet-list-btn__wrap" },
                        React.createElement(
                            "button",
                            {
                                className: "premium-bullet-list-btn",
                                onClick: function onClick() {
                                    return addNewBulletList();
                                }
                            },
                            React.createElement("i", { className: "dashicons dashicons-plus premium-bullet-list-icon" }),
                            __("Add New Item")
                        )
                    )
                ),
                React.createElement(
                    PanelBody,
                    {
                        title: __("Display Options"),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(SelectControl, {
                        label: __("Layout Type"),
                        options: LAYOUT,
                        value: layoutPos,
                        onChange: function onChange(newValue) {
                            return setAttributes({ layoutPos: newValue });
                        }
                    }),
                    React.createElement(SelectControl, {
                        label: __("Bullet Position"),
                        options: POSITION,
                        value: iconPosition,
                        onChange: function onChange(newValue) {
                            return setAttributes({ iconPosition: newValue });
                        }
                    }),
                    React.createElement(
                        "div",
                        null,
                        React.createElement(
                            "label",
                            null,
                            __('Bullet Alignment')
                        ),
                        iconPosition !== 'top' ? React.createElement(
                            "div",
                            { className: "bullet-list-button-list" },
                            React.createElement(
                                Tooltip,
                                { text: __('Top') },
                                React.createElement(
                                    "button",
                                    {
                                        onClick: function onClick() {
                                            return setAttributes({ bulletAlign: 'flex-start' });
                                        },
                                        className: "bullet-list-button" + (bulletAlign === 'flex-start' ? ' active' : '')
                                    },
                                    _align2.default.vertical_top
                                )
                            ),
                            React.createElement(
                                Tooltip,
                                { text: __('Middle') },
                                React.createElement(
                                    "button",
                                    {
                                        onClick: function onClick() {
                                            return setAttributes({ bulletAlign: 'center' });
                                        },
                                        className: "bullet-list-button" + (bulletAlign === 'center' ? ' active' : '')
                                    },
                                    _align2.default.vertical_middle
                                )
                            ),
                            React.createElement(
                                Tooltip,
                                { text: __('Bottom') },
                                React.createElement(
                                    "button",
                                    {
                                        onClick: function onClick() {
                                            return setAttributes({ bulletAlign: 'flex-end' });
                                        },
                                        className: "bullet-list-button" + (bulletAlign === 'flex-end' ? ' active' : '')
                                    },
                                    _align2.default.vertical_bottom
                                )
                            )
                        ) : React.createElement(_radioControl2.default, {
                            choices: ALIGNS,
                            value: bulletAlign,
                            onChange: function onChange(newValue) {
                                return setAttributes({ bulletAlign: newValue });
                            },
                            label: __("", 'premium-blocks-for-gutenberg')
                        })
                    ),
                    React.createElement("hr", null),
                    React.createElement(ToggleControl, {
                        label: __("Divider"),
                        checked: divider,
                        onChange: function onChange(value) {
                            return setAttributes({ divider: value });
                        }
                    })
                ),
                React.createElement(
                    PanelBody,
                    {
                        title: __("General Style"),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(
                        "div",
                        { className: "premium-control-toggle" },
                        React.createElement(_ColorComponent2.default, {
                            label: __("Background Color", 'premium-block-for-gutenberg'),
                            colorValue: generalStyles[0].generalBackgroundColor,
                            colorDefault: '',
                            onColorChange: function onColorChange(newValue) {
                                return saveGeneralStyles({
                                    generalBackgroundColor: newValue
                                });
                            }
                        })
                    ),
                    React.createElement(
                        "div",
                        { className: "premium-control-toggle" },
                        React.createElement(_ColorComponent2.default, {
                            label: __("Background Hover Color", 'premium-block-for-gutenberg'),
                            colorValue: generalStyles[0].generalHoverBackgroundColor,
                            colorDefault: '',
                            onColorChange: function onColorChange(newValue) {
                                return saveGeneralStyles({
                                    generalHoverBackgroundColor: newValue
                                });
                            }
                        })
                    ),
                    React.createElement(_PremiumShadow2.default, {
                        label: __("Box Shadow", 'premium-blocks-for-gutenberg'),
                        boxShadow: true,
                        color: generalStyles[0].generalShadowColor,
                        blur: generalStyles[0].generalShadowBlur,
                        horizontal: generalStyles[0].generalShadowHorizontal,
                        vertical: generalStyles[0].generalShadowVertical,
                        position: generalStyles[0].generalShadowPosition,
                        onChangeColor: function onChangeColor(newColor) {
                            return saveGeneralStyles({ generalShadowColor: newColor === undefined ? "transparent" : newColor });
                        },
                        onChangeBlur: function onChangeBlur(newBlur) {
                            return saveGeneralStyles({ generalShadowBlur: newBlur === undefined ? 0 : newBlur });
                        },
                        onChangehHorizontal: function onChangehHorizontal(newValue) {
                            return saveGeneralStyles({ generalShadowHorizontal: newValue === undefined ? 0 : newValue });
                        },
                        onChangeVertical: function onChangeVertical(newValue) {
                            return saveGeneralStyles({ generalShadowVertical: newValue === undefined ? 0 : newValue });
                        },
                        onChangePosition: function onChangePosition(newValue) {
                            return saveGeneralStyles({ generalShadowPosition: newValue === undefined ? 0 : newValue });
                        }
                    }),
                    React.createElement(_PremiumShadow2.default, {
                        label: __("Hover Box Shadow", 'premium-blocks-for-gutenberg'),
                        boxShadow: true,
                        color: generalStyles[0].generalHoverShadowColor,
                        blur: generalStyles[0].generalHoverShadowBlur,
                        horizontal: generalStyles[0].generalHoverShadowHorizontal,
                        vertical: generalStyles[0].generalHoverShadowVertical,
                        position: generalStyles[0].generalHoverShadowPosition,
                        onChangeColor: function onChangeColor(newColor) {
                            return saveGeneralStyles({ generalHoverShadowColor: newColor === undefined ? "transparent" : newColor });
                        },
                        onChangeBlur: function onChangeBlur(newBlur) {
                            return saveGeneralStyles({ generalHoverShadowBlur: newBlur === undefined ? 0 : newBlur });
                        },
                        onChangehHorizontal: function onChangehHorizontal(newValue) {
                            return saveGeneralStyles({ generalHoverShadowHorizontal: newValue === undefined ? 0 : newValue });
                        },
                        onChangeVertical: function onChangeVertical(newValue) {
                            return saveGeneralStyles({ generalHoverShadowVertical: newValue === undefined ? 0 : newValue });
                        },
                        onChangePosition: function onChangePosition(newValue) {
                            return saveGeneralStyles({ generalHoverShadowPosition: newValue === undefined ? 0 : newValue });
                        }
                    }),
                    React.createElement(_premiumBorder2.default, {
                        borderType: generalStyles[0].generalborderType,
                        borderWidth: generalBorderWidth,
                        top: generalBorderTop,
                        right: generalBorderRight,
                        bottom: generalBorderBottom,
                        left: generalBorderLeft,
                        borderColor: generalStyles[0].generalborderColor,
                        borderRadius: generalStyles[0].generalborderRadius,
                        onChangeType: function onChangeType(newType) {
                            return saveGeneralStyles({ generalborderType: newType });
                        },
                        onChangeWidth: function onChangeWidth(_ref4) {
                            var top = _ref4.top,
                                right = _ref4.right,
                                bottom = _ref4.bottom,
                                left = _ref4.left;
                            return setAttributes({
                                generalBorderUpdated: true,
                                generalBorderTop: top,
                                generalBorderRight: right,
                                generalBorderBottom: bottom,
                                generalBorderLeft: left
                            });
                        },
                        onChangeColor: function onChangeColor(colorValue) {
                            return saveGeneralStyles({ generalborderColor: colorValue });
                        },
                        onChangeRadius: function onChangeRadius(newrRadius) {
                            return saveGeneralStyles({ generalborderRadius: newrRadius });
                        }
                    }),
                    React.createElement(_PremiumResponsiveMargin2.default, {
                        directions: ["all"],
                        marginTop: generalmarginT,
                        marginRight: generalmarginR,
                        marginBottom: generalmarginB,
                        marginLeft: generalmarginL,
                        marginTopTablet: generalmarginTTablet,
                        marginRightTablet: generalmarginRTablet,
                        marginBottomTablet: generalmarginBTablet,
                        marginLeftTablet: generalmarginLTablet,
                        marginTopMobile: generalmarginTMobile,
                        marginRightMobile: generalmarginRMobile,
                        marginBottomMobile: generalmarginBMobile,
                        marginLeftMobile: generalmarginLMobile,
                        showUnits: true,
                        onChangeMarSizeUnit: function onChangeMarSizeUnit(newvalue) {
                            return saveGeneralStyles({ generalmarginType: newvalue });
                        },
                        selectedUnit: generalStyles[0].generalmarginType,
                        onChangeMarginTop: function onChangeMarginTop(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ generalmarginT: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ generalmarginTTablet: newValue });
                            } else {
                                setAttributes({ generalmarginTMobile: newValue });
                            }
                        },
                        onChangeMarginRight: function onChangeMarginRight(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ generalmarginR: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ generalmarginRTablet: newValue });
                            } else {
                                setAttributes({ generalmarginRMobile: newValue });
                            }
                        },
                        onChangeMarginBottom: function onChangeMarginBottom(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ generalmarginB: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ generalmarginBTablet: newValue });
                            } else {
                                setAttributes({ generalmarginBMobile: newValue });
                            }
                        },
                        onChangeMarginLeft: function onChangeMarginLeft(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ generalmarginL: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ generalmarginLTablet: newValue });
                            } else {
                                setAttributes({ generalmarginLMobile: newValue });
                            }
                        }

                    }),
                    React.createElement(_PremiumResponsivePadding2.default, {
                        paddingTop: generalpaddingTop,
                        paddingRight: generalpaddingRight,
                        paddingBottom: generalpaddingBottom,
                        paddingLeft: generalpaddingLeft,
                        paddingTopTablet: generalpaddingTTablet,
                        paddingRightTablet: generalpaddingRTablet,
                        paddingBottomTablet: generalpaddingBTablet,
                        paddingLeftTablet: generalpaddingLTablet,
                        paddingTopMobile: generalpaddingTMobile,
                        paddingRightMobile: generalpaddingRMobile,
                        paddingBottomMobile: generalpaddingBMobile,
                        paddingLeftMobile: generalpaddingLMobile,
                        showUnits: true,
                        selectedUnit: generalStyles[0].generalpaddingUnit,
                        onChangePadSizeUnit: function onChangePadSizeUnit(newvalue) {
                            return saveGeneralStyles({ generalpaddingUnit: newvalue });
                        },
                        onChangePaddingTop: function onChangePaddingTop(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ generalpaddingTop: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ generalpaddingTTablet: newValue });
                            } else {
                                setAttributes({ generalpaddingTMobile: newValue });
                            }
                        },
                        onChangePaddingRight: function onChangePaddingRight(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ generalpaddingRight: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ generalpaddingRTablet: newValue });
                            } else {
                                setAttributes({ generalpaddingRMobile: newValue });
                            }
                        },
                        onChangePaddingBottom: function onChangePaddingBottom(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ generalpaddingBottom: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ generalpaddingBTablet: newValue });
                            } else {
                                setAttributes({ generalpaddingBMobile: newValue });
                            }
                        },
                        onChangePaddingLeft: function onChangePaddingLeft(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ generalpaddingLeft: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ generalpaddingLTablet: newValue });
                            } else {
                                setAttributes({ generalpaddingLMobile: newValue });
                            }
                        }
                    })
                ),
                React.createElement(
                    PanelBody,
                    {
                        title: __("Bullet Style"),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(_responsiveRangeControl2.default, {
                        label: __("Size", 'premium-block-for-gutenberg'),
                        value: bulletIconStyles[0].bulletListfontSize,
                        tabletValue: bulletIconStyles[0].bulletListfontSizeTablet,
                        mobileValue: bulletIconStyles[0].bulletListfontSizeMobile,
                        onChange: function onChange(value) {
                            return saveBulletIconStyles({ bulletListfontSize: value });
                        },
                        onChangeTablet: function onChangeTablet(value) {
                            return saveBulletIconStyles({ bulletListfontSizeTablet: value });
                        },
                        onChangeMobile: function onChangeMobile(value) {
                            return saveBulletIconStyles({ bulletListfontSizeMobile: value });
                        },
                        onChangeUnit: function onChangeUnit(key) {
                            return saveBulletIconStyles({ bulletListfontSizeType: key });
                        },
                        unit: bulletIconStyles[0].bulletListfontSizeType,
                        showUnit: true,
                        defaultValue: 20,
                        min: 1,
                        max: 100
                    }),
                    React.createElement(_ColorComponent2.default, {
                        label: __("Color", 'premium-block-for-gutenberg'),
                        colorValue: bulletIconStyles[0].bulletIconColor,
                        colorDefault: '',
                        onColorChange: function onColorChange(newValue) {
                            return saveBulletIconStyles({
                                bulletIconColor: newValue
                            });
                        }
                    }),
                    React.createElement(_ColorComponent2.default, {
                        label: __("Hover Color", 'premium-block-for-gutenberg'),
                        colorValue: bulletIconStyles[0].bulletIconHoverColor,
                        colorDefault: '',
                        onColorChange: function onColorChange(newValue) {
                            return saveBulletIconStyles({
                                bulletIconHoverColor: newValue
                            });
                        }
                    }),
                    React.createElement(_ColorComponent2.default, {
                        label: __("Background Color", 'premium-block-for-gutenberg'),
                        colorValue: bulletIconStyles[0].bulletIconBackgroundColor,
                        colorDefault: '',
                        onColorChange: function onColorChange(newValue) {
                            return saveBulletIconStyles({
                                bulletIconBackgroundColor: newValue
                            });
                        }
                    }),
                    React.createElement(_ColorComponent2.default, {
                        label: __("Hover Background Color", 'premium-block-for-gutenberg'),
                        colorValue: bulletIconStyles[0].bulletIconHoverBackgroundColor,
                        colorDefault: '',
                        onColorChange: function onColorChange(newValue) {
                            return saveBulletIconStyles({
                                bulletIconHoverBackgroundColor: newValue
                            });
                        }
                    }),
                    React.createElement(_premiumBorder2.default, {
                        borderType: bulletIconStyles[0].bulletIconborderType,
                        borderWidth: bulletIconBorderWidth,
                        top: bulletIconBorderTop,
                        right: bulletIconBorderRight,
                        bottom: bulletIconBorderBottom,
                        left: bulletIconBorderLeft,
                        borderColor: bulletIconStyles[0].bulletIconborderColor,
                        borderRadius: bulletIconStyles[0].bulletIconborderRadius,
                        onChangeType: function onChangeType(newType) {
                            return saveBulletIconStyles({ bulletIconborderType: newType });
                        },
                        onChangeWidth: function onChangeWidth(_ref5) {
                            var top = _ref5.top,
                                right = _ref5.right,
                                bottom = _ref5.bottom,
                                left = _ref5.left;
                            return setAttributes({
                                bulletIconBorderUpdated: true,
                                bulletIconBorderTop: top,
                                bulletIconBorderRight: right,
                                bulletIconBorderBottom: bottom,
                                bulletIconBorderLeft: left
                            });
                        },
                        onChangeColor: function onChangeColor(colorValue) {
                            return saveBulletIconStyles({ bulletIconborderColor: colorValue });
                        },
                        onChangeRadius: function onChangeRadius(newrRadius) {
                            return saveBulletIconStyles({ bulletIconborderRadius: newrRadius });
                        }
                    }),
                    React.createElement(_PremiumResponsiveMargin2.default, {
                        directions: ["all"],
                        marginTop: bulletIconmarginT,
                        marginRight: bulletIconmarginR,
                        marginBottom: bulletIconmarginB,
                        marginLeft: bulletIconmarginL,
                        marginTopTablet: bulletIconmarginTTablet,
                        marginRightTablet: bulletIconmarginRTablet,
                        marginBottomTablet: bulletIconmarginBTablet,
                        marginLeftTablet: bulletIconmarginLTablet,
                        marginTopMobile: bulletIconmarginTMobile,
                        marginRightMobile: bulletIconmarginRMobile,
                        marginBottomMobile: bulletIconmarginBMobile,
                        marginLeftMobile: bulletIconmarginLMobile,
                        showUnits: true,
                        onChangeMarSizeUnit: function onChangeMarSizeUnit(newvalue) {
                            return saveBulletIconStyles({ bulletIconmarginType: newvalue });
                        },
                        selectedUnit: bulletIconStyles[0].bulletIconmarginType,
                        onChangeMarginTop: function onChangeMarginTop(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ bulletIconmarginT: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ bulletIconmarginTTablet: newValue });
                            } else {
                                setAttributes({ bulletIconmarginTMobile: newValue });
                            }
                        },
                        onChangeMarginRight: function onChangeMarginRight(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ bulletIconmarginR: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ bulletIconmarginRTablet: newValue });
                            } else {
                                setAttributes({ bulletIconmarginRMobile: newValue });
                            }
                        },
                        onChangeMarginBottom: function onChangeMarginBottom(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ bulletIconmarginB: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ bulletIconmarginBTablet: newValue });
                            } else {
                                setAttributes({ bulletIconmarginBMobile: newValue });
                            }
                        },
                        onChangeMarginLeft: function onChangeMarginLeft(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ bulletIconmarginL: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ bulletIconmarginLTablet: newValue });
                            } else {
                                setAttributes({ bulletIconmarginLMobile: newValue });
                            }
                        }

                    }),
                    React.createElement(_PremiumResponsivePadding2.default, {
                        paddingTop: bulletIconpaddingTop,
                        paddingRight: bulletIconpaddingRight,
                        paddingBottom: bulletIconpaddingBottom,
                        paddingLeft: bulletIconpaddingLeft,
                        paddingTopTablet: bulletIconpaddingTTablet,
                        paddingRightTablet: bulletIconpaddingRTablet,
                        paddingBottomTablet: bulletIconpaddingBTablet,
                        paddingLeftTablet: bulletIconpaddingLTablet,
                        paddingTopMobile: bulletIconpaddingTMobile,
                        paddingRightMobile: bulletIconpaddingRMobile,
                        paddingBottomMobile: bulletIconpaddingBMobile,
                        paddingLeftMobile: bulletIconpaddingLMobile,
                        showUnits: true,
                        selectedUnit: bulletIconStyles[0].bulletIconpaddingUnit,
                        onChangePadSizeUnit: function onChangePadSizeUnit(newvalue) {
                            return saveBulletIconStyles({ bulletIconpaddingUnit: newvalue });
                        },
                        onChangePaddingTop: function onChangePaddingTop(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ bulletIconpaddingTop: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ bulletIconpaddingTTablet: newValue });
                            } else {
                                setAttributes({ bulletIconpaddingTMobile: newValue });
                            }
                        },
                        onChangePaddingRight: function onChangePaddingRight(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ bulletIconpaddingRight: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ bulletIconpaddingRTablet: newValue });
                            } else {
                                setAttributes({ bulletIconpaddingRMobile: newValue });
                            }
                        },
                        onChangePaddingBottom: function onChangePaddingBottom(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ bulletIconpaddingBottom: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ bulletIconpaddingBTablet: newValue });
                            } else {
                                setAttributes({ bulletIconpaddingBMobile: newValue });
                            }
                        },
                        onChangePaddingLeft: function onChangePaddingLeft(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ bulletIconpaddingLeft: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ bulletIconpaddingLTablet: newValue });
                            } else {
                                setAttributes({ bulletIconpaddingLMobile: newValue });
                            }
                        }
                    })
                ),
                React.createElement(
                    PanelBody,
                    {
                        title: __("Title Style"),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(_premiumTypo2.default, {
                        components: ["responsiveSize", "weight", "line", "style", "upper", "spacing", "family"],
                        setAttributes: saveTitleStyles,
                        fontSizeType: { value: titleStyles[0].titlefontSizeType, label: __("titlefontSizeType") },
                        fontSize: titleStyles[0].titleSize,
                        fontSizeMobile: titleStyles[0].titlefontSizeMobile,
                        fontSizeTablet: titleStyles[0].titlefontSizeTablet,
                        onChangeSize: function onChangeSize(newSize) {
                            return saveTitleStyles({ titleSize: newSize });
                        },
                        onChangeTabletSize: function onChangeTabletSize(newSize) {
                            return saveTitleStyles({ titlefontSizeTablet: newSize });
                        },
                        onChangeMobileSize: function onChangeMobileSize(newSize) {
                            return saveTitleStyles({ titlefontSizeMobile: newSize });
                        },
                        weight: titleStyles[0].titleWeight,
                        style: titleStyles[0].titleStyle,
                        spacing: titleStyles[0].titleLetter,
                        upper: titleStyles[0].titleUpper,
                        line: titleStyles[0].titleLine,
                        fontFamily: titleStyles[0].titleFontFamily,
                        onChangeWeight: function onChangeWeight(newWeight) {
                            return saveTitleStyles({ titleWeight: newWeight || 500 });
                        },
                        onChangeStyle: function onChangeStyle(newStyle) {
                            return saveTitleStyles({ titleStyle: newStyle });
                        },
                        onChangeSpacing: function onChangeSpacing(newValue) {
                            return saveTitleStyles({ titleLetter: newValue });
                        },
                        onChangeUpper: function onChangeUpper(check) {
                            return saveTitleStyles({ titleUpper: check });
                        },
                        onChangeLine: function onChangeLine(newValue) {
                            return saveTitleStyles({ titleLine: newValue });
                        },
                        onChangeFamily: function onChangeFamily(fontFamily) {
                            return saveTitleStyles({ titleFontFamily: fontFamily });
                        }
                    }),
                    React.createElement(
                        "div",
                        { className: "premium-control-toggle" },
                        React.createElement(_ColorComponent2.default, {
                            label: __("Color", 'premium-block-for-gutenberg'),
                            colorValue: titleStyles[0].titleColor,
                            colorDefault: '',
                            onColorChange: function onColorChange(newValue) {
                                return saveTitleStyles({
                                    titleColor: newValue
                                });
                            }
                        })
                    ),
                    React.createElement(
                        "div",
                        { className: "premium-control-toggle" },
                        React.createElement(_ColorComponent2.default, {
                            label: __("Hover Color", 'premium-block-for-gutenberg'),
                            colorValue: titleStyles[0].titleHoverColor,
                            colorDefault: '',
                            onColorChange: function onColorChange(newValue) {
                                return saveTitleStyles({
                                    titleHoverColor: newValue
                                });
                            }
                        })
                    ),
                    React.createElement(_PremiumShadow2.default, {
                        label: __("Text Shadow", 'premium-blocks-for-gutenberg'),
                        boxShadow: false,
                        color: titleStyles[0].titleshadowColor,
                        blur: titleStyles[0].titleshadowBlur,
                        horizontal: titleStyles[0].titleshadowHorizontal,
                        vertical: titleStyles[0].titleshadowVertical,
                        onChangeColor: function onChangeColor(newColor) {
                            return saveTitleStyles({ titleshadowColor: newColor });
                        },
                        onChangeBlur: function onChangeBlur(newBlur) {
                            return saveTitleStyles({ titleshadowBlur: newBlur });
                        },
                        onChangehHorizontal: function onChangehHorizontal(newValue) {
                            return saveTitleStyles({ titleshadowHorizontal: newValue });
                        },
                        onChangeVertical: function onChangeVertical(newValue) {
                            return saveTitleStyles({ titleshadowVertical: newValue });
                        }
                    }),
                    React.createElement(_PremiumResponsiveMargin2.default, {
                        directions: ["all"],
                        marginTop: titlemarginT,
                        marginRight: titlemarginR,
                        marginBottom: titlemarginB,
                        marginLeft: titlemarginL,
                        marginTopTablet: titlemarginTTablet,
                        marginRightTablet: titlemarginRTablet,
                        marginBottomTablet: titlemarginBTablet,
                        marginLeftTablet: titlemarginLTablet,
                        marginTopMobile: titlemarginTMobile,
                        marginRightMobile: titlemarginRMobile,
                        marginBottomMobile: titlemarginBMobile,
                        marginLeftMobile: titlemarginLMobile,
                        showUnits: true,
                        onChangeMarSizeUnit: function onChangeMarSizeUnit(newvalue) {
                            return saveTitleStyles({ titlemarginType: newvalue });
                        },
                        selectedUnit: titleStyles[0].titlemarginType,
                        onChangeMarginTop: function onChangeMarginTop(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ titlemarginT: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ titlemarginTTablet: newValue });
                            } else {
                                setAttributes({ titlemarginTMobile: newValue });
                            }
                        },
                        onChangeMarginRight: function onChangeMarginRight(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ titlemarginR: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ titlemarginRTablet: newValue });
                            } else {
                                setAttributes({ titlemarginRMobile: newValue });
                            }
                        },
                        onChangeMarginBottom: function onChangeMarginBottom(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ titlemarginB: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ titlemarginBTablet: newValue });
                            } else {
                                setAttributes({ titlemarginBMobile: newValue });
                            }
                        },
                        onChangeMarginLeft: function onChangeMarginLeft(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ titlemarginL: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ titlemarginLTablet: newValue });
                            } else {
                                setAttributes({ titlemarginLMobile: newValue });
                            }
                        }

                    })
                ),
                divider && React.createElement(
                    PanelBody,
                    {
                        title: __("Divider"),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(SelectControl, {
                        label: __("Divider Style"),
                        options: DividerStyle,
                        value: dividerStyle,
                        onChange: function onChange(newValue) {
                            return setAttributes({ dividerStyle: newValue });
                        }
                    }),
                    React.createElement(_responsiveRangeControl2.default, {
                        label: __("Width", 'premium-block-for-gutenberg'),
                        value: dividerStyles[0].dividerWidth,
                        tabletValue: dividerStyles[0].dividerWidthTablet,
                        mobileValue: dividerStyles[0].dividerWidthMobile,
                        onChange: function onChange(value) {
                            return saveDividerStyles({ dividerWidth: value });
                        },
                        onChangeTablet: function onChangeTablet(value) {
                            return saveDividerStyles({ dividerWidthTablet: value });
                        },
                        onChangeMobile: function onChangeMobile(value) {
                            return saveDividerStyles({ dividerWidthMobile: value });
                        },
                        onChangeUnit: function onChangeUnit(key) {
                            return saveDividerStyles({ dividerWidthType: key });
                        },
                        unit: dividerStyles[0].dividerWidthType,
                        showUnit: true,
                        defaultValue: 0,
                        min: 1,
                        max: 600
                    }),
                    React.createElement(_responsiveRangeControl2.default, {
                        label: __("Height", 'premium-block-for-gutenberg'),
                        value: dividerStyles[0].dividerHeight,
                        tabletValue: dividerStyles[0].dividerHeightTablet,
                        mobileValue: dividerStyles[0].dividerHeightMobile,
                        onChange: function onChange(value) {
                            return saveDividerStyles({ dividerHeight: value });
                        },
                        onChangeTablet: function onChangeTablet(value) {
                            return saveDividerStyles({ dividerHeightTablet: value });
                        },
                        onChangeMobile: function onChangeMobile(value) {
                            return saveDividerStyles({ dividerHeightMobile: value });
                        },
                        onChangeUnit: function onChangeUnit(key) {
                            return saveDividerStyles({ dividerHeightType: key });
                        },
                        unit: dividerStyles[0].dividerHeightType,
                        showUnit: true,
                        defaultValue: 0,
                        min: 1,
                        max: 600
                    }),
                    React.createElement(_ColorComponent2.default, {
                        label: __("Color", 'premium-block-for-gutenberg'),
                        colorValue: dividerStyles[0].dividerColor,
                        colorDefault: '',
                        onColorChange: function onColorChange(newValue) {
                            return saveDividerStyles({
                                dividerColor: newValue
                            });
                        }
                    })
                )
            ), React.createElement(
                "div",
                { className: (0, _classnames2.default)(className, "premium-bullet-list-" + this.props.clientId),
                    style: { textAlign: align },
                    id: "premium-bullet-list-" + this.props.clientId },
                React.createElement("style", {
                    dangerouslySetInnerHTML: {
                        __html: ["#premium-bullet-list-" + this.props.clientId + " .premium-bullet-list__content-icon i:hover {", "color: " + bulletIconStyles[0].bulletIconHoverColor + " !important;", "background-color: " + bulletIconStyles[0].bulletIconHoverBackgroundColor + " !important;", "}", "#premium-bullet-list-" + this.props.clientId + " .premium-bullet-list__label-wrap .premium-bullet-list__label:hover {", "color: " + titleStyles[0].titleHoverColor + " !important;", "}", "#premium-bullet-list-" + this.props.clientId + " .premium-bullet-list__wrapper:hover {", "background-color: " + generalStyles[0].generalHoverBackgroundColor + " !important;", "box-shadow: " + generalStyles[0].generalHoverShadowHorizontal + "px " + generalStyles[0].generalHoverShadowVertical + "px " + generalStyles[0].generalHoverShadowBlur + "px " + generalStyles[0].generalHoverShadowColor + " " + generalStyles[0].generalHoverShadowPosition + " !important;", "}", "#premium-bullet-list-" + this.props.clientId + " .premium-bullet-list-divider-block:not(:last-child)::after {", "border-top-width: " + DividerHeight + dividerStyles[0].dividerHeightType + ";", "border-top-style: " + dividerStyle + ";", "border-top-color: " + dividerStyles[0].dividerColor + ";", "width: " + DividerWidth + dividerStyles[0].dividerWidthType + ";", "}", "#premium-bullet-list-" + this.props.clientId + " .premium-bullet-list-divider-inline:not(:last-child)::after {", "height: " + DividerHeight + dividerStyles[0].dividerHeightType + ";", "border-left-style: " + dividerStyle + ";", "border-left-color: " + dividerStyles[0].dividerColor + ";", "border-left-width: " + DividerWidth + dividerStyles[0].dividerWidthType + ";", "}"].join("\n")
                    }
                }),
                React.createElement(
                    "ul",
                    { className: "premium-bullet-list-" + layoutPos + " premium-bullet-list",
                        style: {
                            textAlign: align,
                            justifyContent: align == "right" ? "flex-end" : align
                            // margin: iconPosition !== 'top' ? '0px' : '10px 10px 10px 10px !important'
                        } },
                    repeaterBulletList.map(function (icon, index) {
                        var image_icon_html = "";
                        if (icon.showBulletIcon) {
                            if (icon.image_icon == "icon") {
                                if (icon.icon) {
                                    image_icon_html = React.createElement(
                                        "span",
                                        { className: "premium-bullet-list__content-icon", key: index },
                                        React.createElement("i", {
                                            className: "" + icon.icon,
                                            style: {
                                                overflow: 'hidden',
                                                fontSize: BulletIconSize + bulletIconStyles[0].bulletListfontSizeType,
                                                color: bulletIconStyles[0].bulletIconColor,
                                                backgroundColor: bulletIconStyles[0].bulletIconBackgroundColor,
                                                paddingTop: BulletIconPaddingTop + bulletIconStyles[0].bulletIconpaddingUnit,
                                                paddingBottom: BulletIconPaddingBottom + bulletIconStyles[0].bulletIconpaddingUnit,
                                                paddingLeft: BulletIconPaddingLeft + bulletIconStyles[0].bulletIconpaddingUnit,
                                                paddingRight: BulletIconPaddingRight + bulletIconStyles[0].bulletIconpaddingUnit,
                                                borderStyle: bulletIconStyles[0].bulletIconborderType,
                                                borderWidth: bulletIconBorderUpdated ? bulletIconBorderTop + "px " + bulletIconBorderRight + "px " + bulletIconBorderBottom + "px " + bulletIconBorderLeft + "px" : bulletIconBorderWidth + "px",
                                                borderRadius: bulletIconStyles[0].bulletIconborderRadius || 0 + "px",
                                                borderColor: bulletIconStyles[0].bulletIconborderColor,
                                                verticalAlign: bulletAlign == 'flex-start' ? 'top' : bulletAlign == 'flex-end' ? 'bottom' : 'middle'
                                            }
                                        })
                                    );
                                }
                            } else {
                                if (icon.imageURL) {

                                    image_icon_html = React.createElement("img", {
                                        src: icon.imageURL,
                                        key: index,
                                        style: {
                                            overflow: 'hidden',
                                            width: BulletIconSize + bulletIconStyles[0].bulletListfontSizeType,
                                            height: BulletIconSize + bulletIconStyles[0].bulletListfontSizeType,
                                            paddingTop: BulletIconPaddingTop + bulletIconStyles[0].bulletIconpaddingUnit,
                                            paddingBottom: BulletIconPaddingBottom + bulletIconStyles[0].bulletIconpaddingUnit,
                                            paddingLeft: BulletIconPaddingLeft + bulletIconStyles[0].bulletIconpaddingUnit,
                                            paddingRight: BulletIconPaddingRight + bulletIconStyles[0].bulletIconpaddingUnit,
                                            borderStyle: bulletIconStyles[0].bulletIconborderType,
                                            borderWidth: bulletIconBorderUpdated ? bulletIconBorderTop + "px " + bulletIconBorderRight + "px " + bulletIconBorderBottom + "px " + bulletIconBorderLeft + "px" : bulletIconBorderWidth + "px",
                                            borderRadius: bulletIconStyles[0].bulletIconborderRadius || 0 + "px",
                                            borderColor: bulletIconStyles[0].bulletIconborderColor,
                                            verticalAlign: bulletAlign == 'flex-start' ? 'top' : bulletAlign == 'flex-end' ? 'bottom' : 'middle'
                                        }
                                    });
                                }
                            }
                        }

                        var target = icon.linkTarget ? "_blank" : "_self";

                        return React.createElement(
                            Fragment,
                            null,
                            React.createElement(
                                "li",
                                {
                                    className: (0, _classnames2.default)("premium-bullet-list-content" + index, "premium-bullet-list__wrapper"),
                                    key: index,
                                    target: target,
                                    rel: "noopener noreferrer",
                                    style: {
                                        textAlign: align,
                                        overflow: 'hidden',
                                        justifyContent: align == "right" ? "flex-end" : align,
                                        backgroundColor: generalStyles[0].generalBackgroundColor,
                                        borderStyle: generalStyles[0].generalborderType,
                                        borderWidth: generalBorderUpdated ? generalBorderTop + "px " + generalBorderRight + "px " + generalBorderBottom + "px " + generalBorderLeft + "px" : generalBorderWidth + "px",
                                        borderRadius: generalStyles[0].generalborderRadius || 0 + "px",
                                        borderColor: generalStyles[0].generalborderColor,
                                        paddingTop: GeneralPaddingTop + generalStyles[0].generalpaddingUnit,
                                        paddingBottom: GeneralPaddingBottom + generalStyles[0].generalpaddingUnit,
                                        paddingLeft: GeneralPaddingLeft + generalStyles[0].generalpaddingUnit,
                                        paddingRight: GeneralPaddingRight + generalStyles[0].generalpaddingUnit,
                                        marginTop: GeneralMarginTop + generalStyles[0].generalmarginType,
                                        marginBottom: GeneralMarginBottom + generalStyles[0].generalmarginType,
                                        marginLeft: GeneralMarginLeft + generalStyles[0].generalmarginType,
                                        marginRight: GeneralMarginRight + generalStyles[0].generalmarginType,
                                        boxShadow: generalStyles[0].generalShadowHorizontal + "px " + generalStyles[0].generalShadowVertical + "px " + generalStyles[0].generalShadowBlur + "px " + generalStyles[0].generalShadowColor + " " + generalStyles[0].generalShadowPosition
                                    }
                                },
                                React.createElement(
                                    "div",
                                    { className: "premium-bullet-list__content-wrap premium-bullet-list__content-wrap-" + bulletAlign, style: {
                                            justifyContent: align == "right" ? align : align,
                                            display: iconPosition == "before" ? "flex" : "inline-flex",
                                            flexDirection: iconPosition == "top" ? align == "right" ? "column" : "column" : iconPosition == "after" ? 'row-reverse' : "",
                                            marginTop: TitleMarginTop + titleStyles[0].titlemarginType,
                                            marginBottom: TitleMarginBottom + titleStyles[0].titlemarginType,
                                            marginLeft: TitleMarginLeft + titleStyles[0].titlemarginType,
                                            marginRight: TitleMarginRight + titleStyles[0].titlemarginType
                                        } },
                                    icon.showBulletIcon && React.createElement(
                                        "span",
                                        { className: "premium-bullet-list__icon-wrap",
                                            style: {
                                                // overflow: "hidden",
                                                alignSelf: bulletAlign == 'left' ? 'flex-start' : bulletAlign == 'right' ? 'flex-end' : 'center',
                                                marginTop: BulletIconMarginTop + bulletIconStyles[0].bulletIconmarginType,
                                                marginBottom: BulletIconMarginBottom + bulletIconStyles[0].bulletIconmarginType,
                                                marginLeft: BulletIconMarginLeft + bulletIconStyles[0].bulletIconmarginType,
                                                marginRight: BulletIconMarginRight + bulletIconStyles[0].bulletIconmarginType,
                                                textAlign: bulletAlign,
                                                justifyContent: bulletAlign,
                                                alignItems: bulletAlign == 'left' ? 'flex-start' : bulletAlign == 'right' ? 'flex-end' : 'center'
                                            }
                                        },
                                        image_icon_html
                                    ),
                                    React.createElement(
                                        "div",
                                        {
                                            className: "premium-bullet-list__label-wrap",
                                            style: {
                                                fontFamily: titleFont,
                                                fontSize: TitleSize + titleStyles[0].titlefontSizeType,
                                                fontWeight: titleStyles[0].titleWeight
                                            }
                                        },
                                        React.createElement(RichText, {
                                            tagName: "span",
                                            placeholder: __("Title Name"),
                                            value: icon.label,
                                            className: "premium-bullet-list__label",
                                            onChange: function onChange(val) {
                                                return _changeLabel(val, index);
                                            },
                                            multiline: false,
                                            style: {
                                                // fontFamily: titleFont,
                                                // fontSize: TitleSize + titleStyles[0].titlefontSizeType,
                                                // fontWeight: titleStyles[0].titleWeight,
                                                letterSpacing: titleStyles[0].titleLetter + "px",
                                                lineHeight: titleStyles[0].titleLine + "px",
                                                fontStyle: titleStyles[0].titleStyle,
                                                textTransform: titleStyles[0].titleUpper ? "uppercase" : "none",
                                                fontFamily: titleStyles[0].titleFontFamily,
                                                color: titleStyles[0].titleColor,
                                                textShadow: titleStyles[0].titleshadowHorizontal + "px " + titleStyles[0].titleshadowVertical + "px " + titleStyles[0].titleshadowBlur + "px " + titleStyles[0].titleshadowColor
                                            }
                                        })
                                    )
                                )
                            ),
                            divider && React.createElement("div", { className: "premium-bullet-list-divider-" + layoutPos })
                        );
                    })
                ),
                loadTitleGoogleFonts
            )];
        }
    }]);

    return edit;
}(Component);

exports.default = withSelect(function (select, props) {
    var _select = select('core/edit-post'),
        _select$__experimenta = _select.__experimentalGetPreviewDeviceType,
        __experimentalGetPreviewDeviceType = _select$__experimenta === undefined ? null : _select$__experimenta;

    var deviceType = __experimentalGetPreviewDeviceType ? __experimentalGetPreviewDeviceType() : null;

    return { deviceType: deviceType };
})(edit);

/***/ }),
/* 381 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var __ = wp.i18n.__;

var icons = {};

icons.vertical_top = React.createElement(
  "svg",
  { width: "16", height: "16", viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg" },
  React.createElement(
    "g",
    { transform: "translate(1)", fill: "none" },
    React.createElement("rect", { "class": "premium-svg-fill", x: "4", y: "4", width: "6", height: "12", rx: "1" }),
    React.createElement("path", { "class": "premium-svg-stroke", d: "M0 1h14", "stroke-width": "2", "stroke-linecap": "square" })
  )
);
icons.vertical_middle = React.createElement(
  "svg",
  { width: "16", height: "16", viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg" },
  React.createElement(
    "g",
    { fill: "none" },
    React.createElement(
      "g",
      { transform: "translate(1 1)" },
      React.createElement("rect", { "class": "premium-svg-fill", x: "4", width: "6", height: "14", rx: "1" }),
      React.createElement("path", { d: "M0 7h2", "class": "premium-svg-stroke", "stroke-width": "2", "stroke-linecap": "square" })
    ),
    React.createElement("path", { d: "M13 8h2", "class": "premium-svg-stroke", "stroke-width": "2", "stroke-linecap": "square" })
  )
);
icons.vertical_bottom = React.createElement(
  "svg",
  { width: "16", height: "16", viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg" },
  React.createElement(
    "g",
    { transform: "translate(1)", fill: "none" },
    React.createElement("rect", { "class": "premium-svg-fill", x: "4", width: "6", height: "12", rx: "1" }),
    React.createElement("path", { d: "M0 15h14", "class": "premium-svg-stroke", "stroke-width": "2", "stroke-linecap": "square" })
  )
);

exports.default = icons;

/***/ }),
/* 382 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
var __ = wp.i18n.__;

var attributes = {
    block_id: {
        type: "string"
    },
    align: {
        type: "string",
        default: "left"
    },
    repeaterBulletList: {
        type: "array",
        default: [{
            id: 1,
            label: "Title #" + 1,
            image_icon: "icon",
            icon: "fa fa-arrow-circle-right",
            imageURL: "",
            imageID: '',
            icon_color: "#6EC1E4",
            label_color: "#6EC1E4",
            icon_hover_color: "",
            label_hover_color: "",
            icon_bg_color: "",
            icon_bg_hover_color: "",
            item_bg_color: "",
            item_bg_hover_color: "",
            link: "#",
            target: false,
            disableLink: false,
            showContent: false,
            showBulletIcon: true,
            linkTarget: false
        }, {
            id: 2,
            label: "Title #" + 2,
            image_icon: "icon",
            icon: "fa fa-arrow-circle-right",
            imageURL: "",
            imageID: '',
            icon_color: "#6EC1E4",
            label_color: "#6EC1E4",
            icon_hover_color: "",
            label_hover_color: "",
            icon_bg_color: "",
            icon_bg_hover_color: "",
            item_bg_color: "",
            item_bg_hover_color: "",
            link: "#",
            target: false,
            disableLink: false,
            showContent: false,
            showBulletIcon: true,
            linkTarget: false
        }, {
            id: 3,
            label: "Title #" + 3,
            image_icon: "icon",
            icon: "fa fa-arrow-circle-right",
            imageURL: "",
            imageID: '',
            icon_color: "#6EC1E4",
            label_color: "#6EC1E4",
            icon_hover_color: "",
            label_hover_color: "",
            icon_bg_color: "",
            icon_bg_hover_color: "",
            item_bg_color: "",
            item_bg_hover_color: "",
            link: "#",
            target: false,
            disableLink: false,
            showContent: false,
            showBulletIcon: true,
            linkTarget: false
        }]
    },
    bulletIconStyles: {
        type: "array",
        default: [{
            bulletListfontSize: 20,
            bulletListfontSizeType: "px",
            bulletListfontSizeMobile: 20,
            bulletListfontSizeTablet: 20,
            bulletIconHoverColor: '',
            bulletIconColor: "#6EC1E4",
            bulletIconBackgroundColor: '',
            bulletIconHoverBackgroundColor: '',
            bulletIconborderType: "none",
            bulletIconborderRadius: 0,
            bulletIconborderColor: '',
            bulletIconpaddingUnit: 'px',
            bulletIconmarginType: 'px'
        }]
    },
    bulletIconBorderWidth: {
        type: "number",
        default: "1"
    },
    bulletIconBorderTop: {
        type: "number"
    },
    bulletIconBorderRight: {
        type: "number"
    },
    bulletIconBorderBottom: {
        type: "number"
    },
    bulletIconBorderLeft: {
        type: "number"
    },
    bulletIconBorderUpdated: {
        type: "boolean",
        default: false
    },
    bulletIconmarginT: {
        type: "number"
    },
    bulletIconmarginR: {
        type: "number"
    },
    bulletIconmarginB: {
        type: "number"
    },
    bulletIconmarginL: {
        type: "number"
    },
    bulletIconmarginTTablet: {
        type: "number"
    },
    bulletIconmarginRTablet: {
        type: "number"
    },
    bulletIconmarginBTablet: {
        type: "number"
    },
    bulletIconmarginLTablet: {
        type: "number"
    },
    bulletIconmarginTMobile: {
        type: "number"
    },
    bulletIconmarginRMobile: {
        type: "number"
    },
    bulletIconmarginBMobile: {
        type: "number"
    },
    bulletIconmarginLMobile: {
        type: "number"
    },
    bulletIconpaddingTop: {
        type: "number"
    },
    bulletIconpaddingRight: {
        type: "number"
    },
    bulletIconpaddingBottom: {
        type: "number"
    },
    bulletIconpaddingLeft: {
        type: "number"
    },
    bulletIconpaddingTTablet: {
        type: "number"
    },
    bulletIconpaddingRTablet: {
        type: "number"
    },
    bulletIconpaddingBTablet: {
        type: "number"
    },
    bulletIconpaddingLTablet: {
        type: "number"
    },
    bulletIconpaddingTMobile: {
        type: "number"
    },
    bulletIconpaddingRMobile: {
        type: "number"
    },
    bulletIconpaddingBMobile: {
        type: "number"
    },
    bulletIconpaddingLMobile: {
        type: "number"
    },
    titleStyles: {
        type: "array",
        default: [{
            titleLetter: 0,
            titleStyle: '',
            titleUpper: false,
            titleWeight: 500,
            titleLine: 0,
            titleSize: 20,
            titlefontSizeType: "px",
            titlefontSizeMobile: 20,
            titlefontSizeTablet: 20,
            titleFontFamily: __('Default', 'premium-blocks-for-gutenberg'),
            titleColor: "#6EC1E4",
            titleHoverColor: "",
            titleshadowColor: '',
            titleshadowBlur: 0,
            titleshadowHorizontal: 0,
            titleshadowVertical: 0,
            titlemarginType: 'px'
        }]
    },
    titlemarginT: {
        type: "number"
    },
    titlemarginR: {
        type: "number"
    },
    titlemarginB: {
        type: "number"
    },
    titlemarginL: {
        type: "number"
    },
    titlemarginTTablet: {
        type: "number"
    },
    titlemarginRTablet: {
        type: "number"
    },
    titlemarginBTablet: {
        type: "number"
    },
    titlemarginLTablet: {
        type: "number"
    },
    titlemarginTMobile: {
        type: "number"
    },
    titlemarginRMobile: {
        type: "number"
    },
    titlemarginBMobile: {
        type: "number"
    },
    titlemarginLMobile: {
        type: "number"
    },
    generalStyles: {
        type: "array",
        default: [{
            generalBackgroundColor: "",
            generalHoverBackgroundColor: '',
            generalborderType: "none",
            generalborderRadius: 0,
            generalborderColor: '',
            generalShadowColor: '',
            generalShadowBlur: 0,
            generalShadowHorizontal: 0,
            generalShadowVertical: 0,
            generalShadowPosition: '',
            generalHoverShadowColor: '',
            generalHoverShadowBlur: '',
            generalHoverShadowHorizontal: '',
            generalHoverShadowVertical: '',
            generalHoverShadowPosition: '',
            generalpaddingUnit: 'px',
            generalmarginType: 'px'
        }]
    },
    generalBorderWidth: {
        type: "number",
        default: "1"
    },
    generalBorderTop: {
        type: "number"
    },
    generalBorderRight: {
        type: "number"
    },
    generalBorderBottom: {
        type: "number"
    },
    generalBorderLeft: {
        type: "number"
    },
    generalBorderUpdated: {
        type: "boolean",
        default: false
    },
    generalmarginT: {
        type: "number"
    },
    generalmarginR: {
        type: "number"
    },
    generalmarginB: {
        type: "number"
    },
    generalmarginL: {
        type: "number"
    },
    generalmarginTTablet: {
        type: "number"
    },
    generalmarginRTablet: {
        type: "number"
    },
    generalmarginBTablet: {
        type: "number"
    },
    generalmarginLTablet: {
        type: "number"
    },
    generalmarginTMobile: {
        type: "number"
    },
    generalmarginRMobile: {
        type: "number"
    },
    generalmarginBMobile: {
        type: "number"
    },
    generalmarginLMobile: {
        type: "number"
    },
    generalpaddingTop: {
        type: "number"
    },
    generalpaddingRight: {
        type: "number"
    },
    generalpaddingBottom: {
        type: "number"
    },
    generalpaddingLeft: {
        type: "number"
    },
    generalpaddingTTablet: {
        type: "number"
    },
    generalpaddingRTablet: {
        type: "number"
    },
    generalpaddingBTablet: {
        type: "number"
    },
    generalpaddingLTablet: {
        type: "number"
    },
    generalpaddingTMobile: {
        type: "number"
    },
    generalpaddingRMobile: {
        type: "number"
    },
    generalpaddingBMobile: {
        type: "number"
    },
    generalpaddingLMobile: {
        type: "number"
    },
    classMigrate: {
        type: "boolean",
        default: false
    },
    layoutPos: {
        type: "string",
        default: "block"
    },
    iconPosition: {
        type: "string",
        default: "before"
    },
    bulletAlign: {
        type: "string",
        default: "center"
    },
    titleFont: {
        type: "string"
    },
    divider: {
        type: "boolean",
        default: false
    },
    dividerStyle: {
        type: "string",
        default: "solid"
    },
    dividerStyles: {
        type: "array",
        default: [{
            dividerWidth: '0',
            dividerWidthTablet: '0',
            dividerWidthMobile: '0',
            dividerWidthType: 'px',
            dividerHeight: '0',
            dividerHeightTablet: '0',
            dividerHeightMobile: '0',
            dividerHeightType: 'px',
            dividerColor: '#ddd'
        }]
    }
};
exports.default = attributes;

/***/ }),
/* 383 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _settings = __webpack_require__(1);

var _save = __webpack_require__(384);

var _save2 = _interopRequireDefault(_save);

var _edit = __webpack_require__(385);

var _edit2 = _interopRequireDefault(_edit);

var _deprecated = __webpack_require__(403);

var _deprecated2 = _interopRequireDefault(_deprecated);

var _icons = __webpack_require__(4);

var _icons2 = _interopRequireDefault(_icons);

var _attributes = __webpack_require__(404);

var _attributes2 = _interopRequireDefault(_attributes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __ = wp.i18n.__;
var registerBlockType = wp.blocks.registerBlockType;


registerBlockType("premium/person", {
    title: __("Team Members"),
    icon: React.createElement(_icons2.default, { icon: "" }),
    category: "premium-blocks",
    attributes: _attributes2.default,
    supports: {
        inserter: _settings.person
    },
    example: {},
    edit: _edit2.default,
    save: _save2.default,
    deprecated: _deprecated2.default
});

/***/ }),
/* 384 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classnames = __webpack_require__(0);

var _classnames2 = _interopRequireDefault(_classnames);

var _defaultImage = __webpack_require__(32);

var _defaultImage2 = _interopRequireDefault(_defaultImage);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var save = function save(props) {
    var className = props.className;
    var _props$attributes = props.attributes,
        id = _props$attributes.id,
        personAlign = _props$attributes.personAlign,
        imgBorder = _props$attributes.imgBorder,
        imgBorderColor = _props$attributes.imgBorderColor,
        imgSize = _props$attributes.imgSize,
        nameV = _props$attributes.nameV,
        titleStyles = _props$attributes.titleStyles,
        socialIconStyles = _props$attributes.socialIconStyles,
        nameStyles = _props$attributes.nameStyles,
        descStyles = _props$attributes.descStyles,
        titleV = _props$attributes.titleV,
        descV = _props$attributes.descV,
        socialIconHoverColor = _props$attributes.socialIconHoverColor,
        effect = _props$attributes.effect,
        effectDir = _props$attributes.effectDir,
        multiPersonChecked = _props$attributes.multiPersonChecked,
        borderHoverColor = _props$attributes.borderHoverColor,
        hoverEffectPerson = _props$attributes.hoverEffectPerson,
        effectPersonStyle = _props$attributes.effectPersonStyle,
        multiPersonContent = _props$attributes.multiPersonContent,
        rowPerson = _props$attributes.rowPerson,
        change = _props$attributes.change,
        blur = _props$attributes.blur,
        bright = _props$attributes.bright,
        contrast = _props$attributes.contrast,
        saturation = _props$attributes.saturation,
        hue = _props$attributes.hue,
        contentColor = _props$attributes.contentColor,
        bottomInfo = _props$attributes.bottomInfo,
        socialIconBorder = _props$attributes.socialIconBorder;


    var mainClasses = (0, _classnames2.default)(className, 'premium-person');

    var socialIconfn = function socialIconfn(v) {
        return React.createElement(
            'ul',
            { className: 'premium-person__social-List' },
            v.map(function (value) {
                return React.createElement(
                    'li',
                    null,
                    React.createElement(
                        'a',
                        { className: 'premium-person__socialIcon__link_content ' + (socialIconStyles[0].defaultIconColor ? value.label : ""), href: '' + value.value, style: {
                                borderStyle: socialIconBorder.borderType,
                                borderColor: socialIconBorder.borderColor,
                                background: socialIconStyles[0].socialIconBackgroundColor
                            } },
                        React.createElement('i', { className: 'premium-person__socialIcon ' + (value.label == "youtube" ? "fa fa-youtube-play" : 'fa fa-' + value.label) + ' premium-person__' + socialIconHoverColor,
                            style: {
                                color: socialIconStyles[0].socialIconColor
                            }
                        })
                    )
                );
            })
        );
    };
    var content = function content() {
        return React.createElement(
            'div',
            { className: 'premium-person-content ' + id + ' ' + (multiPersonChecked > 1 ? 'premium-person__' + rowPerson : "")
            },
            ' ',
            multiPersonContent.map(function (value) {
                return React.createElement(
                    'div',
                    { key: value.id, className: 'premium-person__inner premium-persson__min premium-person__' + effectPersonStyle + ' premium-person__' + hoverEffectPerson },
                    React.createElement(
                        'div',
                        { className: 'premium-person__img__container' },
                        React.createElement(
                            'div',
                            {
                                className: 'premium-person__img_wrap'
                            },
                            value.personImgUrl && React.createElement('img', {
                                className: 'premium-person__img',
                                src: '' + value.personImgUrl,
                                alt: 'Person',
                                style: {
                                    borderWidth: imgBorder + "px",
                                    borderColor: imgBorderColor,
                                    width: imgSize + "px",
                                    height: imgSize + "px",
                                    filter: '' + (change ? 'brightness( ' + bright + '% ) contrast( ' + contrast + '% ) saturate( ' + saturation + '% ) blur( ' + blur + 'px ) hue-rotate( ' + hue + 'deg )' : "")
                                }
                            }),
                            !value.personImgUrl && React.createElement(_defaultImage2.default, { className: className })
                        ),
                        effectPersonStyle === 'effect2' ? React.createElement(
                            'div',
                            { className: 'premium-person__socialEffect2' },
                            value.socialIcon && socialIconfn(value.items)
                        ) : ""
                    ),
                    React.createElement(
                        'div',
                        {
                            className: 'premium-person__info',
                            style: {
                                background: contentColor ? contentColor : "#f2f2f2",
                                bottom: effectPersonStyle === 'effect1' ? bottomInfo + "px" : ""
                            }
                        },
                        React.createElement(
                            'div',
                            { className: 'premium-person__name_wrap' },
                            value.name && React.createElement(
                                'span',
                                {
                                    className: 'premium-person__name',
                                    style: {
                                        color: nameStyles[0].nameColor,
                                        fontWeight: nameStyles[0].nameWeight,
                                        alignSelf: nameV,
                                        letterSpacing: nameStyles[0].nameLetter + "px",
                                        lineHeight: nameStyles[0].nameLine + "px",
                                        fontStyle: nameStyles[0].nameStyle,
                                        textTransform: nameStyles[0].nameUpper ? "uppercase" : "none",
                                        textShadow: nameStyles[0].nameshadowHorizontal + 'px ' + nameStyles[0].nameshadowVertical + 'px ' + nameStyles[0].nameshadowBlur + 'px ' + nameStyles[0].nameshadowColor
                                    }
                                },
                                value.name
                            )
                        ),
                        React.createElement(
                            'div',
                            { className: 'premium-person__title_wrap' },
                            value.title && React.createElement(
                                'span',
                                {
                                    className: 'premium-person__title',
                                    style: {
                                        color: titleStyles[0].titleColor,
                                        fontWeight: titleStyles[0].titleWeight,
                                        alignSelf: titleV,
                                        letterSpacing: titleStyles[0].titleLetter + "px",
                                        lineHeight: titleStyles[0].titleLine + "px",
                                        fontStyle: titleStyles[0].titleStyle,
                                        textTransform: titleStyles[0].titleUpper ? "uppercase" : "none",
                                        textShadow: titleStyles[0].titleshadowHorizontal + 'px ' + titleStyles[0].titleshadowVertical + 'px ' + titleStyles[0].titleshadowBlur + 'px ' + titleStyles[0].titleshadowColor
                                    }
                                },
                                value.title
                            )
                        ),
                        React.createElement(
                            'div',
                            { className: 'premium-person__desc_wrap' },
                            value.desc && React.createElement(
                                'span',
                                {
                                    className: 'premium-person__desc',
                                    style: {
                                        color: descStyles[0].descColor,
                                        fontWeight: descStyles[0].descWeight,
                                        alignSelf: descV,
                                        letterSpacing: descStyles[0].descLetter + "px",
                                        lineHeight: descStyles[0].descLine + "px",
                                        fontStyle: descStyles[0].descStyle,
                                        textTransform: descStyles[0].descUpper ? "uppercase" : "none",
                                        textShadow: descStyles[0].descshadowHorizontal + 'px ' + descStyles[0].descshadowVertical + 'px ' + descStyles[0].descshadowBlur + 'px ' + descStyles[0].descshadowColor
                                    }
                                },
                                value.desc
                            )
                        ),
                        effectPersonStyle == 'effect1' ? React.createElement(
                            'div',
                            null,
                            value.socialIcon && socialIconfn(value.items)
                        ) : ""
                    )
                );
            })
        );
    };

    return React.createElement(
        'div',
        {
            id: 'premium-person-' + id,
            className: mainClasses + ' premium-person__' + effect + ' premium-person__' + effectDir,
            style: { textAlign: personAlign }
        },
        React.createElement('style', {
            dangerouslySetInnerHTML: {
                __html: ['#premium-person-' + id + ' .premium-person:hover {', 'border-color: ' + borderHoverColor + ' !important;', "}", '#premium-person-' + id + ' .premium-person__social-List li:hover i{', 'color: ' + socialIconStyles[0].socialIconHoverColor + ' !important;', '-webkit-transition: all .2s ease-in-out;', 'transition: all .2s ease-in-out;', "}"].join("\n")
            }
        }),
        content()
    );
};

exports.default = save;

/***/ }),
/* 385 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _classnames = __webpack_require__(0);

var _classnames2 = _interopRequireDefault(_classnames);

var _premiumTypo = __webpack_require__(7);

var _premiumTypo2 = _interopRequireDefault(_premiumTypo);

var _premiumBorder = __webpack_require__(6);

var _premiumBorder2 = _interopRequireDefault(_premiumBorder);

var _PremiumShadow = __webpack_require__(5);

var _PremiumShadow2 = _interopRequireDefault(_PremiumShadow);

var _defaultImage = __webpack_require__(32);

var _defaultImage2 = _interopRequireDefault(_defaultImage);

var _premiumFilters = __webpack_require__(30);

var _premiumFilters2 = _interopRequireDefault(_premiumFilters);

var _ColorComponent = __webpack_require__(2);

var _ColorComponent2 = _interopRequireDefault(_ColorComponent);

var _reactFonticonpicker = __webpack_require__(24);

var _reactFonticonpicker2 = _interopRequireDefault(_reactFonticonpicker);

var _singleRangeControl = __webpack_require__(3);

var _singleRangeControl2 = _interopRequireDefault(_singleRangeControl);

var _responsiveRangeControl = __webpack_require__(19);

var _responsiveRangeControl2 = _interopRequireDefault(_responsiveRangeControl);

var _premiumResponsiveSpacing = __webpack_require__(51);

var _premiumResponsiveSpacing2 = _interopRequireDefault(_premiumResponsiveSpacing);

var _premiumMediaUpload = __webpack_require__(12);

var _premiumMediaUpload2 = _interopRequireDefault(_premiumMediaUpload);

var _reactSortableHoc = __webpack_require__(70);

var _times = __webpack_require__(386);

var _times2 = _interopRequireDefault(_times);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var withSelect = wp.data.withSelect;
var __ = wp.i18n.__;
var Component = wp.element.Component;
var _wp$components = wp.components,
    PanelBody = _wp$components.PanelBody,
    SelectControl = _wp$components.SelectControl,
    ToggleControl = _wp$components.ToggleControl,
    TextControl = _wp$components.TextControl,
    TextareaControl = _wp$components.TextareaControl;
var _wp$editor = wp.editor,
    InspectorControls = _wp$editor.InspectorControls,
    AlignmentToolbar = _wp$editor.AlignmentToolbar,
    BlockControls = _wp$editor.BlockControls;


var SortableItem = (0, _reactSortableHoc.SortableElement)(function (_ref) {
    var onRemove = _ref.onRemove,
        saveLink = _ref.saveLink,
        changeLinkValue = _ref.changeLinkValue,
        value = _ref.value,
        addLink = _ref.addLink,
        personIndex = _ref.personIndex;
    return React.createElement(
        "li",
        { tabIndex: 0 },
        React.createElement(
            "span",
            { className: "premium-person__socialIcon__container" },
            React.createElement("span", { className: "premium-person__socialIcon__dragHandle" }),
            React.createElement(
                "div",
                { className: "premium-person__socialIcon__content", onClick: function onClick() {
                        return addLink(value);
                    } },
                React.createElement("span", { className: "premium-person__socialIcon__iconvalue fa fa-" + value.label }),
                value.label
            ),
            React.createElement("button", { className: "premium-person__socialIcon__trashicon fa fa-trash", onClick: function onClick() {
                    return onRemove(value.label);
                } })
        ),
        value.link && React.createElement(
            "div",
            { className: "premium-person__socialIcon__link" },
            React.createElement(TextControl, {
                placeholder: __("Enter " + value.label + " link"),
                value: value.changeinput,
                onChange: function onChange(val) {
                    return changeLinkValue(val, value, personIndex);
                },
                className: "premium-person__socialIcon__textInput"
            }),
            React.createElement(
                "button",
                { className: "premium-person__socialIcon__saveButton", onClick: function onClick() {
                        return saveLink(value.changeinput, value, personIndex);
                    } },
                "Save"
            )
        )
    );
});

var SortableList = (0, _reactSortableHoc.SortableContainer)(function (_ref2) {
    var items = _ref2.items,
        onRemove = _ref2.onRemove,
        saveLink = _ref2.saveLink,
        changeLinkValue = _ref2.changeLinkValue,
        addLink = _ref2.addLink,
        personIndex = _ref2.personIndex;

    return React.createElement(
        "ul",
        null,
        items.map(function (value, index) {
            return React.createElement(SortableItem, { key: "item-" + value, index: index, newIndex: index, personIndex: personIndex, value: value, onRemove: onRemove, saveLink: saveLink, addLink: addLink, changeLinkValue: changeLinkValue });
        })
    );
});

var edit = function (_Component) {
    _inherits(edit, _Component);

    function edit() {
        _classCallCheck(this, edit);

        return _possibleConstructorReturn(this, (edit.__proto__ || Object.getPrototypeOf(edit)).apply(this, arguments));
    }

    _createClass(edit, [{
        key: "componentDidMount",
        value: function componentDidMount() {
            // Assigning id in the attribute.
            this.props.setAttributes({ id: this.props.clientId });
            this.props.setAttributes({ classMigrate: true });
            this.getPreviewSize = this.getPreviewSize.bind(this);
        }
    }, {
        key: "getPreviewSize",
        value: function getPreviewSize(device, desktopSize, tabletSize, mobileSize) {
            if (device === 'Mobile') {
                if (undefined !== mobileSize && '' !== mobileSize) {
                    return mobileSize;
                } else if (undefined !== tabletSize && '' !== tabletSize) {
                    return tabletSize;
                }
            } else if (device === 'Tablet') {
                if (undefined !== tabletSize && '' !== tabletSize) {
                    return tabletSize;
                }
            }
            return desktopSize;
        }
    }, {
        key: "save",
        value: function save(value, index) {
            var _props = this.props,
                attributes = _props.attributes,
                setAttributes = _props.setAttributes;
            var multiPersonContent = attributes.multiPersonContent;

            var newItems = multiPersonContent.map(function (item, thisIndex) {
                if (index === thisIndex) {
                    item = _extends({}, item, value);
                }
                return item;
            });
            setAttributes({
                multiPersonContent: newItems
            });
        }
    }, {
        key: "render",
        value: function render() {
            var _this2 = this;

            var _props2 = this.props,
                isSelected = _props2.isSelected,
                setAttributes = _props2.setAttributes,
                className = _props2.className,
                blockId = _props2.clientId;
            var _props$attributes = this.props.attributes,
                id = _props$attributes.id,
                personSize = _props$attributes.personSize,
                personAlign = _props$attributes.personAlign,
                imgSize = _props$attributes.imgSize,
                imgBorder = _props$attributes.imgBorder,
                imgBorderColor = _props$attributes.imgBorderColor,
                nameStyles = _props$attributes.nameStyles,
                titleStyles = _props$attributes.titleStyles,
                descStyles = _props$attributes.descStyles,
                socialIconStyles = _props$attributes.socialIconStyles,
                nameV = _props$attributes.nameV,
                titleV = _props$attributes.titleV,
                descV = _props$attributes.descV,
                contentColor = _props$attributes.contentColor,
                effect = _props$attributes.effect,
                effectDir = _props$attributes.effectDir,
                multiPersonChecked = _props$attributes.multiPersonChecked,
                borderHoverColor = _props$attributes.borderHoverColor,
                hoverEffectPerson = _props$attributes.hoverEffectPerson,
                effectPersonStyle = _props$attributes.effectPersonStyle,
                rowPerson = _props$attributes.rowPerson,
                multiPersonContent = _props$attributes.multiPersonContent,
                change = _props$attributes.change,
                blur = _props$attributes.blur,
                bright = _props$attributes.bright,
                contrast = _props$attributes.contrast,
                saturation = _props$attributes.saturation,
                hue = _props$attributes.hue,
                bottomInfo = _props$attributes.bottomInfo,
                socialIconPadding = _props$attributes.socialIconPadding,
                socialIconMargin = _props$attributes.socialIconMargin,
                socialIconBorder = _props$attributes.socialIconBorder;


            var HOVER = [{
                value: "none",
                label: __("None", 'premium-blocks-for-gutenberg')
            }, {
                value: "zoomin",
                label: __("Zoom In", 'premium-blocks-for-gutenberg')
            }, {
                value: "zoomout",
                label: __("Zoom Out", 'premium-blocks-for-gutenberg')
            }, {
                value: "scale",
                label: __("Scale", 'premium-blocks-for-gutenberg')
            }, {
                value: "gray",
                label: __("Gray Scale", 'premium-blocks-for-gutenberg')
            }, {
                value: "blur",
                label: __("Blur", 'premium-blocks-for-gutenberg')
            }, {
                value: "bright",
                label: __("Bright", 'premium-blocks-for-gutenberg')
            }, {
                value: "sepia",
                label: __("Sepia", 'premium-blocks-for-gutenberg')
            }, {
                value: "translate",
                label: __("Translate", 'premium-blocks-for-gutenberg')
            }];

            var EFFECTS = [{
                value: "effect1",
                label: __("Style 1", 'premium-blocks-for-gutenberg')
            }, {
                value: "effect2",
                label: __("Style 2", 'premium-blocks-for-gutenberg')
            }];
            var ROWS = [{
                value: "column1",
                label: __("1 Column", 'premium-blocks-for-gutenberg')
            }, {
                value: "column2",
                label: __("2 Columns", 'premium-blocks-for-gutenberg')
            }, {
                value: "column3",
                label: __("3 Columns", 'premium-blocks-for-gutenberg')
            }, {
                value: "column4",
                label: __("4 Columns", 'premium-blocks-for-gutenberg')
            }, {
                value: "column5",
                label: __("5 Columns", 'premium-blocks-for-gutenberg')
            }, {
                value: "column6",
                label: __("6 Columns", 'premium-blocks-for-gutenberg')
            }];

            var iconsList = [{
                value: "fa fa-facebook-f",
                label: __("facebook", 'premium-blocks-for-gutenberg')
            }, {
                value: "fa fa-twitter",
                label: __("twitter", 'premium-blocks-for-gutenberg')
            }, {
                value: "fa fa-instagram",
                label: __("instagram", 'premium-blocks-for-gutenberg')
            }, {
                value: "fa fa-youtube",
                label: __("youtube", 'premium-blocks-for-gutenberg')
            }, {
                value: "fa fa-linkedin",
                label: __("linkedin", 'premium-blocks-for-gutenberg')
            }, {
                value: "fa fa-flickr",
                label: __("flickr", 'premium-blocks-for-gutenberg')
            }, {
                value: "fa fa-github",
                label: __("github", 'premium-blocks-for-gutenberg')
            }, {
                value: "fa fa-google-plus",
                label: __("google-plus", 'premium-blocks-for-gutenberg')
            }, {
                value: "fa fa-pinterest",
                label: __("pinterest", 'premium-blocks-for-gutenberg')
            }, {
                value: "fa fa-reddit",
                label: __("reddit", 'premium-blocks-for-gutenberg')
            }, {
                value: "fa fa-skype",
                label: __("skype", 'premium-blocks-for-gutenberg')
            }, {
                value: "fa fa-stack-overflow",
                label: __("stack-overflow", 'premium-blocks-for-gutenberg')
            }, {
                value: "fa fa-whatsapp",
                label: __("whatsapp", 'premium-blocks-for-gutenberg')
            }, {
                value: "fa fa-vimeo",
                label: __("vimeo", 'premium-blocks-for-gutenberg')
            }, {
                value: "fa fa-tumblr",
                label: __("tumblr", 'premium-blocks-for-gutenberg')
            }, {
                value: "fa fa-dribbble",
                label: __("dribbble", 'premium-blocks-for-gutenberg')
            }, {
                value: "fa fa-quora",
                label: __("quora", 'premium-blocks-for-gutenberg')
            }, {
                value: "fa fa-foursquare",
                label: __("foursquare", 'premium-blocks-for-gutenberg')
            }, {
                value: "fa fa-wordpress",
                label: __("wordpress", 'premium-blocks-for-gutenberg')
            }, {
                value: "fa fa-stumbleupon",
                label: __("stumbleupon", 'premium-blocks-for-gutenberg')
            }, {
                value: "fa fa-yahoo",
                label: __("yahoo", 'premium-blocks-for-gutenberg')
            }, {
                value: "fa fa-soundcloud",
                label: __("soundcloud", 'premium-blocks-for-gutenberg')
            }];

            setAttributes({ id: blockId });

            var mainClasses = (0, _classnames2.default)(className, "premium-person");

            var NameSize = this.getPreviewSize(this.props.deviceType, nameStyles[0].namefontSize, nameStyles[0].namefontSizeTablet, nameStyles[0].namefontSizeMobile);

            var TitleSize = this.getPreviewSize(this.props.deviceType, titleStyles[0].titleSize, titleStyles[0].titlefontSizeTablet, titleStyles[0].titlefontSizeMobile);

            var DescSize = this.getPreviewSize(this.props.deviceType, descStyles[0].descSize, descStyles[0].descfontSizeTablet, descStyles[0].descfontSizeMobile);

            var SocialIconSize = this.getPreviewSize(this.props.deviceType, socialIconStyles[0].socialIconSize, socialIconStyles[0].socialIconfontSizeTablet, socialIconStyles[0].socialIconfontSizeMobile);

            var SocialIconMarginTop = this.getPreviewSize(this.props.deviceType, socialIconMargin.Desktop.top, socialIconMargin.Tablet.top, socialIconMargin.Mobile.top);
            var SocialIconMarginRight = this.getPreviewSize(this.props.deviceType, socialIconMargin.Desktop.right, socialIconMargin.Tablet.right, socialIconMargin.Mobile.right);
            var SocialIconMarginBottom = this.getPreviewSize(this.props.deviceType, socialIconMargin.Desktop.bottom, socialIconMargin.Tablet.bottom, socialIconMargin.Mobile.bottom);
            var SocialIconMarginLeft = this.getPreviewSize(this.props.deviceType, socialIconMargin.Desktop.left, socialIconMargin.Tablet.left, socialIconMargin.Mobile.left);
            var SocialIconPaddingTop = this.getPreviewSize(this.props.deviceType, socialIconPadding.Desktop.top, socialIconPadding.Tablet.top, socialIconPadding.Mobile.top);
            var SocialIconPaddingRight = this.getPreviewSize(this.props.deviceType, socialIconPadding.Desktop.right, socialIconPadding.Tablet.right, socialIconPadding.Mobile.right);
            var SocialIconPaddingBottom = this.getPreviewSize(this.props.deviceType, socialIconPadding.Desktop.bottom, socialIconPadding.Tablet.bottom, socialIconPadding.Mobile.bottom);
            var SocialIconPaddingLeft = this.getPreviewSize(this.props.deviceType, socialIconPadding.Desktop.left, socialIconPadding.Tablet.left, socialIconPadding.Mobile.left);
            var SocialIconBorderWidthTop = this.getPreviewSize(this.props.deviceType, socialIconBorder.borderWidth.Desktop.top, socialIconBorder.borderWidth.Tablet.top, socialIconBorder.borderWidth.Mobile.top);
            var SocialIconBorderWidthRight = this.getPreviewSize(this.props.deviceType, socialIconBorder.borderWidth.Desktop.right, socialIconBorder.borderWidth.Tablet.right, socialIconBorder.borderWidth.Mobile.right);
            var SocialIconBorderWidthBottom = this.getPreviewSize(this.props.deviceType, socialIconBorder.borderWidth.Desktop.bottom, socialIconBorder.borderWidth.Tablet.bottom, socialIconBorder.borderWidth.Mobile.bottom);
            var SocialIconBorderWidthLeft = this.getPreviewSize(this.props.deviceType, socialIconBorder.borderWidth.Desktop.left, socialIconBorder.borderWidth.Tablet.left, socialIconBorder.borderWidth.Mobile.left);
            var SocialIconBorderRadiusTop = this.getPreviewSize(this.props.deviceType, socialIconBorder.borderRadius.Desktop.top, socialIconBorder.borderRadius.Tablet.top, socialIconBorder.borderRadius.Mobile.top);
            var SocialIconBorderRadiusRight = this.getPreviewSize(this.props.deviceType, socialIconBorder.borderRadius.Desktop.right, socialIconBorder.borderRadius.Tablet.right, socialIconBorder.borderRadius.Mobile.right);
            var SocialIconBorderRadiusBottom = this.getPreviewSize(this.props.deviceType, socialIconBorder.borderRadius.Desktop.bottom, socialIconBorder.borderRadius.Tablet.bottom, socialIconBorder.borderRadius.Mobile.bottom);
            var SocialIconBorderRadiusLeft = this.getPreviewSize(this.props.deviceType, socialIconBorder.borderRadius.Desktop.left, socialIconBorder.borderRadius.Tablet.left, socialIconBorder.borderRadius.Mobile.left);

            var shouldCancelStart = function shouldCancelStart(e) {
                // Prevent sorting from being triggered if target is input or button
                if (['div', 'button', 'input'].indexOf(e.target.tagName.toLowerCase()) !== -1) {
                    return true; // Return true to cancel sorting
                }
            };

            var saveNameStyles = function saveNameStyles(value) {
                var newUpdate = nameStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({
                    nameStyles: newUpdate
                });
            };

            var saveTitleStyles = function saveTitleStyles(value) {
                var newUpdate = titleStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({
                    titleStyles: newUpdate
                });
            };

            var saveDescStyles = function saveDescStyles(value) {
                var newUpdate = descStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({
                    descStyles: newUpdate
                });
            };

            var saveSocialIconStyles = function saveSocialIconStyles(value) {
                var newUpdate = socialIconStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({
                    socialIconStyles: newUpdate
                });
            };

            var _addLink = function _addLink(value, i) {
                value.link = !value.link;
                value.link == false ? value.changeinput = value.value : value.changeinput;
                var array = multiPersonContent.map(function (cont) {
                    return cont;
                }).filter(function (f) {
                    return f.id == i + 1;
                });
                var newData = array[0].items.filter(function (b) {
                    return b;
                });
                array[0].items = newData;
                multiPersonContent[i] = array[0];
                setAttributes(multiPersonContent[i] = array[0]);
            };

            var _saveLink = function _saveLink(value, i, personIndex) {
                i.value = value;
                var arrayItem = multiPersonContent.map(function (cont) {
                    return cont;
                }).filter(function (f) {
                    return f.id == personIndex + 1;
                });
                i.link = false;
                var newData = arrayItem[0].items.filter(function (b) {
                    return b;
                });
                arrayItem[0].items = newData;
                multiPersonContent[personIndex] = arrayItem[0];
                setAttributes(multiPersonContent[personIndex] = arrayItem[0]);
            };

            var _changeLinkValue = function _changeLinkValue(value, i, personIndex) {
                if (personIndex + 1 > 0) {
                    i.changeinput = value;
                    var arrayItem = multiPersonContent.map(function (cont) {
                        return cont;
                    }).filter(function (f) {
                        return f.id == personIndex + 1;
                    });
                    var newData = arrayItem[0].items.filter(function (b) {
                        return b;
                    });
                    arrayItem[0].items = newData;
                    multiPersonContent[personIndex] = arrayItem[0];
                    setAttributes(multiPersonContent[personIndex] = arrayItem[0]);
                } else {
                    i.changeinput = value;
                    var _arrayItem = multiPersonContent.map(function (cont) {
                        return cont;
                    });
                    var _newData = _arrayItem[0].items.filter(function (b) {
                        return b;
                    });
                    setAttributes({ multiPersonContent: [{ id: 1, personImgUrl: _arrayItem[0].personImgUrl, name: _arrayItem[0].name, title: _arrayItem[0].title, desc: _arrayItem[0].desc, socialIcon: _arrayItem[0].socialIcon, items: _newData }] });
                }
            };

            var _onRemove = function _onRemove(value, i) {
                var array = multiPersonContent.map(function (cont) {
                    return cont;
                }).filter(function (f) {
                    return f.id == i + 1;
                });
                var newData = array[0].items.filter(function (b) {
                    return b.label != value;
                });
                array[0].items = newData;
                multiPersonContent[i] = array[0];
                setAttributes(multiPersonContent[i] = array[0]);
            };

            var socialIconfn = function socialIconfn(v) {
                return React.createElement(
                    "ul",
                    { className: "premium-person__social-List" },
                    v.map(function (value) {
                        return React.createElement(
                            "li",
                            null,
                            React.createElement(
                                "a",
                                { className: "premium-person__socialIcon__link_content " + (socialIconStyles[0].defaultIconColor ? value.label : ""), href: "" + value.value, style: {
                                        borderStyle: socialIconBorder.borderType,
                                        borderTopWidth: SocialIconBorderWidthTop && SocialIconBorderWidthTop + "px",
                                        borderRightWidth: SocialIconBorderWidthRight && SocialIconBorderWidthRight + "px",
                                        borderBottomWidth: SocialIconBorderWidthBottom && SocialIconBorderWidthBottom + "px",
                                        borderLeftWidth: SocialIconBorderWidthLeft && SocialIconBorderWidthLeft + "px",
                                        borderBottomLeftRadius: SocialIconBorderRadiusLeft && SocialIconBorderRadiusLeft + "px",
                                        borderTopLeftRadius: SocialIconBorderRadiusTop && SocialIconBorderRadiusTop + "px",
                                        borderTopRightRadius: SocialIconBorderRadiusRight && SocialIconBorderRadiusRight + "px",
                                        borderBottomRightRadius: SocialIconBorderRadiusBottom && SocialIconBorderRadiusBottom + "px",
                                        borderColor: socialIconBorder.borderColor,
                                        marginTop: SocialIconMarginTop + socialIconMargin.unit,
                                        marginBottom: SocialIconMarginBottom + socialIconMargin.unit,
                                        marginLeft: SocialIconMarginLeft + socialIconMargin.unit,
                                        marginRight: SocialIconMarginRight + socialIconMargin.unit,
                                        paddingTop: SocialIconPaddingTop + socialIconPadding.unit,
                                        paddingBottom: SocialIconPaddingBottom + socialIconPadding.unit,
                                        paddingLeft: SocialIconPaddingLeft + socialIconPadding.unit,
                                        paddingRight: SocialIconPaddingRight + socialIconPadding.unit,
                                        background: socialIconStyles[0].socialIconBackgroundColor
                                    } },
                                React.createElement("i", { className: "premium-person__socialIcon " + (value.label == "youtube" ? "fa fa-youtube-play" : "fa fa-" + value.label) + " premium-person__" + socialIconStyles[0].socialIconHoverColor,
                                    style: {
                                        color: socialIconStyles[0].socialIconColor,
                                        fontSize: (SocialIconSize || 50) + socialIconStyles[0].socialIconfontSizeType
                                    }
                                })
                            )
                        );
                    })
                );
            };

            var content = function content() {
                return React.createElement(
                    "div",
                    { className: "premium-person-content " + id + " " + (multiPersonChecked > 1 ? "premium-person__" + rowPerson : "")
                    },
                    " ",
                    multiPersonContent.map(function (value) {
                        return React.createElement(
                            "div",
                            { key: value.id, className: "premium-person__inner premium-persson__min premium-person__" + effectPersonStyle + " premium-person__" + hoverEffectPerson },
                            React.createElement(
                                "div",
                                { className: "premium-person__img__container" },
                                React.createElement(
                                    "div",
                                    {
                                        className: "premium-person__img_wrap"
                                    },
                                    value.personImgUrl && React.createElement("img", {
                                        className: "premium-person__img",
                                        src: "" + value.personImgUrl,
                                        alt: "Person",
                                        style: {

                                            borderWidth: imgBorder + "px",
                                            borderColor: imgBorderColor,
                                            width: imgSize + "px",
                                            height: imgSize + "px",
                                            filter: "" + (change ? "brightness( " + bright + "% ) contrast( " + contrast + "% ) saturate( " + saturation + "% ) blur( " + blur + "px ) hue-rotate( " + hue + "deg )" : "")
                                        }
                                    }),
                                    !value.personImgUrl && React.createElement(_defaultImage2.default, { className: className })
                                ),
                                effectPersonStyle === 'effect2' ? React.createElement(
                                    "div",
                                    { className: "premium-person__socialEffect2" },
                                    value.socialIcon && socialIconfn(value.items)
                                ) : ""
                            ),
                            React.createElement(
                                "div",
                                {
                                    className: "premium-person__info",
                                    style: {
                                        background: contentColor ? contentColor : "#f2f2f2",
                                        bottom: effectPersonStyle === 'effect1' ? bottomInfo + "px" : ""
                                    }
                                },
                                React.createElement(
                                    "div",
                                    {
                                        className: "premium-person__name_wrap",
                                        style: {
                                            fontSize: NameSize + nameStyles[0].namefontSizeType
                                        }
                                    },
                                    value.name && React.createElement(
                                        "span",
                                        {
                                            className: "premium-person__name",
                                            style: {
                                                color: nameStyles[0].nameColor,
                                                fontSize: NameSize + nameStyles[0].namefontSizeType,
                                                fontWeight: nameStyles[0].nameWeight,
                                                alignSelf: nameV,
                                                letterSpacing: nameStyles[0].nameLetter + "px",
                                                lineHeight: nameStyles[0].nameLine + "px",
                                                fontStyle: nameStyles[0].nameStyle,
                                                textTransform: nameStyles[0].nameUpper ? "uppercase" : "none",
                                                textShadow: nameStyles[0].nameshadowHorizontal + "px " + nameStyles[0].nameshadowVertical + "px " + nameStyles[0].nameshadowBlur + "px " + nameStyles[0].nameshadowColor
                                            }
                                        },
                                        value.name
                                    )
                                ),
                                React.createElement(
                                    "div",
                                    {
                                        className: "premium-person__title_wrap",
                                        style: {
                                            fontSize: TitleSize + titleStyles[0].titlefontSizeType
                                        }
                                    },
                                    value.title && React.createElement(
                                        "span",
                                        {
                                            className: "premium-person__title",
                                            style: {
                                                color: titleStyles[0].titleColor,
                                                fontSize: TitleSize + titleStyles[0].titlefontSizeType,
                                                fontWeight: titleStyles[0].titleWeight,
                                                alignSelf: titleV,
                                                letterSpacing: titleStyles[0].titleLetter + "px",
                                                lineHeight: titleStyles[0].titleLine + "px",
                                                fontStyle: titleStyles[0].titleStyle,
                                                textTransform: titleStyles[0].titleUpper ? "uppercase" : "none",
                                                textShadow: titleStyles[0].titleshadowHorizontal + "px " + titleStyles[0].titleshadowVertical + "px " + titleStyles[0].titleshadowBlur + "px " + titleStyles[0].titleshadowColor
                                            }
                                        },
                                        value.title
                                    )
                                ),
                                React.createElement(
                                    "div",
                                    {
                                        className: "premium-person__desc_wrap",
                                        style: {
                                            fontSize: DescSize + descStyles[0].descfontSizeType
                                        }
                                    },
                                    value.desc && React.createElement(
                                        "span",
                                        {
                                            className: "premium-person__desc",
                                            style: {
                                                color: descStyles[0].descColor,
                                                fontSize: DescSize + descStyles[0].descfontSizeType,
                                                fontWeight: descStyles[0].descWeight,
                                                alignSelf: descV,
                                                letterSpacing: descStyles[0].descLetter + "px",
                                                lineHeight: descStyles[0].descLine + "px",
                                                fontStyle: descStyles[0].descStyle,
                                                textTransform: descStyles[0].descUpper ? "uppercase" : "none",
                                                textShadow: descStyles[0].descshadowHorizontal + "px " + descStyles[0].descshadowVertical + "px " + descStyles[0].descshadowBlur + "px " + descStyles[0].descshadowColor
                                            }
                                        },
                                        value.desc
                                    )
                                ),
                                effectPersonStyle == 'effect1' ? React.createElement(
                                    "div",
                                    null,
                                    value.socialIcon && socialIconfn(value.items)
                                ) : ""
                            )
                        );
                    })
                );
            };

            var addSocialIcon = function addSocialIcon(newsocial, index) {
                var array = iconsList.map(function (i) {
                    return i;
                }).filter(function (f) {
                    return f.value == newsocial;
                });
                if (array[0] != undefined) {
                    newsocial = array[0];
                    setAttributes({ selectedSocialMediaIcon: newsocial.label });
                    var newicon = newsocial.label;
                    var arrayItem = multiPersonContent.map(function (cont) {
                        return cont;
                    }).filter(function (f) {
                        return f.id == index + 1;
                    });
                    var repeat = arrayItem[0].items.filter(function (d) {
                        return d.label == newicon;
                    });
                    if (repeat[0] != undefined) {
                        arrayItem[0].items.filter(function (d) {
                            return d.label != newicon;
                        });
                        multiPersonContent[index - 1] = arrayItem[0];
                        setAttributes(multiPersonContent[index - 1] = arrayItem[0]);
                    } else {
                        arrayItem[0].items.push({ label: newicon, link: false, value: "", changeinput: "#" });
                        arrayItem[0].items.filter(function (d) {
                            return d.label != newicon;
                        });
                        multiPersonContent[index - 1] = arrayItem[0];
                        setAttributes(multiPersonContent[index - 1] = arrayItem[0]);
                    }
                }
            };

            var addMultiPerson = function addMultiPerson(newP) {
                var multi = [].concat(_toConsumableArray(multiPersonContent));
                if (multi.length < newP) {
                    var incAmount = Math.abs(newP - multi.length);
                    {
                        (0, _times2.default)(incAmount, function (n) {
                            multi.push({
                                id: multi.length + 1,
                                personImgUrl: multi[0].personImgUrl,
                                personImgId: '',
                                name: multi[0].name,
                                title: multi[0].title,
                                desc: multi[0].desc,
                                socialIcon: multi[0].socialIcon,
                                items: [{ label: 'facebook', link: false, value: "#", changeinput: "#" }, { label: 'twitter', link: false, value: "#", changeinput: "#" }, { label: 'instagram', link: false, value: "#", changeinput: "#" }, { label: 'youtube', link: false, value: "#", changeinput: "#" }]
                            });
                        });
                    }
                    setAttributes({ multiPersonContent: multi });
                } else {
                    for (var i = multiPersonChecked; i > newP; i--) {
                        multiPersonContent.splice(i - 1, 1);
                    }
                }
                setAttributes({ multiPersonChecked: newP });
            };

            var onSortEndMulti = function onSortEndMulti(i, _ref3) {
                var oldIndex = _ref3.oldIndex,
                    newIndex = _ref3.newIndex;

                var arrayItem = multiPersonContent.map(function (cont) {
                    return cont;
                }).filter(function (f) {
                    return f.id == i + 1;
                });
                var array = (0, _reactSortableHoc.arrayMove)(arrayItem[0].items, oldIndex, newIndex);
                arrayItem[0].items = array;
                multiPersonContent[i] = arrayItem[0];
                setAttributes(multiPersonContent[i] = arrayItem[0]);
            };

            var MultiPersonSetting = function MultiPersonSetting(index) {
                return React.createElement(
                    PanelBody,
                    {
                        key: index,
                        title: __("Person #" + (index + 1) + " Setting"),
                        initialOpen: false
                    },
                    React.createElement(_premiumMediaUpload2.default, {
                        type: "image",
                        imageID: multiPersonContent[index].personImgId,
                        imageURL: multiPersonContent[index].personImgUrl,
                        onSelectMedia: function onSelectMedia(media) {
                            _this2.save({ personImgUrl: media.url }, index);
                            _this2.save({ personImgId: media.id }, index);
                        },
                        onRemoveImage: function onRemoveImage() {
                            _this2.save({ personImgId: '' }, index);
                            _this2.save({ personImgUrl: '' }, index);
                        }
                    }),
                    React.createElement(TextControl, {
                        label: __("Name", 'premium-block-for-gutenberg'),
                        value: multiPersonContent[index].name,
                        onChange: function onChange(value) {
                            _this2.save({ name: value }, index);
                        }
                    }),
                    React.createElement(TextControl, {
                        label: __("Title", 'premium-block-for-gutenberg'),
                        value: multiPersonContent[index].title,
                        onChange: function onChange(value) {
                            _this2.save({ title: value }, index);
                        }
                    }),
                    React.createElement(TextareaControl, {
                        label: __("Description", 'premium-block-for-gutenberg'),
                        value: multiPersonContent[index].desc,
                        onChange: function onChange(value) {
                            _this2.save({ desc: value }, index);
                        }
                    }),
                    React.createElement(ToggleControl, {
                        label: __("Enable Social Icons", 'premium-block-for-gutenberg'),
                        checked: multiPersonContent[index].socialIcon,
                        onChange: function onChange(value) {
                            _this2.save({ socialIcon: value }, index);
                        }
                    }),
                    multiPersonContent[index].socialIcon && React.createElement(
                        "div",
                        null,
                        React.createElement(
                            "label",
                            { className: "premium-person-paragraph" },
                            __("Social Media")
                        ),
                        React.createElement(_reactFonticonpicker2.default, {
                            icons: iconsList.map(function (i) {
                                return i.value;
                            }),
                            onChange: function onChange(value) {
                                return addSocialIcon(value, index);
                            },
                            isMulti: false,
                            appendTo: "body",
                            closeOnSelect: false,
                            iconsPerPage: 25,
                            noSelectedPlaceholder: __("Select Icon")
                        }),
                        React.createElement(SortableList, { items: multiPersonContent[index].items, personIndex: index, onSortEnd: function onSortEnd(o, n) {
                                return onSortEndMulti(index, o, n);
                            }, onRemove: function onRemove(value) {
                                return _onRemove(value, index);
                            }, saveLink: function saveLink(value, i) {
                                return _saveLink(value, i, index);
                            }, changeLinkValue: function changeLinkValue(value, i) {
                                return _changeLinkValue(value, i, index);
                            }, addLink: function addLink(value) {
                                return _addLink(value, index);
                            }, shouldCancelStart: shouldCancelStart, helperClass: "premium-person__sortableHelper" })
                    )
                );
            };

            return [isSelected && "block" != personSize && React.createElement(
                BlockControls,
                { key: "controls" },
                React.createElement(AlignmentToolbar, {
                    value: personAlign,
                    onChange: function onChange(newAlign) {
                        return setAttributes({ personAlign: newAlign });
                    }
                })
            ), isSelected && React.createElement(
                InspectorControls,
                { key: "inspector" },
                React.createElement(
                    PanelBody,
                    {
                        title: __("General Settings"),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(_singleRangeControl2.default, {
                        label: __("Person Number", 'premium-block-for-gutenberg'),
                        value: multiPersonChecked,
                        onChange: function onChange(value) {
                            return addMultiPerson(value);
                        },
                        showUnit: false,
                        defaultValue: 1,
                        min: 1
                    }),
                    multiPersonChecked > 1 ? React.createElement(SelectControl, {
                        label: __("Persons/Row", 'premium-block-for-gutenberg'),
                        value: rowPerson,
                        onChange: function onChange(newColumn) {
                            return setAttributes({ rowPerson: newColumn });
                        },
                        options: ROWS
                    }) : "",
                    React.createElement(SelectControl, {
                        label: __("Style", 'premium-block-for-gutenberg'),
                        value: effectPersonStyle,
                        onChange: function onChange(newEffect) {
                            return setAttributes({ effectPersonStyle: newEffect });
                        },
                        options: EFFECTS
                    }),
                    React.createElement(SelectControl, {
                        label: __("Image Hover Effect", 'premium-block-for-gutenberg'),
                        options: HOVER,
                        value: hoverEffectPerson,
                        onChange: function onChange(newEffect) {
                            return setAttributes({ hoverEffectPerson: newEffect });
                        }
                    })
                ),
                (0, _times2.default)(multiPersonChecked, function (n) {
                    return MultiPersonSetting(n);
                }),
                React.createElement(
                    PanelBody,
                    {
                        title: __("Image Style"),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(_premiumFilters2.default, {
                        blur: blur,
                        bright: bright,
                        contrast: contrast,
                        saturation: saturation,
                        hue: hue,
                        onChangeBlur: function onChangeBlur(newSize) {
                            return setAttributes({ blur: newSize, change: true });
                        },
                        onChangeBright: function onChangeBright(newSize) {
                            return setAttributes({ bright: newSize, change: true });
                        },
                        onChangeContrast: function onChangeContrast(newSize) {
                            return setAttributes({ contrast: newSize, change: true });
                        },
                        onChangeSat: function onChangeSat(newSize) {
                            return setAttributes({ saturation: newSize, change: true });
                        },
                        onChangeHue: function onChangeHue(newSize) {
                            return setAttributes({ hue: newSize, change: true });
                        }
                    })
                ),
                React.createElement(
                    PanelBody,
                    {
                        title: __("Name"),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(_premiumTypo2.default, {
                        components: ["responsiveSize", "weight", "line", "style", "upper", "spacing"],
                        setAttributes: saveNameStyles,
                        fontSizeType: { value: nameStyles[0].namefontSizeType, label: __("namefontSizeType") },
                        fontSize: nameStyles[0].namefontSize,
                        fontSizeMobile: nameStyles[0].namefontSizeMobile,
                        fontSizeTablet: nameStyles[0].namefontSizeTablet,
                        onChangeSize: function onChangeSize(newSize) {
                            return saveNameStyles({ namefontSize: newSize });
                        },
                        onChangeTabletSize: function onChangeTabletSize(newSize) {
                            return saveNameStyles({ namefontSizeTablet: newSize });
                        },
                        onChangeMobileSize: function onChangeMobileSize(newSize) {
                            return saveNameStyles({ namefontSizeMobile: newSize });
                        },
                        weight: nameStyles[0].nameWeight,
                        style: nameStyles[0].nameStyle,
                        spacing: nameStyles[0].nameLetter,
                        upper: nameStyles[0].nameUpper,
                        line: nameStyles[0].nameLine,
                        onChangeWeight: function onChangeWeight(newWeight) {
                            return saveNameStyles({ nameWeight: newWeight || 500 });
                        },
                        onChangeStyle: function onChangeStyle(newStyle) {
                            return saveNameStyles({ nameStyle: newStyle });
                        },
                        onChangeSpacing: function onChangeSpacing(newValue) {
                            return saveNameStyles({ nameLetter: newValue });
                        },
                        onChangeUpper: function onChangeUpper(check) {
                            return saveNameStyles({ nameUpper: check });
                        },
                        onChangeLine: function onChangeLine(newValue) {
                            return saveNameStyles({ nameLine: newValue });
                        }
                    }),
                    React.createElement(
                        "div",
                        { className: "premium-control-toggle" },
                        React.createElement(_ColorComponent2.default, {
                            label: __("Color", 'premium-block-for-gutenberg'),
                            colorValue: nameStyles[0].nameColor,
                            colorDefault: '',
                            onColorChange: function onColorChange(newValue) {
                                return saveNameStyles({
                                    nameColor: newValue
                                });
                            }
                        })
                    ),
                    React.createElement(_PremiumShadow2.default, {
                        label: __("Text Shadow", 'premium-blocks-for-gutenberg'),
                        boxShadow: false,
                        color: nameStyles[0].nameshadowColor,
                        blur: nameStyles[0].nameshadowBlur,
                        horizontal: nameStyles[0].nameshadowHorizontal,
                        vertical: nameStyles[0].nameshadowVertical,
                        onChangeColor: function onChangeColor(newColor) {
                            return saveNameStyles({ nameshadowColor: newColor });
                        },
                        onChangeBlur: function onChangeBlur(newBlur) {
                            return saveNameStyles({ nameshadowBlur: newBlur });
                        },
                        onChangehHorizontal: function onChangehHorizontal(newValue) {
                            return saveNameStyles({ nameshadowHorizontal: newValue });
                        },
                        onChangeVertical: function onChangeVertical(newValue) {
                            return saveNameStyles({ nameshadowVertical: newValue });
                        }
                    })
                ),
                React.createElement(
                    PanelBody,
                    {
                        title: __("Title"),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(_premiumTypo2.default, {
                        components: ["responsiveSize", "weight", "line", "style", "upper", "spacing"],
                        setAttributes: saveTitleStyles,
                        fontSizeType: { value: titleStyles[0].titlefontSizeType, label: __("titlefontSizeType") },
                        fontSize: titleStyles[0].titleSize,
                        fontSizeMobile: titleStyles[0].titlefontSizeMobile,
                        fontSizeTablet: titleStyles[0].titlefontSizeTablet,
                        onChangeSize: function onChangeSize(newSize) {
                            return saveTitleStyles({ titleSize: newSize });
                        },
                        onChangeTabletSize: function onChangeTabletSize(newSize) {
                            return saveTitleStyles({ titlefontSizeTablet: newSize });
                        },
                        onChangeMobileSize: function onChangeMobileSize(newSize) {
                            return saveTitleStyles({ titlefontSizeMobile: newSize });
                        },
                        weight: titleStyles[0].titleWeight,
                        style: titleStyles[0].titleStyle,
                        spacing: titleStyles[0].titleLetter,
                        upper: titleStyles[0].titleUpper,
                        line: titleStyles[0].titleLine,
                        onChangeWeight: function onChangeWeight(newWeight) {
                            return saveTitleStyles({ titleWeight: newWeight || 500 });
                        },
                        onChangeStyle: function onChangeStyle(newStyle) {
                            return saveTitleStyles({ titleStyle: newStyle });
                        },
                        onChangeSpacing: function onChangeSpacing(newValue) {
                            return saveTitleStyles({ titleLetter: newValue });
                        },
                        onChangeUpper: function onChangeUpper(check) {
                            return saveTitleStyles({ titleUpper: check });
                        },
                        onChangeLine: function onChangeLine(newValue) {
                            return saveTitleStyles({ titleLine: newValue });
                        }
                    }),
                    React.createElement(
                        "div",
                        { className: "premium-control-toggle" },
                        React.createElement(_ColorComponent2.default, {
                            label: __("Color", 'premium-block-for-gutenberg'),
                            colorValue: titleStyles[0].titleColor,
                            colorDefault: '',
                            onColorChange: function onColorChange(newValue) {
                                return saveTitleStyles({
                                    titleColor: newValue
                                });
                            }
                        })
                    ),
                    React.createElement(_PremiumShadow2.default, {
                        label: __("Text Shadow", 'premium-blocks-for-gutenberg'),
                        boxShadow: false,
                        color: titleStyles[0].titleshadowColor,
                        blur: titleStyles[0].titleshadowBlur,
                        horizontal: titleStyles[0].titleshadowHorizontal,
                        vertical: titleStyles[0].titleshadowVertical,
                        onChangeColor: function onChangeColor(newColor) {
                            return saveTitleStyles({ titleshadowColor: newColor });
                        },
                        onChangeBlur: function onChangeBlur(newBlur) {
                            return saveTitleStyles({ titleshadowBlur: newBlur });
                        },
                        onChangehHorizontal: function onChangehHorizontal(newValue) {
                            return saveTitleStyles({ titleshadowHorizontal: newValue });
                        },
                        onChangeVertical: function onChangeVertical(newValue) {
                            return saveTitleStyles({ titleshadowVertical: newValue });
                        }
                    })
                ),
                React.createElement(
                    PanelBody,
                    {
                        title: __("Description"),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(_premiumTypo2.default, {
                        components: ["responsiveSize", "weight", "line", "style", "upper", "spacing"],
                        setAttributes: saveDescStyles,
                        fontSizeType: { value: descStyles[0].descfontSizeType, label: __("descfontSizeType") },
                        fontSize: descStyles[0].descSize,
                        fontSizeMobile: descStyles[0].descfontSizeMobile,
                        fontSizeTablet: descStyles[0].descfontSizeTablet,
                        onChangeSize: function onChangeSize(newSize) {
                            return saveDescStyles({ descSize: newSize });
                        },
                        onChangeTabletSize: function onChangeTabletSize(newSize) {
                            return saveDescStyles({ descfontSizeTablet: newSize });
                        },
                        onChangeMobileSize: function onChangeMobileSize(newSize) {
                            return saveDescStyles({ descfontSizeMobile: newSize });
                        },
                        weight: descStyles[0].descWeight,
                        style: descStyles[0].descStyle,
                        spacing: descStyles[0].descLetter,
                        upper: descStyles[0].descUpper,
                        line: descStyles[0].descLine,
                        onChangeWeight: function onChangeWeight(newWeight) {
                            return saveDescStyles({ descWeight: newWeight || 500 });
                        },
                        onChangeStyle: function onChangeStyle(newStyle) {
                            return saveDescStyles({ descStyle: newStyle });
                        },
                        onChangeSpacing: function onChangeSpacing(newValue) {
                            return saveDescStyles({ descLetter: newValue });
                        },
                        onChangeUpper: function onChangeUpper(check) {
                            return saveDescStyles({ descUpper: check });
                        },
                        onChangeLine: function onChangeLine(newValue) {
                            return saveDescStyles({ descLine: newValue });
                        }
                    }),
                    React.createElement(
                        "div",
                        { className: "premium-control-toggle" },
                        React.createElement(_ColorComponent2.default, {
                            label: __("Color", 'premium-block-for-gutenberg'),
                            colorValue: descStyles[0].descColor,
                            colorDefault: '',
                            onColorChange: function onColorChange(newValue) {
                                return saveDescStyles({
                                    descColor: newValue
                                });
                            }
                        })
                    ),
                    React.createElement(_PremiumShadow2.default, {
                        label: __("Text Shadow", 'premium-blocks-for-gutenberg'),
                        boxShadow: false,
                        color: descStyles[0].descshadowColor,
                        blur: descStyles[0].descshadowBlur,
                        horizontal: descStyles[0].descshadowHorizontal,
                        vertical: descStyles[0].descshadowVertical,
                        onChangeColor: function onChangeColor(newColor) {
                            return saveDescStyles({ descshadowColor: newColor });
                        },
                        onChangeBlur: function onChangeBlur(newBlur) {
                            return saveDescStyles({ descshadowBlur: newBlur });
                        },
                        onChangehHorizontal: function onChangehHorizontal(newValue) {
                            return saveDescStyles({ descshadowHorizontal: newValue });
                        },
                        onChangeVertical: function onChangeVertical(newValue) {
                            return saveDescStyles({ descshadowVertical: newValue });
                        }
                    })
                ),
                multiPersonChecked > 1 ? multiPersonContent.map(function (i) {
                    return i.socialIcon && React.createElement(
                        PanelBody,
                        {
                            title: __("Social Icon"),
                            className: "premium-panel-body",
                            initialOpen: false
                        },
                        React.createElement(_responsiveRangeControl2.default, {
                            label: __("Size", 'premium-block-for-gutenberg'),
                            value: socialIconStyles[0].socialIconSize,
                            tabletValue: socialIconStyles[0].socialIconfontSizeTablet,
                            mobileValue: socialIconStyles[0].socialIconfontSizeMobile,
                            onChange: function onChange(value) {
                                return saveSocialIconStyles({ socialIconSize: value });
                            },
                            onChangeTablet: function onChangeTablet(value) {
                                return saveSocialIconStyles({ socialIconfontSizeTablet: value });
                            },
                            onChangeMobile: function onChangeMobile(value) {
                                return saveSocialIconStyles({ socialIconfontSizeMobile: value });
                            },
                            onChangeUnit: function onChangeUnit(key) {
                                return saveSocialIconStyles({ socialIconfontSizeType: key });
                            },
                            unit: socialIconStyles[0].socialIconfontSizeType,
                            showUnit: true,
                            defaultValue: 20,
                            min: 1,
                            max: 100
                        }),
                        React.createElement(
                            "div",
                            { className: "premium-control-toggle" },
                            React.createElement(_ColorComponent2.default, {
                                label: __("Social Icon Color", 'premium-block-for-gutenberg'),
                                colorValue: socialIconStyles[0].socialIconColor,
                                colorDefault: '',
                                onColorChange: function onColorChange(newValue) {
                                    return saveSocialIconStyles({
                                        socialIconColor: newValue
                                    });
                                }
                            }),
                            React.createElement(_ColorComponent2.default, {
                                label: __("Social Icon Hover Color", 'premium-block-for-gutenberg'),
                                colorValue: socialIconStyles[0].socialIconHoverColor,
                                colorDefault: '',
                                onColorChange: function onColorChange(newValue) {
                                    return saveSocialIconStyles({
                                        socialIconHoverColor: newValue
                                    });
                                }
                            })
                        ),
                        React.createElement(
                            "div",
                            { className: "premium-control-toggle" },
                            React.createElement(_ColorComponent2.default, {
                                label: __("Social Icon Background Color", 'premium-block-for-gutenberg'),
                                colorValue: socialIconStyles[0].socialIconBackgroundColor,
                                colorDefault: '',
                                onColorChange: function onColorChange(newValue) {
                                    return saveSocialIconStyles({
                                        socialIconBackgroundColor: newValue
                                    });
                                }
                            })
                        ),
                        React.createElement(ToggleControl, {
                            label: __("Brands Default Colors", 'premium-block-for-gutenberg'),
                            checked: socialIconStyles[0].defaultIconColor,
                            onChange: function onChange(newCheck) {
                                return saveSocialIconStyles({ defaultIconColor: newCheck });
                            }
                        }),
                        React.createElement(_premiumBorder2.default, {
                            label: __('Border', 'premium-blocks-for-gutenberg'),
                            value: socialIconBorder,
                            onChange: function onChange(value) {
                                return setAttributes({ socialIconBorder: value });
                            }
                        }),
                        React.createElement(_premiumResponsiveSpacing2.default, {
                            label: __('Margin', 'premium-blocks-for-gutenberg'),
                            value: socialIconMargin,
                            onChange: function onChange(value) {
                                return setAttributes({ socialIconMargin: value });
                            },
                            showUnits: true,
                            responsive: true
                        }),
                        React.createElement(_premiumResponsiveSpacing2.default, {
                            label: __('Padding', 'premium-blocks-for-gutenberg'),
                            value: socialIconPadding,
                            onChange: function onChange(value) {
                                return setAttributes({ socialIconPadding: value });
                            },
                            showUnits: true,
                            responsive: true
                        })
                    );
                }) : multiPersonContent[0].socialIcon && React.createElement(
                    PanelBody,
                    {
                        title: __("Social Icon"),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(_responsiveRangeControl2.default, {
                        label: __("Size", 'premium-block-for-gutenberg'),
                        value: socialIconStyles[0].socialIconSize,
                        tabletValue: socialIconStyles[0].socialIconfontSizeTablet,
                        mobileValue: socialIconStyles[0].socialIconfontSizeMobile,
                        onChange: function onChange(value) {
                            return saveSocialIconStyles({ socialIconSize: value });
                        },
                        onChangeTablet: function onChangeTablet(value) {
                            return saveSocialIconStyles({ socialIconfontSizeTablet: value });
                        },
                        onChangeMobile: function onChangeMobile(value) {
                            return saveSocialIconStyles({ socialIconfontSizeMobile: value });
                        },
                        onChangeUnit: function onChangeUnit(key) {
                            return saveSocialIconStyles({ socialIconfontSizeType: key });
                        },
                        unit: socialIconStyles[0].socialIconfontSizeType,
                        showUnit: true,
                        defaultValue: 20,
                        min: 1,
                        max: 100
                    }),
                    React.createElement(
                        "div",
                        { className: "premium-control-toggle" },
                        React.createElement(_ColorComponent2.default, {
                            label: __("Social Icon Color", 'premium-block-for-gutenberg'),
                            colorValue: socialIconStyles[0].socialIconColor,
                            colorDefault: '',
                            onColorChange: function onColorChange(newValue) {
                                return saveSocialIconStyles({
                                    socialIconColor: newValue
                                });
                            }
                        }),
                        React.createElement(_ColorComponent2.default, {
                            label: __("Social Icon Hover Color", 'premium-block-for-gutenberg'),
                            colorValue: socialIconStyles[0].socialIconHoverColor,
                            colorDefault: '',
                            onColorChange: function onColorChange(newValue) {
                                return saveSocialIconStyles({
                                    socialIconHoverColor: newValue
                                });
                            }
                        })
                    ),
                    React.createElement(
                        "div",
                        { className: "premium-control-toggle" },
                        React.createElement(_ColorComponent2.default, {
                            label: __("Social Icon Background Color", 'premium-block-for-gutenberg'),
                            colorValue: socialIconStyles[0].socialIconBackgroundColor,
                            colorDefault: '',
                            onColorChange: function onColorChange(newValue) {
                                return saveSocialIconStyles({
                                    socialIconBackgroundColor: newValue
                                });
                            }
                        })
                    ),
                    React.createElement(ToggleControl, {
                        label: __("Brands Default Colors", "premium-blocks-for-gutenberg"),
                        checked: socialIconStyles[0].defaultIconColor,
                        onChange: function onChange(newCheck) {
                            return saveSocialIconStyles({ defaultIconColor: newCheck });
                        }
                    }),
                    React.createElement(_premiumBorder2.default, {
                        label: __('Border', 'premium-blocks-for-gutenberg'),
                        value: socialIconBorder,
                        onChange: function onChange(value) {
                            return setAttributes({ socialIconBorder: value });
                        }
                    }),
                    React.createElement(_premiumResponsiveSpacing2.default, {
                        label: __('Margin', 'premium-blocks-for-gutenberg'),
                        value: socialIconMargin,
                        onChange: function onChange(value) {
                            return setAttributes({ socialIconMargin: value });
                        },
                        showUnits: true,
                        responsive: true
                    }),
                    React.createElement(_premiumResponsiveSpacing2.default, {
                        label: __('Padding', 'premium-blocks-for-gutenberg'),
                        value: socialIconPadding,
                        onChange: function onChange(value) {
                            return setAttributes({ socialIconPadding: value });
                        },
                        showUnits: true,
                        responsive: true
                    })
                ),
                React.createElement(
                    PanelBody,
                    {
                        title: __("Content"),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(
                        "div",
                        { className: "premium-control-toggle" },
                        React.createElement(_ColorComponent2.default, {
                            label: __("Color", 'premium-block-for-gutenberg'),
                            colorValue: contentColor,
                            colorDefault: '',
                            onColorChange: function onColorChange(newValue) {
                                return setAttributes({
                                    contentColor: newValue
                                });
                            }
                        })
                    ),
                    effectPersonStyle === 'effect1' ? React.createElement(_singleRangeControl2.default, {
                        label: __("Bottom Offset", 'premium-block-for-gutenberg'),
                        value: bottomInfo,
                        onChange: function onChange(newValue) {
                            return setAttributes({ bottomInfo: newValue });
                        },
                        showUnit: false,
                        defaultValue: 15,
                        min: 15
                    }) : ""
                )
            ), React.createElement(
                "div",
                {
                    id: "premium-person-" + id,
                    className: mainClasses + " premium-person__" + effect + " premium-person__" + effectDir,
                    style: { textAlign: personAlign }
                },
                React.createElement("style", {
                    dangerouslySetInnerHTML: {
                        __html: ["#premium-person-" + id + " .premium-person:hover {", "border-color: " + borderHoverColor + " !important;", "}", "#premium-person-" + id + " .premium-person__social-List li:hover i{", "color: " + socialIconStyles[0].socialIconHoverColor + " !important;", "-webkit-transition: all .2s ease-in-out;", "transition: all .2s ease-in-out;", "}"].join("\n")
                    }
                }),
                content()
            )];
        }
    }]);

    return edit;
}(Component);

exports.default = withSelect(function (select, props) {
    var _select = select('core/edit-post'),
        _select$__experimenta = _select.__experimentalGetPreviewDeviceType,
        __experimentalGetPreviewDeviceType = _select$__experimenta === undefined ? null : _select$__experimenta;

    var deviceType = __experimentalGetPreviewDeviceType ? __experimentalGetPreviewDeviceType() : null;

    return { deviceType: deviceType };
})(edit);

/***/ }),
/* 386 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var baseTimes = __webpack_require__(387),
    castFunction = __webpack_require__(388),
    toInteger = __webpack_require__(390);

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used as references for the maximum length and index of an array. */
var MAX_ARRAY_LENGTH = 4294967295;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMin = Math.min;

/**
 * Invokes the iteratee `n` times, returning an array of the results of
 * each invocation. The iteratee is invoked with one argument; (index).
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 * @example
 *
 * _.times(3, String);
 * // => ['0', '1', '2']
 *
 *  _.times(4, _.constant(0));
 * // => [0, 0, 0, 0]
 */
function times(n, iteratee) {
  n = toInteger(n);
  if (n < 1 || n > MAX_SAFE_INTEGER) {
    return [];
  }
  var index = MAX_ARRAY_LENGTH,
      length = nativeMin(n, MAX_ARRAY_LENGTH);

  iteratee = castFunction(iteratee);
  n -= MAX_ARRAY_LENGTH;

  var result = baseTimes(length, iteratee);
  while (++index < n) {
    iteratee(index);
  }
  return result;
}

module.exports = times;

/***/ }),
/* 387 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

module.exports = baseTimes;

/***/ }),
/* 388 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var identity = __webpack_require__(389);

/**
 * Casts `value` to `identity` if it's not a function.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Function} Returns cast function.
 */
function castFunction(value) {
  return typeof value == 'function' ? value : identity;
}

module.exports = castFunction;

/***/ }),
/* 389 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = identity;

/***/ }),
/* 390 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var toFinite = __webpack_require__(391);

/**
 * Converts `value` to an integer.
 *
 * **Note:** This method is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */
function toInteger(value) {
  var result = toFinite(value),
      remainder = result % 1;

  return result === result ? remainder ? result - remainder : result : 0;
}

module.exports = toInteger;

/***/ }),
/* 391 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var toNumber = __webpack_require__(392);

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0,
    MAX_INTEGER = 1.7976931348623157e+308;

/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */
function toFinite(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber(value);
  if (value === INFINITY || value === -INFINITY) {
    var sign = value < 0 ? -1 : 1;
    return sign * MAX_INTEGER;
  }
  return value === value ? value : 0;
}

module.exports = toFinite;

/***/ }),
/* 392 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var baseTrim = __webpack_require__(393),
    isObject = __webpack_require__(395),
    isSymbol = __webpack_require__(396);

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? other + '' : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = baseTrim(value);
  var isBinary = reIsBinary.test(value);
  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
}

module.exports = toNumber;

/***/ }),
/* 393 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var trimmedEndIndex = __webpack_require__(394);

/** Used to match leading whitespace. */
var reTrimStart = /^\s+/;

/**
 * The base implementation of `_.trim`.
 *
 * @private
 * @param {string} string The string to trim.
 * @returns {string} Returns the trimmed string.
 */
function baseTrim(string) {
  return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '') : string;
}

module.exports = baseTrim;

/***/ }),
/* 394 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/** Used to match a single whitespace character. */
var reWhitespace = /\s/;

/**
 * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
 * character of `string`.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {number} Returns the index of the last non-whitespace character.
 */
function trimmedEndIndex(string) {
  var index = string.length;

  while (index-- && reWhitespace.test(string.charAt(index))) {}
  return index;
}

module.exports = trimmedEndIndex;

/***/ }),
/* 395 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;

/***/ }),
/* 396 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var baseGetTag = __webpack_require__(397),
    isObjectLike = __webpack_require__(402);

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
    return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
}

module.exports = isSymbol;

/***/ }),
/* 397 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _Symbol = __webpack_require__(129),
    getRawTag = __webpack_require__(400),
    objectToString = __webpack_require__(401);

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
    if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
    }
    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
}

module.exports = baseGetTag;

/***/ }),
/* 398 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var freeGlobal = __webpack_require__(399);

/** Detect free variable `self`. */
var freeSelf = (typeof self === 'undefined' ? 'undefined' : _typeof(self)) == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;

/***/ }),
/* 399 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/** Detect free variable `global` from Node.js. */
var freeGlobal = (typeof global === 'undefined' ? 'undefined' : _typeof(global)) == 'object' && global && global.Object === Object && global;

module.exports = freeGlobal;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(89)))

/***/ }),
/* 400 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _Symbol = __webpack_require__(129);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;

/***/ }),
/* 401 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;

/***/ }),
/* 402 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object';
}

module.exports = isObjectLike;

/***/ }),
/* 403 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _defaultImage = __webpack_require__(32);

var _defaultImage2 = _interopRequireDefault(_defaultImage);

var _classnames = __webpack_require__(0);

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __ = wp.i18n.__;


var attributes = {
    personSize: {
        type: "string",
        default: "md"
    },
    personAlign: {
        type: "string",
        default: "center"
    },
    imgSize: {
        type: "number"
    },
    imgBorder: {
        type: "number",
        default: "1"
    },
    imgBorderColor: {
        type: "string"
    },
    nameStyles: {
        type: "array",
        default: [{
            nameColor: "rgb(110, 193, 228)",
            nameLetter: 0,
            nameStyle: '',
            nameUpper: false,
            nameWeight: 500,
            nameLine: 0,
            namefontSize: 20,
            namefontSizeType: "px",
            namefontSizeMobile: 20,
            namefontSizeTablet: 20,
            nameshadowColor: '',
            nameshadowBlur: 0,
            nameshadowHorizontal: 0,
            nameshadowVertical: 0
        }]
    },
    titleStyles: {
        type: "array",
        default: [{
            titleColor: "",
            titleLetter: 0,
            titleStyle: '',
            titleUpper: false,
            titleWeight: 500,
            titleLine: 0,
            titleSize: 20,
            titlefontSizeType: "px",
            titlefontSizeMobile: 20,
            titlefontSizeTablet: 20,
            titleshadowColor: '',
            titleshadowBlur: 0,
            titleshadowHorizontal: 0,
            titleshadowVertical: 0
        }]
    },
    descStyles: {
        type: "array",
        default: [{
            descColor: "",
            descLetter: 0,
            descStyle: '',
            descUpper: false,
            descWeight: '',
            descLine: 0,
            descSize: 20,
            descfontSizeType: "px",
            descfontSizeMobile: 20,
            descfontSizeTablet: 20,
            descshadowColor: '',
            descshadowBlur: 0,
            descshadowHorizontal: 0,
            descshadowVertical: 0
        }]
    },
    socialIconStyles: {
        type: "array",
        default: [{
            socialIconColor: "",
            socialIconHoverColor: '',
            socialIconBackgroundColor: '',
            defaultIconColor: false,
            socialIconSize: 20,
            socialIconfontSizeType: "px",
            socialIconfontSizeMobile: 20,
            socialIconfontSizeTablet: 20,
            borderTypeIcon: 'none',
            borderWidthIcon: '1',
            borderRadiusIcon: '0',
            borderColorIcon: '',
            socialIconPaddingType: 'px',
            socialIconMarginType: 'px'
        }]
    },
    socialIconBorderWidth: {
        type: "number",
        default: "1"
    },
    socialIconBorderTop: {
        type: "number"
    },
    socialIconBorderRight: {
        type: "number"
    },
    socialIconBorderBottom: {
        type: "number"
    },
    socialIconBorderLeft: {
        type: "number"
    },
    socialIconBorderUpdated: {
        type: "boolean",
        default: false
    },
    socialIconMarginT: {
        type: "number"
    },
    socialIconMarginR: {
        type: "number"
    },
    socialIconMarginB: {
        type: "number"
    },
    socialIconMarginL: {
        type: "number"
    },
    socialIconMarginTTablet: {
        type: "number"
    },
    socialIconMarginRTablet: {
        type: "number"
    },
    socialIconMarginBTablet: {
        type: "number"
    },
    socialIconMarginLTablet: {
        type: "number"
    },
    socialIconMarginTMobile: {
        type: "number"
    },
    socialIconMarginRMobile: {
        type: "number"
    },
    socialIconMarginBMobile: {
        type: "number"
    },
    socialIconMarginLMobile: {
        type: "number"
    },
    socialIconPaddingTop: {
        type: "number"
    },
    socialIconPaddingRight: {
        type: "number"
    },
    socialIconPaddingBottom: {
        type: "number"
    },
    socialIconPaddingLeft: {
        type: "number"
    },
    socialIconPaddingTTablet: {
        type: "number"
    },
    socialIconPaddingRTablet: {
        type: "number"
    },
    socialIconPaddingBTablet: {
        type: "number"
    },
    socialIconPaddingLTablet: {
        type: "number"
    },
    socialIconPaddingTMobile: {
        type: "number"
    },
    socialIconPaddingRMobile: {
        type: "number"
    },
    socialIconPaddingBMobile: {
        type: "number"
    },
    socialIconPaddingLMobile: {
        type: "number"
    },
    titleTag: {
        type: "string",
        default: "p"
    },
    contentColor: {
        type: "string"
    },
    bottomInfo: {
        type: "number",
        default: 15
    },
    effect: {
        type: "string",
        default: "none"
    },
    effectDir: {
        type: "string",
        default: "top"
    },
    descColor: {
        type: "string",
        default: "#000"
    },
    multiPersonChecked: {
        type: "number",
        default: 1
    },
    borderHoverColor: {
        type: "string"
    },
    personShadowPosition: {
        type: "string",
        default: ""
    },
    id: {
        type: "string"
    },
    classMigrate: {
        type: "boolean",
        default: false
    },
    hoverEffectPerson: {
        type: "string",
        default: "none"
    },
    selectedSocialMediaIcon: {
        type: "string"
    },
    effectPersonStyle: {
        type: "string",
        default: "effect1"
    },
    rowPerson: {
        type: "string",
        default: "column1"
    },
    multiPersonContent: {
        type: "array",
        default: [{
            id: 1,
            personImgUrl: "",
            personImgId: '',
            name: "John Doe",
            title: "Senior Developer",
            desc: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec ullamcorper nulla non metus auctor fringilla",
            socialIcon: false,
            items: [{ label: 'facebook', link: false, value: "#", changeinput: "#" }, { label: 'twitter', link: false, value: "#", changeinput: "#" }, { label: 'instagram', link: false, value: "#", changeinput: "#" }, { label: 'youtube', link: false, value: "#", changeinput: "#" }]
        }]
    },
    change: {
        type: "boolean",
        default: false
    },
    blur: {
        type: "number",
        default: "0"
    },
    bright: {
        type: "number",
        default: "100"
    },
    contrast: {
        type: "number",
        default: "100"
    },
    saturation: {
        type: "number",
        default: "100"
    },
    hue: {
        type: "number",
        default: "0"
    }
};
var newAttributes = {
    socialIconMargin: {
        type: "object",
        default: {
            Desktop: {
                top: "",
                right: "",
                bottom: "",
                left: ""
            },
            Tablet: {
                top: "",
                right: "",
                bottom: "",
                left: ""
            },
            Mobile: {
                top: "",
                right: "",
                bottom: "",
                left: ""
            },
            unit: "px"
        }
    },
    socialIconPadding: {
        type: "object",
        default: {
            Desktop: {
                top: "",
                right: "",
                bottom: "",
                left: ""
            },
            Tablet: {
                top: "",
                right: "",
                bottom: "",
                left: ""
            },
            Mobile: {
                top: "",
                right: "",
                bottom: "",
                left: ""
            },
            unit: "px"
        }
    }
};

var deprecated = [{
    attributes: Object.assign(attributes, newAttributes),
    isEligible: function isEligible() {
        return true;
    },

    migrate: function migrate(attributes) {
        var newAttributes = {
            socialIconMargin: {
                "Desktop": {
                    top: attributes.socialIconMarginT,
                    right: attributes.socialIconMarginR,
                    bottom: attributes.socialIconMarginB,
                    left: attributes.socialIconMarginL
                },
                "Tablet": {
                    top: attributes.socialIconMarginTTablet,
                    right: attributes.socialIconMarginRTablet,
                    bottom: attributes.socialIconMarginBTablet,
                    left: attributes.socialIconMarginLTablet
                },
                "Mobile": {
                    top: attributes.socialIconMarginTMobile,
                    right: attributes.socialIconMarginRMobile,
                    bottom: attributes.socialIconMarginBMobile,
                    left: attributes.socialIconMarginLMobile
                }
            },
            socialIconPadding: {
                "Desktop": {
                    top: attributes.socialIconPaddingTop,
                    right: attributes.socialIconPaddingRight,
                    bottom: attributes.socialIconPaddingBottom,
                    left: attributes.socialIconPaddingLeft
                },
                "Tablet": {
                    top: attributes.socialIconPaddingTTablet,
                    right: attributes.socialIconPaddingRTablet,
                    bottom: attributes.socialIconPaddingBTablet,
                    left: attributes.socialIconPaddingLTablet
                },
                "Mobile": {
                    top: attributes.socialIconPaddingTMobile,
                    right: attributes.socialIconPaddingRMobile,
                    bottom: attributes.socialIconPaddingBMobile,
                    left: attributes.socialIconPaddingLMobile
                }
            },
            socialIconBorder: {
                borderColor: attributes.socialIconStyles[0].borderTypeIcon,
                borderType: attributes.socialIconStyles[0].borderColorIcon,
                borderRadius: {
                    "Desktop": {
                        top: "",
                        right: "",
                        bottom: "",
                        left: ""
                    },
                    "Tablet": {
                        top: "",
                        right: "",
                        bottom: "",
                        left: ""
                    },
                    "Mobile": {
                        top: "",
                        right: "",
                        bottom: "",
                        left: ""
                    }
                },
                borderWidth: {
                    "Desktop": {
                        top: attributes.socialIconBorderTop,
                        right: attributes.socialIconBorderRight,
                        bottom: attributes.socialIconBorderBottom,
                        left: attributes.socialIconBorderLeft
                    },
                    "Tablet": {
                        top: "",
                        right: "",
                        bottom: "",
                        left: ""
                    },
                    "Mobile": {
                        top: "",
                        right: "",
                        bottom: "",
                        left: ""
                    }
                }
            }
        };
        return Object.assign(attributes, newAttributes);
    },
    save: function save(props) {
        var attributes = props.attributes,
            className = props.className;
        var id = attributes.id,
            personAlign = attributes.personAlign,
            imgBorder = attributes.imgBorder,
            imgBorderColor = attributes.imgBorderColor,
            imgSize = attributes.imgSize,
            nameV = attributes.nameV,
            titleStyles = attributes.titleStyles,
            socialIconStyles = attributes.socialIconStyles,
            nameStyles = attributes.nameStyles,
            descStyles = attributes.descStyles,
            titleV = attributes.titleV,
            descV = attributes.descV,
            socialIconHoverColor = attributes.socialIconHoverColor,
            effect = attributes.effect,
            effectDir = attributes.effectDir,
            multiPersonChecked = attributes.multiPersonChecked,
            borderHoverColor = attributes.borderHoverColor,
            hoverEffectPerson = attributes.hoverEffectPerson,
            effectPersonStyle = attributes.effectPersonStyle,
            multiPersonContent = attributes.multiPersonContent,
            rowPerson = attributes.rowPerson,
            change = attributes.change,
            blur = attributes.blur,
            bright = attributes.bright,
            contrast = attributes.contrast,
            saturation = attributes.saturation,
            hue = attributes.hue,
            contentColor = attributes.contentColor,
            bottomInfo = attributes.bottomInfo,
            socialIconBorder = attributes.socialIconBorder;


        var mainClasses = (0, _classnames2.default)(className, 'premium-person');

        var socialIconfn = function socialIconfn(v) {
            return React.createElement(
                "ul",
                { className: "premium-person__social-List" },
                v.map(function (value) {
                    return React.createElement(
                        "li",
                        null,
                        React.createElement(
                            "a",
                            { className: "premium-person__socialIcon__link_content " + (socialIconStyles[0].defaultIconColor ? value.label : ""), href: "" + value.value, style: {
                                    borderStyle: socialIconBorder.borderType,
                                    borderColor: socialIconBorder.borderColor,
                                    background: socialIconStyles[0].socialIconBackgroundColor
                                } },
                            React.createElement("i", { className: "premium-person__socialIcon " + (value.label == "youtube" ? "fa fa-youtube-play" : "fa fa-" + value.label) + " premium-person__" + socialIconHoverColor,
                                style: {
                                    color: socialIconStyles[0].socialIconColor
                                }
                            })
                        )
                    );
                })
            );
        };
        var content = function content() {
            return React.createElement(
                "div",
                { className: "premium-person-content " + id + " " + (multiPersonChecked > 1 ? "premium-person__" + rowPerson : "")
                },
                " ",
                multiPersonContent.map(function (value) {
                    return React.createElement(
                        "div",
                        { key: value.id, className: "premium-person__inner premium-persson__min premium-person__" + effectPersonStyle + " premium-person__" + hoverEffectPerson },
                        React.createElement(
                            "div",
                            { className: "premium-person__img__container" },
                            React.createElement(
                                "div",
                                {
                                    className: "premium-person__img_wrap"
                                },
                                value.personImgUrl && React.createElement("img", {
                                    className: "premium-person__img",
                                    src: "" + value.personImgUrl,
                                    alt: "Person",
                                    style: {
                                        borderWidth: imgBorder + "px",
                                        borderColor: imgBorderColor,
                                        width: imgSize + "px",
                                        height: imgSize + "px",
                                        filter: "" + (change ? "brightness( " + bright + "% ) contrast( " + contrast + "% ) saturate( " + saturation + "% ) blur( " + blur + "px ) hue-rotate( " + hue + "deg )" : "")
                                    }
                                }),
                                !value.personImgUrl && React.createElement(_defaultImage2.default, { className: className })
                            ),
                            effectPersonStyle === 'effect2' ? React.createElement(
                                "div",
                                { className: "premium-person__socialEffect2" },
                                value.socialIcon && socialIconfn(value.items)
                            ) : ""
                        ),
                        React.createElement(
                            "div",
                            {
                                className: "premium-person__info",
                                style: {
                                    background: contentColor ? contentColor : "#f2f2f2",
                                    bottom: effectPersonStyle === 'effect1' ? bottomInfo + "px" : ""
                                }
                            },
                            React.createElement(
                                "div",
                                { className: "premium-person__name_wrap" },
                                value.name && React.createElement(
                                    "span",
                                    {
                                        className: "premium-person__name",
                                        style: {
                                            color: nameStyles[0].nameColor,
                                            fontWeight: nameStyles[0].nameWeight,
                                            alignSelf: nameV,
                                            letterSpacing: nameStyles[0].nameLetter + "px",
                                            lineHeight: nameStyles[0].nameLine + "px",
                                            fontStyle: nameStyles[0].nameStyle,
                                            textTransform: nameStyles[0].nameUpper ? "uppercase" : "none",
                                            textShadow: nameStyles[0].nameshadowHorizontal + "px " + nameStyles[0].nameshadowVertical + "px " + nameStyles[0].nameshadowBlur + "px " + nameStyles[0].nameshadowColor
                                        }
                                    },
                                    value.name
                                )
                            ),
                            React.createElement(
                                "div",
                                { className: "premium-person__title_wrap" },
                                value.title && React.createElement(
                                    "span",
                                    {
                                        className: "premium-person__title",
                                        style: {
                                            color: titleStyles[0].titleColor,
                                            fontWeight: titleStyles[0].titleWeight,
                                            alignSelf: titleV,
                                            letterSpacing: titleStyles[0].titleLetter + "px",
                                            lineHeight: titleStyles[0].titleLine + "px",
                                            fontStyle: titleStyles[0].titleStyle,
                                            textTransform: titleStyles[0].titleUpper ? "uppercase" : "none",
                                            textShadow: titleStyles[0].titleshadowHorizontal + "px " + titleStyles[0].titleshadowVertical + "px " + titleStyles[0].titleshadowBlur + "px " + titleStyles[0].titleshadowColor
                                        }
                                    },
                                    value.title
                                )
                            ),
                            React.createElement(
                                "div",
                                { className: "premium-person__desc_wrap" },
                                value.desc && React.createElement(
                                    "span",
                                    {
                                        className: "premium-person__desc",
                                        style: {
                                            color: descStyles[0].descColor,
                                            fontWeight: descStyles[0].descWeight,
                                            alignSelf: descV,
                                            letterSpacing: descStyles[0].descLetter + "px",
                                            lineHeight: descStyles[0].descLine + "px",
                                            fontStyle: descStyles[0].descStyle,
                                            textTransform: descStyles[0].descUpper ? "uppercase" : "none",
                                            textShadow: descStyles[0].descshadowHorizontal + "px " + descStyles[0].descshadowVertical + "px " + descStyles[0].descshadowBlur + "px " + descStyles[0].descshadowColor
                                        }
                                    },
                                    value.desc
                                )
                            ),
                            effectPersonStyle == 'effect1' ? React.createElement(
                                "div",
                                null,
                                value.socialIcon && socialIconfn(value.items)
                            ) : ""
                        )
                    );
                })
            );
        };

        return React.createElement(
            "div",
            {
                id: "premium-person-" + id,
                className: mainClasses + " premium-person__" + effect + " premium-person__" + effectDir,
                style: { textAlign: personAlign }
            },
            React.createElement("style", {
                dangerouslySetInnerHTML: {
                    __html: ["#premium-person-" + id + " .premium-person:hover {", "border-color: " + borderHoverColor + " !important;", "}", "#premium-person-" + id + " .premium-person__social-List li:hover i{", "color: " + socialIconStyles[0].socialIconHoverColor + " !important;", "-webkit-transition: all .2s ease-in-out;", "transition: all .2s ease-in-out;", "}"].join("\n")
                }
            }),
            content()
        );
    }
}];
exports.default = deprecated;

/***/ }),
/* 404 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
var __ = wp.i18n.__;

var attributes = {
    personSize: {
        type: "string",
        default: "md"
    },
    personAlign: {
        type: "string",
        default: "center"
    },
    imgSize: {
        type: "number"
    },
    imgBorder: {
        type: "number",
        default: "1"
    },
    imgBorderColor: {
        type: "string"
    },
    nameStyles: {
        type: "array",
        default: [{
            nameColor: "rgb(110, 193, 228)",
            nameLetter: 0,
            nameStyle: '',
            nameUpper: false,
            nameWeight: 500,
            nameLine: 0,
            namefontSize: 20,
            namefontSizeType: "px",
            namefontSizeMobile: 20,
            namefontSizeTablet: 20,
            nameshadowColor: '',
            nameshadowBlur: 0,
            nameshadowHorizontal: 0,
            nameshadowVertical: 0
        }]
    },
    titleStyles: {
        type: "array",
        default: [{
            titleColor: "",
            titleLetter: 0,
            titleStyle: '',
            titleUpper: false,
            titleWeight: 500,
            titleLine: 0,
            titleSize: 20,
            titlefontSizeType: "px",
            titlefontSizeMobile: 20,
            titlefontSizeTablet: 20,
            titleshadowColor: '',
            titleshadowBlur: 0,
            titleshadowHorizontal: 0,
            titleshadowVertical: 0
        }]
    },
    descStyles: {
        type: "array",
        default: [{
            descColor: "",
            descLetter: 0,
            descStyle: '',
            descUpper: false,
            descWeight: '',
            descLine: 0,
            descSize: 20,
            descfontSizeType: "px",
            descfontSizeMobile: 20,
            descfontSizeTablet: 20,
            descshadowColor: '',
            descshadowBlur: 0,
            descshadowHorizontal: 0,
            descshadowVertical: 0
        }]
    },
    socialIconStyles: {
        type: "array",
        default: [{
            socialIconColor: "",
            socialIconHoverColor: '',
            socialIconBackgroundColor: '',
            defaultIconColor: false,
            socialIconSize: 20,
            socialIconfontSizeType: "px",
            socialIconfontSizeMobile: 20,
            socialIconfontSizeTablet: 20,
            borderTypeIcon: 'none',
            borderWidthIcon: '1',
            borderRadiusIcon: '0',
            borderColorIcon: '',
            socialIconPaddingType: 'px',
            socialIconMarginType: 'px'
        }]
    },
    titleTag: {
        type: "string",
        default: "p"
    },
    contentColor: {
        type: "string"
    },
    bottomInfo: {
        type: "number",
        default: 15
    },
    effect: {
        type: "string",
        default: "none"
    },
    effectDir: {
        type: "string",
        default: "top"
    },
    descColor: {
        type: "string",
        default: "#000"
    },
    multiPersonChecked: {
        type: "number",
        default: 1
    },
    borderHoverColor: {
        type: "string"
    },
    personShadowPosition: {
        type: "string",
        default: ""
    },
    id: {
        type: "string"
    },
    classMigrate: {
        type: "boolean",
        default: false
    },
    hoverEffectPerson: {
        type: "string",
        default: "none"
    },
    selectedSocialMediaIcon: {
        type: "string"
    },
    effectPersonStyle: {
        type: "string",
        default: "effect1"
    },
    rowPerson: {
        type: "string",
        default: "column1"
    },
    multiPersonContent: {
        type: "array",
        default: [{
            id: 1,
            personImgUrl: "",
            personImgId: '',
            name: "John Doe",
            title: "Senior Developer",
            desc: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec ullamcorper nulla non metus auctor fringilla",
            socialIcon: false,
            items: [{ label: 'facebook', link: false, value: "#", changeinput: "#" }, { label: 'twitter', link: false, value: "#", changeinput: "#" }, { label: 'instagram', link: false, value: "#", changeinput: "#" }, { label: 'youtube', link: false, value: "#", changeinput: "#" }]
        }]
    },
    change: {
        type: "boolean",
        default: false
    },
    blur: {
        type: "number",
        default: "0"
    },
    bright: {
        type: "number",
        default: "100"
    },
    contrast: {
        type: "number",
        default: "100"
    },
    saturation: {
        type: "number",
        default: "100"
    },
    hue: {
        type: "number",
        default: "0"
    },
    socialIconMargin: {
        type: "object",
        default: {
            Desktop: {
                top: "",
                right: "",
                bottom: "",
                left: ""
            },
            Tablet: {
                top: "",
                right: "",
                bottom: "",
                left: ""
            },
            Mobile: {
                top: "",
                right: "",
                bottom: "",
                left: ""
            },
            unit: "px"
        }
    },
    socialIconPadding: {
        type: "object",
        default: {
            Desktop: {
                top: "",
                right: "",
                bottom: "",
                left: ""
            },
            Tablet: {
                top: "",
                right: "",
                bottom: "",
                left: ""
            },
            Mobile: {
                top: "",
                right: "",
                bottom: "",
                left: ""
            },
            unit: "px"
        }
    },
    socialIconBorder: {
        type: "object",
        default: {
            borderColor: "",
            borderType: "none",
            borderRadius: {
                Desktop: {
                    top: "",
                    right: "",
                    bottom: "",
                    left: ""
                },
                Tablet: {
                    top: "",
                    right: "",
                    bottom: "",
                    left: ""
                },
                Mobile: {
                    top: "",
                    right: "",
                    bottom: "",
                    left: ""
                }
            },
            borderWidth: {
                Desktop: {
                    top: "",
                    right: "",
                    bottom: "",
                    left: ""
                },
                Tablet: {
                    top: "",
                    right: "",
                    bottom: "",
                    left: ""
                },
                Mobile: {
                    top: "",
                    right: "",
                    bottom: "",
                    left: ""
                }
            }
        }
    }
};
exports.default = attributes;

/***/ }),
/* 405 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _settings = __webpack_require__(1);

var _save = __webpack_require__(406);

var _save2 = _interopRequireDefault(_save);

var _edit = __webpack_require__(407);

var _edit2 = _interopRequireDefault(_edit);

var _icons = __webpack_require__(4);

var _icons2 = _interopRequireDefault(_icons);

var _attributes = __webpack_require__(408);

var _attributes2 = _interopRequireDefault(_attributes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __ = wp.i18n.__;
var registerBlockType = wp.blocks.registerBlockType;


registerBlockType("premium/heading", {
    title: __("Heading"),
    icon: React.createElement(_icons2.default, { icon: "heading" }),
    category: "premium-blocks",
    attributes: _attributes2.default,
    supports: {
        inserter: _settings.heading
    },
    edit: _edit2.default,
    save: _save2.default
});

/***/ }),
/* 406 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = save;
var Fragment = wp.element.Fragment;
var RichText = wp.blockEditor.RichText;
function save(props) {
    var attributes = props.attributes;
    var block_id = attributes.block_id,
        align = attributes.align,
        titleTag = attributes.titleTag,
        style = attributes.style,
        title = attributes.title,
        iconValue = attributes.iconValue,
        iconType = attributes.iconType,
        icon = attributes.icon,
        lottieURl = attributes.lottieURl,
        loop = attributes.loop,
        reversedir = attributes.reversedir,
        iconPosition = attributes.iconPosition,
        imageURL = attributes.imageURL,
        link = attributes.link,
        url = attributes.url,
        target = attributes.target,
        iconAlign = attributes.iconAlign,
        stripePosition = attributes.stripePosition,
        stripeStyles = attributes.stripeStyles,
        strokeStyles = attributes.strokeStyles,
        titleStyles = attributes.titleStyles,
        titleBorderTop = attributes.titleBorderTop,
        titleBorderRight = attributes.titleBorderRight,
        titleBorderBottom = attributes.titleBorderBottom,
        titleBorderLeft = attributes.titleBorderLeft,
        titleBorderUpdated = attributes.titleBorderUpdated,
        titleBorderWidth = attributes.titleBorderWidth,
        iconStyles = attributes.iconStyles,
        backgroundType = attributes.backgroundType,
        iconBorderWidth = attributes.iconBorderWidth,
        iconBorderUpdated = attributes.iconBorderUpdated,
        textStyles = attributes.textStyles,
        stripeAlign = attributes.stripeAlign,
        iconBorderTop = attributes.iconBorderTop,
        iconBorderRight = attributes.iconBorderRight,
        iconBorderBottom = attributes.iconBorderBottom,
        iconBorderLeft = attributes.iconBorderLeft,
        backgroundText = attributes.backgroundText,
        BackText = attributes.BackText,
        textWidth = attributes.textWidth,
        blend = attributes.blend,
        zIndex = attributes.zIndex,
        hideDesktop = attributes.hideDesktop,
        hideTablet = attributes.hideTablet,
        hideMobile = attributes.hideMobile;


    var styleContainer = title.split("").map(function (letter) {
        return React.createElement(RichText.Content, {
            tagName: 'span',
            className: 'premium-title-style9-letter',
            value: letter,
            style: {
                color: titleStyles[0].titleColor
            }
        });
    });

    var btnGrad = void 0,
        btnGrad2 = void 0,
        btnbg = void 0;

    if (undefined !== backgroundType && 'gradient' === backgroundType) {
        btnGrad = 'transparent' === iconStyles[0].containerBack || undefined === iconStyles[0].containerBack ? 'rgba(255,255,255,0)' : iconStyles[0].containerBack;
        btnGrad2 = undefined !== iconStyles[0].gradientColorTwo && undefined !== iconStyles[0].gradientColorTwo && '' !== iconStyles[0].gradientColorTwo ? iconStyles[0].gradientColorTwo : '#777';
        if ('radial' === iconStyles[0].gradientType) {
            btnbg = 'radial-gradient(at ' + iconStyles[0].gradientPosition + ', ' + btnGrad + ' ' + iconStyles[0].gradientLocationOne + '%, ' + btnGrad2 + ' ' + iconStyles[0].gradientLocationTwo + '%)';
        } else if ('radial' !== iconStyles[0].gradientType) {
            btnbg = 'linear-gradient(' + iconStyles[0].gradientAngle + 'deg, ' + btnGrad + ' ' + iconStyles[0].gradientLocationOne + '%, ' + btnGrad2 + ' ' + iconStyles[0].gradientLocationTwo + '%)';
        }
    } else {
        btnbg = iconStyles[0].backgroundImageURL ? 'url(\'' + iconStyles[0].backgroundImageURL + '\')' : '';
    }

    var renderCss = React.createElement(
        'style',
        null,
        '\n                    #premium-title-' + block_id + ' .premium-title-style8__wrap .premium-title-text-title[data-animation=\'shiny\'] {\n                        --base-color: ' + titleStyles[0].titleColor + ' !important;\n                        --shiny-color: ' + titleStyles[0].shinyColor + ' !important;\n                        --animation-speed: ' + titleStyles[0].animateduration + 's !important;\n                    }\n                    #premium-title-' + block_id + ' .premium-title-header {\n                        --shadow-color: ' + titleStyles[0].blurColor + ' !important;\n                        --shadow-value: ' + titleStyles[0].blurShadow + 'px !important;\n                        color: ' + titleStyles[0].titleColor + ' !important;\n                    }\n                    #premium-title-' + block_id + ' .premium-title .style1 .premium-title-header {\n                        border-style: ' + titleStyles[0].titleborderType + ' !important;\n                        border-width: ' + (titleBorderUpdated ? titleBorderTop + 'px ' + titleBorderRight + 'px ' + titleBorderBottom + 'px ' + titleBorderLeft + 'px' : titleBorderWidth + "px") + ' !important;\n                        border-radius: ' + (titleStyles[0].titleborderRadius || 0) + 'px !important;\n                        border-color: ' + titleStyles[0].titleborderColor + ' !important;\n                        border-left: ' + (titleBorderLeft >= "1" ? titleBorderLeft + 'px ' + titleStyles[0].titleborderType + ' ' + titleStyles[0].titleborderColor : "") + ' !important;\n                    }\n                    #premium-title-' + block_id + ' .premium-title .style2{\n                        border-style: ' + titleStyles[0].titleborderType + ' !important;\n                        border-width: ' + (titleBorderUpdated ? titleBorderTop + 'px ' + titleBorderRight + 'px ' + titleBorderBottom + 'px ' + titleBorderLeft + 'px' : titleBorderWidth + "px") + '!important;\n                        border-radius: ' + (titleStyles[0].titleborderRadius || 0) + 'px !important;\n                        border-color: ' + titleStyles[0].titleborderColor + '!important;\n                        border-bottom: ' + (titleBorderBottom >= "0" ? titleBorderBottom + 'px ' + titleStyles[0].titleborderType + ' ' + titleStyles[0].titleborderColor + ' !important' : "") + ';\n                    }\n                    #premium-title-' + block_id + ' .premium-title .style4{\n                        border-style: ' + titleStyles[0].titleborderType + ' !important;\n                        border-width: ' + (titleBorderUpdated ? titleBorderTop + 'px ' + titleBorderRight + 'px ' + titleBorderBottom + 'px ' + titleBorderLeft + 'px' : titleBorderWidth + "px") + ' !important;\n                        border-radius: ' + (titleStyles[0].titleborderRadius || 0) + 'px !important;\n                        border-color: ' + titleStyles[0].titleborderColor + ' !important;\n                        border-bottom: ' + (titleBorderBottom >= "0" ? titleBorderBottom + 'px ' + titleStyles[0].titleborderType + ' ' + titleStyles[0].titleborderColor + ' !important' : "") + ';\n                    }\n                    #premium-title-' + block_id + ' .premium-title .style5{\n                        border-style: ' + titleStyles[0].titleborderType + ' !important;\n                        border-width: ' + (titleBorderUpdated ? titleBorderTop + 'px ' + titleBorderRight + 'px ' + titleBorderBottom + 'px ' + titleBorderLeft + 'px' : titleBorderWidth + "px") + ' !important;\n                        border-radius: ' + (titleStyles[0].titleborderRadius || 0) + 'px !important;\n                        border-color: ' + titleStyles[0].titleborderColor + ' !important;\n                        border-bottom: ' + (titleBorderBottom >= "0" ? titleBorderBottom + 'px ' + titleStyles[0].titleborderType + ' ' + titleStyles[0].titleborderColor + ' !important' : "") + ';\n                    }\n                    #premium-title-' + block_id + ' .premium-title .style6{\n                        border-style: ' + titleStyles[0].titleborderType + ' !important;\n                        border-width: ' + (titleBorderUpdated ? titleBorderTop + 'px ' + titleBorderRight + 'px ' + titleBorderBottom + 'px ' + titleBorderLeft + 'px' : titleBorderWidth + "px") + ' !important;\n                        border-radius: ' + (titleStyles[0].titleborderRadius || 0) + 'px !important;\n                        border-color: ' + titleStyles[0].titleborderColor + ' !important;\n                        border-bottom: ' + (titleBorderBottom >= "0" ? titleBorderBottom + 'px ' + titleStyles[0].titleborderType + ' ' + titleStyles[0].titleborderColor + ' !important' : "") + ';\n                    }\n                    #premium-title-' + block_id + ' .premium-title-style2__wrap {\n                        background-color: ' + titleStyles[0].BGColor + ' !important;\n                    }\n                    #premium-title-' + block_id + ' .premium-title-style3__wrap {\n                        background-color: ' + titleStyles[0].BGColor + ' !important;\n                    }\n                    #premium-title-' + block_id + ' .premium-title-style5__wrap {\n                        border-bottom: 2px solid ' + titleStyles[0].lineColor + ' !important;\n                    }\n                    #premium-title-' + block_id + ' .premium-title-style6__wrap {\n                        border-bottom: 2px solid ' + titleStyles[0].lineColor + ' !important;\n                    }\n                    #premium-title-' + block_id + ' .premium-title-style6__wrap:before {\n                        border-bottom-color: ' + titleStyles[0].triangleColor + ' !important;\n                    }\n                    #premium-title-' + block_id + ' .premium-title-icon {\n                        color: ' + iconStyles[0].iconColor + ' !important;\n                        background-color: ' + (backgroundType === "solid" ? iconStyles[0].containerBack : "transparent") + ' !important;\n                        background-image: ' + btnbg + ' !important;\n                        background-repeat: ' + iconStyles[0].backgroundRepeat + ' !important;\n                        background-position: ' + iconStyles[0].backgroundPosition + ' !important;\n                        background-size: ' + iconStyles[0].backgroundSize + ' !important;\n                        background-attachment: ' + (iconStyles[0].fixed ? "fixed" : "unset") + ' !important;\n                        border-style: ' + iconStyles[0].iconborderType + ' !important;\n                        border-width: ' + (iconBorderUpdated ? iconBorderTop + 'px ' + iconBorderRight + 'px ' + iconBorderBottom + 'px ' + iconBorderLeft + 'px' : iconBorderWidth + "px") + ' !important;\n                        border-radius: ' + (iconStyles[0].iconborderRadius || 0) + 'px !important;\n                        border-color: ' + iconStyles[0].iconborderColor + ' !important;\n                        text-shadow: ' + iconStyles[0].iconshadowHorizontal + 'px ' + iconStyles[0].iconshadowVertical + 'px ' + iconStyles[0].iconshadowBlur + 'px ' + iconStyles[0].iconshadowColor + ' !important;\n                    }\n                    #premium-title-' + block_id + ' .premium-title-bg-text:before {\n                        content: ' + BackText + ';\n                        width: ' + textWidth + ';\n                        color: ' + textStyles[0].textBackColor + ' !important;\n                        font-weight: ' + textStyles[0].textBackWeight + ' !important;\n                        letter-spacing: ' + textStyles[0].textBackLetter + 'px !important;\n                        line-height: ' + textStyles[0].textBackLine + 'px !important;\n                        font-style: ' + textStyles[0].textBackStyle + ' !important;\n                        text-transform: ' + (textStyles[0].textBackUpper ? "uppercase" : "none") + ' !important;\n                        font-family: ' + textStyles[0].textBackFontFamily + ' !important;\n                        text-shadow: ' + textStyles[0].textBackshadowHorizontal + 'px ' + textStyles[0].textBackshadowVertical + 'px ' + textStyles[0].textBackshadowBlur + 'px ' + textStyles[0].textBackshadowColor + ' !important;\n                        mix-blend-mode: ' + blend + ' !important;\n                        z-index: ' + zIndex + ' !important;\n                        -webkit-text-stroke-color: ' + strokeStyles[0].strokeColor + ' !important;\n                    }\n                    #premium-title-' + block_id + ' .premium-title-style7-stripe-span {\n                        background-color: ' + titleStyles[0].stripeColor + ' !important;\n                    }\n                    #premium-title-' + block_id + ' .premium-title-style9__wrap .premium-letters-container .premium-title-style9-letter {\n                        font-weight: ' + titleStyles[0].titleWeight + ' !important;\n                        letter-spacing: ' + titleStyles[0].titleLetter + 'px !important;\n                        line-height: ' + (titleStyles[0].titleLine ? titleStyles[0].titleLine : '') + 'px !important;\n                        font-style: ' + titleStyles[0].titleStyle + ' !important;\n                        text-transform: ' + (titleStyles[0].titleUpper ? "uppercase" : "none") + ' !important;\n                        font-family: ' + titleStyles[0].titleFontFamily + ' !important;\n                        text-shadow: ' + titleStyles[0].titleShadowHorizontal + 'px ' + titleStyles[0].titleShadowVertical + 'px ' + titleStyles[0].titleShadowBlur + 'px ' + titleStyles[0].titleShadowColor + ' !important;\n                    }\n                '
    );

    return React.createElement(
        'div',
        {
            id: 'premium-title-' + block_id,
            className: 'premium-block-' + block_id + ' ' + hideDesktop + ' ' + hideTablet + ' ' + hideMobile,
            style: {
                textAlign: align
            } },
        renderCss,
        React.createElement(
            'div',
            { className: 'premium-title   ' + (backgroundText ? 'premium-title-bg-text' : ""), style: {
                    textAlign: align
                }, 'data-backgroundText': BackText },
            React.createElement(
                'div',
                { className: 'premium-title-container ' + style + ' ' + style + '-' + align, 'data-blur-delay': titleStyles[0].animateDelay, 'data-shiny-dur': titleStyles[0].animateduration },
                React.createElement(titleTag, {
                    className: 'premium-title-header premium-title-' + style + '__wrap ' + align + ' ' + (iconValue ? iconPosition : "") + ' ' + (iconPosition == 'top' ? 'premium-title-' + iconAlign : ""),
                    'data-blur-delay': '' + titleStyles[0].animateDelay,
                    'data-shiny-dur': '' + titleStyles[0].animateduration,
                    style: {
                        color: titleStyles[0].titleColor,
                        fontWeight: titleStyles[0].titleWeight,
                        letterSpacing: titleStyles[0].titleLetter + "px",
                        lineHeight: (titleStyles[0].titleLine ? titleStyles[0].titleLine : "") + "px",
                        fontStyle: titleStyles[0].titleStyle,
                        textTransform: titleStyles[0].titleUpper ? "uppercase" : "none",
                        fontFamily: titleStyles[0].titleFontFamily,
                        textShadow: titleStyles[0].titleShadowHorizontal + 'px ' + titleStyles[0].titleShadowVertical + 'px ' + titleStyles[0].titleShadowBlur + 'px ' + titleStyles[0].titleShadowColor
                    }
                }, [React.createElement(
                    Fragment,
                    null,
                    style === 'style7' ? React.createElement(
                        Fragment,
                        null,
                        iconPosition != 'top' && iconValue && React.createElement(
                            'span',
                            { className: 'premium-title-style7-stripe__wrap premium-stripe-' + stripePosition + ' premium-stripe-' + stripeAlign },
                            React.createElement('span', { className: 'premium-title-style7-stripe-span' })
                        ),
                        !iconValue && React.createElement(
                            'span',
                            { className: 'premium-title-style7-stripe__wrap premium-stripe-' + stripePosition + ' premium-stripe-' + stripeAlign },
                            React.createElement('span', { className: 'premium-title-style7-stripe-span' })
                        ),
                        React.createElement(
                            'div',
                            { className: 'premium-title-style7-inner-title' },
                            iconValue && iconType == 'icon' && React.createElement('i', { className: 'premium-title-icon ' + icon }),
                            iconValue && iconType == 'image' && React.createElement('img', { className: 'premium-title-icon', src: imageURL }),
                            iconValue && iconType == 'lottie' && React.createElement('div', {
                                className: 'premium-title-icon premium-lottie-animation',
                                'data-loop': loop,
                                'data-lottieurl': '' + lottieURl,
                                'data-reverse': reversedir,
                                'data-trigger': "none"
                            }),
                            iconPosition === 'top' && React.createElement(
                                'span',
                                { className: 'premium-title-style7-stripe__wrap premium-stripe-' + stripePosition + ' premium-stripe-' + stripeAlign },
                                React.createElement('span', { className: 'premium-title-style7-stripe-span' })
                            ),
                            React.createElement(RichText.Content, {
                                tagName: 'span',
                                className: 'premium-title-text-title',
                                value: title,
                                style: {
                                    color: titleStyles[0].titleColor
                                }
                            })
                        )
                    ) : style === "style9" ? React.createElement(
                        Fragment,
                        null,
                        iconValue && iconType == 'icon' && React.createElement('i', { className: 'premium-title-icon ' + icon }),
                        iconValue && iconType == 'image' && React.createElement('img', { className: 'premium-title-icon', src: imageURL }),
                        iconValue && iconType == 'lottie' && React.createElement('div', {
                            className: 'premium-title-icon premium-lottie-animation',
                            'data-loop': loop,
                            'data-lottieurl': '' + lottieURl,
                            'data-reverse': reversedir,
                            'data-trigger': "none"
                        }),
                        React.createElement(
                            'span',
                            {
                                className: 'premium-letters-container',
                                style: {
                                    color: titleStyles[0].titleColor
                                }
                            },
                            styleContainer
                        )
                    ) : React.createElement(
                        Fragment,
                        null,
                        iconValue && iconType == 'icon' && React.createElement('i', { className: 'premium-title-icon ' + icon }),
                        iconValue && iconType == 'image' && React.createElement('img', { className: 'premium-title-icon', src: imageURL }),
                        iconValue && iconType == 'lottie' && React.createElement('div', {
                            className: 'premium-title-icon premium-lottie-animation',
                            'data-loop': loop,
                            'data-lottieurl': '' + lottieURl,
                            'data-reverse': reversedir,
                            'data-trigger': "none"
                        }),
                        React.createElement(RichText.Content, {
                            tagName: 'span',
                            className: 'premium-title-text-title',
                            value: title,
                            style: {
                                minHeight: '15px',
                                margin: 'revert'
                            }
                        })
                    ),
                    link && url !== ' ' && React.createElement('a', { rel: 'noopener noreferrer', target: "_self", href: '' + url })
                )])
            )
        )
    );
}

/***/ }),
/* 407 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _premiumTypo = __webpack_require__(7);

var _premiumTypo2 = _interopRequireDefault(_premiumTypo);

var _premiumBorder = __webpack_require__(6);

var _premiumBorder2 = _interopRequireDefault(_premiumBorder);

var _premiumIconsList = __webpack_require__(31);

var _premiumIconsList2 = _interopRequireDefault(_premiumIconsList);

var _reactFonticonpicker = __webpack_require__(24);

var _reactFonticonpicker2 = _interopRequireDefault(_reactFonticonpicker);

var _ColorComponent = __webpack_require__(2);

var _ColorComponent2 = _interopRequireDefault(_ColorComponent);

var _PremiumShadow = __webpack_require__(5);

var _PremiumShadow2 = _interopRequireDefault(_PremiumShadow);

var _premiumResponsiveTabs = __webpack_require__(8);

var _premiumResponsiveTabs2 = _interopRequireDefault(_premiumResponsiveTabs);

var _responsiveRangeControl = __webpack_require__(19);

var _responsiveRangeControl2 = _interopRequireDefault(_responsiveRangeControl);

var _PremiumBackgroundControl = __webpack_require__(23);

var _PremiumBackgroundControl2 = _interopRequireDefault(_PremiumBackgroundControl);

var _singleRangeControl = __webpack_require__(3);

var _singleRangeControl2 = _interopRequireDefault(_singleRangeControl);

var _premiumMediaUpload = __webpack_require__(12);

var _premiumMediaUpload2 = _interopRequireDefault(_premiumMediaUpload);

var _reactLottieWithSegments = __webpack_require__(71);

var _reactLottieWithSegments2 = _interopRequireDefault(_reactLottieWithSegments);

var _PremiumResponsiveMargin = __webpack_require__(52);

var _PremiumResponsiveMargin2 = _interopRequireDefault(_PremiumResponsiveMargin);

var _PremiumResponsivePadding = __webpack_require__(16);

var _PremiumResponsivePadding2 = _interopRequireDefault(_PremiumResponsivePadding);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var __ = wp.i18n.__;
var withSelect = wp.data.withSelect;
var _wp$element = wp.element,
    Component = _wp$element.Component,
    Fragment = _wp$element.Fragment;
var _wp$editor = wp.editor,
    InspectorControls = _wp$editor.InspectorControls,
    RichText = _wp$editor.RichText;
var _wp$components = wp.components,
    PanelBody = _wp$components.PanelBody,
    SelectControl = _wp$components.SelectControl,
    TextControl = _wp$components.TextControl,
    Toolbar = _wp$components.Toolbar,
    ToggleControl = _wp$components.ToggleControl;


var istitleUpdated = null;

var edit = function (_Component) {
    _inherits(edit, _Component);

    function edit() {
        _classCallCheck(this, edit);

        var _this = _possibleConstructorReturn(this, (edit.__proto__ || Object.getPrototypeOf(edit)).apply(this, arguments));

        _this.handleStyle = _this.handleStyle.bind(_this);
        return _this;
    }

    _createClass(edit, [{
        key: "componentDidMount",
        value: function componentDidMount() {
            // Assigning id in the attribute.
            this.props.setAttributes({ block_id: this.props.clientId });
            this.props.setAttributes({ classMigrate: true });
            // Pushing Style tag for this block css.
            var $style = document.createElement("style");
            $style.setAttribute("id", "premium-style-title-" + this.props.clientId);
            document.head.appendChild($style);
            this.handleStyle = this.handleStyle.bind(this);
            this.getPreviewSize = this.getPreviewSize.bind(this);
        }
    }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
            clearTimeout(istitleUpdated);
            istitleUpdated = setTimeout(this.handleStyle, 400);
        }
    }, {
        key: "getPreviewSize",
        value: function getPreviewSize(device, desktopSize, tabletSize, mobileSize) {
            if (device === 'Mobile') {
                if (undefined !== mobileSize && '' !== mobileSize) {
                    return mobileSize;
                } else if (undefined !== tabletSize && '' !== tabletSize) {
                    return tabletSize;
                }
            } else if (device === 'Tablet') {
                if (undefined !== tabletSize && '' !== tabletSize) {
                    return tabletSize;
                }
            }
            return desktopSize;
        }
    }, {
        key: "handleStyle",
        value: function handleStyle() {
            var titleStyles = this.props.attributes.titleStyles;

            var titleContainers = document.querySelectorAll(".premium-title-container");
            titleContainers.forEach(function (titleContainer) {
                if (titleContainer.classList.contains("style8")) {
                    var shinyEffect = function shinyEffect() {
                        titleElement.setAttribute('data-animation', 'shiny');
                        setTimeout(function () {
                            titleElement.removeAttribute('data-animation');
                        }, duration);
                    };

                    var titleElement = titleContainer.querySelector(".premium-title-text-title"),
                        holdTime = titleStyles[0].animateDelay * 1000,
                        duration = titleStyles[0].animateduration * 1000;

                    (function repeat() {
                        shinyEffect();
                        setTimeout(repeat, holdTime);
                    })();
                }

                if (titleContainer.classList.contains("style9")) {
                    var style9 = document.querySelectorAll('.premium-title-style9__wrap');
                    style9.forEach(function (style) {
                        var holdTime = titleStyles[0].animateDelay * 1000;

                        style.setAttribute("data-animation-blur", "process");
                        style.querySelectorAll(".premium-title-style9-letter").forEach(function (letter, index) {
                            index += 1;
                            var delayTime = void 0;
                            if (document.getElementsByTagName("BODY")[0].classList.contains('.rtl')) {
                                delayTime = 0.2 / index + 's';
                            } else {
                                delayTime = index / 20 + 's';
                            }
                            letter.style.animationDelay = delayTime;
                        });
                        setInterval(function () {
                            style.setAttribute('data-animation-blur', 'done');
                            setTimeout(function () {
                                style.setAttribute('data-animation-blur', 'process');
                            }, 150);
                        }, holdTime);
                    });
                }
            });
        }
    }, {
        key: "render",
        value: function render() {
            var _props = this.props,
                attributes = _props.attributes,
                setAttributes = _props.setAttributes,
                isSelected = _props.isSelected;
            var block_id = attributes.block_id,
                align = attributes.align,
                titleTag = attributes.titleTag,
                style = attributes.style,
                title = attributes.title,
                iconValue = attributes.iconValue,
                iconType = attributes.iconType,
                icon = attributes.icon,
                lottieURl = attributes.lottieURl,
                loop = attributes.loop,
                reversedir = attributes.reversedir,
                iconPosition = attributes.iconPosition,
                imageURL = attributes.imageURL,
                imageID = attributes.imageID,
                link = attributes.link,
                url = attributes.url,
                target = attributes.target,
                iconAlign = attributes.iconAlign,
                stripePosition = attributes.stripePosition,
                stripeStyles = attributes.stripeStyles,
                strokeStyles = attributes.strokeStyles,
                titleStyles = attributes.titleStyles,
                titleBorderTop = attributes.titleBorderTop,
                titleBorderRight = attributes.titleBorderRight,
                titleBorderBottom = attributes.titleBorderBottom,
                titleBorderLeft = attributes.titleBorderLeft,
                titleBorderUpdated = attributes.titleBorderUpdated,
                titleBorderWidth = attributes.titleBorderWidth,
                iconStyles = attributes.iconStyles,
                backgroundType = attributes.backgroundType,
                iconBorderWidth = attributes.iconBorderWidth,
                iconBorderUpdated = attributes.iconBorderUpdated,
                textStyles = attributes.textStyles,
                stripeAlign = attributes.stripeAlign,
                iconBorderTop = attributes.iconBorderTop,
                iconBorderRight = attributes.iconBorderRight,
                iconBorderBottom = attributes.iconBorderBottom,
                iconBorderLeft = attributes.iconBorderLeft,
                titleMarginT = attributes.titleMarginT,
                titleMarginR = attributes.titleMarginR,
                titleMarginB = attributes.titleMarginB,
                titleMarginL = attributes.titleMarginL,
                titleMarginTTablet = attributes.titleMarginTTablet,
                titleMarginRTablet = attributes.titleMarginRTablet,
                titleMarginBTablet = attributes.titleMarginBTablet,
                titleMarginLTablet = attributes.titleMarginLTablet,
                titleMarginTMobile = attributes.titleMarginTMobile,
                titleMarginRMobile = attributes.titleMarginRMobile,
                titleMarginBMobile = attributes.titleMarginBMobile,
                titleMarginLMobile = attributes.titleMarginLMobile,
                titlePaddingT = attributes.titlePaddingT,
                titlePaddingR = attributes.titlePaddingR,
                titlePaddingB = attributes.titlePaddingB,
                titlePaddingL = attributes.titlePaddingL,
                titlePaddingTTablet = attributes.titlePaddingTTablet,
                titlePaddingRTablet = attributes.titlePaddingRTablet,
                titlePaddingBTablet = attributes.titlePaddingBTablet,
                titlePaddingLTablet = attributes.titlePaddingLTablet,
                titlePaddingTMobile = attributes.titlePaddingTMobile,
                titlePaddingRMobile = attributes.titlePaddingRMobile,
                titlePaddingBMobile = attributes.titlePaddingBMobile,
                titlePaddingLMobile = attributes.titlePaddingLMobile,
                iconPaddingT = attributes.iconPaddingT,
                iconPaddingR = attributes.iconPaddingR,
                iconPaddingL = attributes.iconPaddingL,
                iconPaddingB = attributes.iconPaddingB,
                iconPaddingTTablet = attributes.iconPaddingTTablet,
                iconPaddingRTablet = attributes.iconPaddingRTablet,
                iconPaddingLTablet = attributes.iconPaddingLTablet,
                iconPaddingBTablet = attributes.iconPaddingBTablet,
                iconPaddingTMobile = attributes.iconPaddingTMobile,
                iconPaddingRMobile = attributes.iconPaddingRMobile,
                iconPaddingLMobile = attributes.iconPaddingLMobile,
                iconPaddingBMobile = attributes.iconPaddingBMobile,
                iconMarginT = attributes.iconMarginT,
                iconMarginR = attributes.iconMarginR,
                iconMarginB = attributes.iconMarginB,
                iconMarginL = attributes.iconMarginL,
                iconMarginTTablet = attributes.iconMarginTTablet,
                iconMarginRTablet = attributes.iconMarginRTablet,
                iconMarginBTablet = attributes.iconMarginBTablet,
                iconMarginLTablet = attributes.iconMarginLTablet,
                iconMarginTMobile = attributes.iconMarginTMobile,
                iconMarginRMobile = attributes.iconMarginRMobile,
                iconMarginBMobile = attributes.iconMarginBMobile,
                iconMarginLMobile = attributes.iconMarginLMobile,
                backgroundText = attributes.backgroundText,
                BackText = attributes.BackText,
                textWidth = attributes.textWidth,
                blend = attributes.blend,
                zIndex = attributes.zIndex,
                hideDesktop = attributes.hideDesktop,
                hideTablet = attributes.hideTablet,
                hideMobile = attributes.hideMobile;


            var STYLE = [{
                value: "style1",
                label: __("Style 1")
            }, {
                value: "style2",
                label: __("Style 2")
            }, {
                value: "style3",
                label: "Style 3"
            }, {
                value: "style4",
                label: __("Style 4")
            }, {
                value: "style5",
                label: __("Style 5")
            }, {
                value: "style6",
                label: __("Style 6")
            }, {
                value: "style7",
                label: __("Style 7")
            }, {
                value: "style8",
                label: __("Style 8")
            }, {
                value: "style9",
                label: __("Style 9")
            }];

            var ICON = [{
                value: "icon",
                label: __("Icon")
            }, {
                value: "image",
                label: __("Image")
            }, {
                value: "lottie",
                label: __("Lottie Animation")
            }];

            var POSITION = [{
                value: "before",
                label: __("Before")
            }, {
                value: "after",
                label: __("After")
            }, {
                value: "top",
                label: __("Top")
            }];

            var TAGS = [{
                value: "h1",
                label: "H1"
            }, {
                value: "h2",
                label: "H2"
            }, {
                value: "h3",
                label: "H3"
            }, {
                value: "h4",
                label: "H4"
            }, {
                value: "h5",
                label: "H5"
            }, {
                value: "h6",
                label: "H6"
            }, {
                value: "div",
                label: "div"
            }, {
                value: "span",
                label: "span"
            }];

            var ALIGNS = ["left", "center", "right"];

            var STRIPEPOSITION = [{
                value: "top",
                label: __("Top")
            }, {
                value: "bottom",
                label: __("Bottom")
            }];

            var BLEND = [{
                label: 'Normal', value: 'normal'
            }, {
                label: 'Multiply', value: 'multiply'
            }, {
                label: 'Screen', value: 'screen'
            }, {
                label: 'Overlay', value: 'overlay'
            }, {
                label: 'Darken', value: 'darken'
            }, {
                label: 'Lighten', value: 'lighten'
            }, {
                label: 'Color Dodge', value: 'color-dodge'
            }, {
                label: 'Saturation', value: 'saturation'
            }, {
                label: 'Color', value: 'color'
            }, {
                label: 'Luminosity', value: 'luminosity'
            }];

            var TitleSize = this.getPreviewSize(this.props.deviceType, titleStyles[0].titlefontSize, titleStyles[0].titlefontSizeTablet, titleStyles[0].titlefontSizeMobile);
            var TitleMarginTop = this.getPreviewSize(this.props.deviceType, titleMarginT, titleMarginTTablet, titleMarginTMobile);
            var TitleMarginRight = this.getPreviewSize(this.props.deviceType, titleMarginR, titleMarginRTablet, titleMarginRMobile);
            var TitleMarginBottom = this.getPreviewSize(this.props.deviceType, titleMarginB, titleMarginBTablet, titleMarginBMobile);
            var TitleMarginLeft = this.getPreviewSize(this.props.deviceType, titleMarginL, titleMarginLTablet, titleMarginLMobile);
            var TitlePaddingTop = this.getPreviewSize(this.props.deviceType, titlePaddingT, titlePaddingTTablet, titlePaddingTMobile);
            var TitlePaddingRight = this.getPreviewSize(this.props.deviceType, titlePaddingR, titlePaddingRTablet, titlePaddingRMobile);
            var TitlePaddingBottom = this.getPreviewSize(this.props.deviceType, titlePaddingB, titlePaddingBTablet, titlePaddingBMobile);
            var TitlePaddingLeft = this.getPreviewSize(this.props.deviceType, titlePaddingL, titlePaddingLTablet, titlePaddingLMobile);
            var IconSize = this.getPreviewSize(this.props.deviceType, iconStyles[0].iconSize, iconStyles[0].iconSizeTablet, iconStyles[0].iconSizeMobile);
            var IconMarginTop = this.getPreviewSize(this.props.deviceType, iconMarginT, iconMarginTTablet, iconMarginTMobile);
            var IconMarginRight = this.getPreviewSize(this.props.deviceType, iconMarginR, iconMarginRTablet, iconMarginRMobile);
            var IconMarginBottom = this.getPreviewSize(this.props.deviceType, iconMarginB, iconMarginBTablet, iconMarginBMobile);
            var IconMarginLeft = this.getPreviewSize(this.props.deviceType, iconMarginL, iconMarginLTablet, iconMarginLMobile);
            var IconPaddingTop = this.getPreviewSize(this.props.deviceType, iconPaddingT, iconPaddingTTablet, iconPaddingTMobile);
            var IconPaddingRight = this.getPreviewSize(this.props.deviceType, iconPaddingR, iconPaddingRTablet, iconPaddingRMobile);
            var IconPaddingBottom = this.getPreviewSize(this.props.deviceType, iconPaddingB, iconPaddingBTablet, iconPaddingBMobile);
            var IconPaddingLeft = this.getPreviewSize(this.props.deviceType, iconPaddingL, iconPaddingLTablet, iconPaddingLMobile);
            var TextSize = this.getPreviewSize(this.props.deviceType, textStyles[0].textBackfontSize, textStyles[0].textBackfontSizeTablet, textStyles[0].textBackfontSizeMobile);
            var StripeWidth = this.getPreviewSize(this.props.deviceType, stripeStyles[0].stripeWidth, stripeStyles[0].stripeWidthTablet, stripeStyles[0].stripeWidthMobile);
            var StripeHeight = this.getPreviewSize(this.props.deviceType, stripeStyles[0].stripeHeight, stripeStyles[0].stripeHeightTablet, stripeStyles[0].stripeHeightMobile);
            var StripeMarginTop = this.getPreviewSize(this.props.deviceType, stripeStyles[0].stripeTopSpacing, stripeStyles[0].stripeTopSpacingTablet, stripeStyles[0].stripeTopSpacingMobile);
            var StripeMarginBottom = this.getPreviewSize(this.props.deviceType, stripeStyles[0].stripeBottomSpacing, stripeStyles[0].stripeBottomSpacingTablet, stripeStyles[0].stripeBottomSpacingMobile);
            var TextVertical = this.getPreviewSize(this.props.deviceType, textStyles[0].verticalText, textStyles[0].verticalTextTablet, textStyles[0].verticalTextMobile);
            var TextHorizontal = this.getPreviewSize(this.props.deviceType, textStyles[0].horizontalText, textStyles[0].horizontalTextTablet, textStyles[0].horizontalTextMobile);
            var TextRotate = this.getPreviewSize(this.props.deviceType, textStyles[0].rotateText, textStyles[0].rotateTextTablet, textStyles[0].rotateTextMobile);
            var StrokeFull = this.getPreviewSize(this.props.deviceType, strokeStyles[0].strokeFull, strokeStyles[0].strokeFullTablet, strokeStyles[0].strokeFullMobile);

            var btnGrad = void 0,
                btnGrad2 = void 0,
                btnbg = void 0;

            if (undefined !== backgroundType && 'gradient' === backgroundType) {
                btnGrad = 'transparent' === iconStyles[0].containerBack || undefined === iconStyles[0].containerBack ? 'rgba(255,255,255,0)' : iconStyles[0].containerBack;
                btnGrad2 = undefined !== iconStyles[0].gradientColorTwo && undefined !== iconStyles[0].gradientColorTwo && '' !== iconStyles[0].gradientColorTwo ? iconStyles[0].gradientColorTwo : '#777';
                if ('radial' === iconStyles[0].gradientType) {
                    btnbg = "radial-gradient(at " + iconStyles[0].gradientPosition + ", " + btnGrad + " " + iconStyles[0].gradientLocationOne + "%, " + btnGrad2 + " " + iconStyles[0].gradientLocationTwo + "%)";
                } else if ('radial' !== iconStyles[0].gradientType) {
                    btnbg = "linear-gradient(" + iconStyles[0].gradientAngle + "deg, " + btnGrad + " " + iconStyles[0].gradientLocationOne + "%, " + btnGrad2 + " " + iconStyles[0].gradientLocationTwo + "%)";
                }
            } else {
                btnbg = iconStyles[0].backgroundImageURL ? "url('" + iconStyles[0].backgroundImageURL + "')" : '';
            }

            var renderCss = React.createElement(
                "style",
                null,
                "\n                    #premium-title-" + block_id + " .premium-title-style8__wrap .premium-title-text-title[data-animation='shiny'] {\n                        --base-color: " + titleStyles[0].titleColor + " !important;\n                        --shiny-color: " + titleStyles[0].shinyColor + " !important;\n                        --animation-speed: " + titleStyles[0].animateduration + "s !important;\n                    }\n                    #premium-title-" + block_id + " .premium-title-header {\n                        --shadow-color: " + titleStyles[0].blurColor + " !important;\n                        --shadow-value: " + titleStyles[0].blurShadow + "px !important;\n                        color: " + titleStyles[0].titleColor + " !important;\n                    }\n                    #premium-title-" + block_id + " .premium-title .style1 .premium-title-header {\n                        border-style: " + titleStyles[0].titleborderType + " !important;\n                        border-width: " + (titleBorderUpdated ? titleBorderTop + "px " + titleBorderRight + "px " + titleBorderBottom + "px " + titleBorderLeft + "px" : titleBorderWidth + "px") + " !important;\n                        border-radius: " + (titleStyles[0].titleborderRadius || 0) + "px !important;\n                        border-color: " + titleStyles[0].titleborderColor + " !important;\n                        border-left: " + (titleBorderLeft >= "1" ? titleBorderLeft + "px " + titleStyles[0].titleborderType + " " + titleStyles[0].titleborderColor : "") + " !important;\n                    }\n                    #premium-title-" + block_id + " .premium-title .style2{\n                        border-style: " + titleStyles[0].titleborderType + " !important;\n                        border-width: " + (titleBorderUpdated ? titleBorderTop + "px " + titleBorderRight + "px " + titleBorderBottom + "px " + titleBorderLeft + "px" : titleBorderWidth + "px") + "!important;\n                        border-radius: " + (titleStyles[0].titleborderRadius || 0) + "px !important;\n                        border-color: " + titleStyles[0].titleborderColor + "!important;\n                        border-bottom: " + (titleBorderBottom >= "0" ? titleBorderBottom + "px " + titleStyles[0].titleborderType + " " + titleStyles[0].titleborderColor + " !important" : "") + ";\n                    }\n                    #premium-title-" + block_id + " .premium-title .style4{\n                        border-style: " + titleStyles[0].titleborderType + " !important;\n                        border-width: " + (titleBorderUpdated ? titleBorderTop + "px " + titleBorderRight + "px " + titleBorderBottom + "px " + titleBorderLeft + "px" : titleBorderWidth + "px") + " !important;\n                        border-radius: " + (titleStyles[0].titleborderRadius || 0) + "px !important;\n                        border-color: " + titleStyles[0].titleborderColor + " !important;\n                        border-bottom: " + (titleBorderBottom >= "0" ? titleBorderBottom + "px " + titleStyles[0].titleborderType + " " + titleStyles[0].titleborderColor + " !important" : "") + ";\n                    }\n                    #premium-title-" + block_id + " .premium-title .style5{\n                        border-style: " + titleStyles[0].titleborderType + " !important;\n                        border-width: " + (titleBorderUpdated ? titleBorderTop + "px " + titleBorderRight + "px " + titleBorderBottom + "px " + titleBorderLeft + "px" : titleBorderWidth + "px") + " !important;\n                        border-radius: " + (titleStyles[0].titleborderRadius || 0) + "px !important;\n                        border-color: " + titleStyles[0].titleborderColor + " !important;\n                        border-bottom: " + (titleBorderBottom >= "0" ? titleBorderBottom + "px " + titleStyles[0].titleborderType + " " + titleStyles[0].titleborderColor + " !important" : "") + ";\n                    }\n                    #premium-title-" + block_id + " .premium-title .style6{\n                        border-style: " + titleStyles[0].titleborderType + " !important;\n                        border-width: " + (titleBorderUpdated ? titleBorderTop + "px " + titleBorderRight + "px " + titleBorderBottom + "px " + titleBorderLeft + "px" : titleBorderWidth + "px") + " !important;\n                        border-radius: " + (titleStyles[0].titleborderRadius || 0) + "px !important;\n                        border-color: " + titleStyles[0].titleborderColor + " !important;\n                        border-bottom: " + (titleBorderBottom >= "0" ? titleBorderBottom + "px " + titleStyles[0].titleborderType + " " + titleStyles[0].titleborderColor + " !important" : "") + ";\n                    }\n                    #premium-title-" + block_id + " .premium-title-style2__wrap {\n                        background-color: " + titleStyles[0].BGColor + " !important;\n                    }\n                    #premium-title-" + block_id + " .premium-title-style3__wrap {\n                        background-color: " + titleStyles[0].BGColor + " !important;\n                    }\n                    #premium-title-" + block_id + " .premium-title-style5__wrap {\n                        border-bottom: 2px solid " + titleStyles[0].lineColor + " !important;\n                    }\n                    #premium-title-" + block_id + " .premium-title-style6__wrap {\n                        border-bottom: 2px solid " + titleStyles[0].lineColor + " !important;\n                    }\n                    #premium-title-" + block_id + " .premium-title-style6__wrap:before {\n                        border-bottom-color: " + titleStyles[0].triangleColor + " !important;\n                    }\n                    #premium-title-" + block_id + " .premium-title-icon {\n                        color: " + iconStyles[0].iconColor + " !important;\n                        background-color: " + (backgroundType === "solid" ? iconStyles[0].containerBack : "transparent") + " !important;\n                        background-image: " + btnbg + " !important;\n                        background-repeat: " + iconStyles[0].backgroundRepeat + " !important;\n                        background-position: " + iconStyles[0].backgroundPosition + " !important;\n                        background-size: " + iconStyles[0].backgroundSize + " !important;\n                        background-attachment: " + (iconStyles[0].fixed ? "fixed" : "unset") + " !important;\n                        font-size: " + IconSize + iconStyles[0].iconSizeType + " !important;\n                        border-style: " + iconStyles[0].iconborderType + " !important;\n                        border-width: " + (iconBorderUpdated ? iconBorderTop + "px " + iconBorderRight + "px " + iconBorderBottom + "px " + iconBorderLeft + "px" : iconBorderWidth + "px") + " !important;\n                        border-radius: " + (iconStyles[0].iconborderRadius || 0) + "px !important;\n                        border-color: " + iconStyles[0].iconborderColor + " !important;\n                        padding-top: " + IconPaddingTop + iconStyles[0].iconPaddingType + " !important;\n                        padding-right: " + IconPaddingRight + iconStyles[0].iconPaddingType + " !important;\n                        padding-bottom: " + IconPaddingBottom + iconStyles[0].iconPaddingType + " !important;\n                        padding-left: " + IconPaddingLeft + iconStyles[0].iconPaddingType + " !important;\n                        margin-top: " + IconMarginTop + iconStyles[0].iconMarginType + " !important;\n                        margin-right: " + IconMarginRight + iconStyles[0].iconMarginType + " !important;\n                        margin-bottom: " + IconMarginBottom + iconStyles[0].iconMarginType + " !important;\n                        margin-left: " + IconMarginLeft + iconStyles[0].iconMarginType + " !important;\n                        text-shadow: " + iconStyles[0].iconshadowHorizontal + "px " + iconStyles[0].iconshadowVertical + "px " + iconStyles[0].iconshadowBlur + "px " + iconStyles[0].iconshadowColor + " !important;\n                    }\n                    #premium-title-" + block_id + " .premium-lottie-animation svg {\n                        width: " + IconSize + iconStyles[0].iconSizeType + " !important;\n                        height: " + IconSize + iconStyles[0].iconSizeType + " !important;\n                    }\n                    #premium-title-" + block_id + " .premium-title-header img {\n                        width: " + IconSize + iconStyles[0].iconSizeType + " !important;\n                        height: " + IconSize + iconStyles[0].iconSizeType + " !important;\n                    }\n                    #premium-title-" + block_id + " .premium-title-bg-text:before {\n                        content: " + BackText + ";\n                        width: " + textWidth + ";\n                        color: " + textStyles[0].textBackColor + " !important;\n                        font-size: " + TextSize + textStyles[0].textBackfontSizeType + " !important;\n                        font-weight: " + textStyles[0].textBackWeight + " !important;\n                        letter-spacing: " + textStyles[0].textBackLetter + "px !important;\n                        line-height: " + textStyles[0].textBackLine + "px !important;\n                        font-style: " + textStyles[0].textBackStyle + " !important;\n                        text-transform: " + (textStyles[0].textBackUpper ? "uppercase" : "none") + " !important;\n                        font-family: " + textStyles[0].textBackFontFamily + " !important;\n                        text-shadow: " + textStyles[0].textBackshadowHorizontal + "px " + textStyles[0].textBackshadowVertical + "px " + textStyles[0].textBackshadowBlur + "px " + textStyles[0].textBackshadowColor + " !important;\n                        mix-blend-mode: " + blend + " !important;\n                        z-index: " + zIndex + " !important;\n                        top: " + TextVertical + textStyles[0].verticalTextType + " !important;\n                        left: " + TextHorizontal + textStyles[0].horizontalTextType + " !important;\n                        transform: rotate(" + TextRotate + "deg) !important;\n                        -webkit-text-stroke-color: " + strokeStyles[0].strokeColor + " !important;\n                        -webkit-text-stroke-width: " + StrokeFull + "px !important;\n                    }\n                    #premium-title-" + block_id + " .premium-title-style7-stripe-span {\n                        width: " + StripeWidth + stripeStyles[0].stripeWidthType + " !important;\n                        height: " + StripeHeight + stripeStyles[0].stripeHeightType + " !important;\n                        background-color: " + titleStyles[0].stripeColor + " !important;\n                    }\n                    #premium-title-" + block_id + " .premium-title-style7-stripe__wrap {\n                        margin-top: " + StripeMarginTop + stripeStyles[0].stripeTopSpacingType + " !important;\n                        margin-bottom: " + StripeMarginBottom + stripeStyles[0].stripeBottomSpacingType + " !important;\n                    }\n                    #premium-title-" + block_id + " .premium-title-style9__wrap .premium-letters-container .premium-title-style9-letter {\n                        font-size: " + TitleSize + titleStyles[0].titlefontSizeType + " !important;\n                        font-weight: " + titleStyles[0].titleWeight + " !important;\n                        letter-spacing: " + titleStyles[0].titleLetter + "px !important;\n                        line-height: " + (titleStyles[0].titleLine ? titleStyles[0].titleLine : '') + "px !important;\n                        font-style: " + titleStyles[0].titleStyle + " !important;\n                        text-transform: " + (titleStyles[0].titleUpper ? "uppercase" : "none") + " !important;\n                        font-family: " + titleStyles[0].titleFontFamily + " !important;\n                        text-shadow: " + titleStyles[0].titleShadowHorizontal + "px " + titleStyles[0].titleShadowVertical + "px " + titleStyles[0].titleShadowBlur + "px " + titleStyles[0].titleShadowColor + " !important;\n                    }\n                "
            );

            var saveStripeStyles = function saveStripeStyles(value) {
                var newUpdate = stripeStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({
                    stripeStyles: newUpdate
                });
            };

            var saveTitleStyles = function saveTitleStyles(value) {
                var newUpdate = titleStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({
                    titleStyles: newUpdate
                });
            };

            var saveIconStyles = function saveIconStyles(value) {
                var newUpdate = iconStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({
                    iconStyles: newUpdate
                });
            };

            var saveTextStyles = function saveTextStyles(value) {
                var newUpdate = textStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({
                    textStyles: newUpdate
                });
            };

            var saveStrokeStyles = function saveStrokeStyles(value) {
                var newUpdate = strokeStyles.map(function (item, index) {
                    if (0 === index) {
                        item = _extends({}, item, value);
                    }
                    return item;
                });
                setAttributes({
                    strokeStyles: newUpdate
                });
            };

            var styleContainer = title.split("").map(function (letter) {
                return React.createElement(RichText, {
                    tagName: "span",
                    className: "premium-title-style9-letter",
                    value: letter,
                    style: {
                        color: titleStyles[0].titleColor
                    }
                });
            });

            var reverse = reversedir ? -1 : 1;

            return [isSelected && React.createElement(
                InspectorControls,
                null,
                React.createElement(
                    PanelBody,
                    {
                        title: __("Title"),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(TextControl, {
                        label: __("Title"),
                        value: title,
                        onChange: function onChange(value) {
                            return setAttributes({ title: value });
                        }
                    }),
                    React.createElement(SelectControl, {
                        label: __("Style"),
                        value: style,
                        onChange: function onChange(newSelect) {
                            return setAttributes({ style: newSelect });
                        },
                        options: STYLE
                    }),
                    React.createElement(ToggleControl, {
                        label: __("Icon"),
                        checked: iconValue,
                        onChange: function onChange(value) {
                            return setAttributes({ iconValue: value });
                        }
                    }),
                    iconValue && React.createElement(
                        Fragment,
                        null,
                        React.createElement(SelectControl, {
                            label: __("Icon Type"),
                            value: iconType,
                            onChange: function onChange(newSelect) {
                                return setAttributes({ iconType: newSelect });
                            },
                            options: ICON
                        }),
                        iconType === 'icon' && React.createElement(
                            Fragment,
                            null,
                            React.createElement(
                                "p",
                                null,
                                __("Icon")
                            ),
                            React.createElement(_reactFonticonpicker2.default, {
                                icons: _premiumIconsList2.default,
                                value: icon,
                                onChange: function onChange(value) {
                                    return setAttributes({ icon: value });
                                },
                                isMulti: false,
                                appendTo: "body",
                                noSelectedPlaceholder: __("Select Icon")
                            })
                        ),
                        iconType === 'lottie' && React.createElement(
                            Fragment,
                            null,
                            React.createElement(TextControl, {
                                value: lottieURl,
                                onChange: function onChange(value) {
                                    return setAttributes({ lottieURl: value });
                                },
                                label: __("Lottie Url")
                            }),
                            React.createElement(ToggleControl, {
                                label: __('Loop'),
                                checked: loop,
                                onChange: function onChange(newValue) {
                                    return setAttributes({ loop: newValue });
                                },
                                help: loop ? __('This option works only on the preview page') : ''
                            }),
                            React.createElement(ToggleControl, {
                                label: __("Reverse"),
                                checked: reversedir,
                                onChange: function onChange(value) {
                                    return setAttributes({ reversedir: value });
                                }
                            })
                        ),
                        iconType === 'image' && React.createElement(
                            Fragment,
                            null,
                            React.createElement(_premiumMediaUpload2.default, {
                                type: "image",
                                imageID: imageID,
                                imageURL: imageURL,
                                onSelectMedia: function onSelectMedia(media) {
                                    setAttributes({
                                        imageID: media.id,
                                        imageURL: media.url
                                    });
                                },
                                onRemoveImage: function onRemoveImage() {
                                    return setAttributes({
                                        imageID: "",
                                        imageURL: ""
                                    });
                                }
                            })
                        ),
                        React.createElement(SelectControl, {
                            label: __("Icon Position"),
                            value: iconPosition,
                            onChange: function onChange(newSelect) {
                                return setAttributes({ iconPosition: newSelect });
                            },
                            options: POSITION
                        }),
                        iconPosition === 'top' && style != 'style3' && style != 'style4' && React.createElement(
                            Fragment,
                            null,
                            React.createElement(
                                "p",
                                null,
                                __("Icon Alignment")
                            ),
                            React.createElement(Toolbar, {
                                controls: ALIGNS.map(function (contentAlign) {
                                    return {
                                        icon: "editor-align" + contentAlign,
                                        isActive: contentAlign === iconAlign,
                                        onClick: function onClick() {
                                            return setAttributes({ iconAlign: contentAlign });
                                        }
                                    };
                                })
                            })
                        )
                    ),
                    style === 'style7' && React.createElement(
                        Fragment,
                        null,
                        React.createElement(SelectControl, {
                            label: __("Stripe Position"),
                            value: stripePosition,
                            onChange: function onChange(newSelect) {
                                return setAttributes({ stripePosition: newSelect });
                            },
                            options: STRIPEPOSITION
                        }),
                        React.createElement(_responsiveRangeControl2.default, {
                            label: __("Stripe Width", 'premium-block-for-gutenberg'),
                            value: stripeStyles[0].stripeWidth,
                            tabletValue: stripeStyles[0].stripeWidthTablet,
                            mobileValue: stripeStyles[0].stripeWidthMobile,
                            onChange: function onChange(value) {
                                return saveStripeStyles({ stripeWidth: value });
                            },
                            onChangeTablet: function onChangeTablet(value) {
                                return saveStripeStyles({ stripeWidthTablet: value });
                            },
                            onChangeMobile: function onChangeMobile(value) {
                                return saveStripeStyles({ stripeWidthMobile: value });
                            },
                            onChangeUnit: function onChangeUnit(key) {
                                return saveStripeStyles({ stripeWidthType: key });
                            },
                            unit: stripeStyles[0].stripeWidthType,
                            showUnit: true,
                            defaultValue: 120,
                            min: 1,
                            max: 100
                        }),
                        React.createElement(_responsiveRangeControl2.default, {
                            label: __("Stripe Height", 'premium-block-for-gutenberg'),
                            value: stripeStyles[0].stripeHeight,
                            tabletValue: stripeStyles[0].stripeHeightTablet,
                            mobileValue: stripeStyles[0].stripeHeightMobile,
                            onChange: function onChange(value) {
                                return saveStripeStyles({ stripeHeight: value });
                            },
                            onChangeTablet: function onChangeTablet(value) {
                                return saveStripeStyles({ stripeHeightTablet: value });
                            },
                            onChangeMobile: function onChangeMobile(value) {
                                return saveStripeStyles({ stripeHeightMobile: value });
                            },
                            onChangeUnit: function onChangeUnit(key) {
                                return saveStripeStyles({ stripeHeightType: key });
                            },
                            unit: stripeStyles[0].stripeHeightType,
                            showUnit: true,
                            defaultValue: 5,
                            min: 1,
                            max: 100
                        }),
                        React.createElement(_responsiveRangeControl2.default, {
                            label: __("Stripe Top Spacing", 'premium-block-for-gutenberg'),
                            value: stripeStyles[0].stripeTopSpacing,
                            tabletValue: stripeStyles[0].stripeTopSpacingTablet,
                            mobileValue: stripeStyles[0].stripeTopSpacingMobile,
                            onChange: function onChange(value) {
                                return saveStripeStyles({ stripeTopSpacing: value });
                            },
                            onChangeTablet: function onChangeTablet(value) {
                                return saveStripeStyles({ stripeTopSpacingTablet: value });
                            },
                            onChangeMobile: function onChangeMobile(value) {
                                return saveStripeStyles({ stripeTopSpacingMobile: value });
                            },
                            onChangeUnit: function onChangeUnit(key) {
                                return saveStripeStyles({ stripeTopSpacingType: key });
                            },
                            unit: stripeStyles[0].stripeTopSpacingType,
                            showUnit: true,
                            defaultValue: 0,
                            min: 1,
                            max: 100
                        }),
                        React.createElement(_responsiveRangeControl2.default, {
                            label: __("Stripe Bottom Spacing", 'premium-block-for-gutenberg'),
                            value: stripeStyles[0].stripeBottomSpacing,
                            tabletValue: stripeStyles[0].stripeBottomSpacingTablet,
                            mobileValue: stripeStyles[0].stripeBottomSpacingMobile,
                            onChange: function onChange(value) {
                                return saveStripeStyles({ stripeBottomSpacing: value });
                            },
                            onChangeTablet: function onChangeTablet(value) {
                                return saveStripeStyles({ stripeBottomSpacingTablet: value });
                            },
                            onChangeMobile: function onChangeMobile(value) {
                                return saveStripeStyles({ stripeBottomSpacingMobile: value });
                            },
                            onChangeUnit: function onChangeUnit(key) {
                                return saveStripeStyles({ stripeBottomSpacingType: key });
                            },
                            unit: stripeStyles[0].stripeBottomSpacingType,
                            showUnit: true,
                            defaultValue: 0,
                            min: 1,
                            max: 100
                        }),
                        React.createElement(
                            "p",
                            null,
                            __("Stripe Alignment")
                        ),
                        React.createElement(Toolbar, {
                            controls: ALIGNS.map(function (contentAlign) {
                                return {
                                    icon: "editor-align" + contentAlign,
                                    isActive: contentAlign === stripeAlign,
                                    onClick: function onClick() {
                                        return setAttributes({ stripeAlign: contentAlign });
                                    }
                                };
                            })
                        })
                    ),
                    React.createElement("hr", null),
                    React.createElement(SelectControl, {
                        label: __("HTML Tag"),
                        options: TAGS,
                        value: titleTag,
                        onChange: function onChange(newValue) {
                            return setAttributes({ titleTag: newValue });
                        }
                    }),
                    React.createElement(
                        "p",
                        null,
                        " ",
                        __('Alignment')
                    ),
                    React.createElement(Toolbar, {
                        controls: ALIGNS.map(function (contentAlign) {
                            return {
                                icon: "editor-align" + contentAlign,
                                isActive: align === align,
                                onClick: function onClick() {
                                    return setAttributes({ align: contentAlign });
                                }
                            };
                        })
                    }),
                    React.createElement(ToggleControl, {
                        label: __("Link"),
                        checked: link,
                        onChange: function onChange(value) {
                            return setAttributes({ link: value });
                        }
                    }),
                    link && React.createElement(
                        Fragment,
                        null,
                        React.createElement(
                            "p",
                            null,
                            __("URL")
                        ),
                        React.createElement(TextControl, {
                            value: url,
                            onChange: function onChange(value) {
                                return setAttributes({ url: value });
                            },
                            placeholder: __("Enter URL")
                        }),
                        React.createElement(ToggleControl, {
                            checked: target,
                            label: __('Open Link in new Tab'),
                            onChange: function onChange(value) {
                                return setAttributes({ target: value });
                            }
                        })
                    ),
                    React.createElement(ToggleControl, {
                        label: __('background Text'),
                        checked: backgroundText,
                        onChange: function onChange(value) {
                            return setAttributes({ backgroundText: value });
                        }
                    }),
                    backgroundText && React.createElement(
                        Fragment,
                        null,
                        React.createElement(TextControl, {
                            label: __("Text"),
                            value: BackText,
                            onChange: function onChange(value) {
                                return setAttributes({ BackText: value });
                            }
                        }),
                        React.createElement(SelectControl, {
                            label: __("Width"),
                            value: textWidth,
                            onChange: function onChange(newSelect) {
                                return setAttributes({ textWidth: newSelect });
                            },
                            options: [{
                                label: "Auto", value: 'auto'
                            }, {
                                label: "Full Width", value: '100%'
                            }]
                        }),
                        React.createElement(_responsiveRangeControl2.default, {
                            label: __("Horizontal Offset", 'premium-block-for-gutenberg'),
                            value: textStyles[0].horizontalText,
                            tabletValue: textStyles[0].horizontalTextTablet,
                            mobileValue: textStyles[0].horizontalTextMobile,
                            onChange: function onChange(value) {
                                return saveTextStyles({ horizontalText: value });
                            },
                            onChangeTablet: function onChangeTablet(value) {
                                return saveTextStyles({ horizontalTextTablet: value });
                            },
                            onChangeMobile: function onChangeMobile(value) {
                                return saveTextStyles({ horizontalTextMobile: value });
                            },
                            onChangeUnit: function onChangeUnit(key) {
                                return saveTextStyles({ horizontalTextType: key });
                            },
                            unit: textStyles[0].horizontalTextType,
                            showUnit: true,
                            defaultValue: 0,
                            min: -500,
                            max: 500,
                            step: 1
                        }),
                        React.createElement(_responsiveRangeControl2.default, {
                            label: __("Vertical Offset", 'premium-block-for-gutenberg'),
                            value: textStyles[0].verticalText,
                            tabletValue: textStyles[0].verticalTextTablet,
                            mobileValue: textStyles[0].verticalTextMobile,
                            onChange: function onChange(value) {
                                return saveTextStyles({ verticalText: value });
                            },
                            onChangeTablet: function onChangeTablet(value) {
                                return saveTextStyles({ verticalTextTablet: value });
                            },
                            onChangeMobile: function onChangeMobile(value) {
                                return saveTextStyles({ verticalTextMobile: value });
                            },
                            onChangeUnit: function onChangeUnit(key) {
                                return saveTextStyles({ verticalTextType: key });
                            },
                            unit: textStyles[0].verticalTextType,
                            showUnit: true,
                            defaultValue: 0,
                            min: -500,
                            max: 500,
                            step: 1
                        }),
                        React.createElement(_responsiveRangeControl2.default, {
                            label: __("Rotate (degrees)", 'premium-block-for-gutenberg'),
                            value: textStyles[0].rotateText,
                            tabletValue: textStyles[0].rotateTextTablet,
                            mobileValue: textStyles[0].rotateTextMobile,
                            onChange: function onChange(value) {
                                return saveTextStyles({ rotateText: value });
                            },
                            onChangeTablet: function onChangeTablet(value) {
                                return saveTextStyles({ rotateTextTablet: value });
                            },
                            onChangeMobile: function onChangeMobile(value) {
                                return saveTextStyles({ rotateTextMobile: value });
                            },
                            showUnit: false,
                            defaultValue: 0,
                            min: 0,
                            max: 360,
                            step: 1
                        })
                    )
                ),
                React.createElement(
                    PanelBody,
                    {
                        title: __("Title Style"),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(_ColorComponent2.default, {
                        label: __("Color", 'premium-block-for-gutenberg'),
                        colorValue: titleStyles[0].titleColor,
                        colorDefault: '',
                        onColorChange: function onColorChange(newValue) {
                            return saveTitleStyles({
                                titleColor: newValue
                            });
                        }
                    }),
                    style === "style8" && React.createElement(_ColorComponent2.default, {
                        label: __("Shiny Color", 'premium-block-for-gutenberg'),
                        colorValue: titleStyles[0].shinyColor,
                        colorDefault: '',
                        onColorChange: function onColorChange(newValue) {
                            return saveTitleStyles({
                                shinyColor: newValue
                            });
                        }
                    }),
                    style === "style9" && React.createElement(_ColorComponent2.default, {
                        label: __("Blur Color", 'premium-block-for-gutenberg'),
                        colorValue: titleStyles[0].blurColor,
                        colorDefault: '',
                        onColorChange: function onColorChange(newValue) {
                            return saveTitleStyles({
                                blurColor: newValue
                            });
                        }
                    }),
                    React.createElement(_premiumTypo2.default, {
                        components: ["responsiveSize", "weight", "line", "style", "upper", "spacing", "family"],
                        setAttributes: saveTitleStyles,
                        fontSizeType: { value: titleStyles[0].titlefontSizeType, label: __("titlefontSizeType") },
                        fontSize: titleStyles[0].titlefontSize,
                        fontSizeMobile: titleStyles[0].titlefontSizeMobile,
                        fontSizeTablet: titleStyles[0].titlefontSizeTablet,
                        onChangeSize: function onChangeSize(newSize) {
                            return saveTitleStyles({ titlefontSize: newSize });
                        },
                        onChangeTabletSize: function onChangeTabletSize(newSize) {
                            return saveTitleStyles({ titlefontSizeTablet: newSize });
                        },
                        onChangeMobileSize: function onChangeMobileSize(newSize) {
                            return saveTitleStyles({ titlefontSizeMobile: newSize });
                        },
                        weight: titleStyles[0].titleWeight,
                        style: titleStyles[0].titleStyle,
                        spacing: titleStyles[0].titleLetter,
                        upper: titleStyles[0].titleUpper,
                        line: titleStyles[0].titleLine,
                        fontFamily: titleStyles[0].titleFontFamily,
                        onChangeWeight: function onChangeWeight(newWeight) {
                            return saveTitleStyles({ titleWeight: newWeight || 500 });
                        },
                        onChangeStyle: function onChangeStyle(newStyle) {
                            return saveTitleStyles({ titleStyle: newStyle });
                        },
                        onChangeSpacing: function onChangeSpacing(newValue) {
                            return saveTitleStyles({ titleLetter: newValue });
                        },
                        onChangeUpper: function onChangeUpper(check) {
                            return saveTitleStyles({ titleUpper: check });
                        },
                        onChangeLine: function onChangeLine(newValue) {
                            return saveTitleStyles({ titleLine: newValue });
                        },
                        onChangeFamily: function onChangeFamily(fontFamily) {
                            return saveTitleStyles({ titleFontFamily: fontFamily });
                        }
                    }),
                    style === 'style2' && React.createElement(_ColorComponent2.default, {
                        label: __("Background Color", 'premium-block-for-gutenberg'),
                        colorValue: titleStyles[0].BGColor,
                        colorDefault: '',
                        onColorChange: function onColorChange(newValue) {
                            return saveTitleStyles({
                                BGColor: newValue
                            });
                        }
                    }),
                    style === 'style3' && React.createElement(_ColorComponent2.default, {
                        label: __("Background Color", 'premium-block-for-gutenberg'),
                        colorValue: titleStyles[0].BGColor,
                        colorDefault: '',
                        onColorChange: function onColorChange(newValue) {
                            return saveTitleStyles({
                                BGColor: newValue
                            });
                        }
                    }),
                    style === 'style5' && React.createElement(_ColorComponent2.default, {
                        label: __("Line Color", 'premium-block-for-gutenberg'),
                        colorValue: titleStyles[0].lineColor,
                        colorDefault: '',
                        onColorChange: function onColorChange(newValue) {
                            return saveTitleStyles({
                                lineColor: newValue
                            });
                        }
                    }),
                    style === 'style6' && React.createElement(_ColorComponent2.default, {
                        label: __("Line Color", 'premium-block-for-gutenberg'),
                        colorValue: titleStyles[0].lineColor,
                        colorDefault: '',
                        onColorChange: function onColorChange(newValue) {
                            return saveTitleStyles({
                                lineColor: newValue
                            });
                        }
                    }),
                    style === 'style6' && React.createElement(_ColorComponent2.default, {
                        label: __("Triangle Color", 'premium-block-for-gutenberg'),
                        colorValue: titleStyles[0].triangleColor,
                        colorDefault: '',
                        onColorChange: function onColorChange(newValue) {
                            return saveTitleStyles({
                                triangleColor: newValue
                            });
                        }
                    }),
                    style === 'style7' && React.createElement(_ColorComponent2.default, {
                        label: __("Stripe Color", 'premium-block-for-gutenberg'),
                        colorValue: titleStyles[0].stripeColor,
                        colorDefault: '',
                        onColorChange: function onColorChange(newValue) {
                            return saveTitleStyles({
                                stripeColor: newValue
                            });
                        }
                    }),
                    style != 'style3' && style !== "style7" && style !== "style8" && style !== "style9" && React.createElement(_premiumBorder2.default, {
                        borderType: titleStyles[0].titleborderType,
                        borderWidth: titleBorderWidth,
                        top: titleBorderTop,
                        right: titleBorderRight,
                        bottom: titleBorderBottom,
                        left: titleBorderLeft,
                        borderColor: titleStyles[0].titleborderColor,
                        borderRadius: titleStyles[0].titleborderRadius,
                        onChangeType: function onChangeType(newType) {
                            return saveTitleStyles({ titleborderType: newType });
                        },
                        onChangeWidth: function onChangeWidth(_ref) {
                            var top = _ref.top,
                                right = _ref.right,
                                bottom = _ref.bottom,
                                left = _ref.left;
                            return setAttributes({
                                titleBorderUpdated: true,
                                titleBorderTop: top,
                                titleBorderRight: right,
                                titleBorderBottom: bottom,
                                titleBorderLeft: left
                            });
                        },
                        onChangeColor: function onChangeColor(colorValue) {
                            return saveTitleStyles({ titleborderColor: colorValue });
                        },
                        onChangeRadius: function onChangeRadius(newrRadius) {
                            return saveTitleStyles({ titleborderRadius: newrRadius });
                        }
                    }),
                    React.createElement(_PremiumShadow2.default, {
                        label: __("Shadow", 'premium-blocks-for-gutenberg'),
                        color: titleStyles[0].titleShadowColor,
                        blur: titleStyles[0].titleShadowBlur,
                        horizontal: titleStyles[0].titleShadowHorizontal,
                        vertical: titleStyles[0].titleShadowVertical,
                        onChangeColor: function onChangeColor(newColor) {
                            return saveTitleStyles({ titleShadowColor: newColor });
                        },
                        onChangeBlur: function onChangeBlur(newBlur) {
                            return saveTitleStyles({ titleShadowBlur: newBlur });
                        },
                        onChangehHorizontal: function onChangehHorizontal(newValue) {
                            return saveTitleStyles({ titleShadowHorizontal: newValue });
                        },
                        onChangeVertical: function onChangeVertical(newValue) {
                            return saveTitleStyles({ titleShadowVertical: newValue });
                        }
                    }),
                    style === "style9" && React.createElement(_singleRangeControl2.default, {
                        label: __("Blur Shadow Value (px)", 'premium-block-for-gutenberg'),
                        value: titleStyles[0].blurShadow,
                        onChange: function onChange(value) {
                            return saveTitleStyles({ blurShadow: value });
                        },
                        showUnit: false,
                        defaultValue: 120,
                        min: 10,
                        max: 500,
                        step: 10
                    }),
                    (style === "style8" || style === "style9") && React.createElement(_singleRangeControl2.default, {
                        label: __("Animation Delay", 'premium-block-for-gutenberg'),
                        value: titleStyles[0].animateDelay,
                        onChange: function onChange(value) {
                            return saveTitleStyles({ animateDelay: value });
                        },
                        showUnit: false,
                        defaultValue: 2,
                        min: 1,
                        max: 30,
                        step: 0.5
                    }),
                    style === "style8" && React.createElement(_singleRangeControl2.default, {
                        label: __("Animation Duration", 'premium-block-for-gutenberg'),
                        value: titleStyles[0].animateduration,
                        onChange: function onChange(value) {
                            return saveTitleStyles({ animateduration: value });
                        },
                        showUnit: false,
                        defaultValue: 1,
                        step: 0.5
                    }),
                    React.createElement(_PremiumResponsiveMargin2.default, {
                        directions: ["all"],
                        marginTop: titleMarginT,
                        marginRight: titleMarginR,
                        marginBottom: titleMarginB,
                        marginLeft: titleMarginL,
                        marginTopTablet: titleMarginTTablet,
                        marginRightTablet: titleMarginRTablet,
                        marginBottomTablet: titleMarginBTablet,
                        marginLeftTablet: titleMarginLTablet,
                        marginTopMobile: titleMarginTMobile,
                        marginRightMobile: titleMarginRMobile,
                        marginBottomMobile: titleMarginBMobile,
                        marginLeftMobile: titleMarginLMobile,
                        showUnits: true,
                        onChangeMarSizeUnit: function onChangeMarSizeUnit(newvalue) {
                            return saveTitleStyles({ titleMarginType: newvalue });
                        },
                        selectedUnit: titleStyles[0].titleMarginType,
                        onChangeMarginTop: function onChangeMarginTop(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ titleMarginT: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ titleMarginTTablet: newValue });
                            } else {
                                setAttributes({ titleMarginTMobile: newValue });
                            }
                        },
                        onChangeMarginRight: function onChangeMarginRight(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ titleMarginR: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ titleMarginRTablet: newValue });
                            } else {
                                setAttributes({ titleMarginRMobile: newValue });
                            }
                        },
                        onChangeMarginBottom: function onChangeMarginBottom(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ titleMarginB: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ titleMarginBTablet: newValue });
                            } else {
                                setAttributes({ titleMarginBMobile: newValue });
                            }
                        },
                        onChangeMarginLeft: function onChangeMarginLeft(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ titleMarginL: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ titleMarginLTablet: newValue });
                            } else {
                                setAttributes({ titleMarginLMobile: newValue });
                            }
                        }

                    }),
                    React.createElement(_PremiumResponsivePadding2.default, {
                        paddingTop: titlePaddingT,
                        paddingRight: titlePaddingR,
                        paddingBottom: titlePaddingB,
                        paddingLeft: titlePaddingL,
                        paddingTopTablet: titlePaddingTTablet,
                        paddingRightTablet: titlePaddingRTablet,
                        paddingBottomTablet: titlePaddingBTablet,
                        paddingLeftTablet: titlePaddingLTablet,
                        paddingTopMobile: titlePaddingTMobile,
                        paddingRightMobile: titlePaddingRMobile,
                        paddingBottomMobile: titlePaddingBMobile,
                        paddingLeftMobile: titlePaddingLMobile,
                        showUnits: true,
                        selectedUnit: titleStyles[0].titlePaddingType,
                        onChangePadSizeUnit: function onChangePadSizeUnit(newvalue) {
                            return saveTitleStyles({ titlePaddingType: newvalue });
                        },
                        onChangePaddingTop: function onChangePaddingTop(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ titlePaddingT: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ titlePaddingTTablet: newValue });
                            } else {
                                setAttributes({ titlePaddingTMobile: newValue });
                            }
                        },
                        onChangePaddingRight: function onChangePaddingRight(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ titlePaddingR: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ titlePaddingRTablet: newValue });
                            } else {
                                setAttributes({ titlePaddingRMobile: newValue });
                            }
                        },
                        onChangePaddingBottom: function onChangePaddingBottom(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ titlePaddingB: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ titlePaddingBTablet: newValue });
                            } else {
                                setAttributes({ titlePaddingBMobile: newValue });
                            }
                        },
                        onChangePaddingLeft: function onChangePaddingLeft(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ titlePaddingL: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ titlePaddingLTablet: newValue });
                            } else {
                                setAttributes({ titlePaddingLMobile: newValue });
                            }
                        }
                    })
                ),
                iconValue && React.createElement(
                    PanelBody,
                    {
                        title: __("Icon Style"),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    iconType === 'icon' && React.createElement(_ColorComponent2.default, {
                        label: __("Color", 'premium-block-for-gutenberg'),
                        colorValue: iconStyles[0].iconColor,
                        colorDefault: '',
                        onColorChange: function onColorChange(newValue) {
                            return saveIconStyles({
                                iconColor: newValue
                            });
                        }
                    }),
                    React.createElement(_responsiveRangeControl2.default, {
                        label: __("Size", 'premium-block-for-gutenberg'),
                        value: iconStyles[0].iconSize,
                        tabletValue: iconStyles[0].iconSizeTablet,
                        mobileValue: iconStyles[0].iconSizeMobile,
                        onChange: function onChange(value) {
                            return saveIconStyles({ iconSize: value });
                        },
                        onChangeTablet: function onChangeTablet(value) {
                            return saveIconStyles({ iconSizeTablet: value });
                        },
                        onChangeMobile: function onChangeMobile(value) {
                            return saveIconStyles({ iconSizeMobile: value });
                        },
                        onChangeUnit: function onChangeUnit(key) {
                            return saveIconStyles({ iconSizeType: key });
                        },
                        unit: iconStyles[0].iconSizeType,
                        showUnit: true,
                        defaultValue: 20,
                        min: 1,
                        max: 100
                    }),
                    React.createElement(_PremiumBackgroundControl2.default, {
                        setAttributes: setAttributes,
                        saveContainerStyle: saveIconStyles,
                        backgroundType: backgroundType,
                        backgroundColor: iconStyles[0].containerBack,
                        backgroundImageID: iconStyles[0].backgroundImageID,
                        backgroundImageURL: iconStyles[0].backgroundImageURL,
                        backgroundPosition: iconStyles[0].backgroundPosition,
                        backgroundRepeat: iconStyles[0].backgroundRepeat,
                        backgroundSize: iconStyles[0].backgroundSize,
                        fixed: iconStyles[0].fixed,
                        gradientLocationOne: iconStyles[0].gradientLocationOne,
                        gradientColorTwo: iconStyles[0].gradientColorTwo,
                        gradientLocationTwo: iconStyles[0].gradientLocationTwo,
                        gradientAngle: iconStyles[0].gradientAngle,
                        gradientPosition: iconStyles[0].gradientPosition,
                        gradientType: iconStyles[0].gradientType
                    }),
                    React.createElement(_premiumBorder2.default, {
                        borderType: iconStyles[0].iconborderType,
                        borderWidth: iconBorderWidth,
                        top: iconBorderTop,
                        right: iconBorderRight,
                        bottom: iconBorderBottom,
                        left: iconBorderLeft,
                        borderColor: iconStyles[0].iconborderColor,
                        borderRadius: iconStyles[0].iconborderRadius,
                        onChangeType: function onChangeType(newType) {
                            return saveIconStyles({ iconborderType: newType });
                        },
                        onChangeWidth: function onChangeWidth(_ref2) {
                            var top = _ref2.top,
                                right = _ref2.right,
                                bottom = _ref2.bottom,
                                left = _ref2.left;
                            return setAttributes({
                                iconBorderUpdated: true,
                                iconBorderTop: top,
                                iconBorderRight: right,
                                iconBorderBottom: bottom,
                                iconBorderLeft: left
                            });
                        },
                        onChangeColor: function onChangeColor(colorValue) {
                            return saveIconStyles({ iconborderColor: colorValue });
                        },
                        onChangeRadius: function onChangeRadius(newrRadius) {
                            return saveIconStyles({ iconborderRadius: newrRadius });
                        }
                    }),
                    React.createElement(_PremiumResponsiveMargin2.default, {
                        directions: ["all"],
                        marginTop: iconMarginT,
                        marginRight: iconMarginR,
                        marginBottom: iconMarginB,
                        marginLeft: iconMarginL,
                        marginTopTablet: iconMarginTTablet,
                        marginRightTablet: iconMarginRTablet,
                        marginBottomTablet: iconMarginBTablet,
                        marginLeftTablet: iconMarginLTablet,
                        marginTopMobile: iconMarginTMobile,
                        marginRightMobile: iconMarginRMobile,
                        marginBottomMobile: iconMarginBMobile,
                        marginLeftMobile: iconMarginLMobile,
                        showUnits: true,
                        onChangeMarSizeUnit: function onChangeMarSizeUnit(newvalue) {
                            return saveIconStyles({ iconMarginType: newvalue });
                        },
                        selectedUnit: iconStyles[0].iconMarginType,
                        onChangeMarginTop: function onChangeMarginTop(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ iconMarginT: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ iconMarginTTablet: newValue });
                            } else {
                                setAttributes({ iconMarginTMobile: newValue });
                            }
                        },
                        onChangeMarginRight: function onChangeMarginRight(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ iconMarginR: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ iconMarginRTablet: newValue });
                            } else {
                                setAttributes({ iconMarginRMobile: newValue });
                            }
                        },
                        onChangeMarginBottom: function onChangeMarginBottom(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ iconMarginB: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ iconMarginBTablet: newValue });
                            } else {
                                setAttributes({ iconMarginBMobile: newValue });
                            }
                        },
                        onChangeMarginLeft: function onChangeMarginLeft(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ iconMarginL: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ iconMarginLTablet: newValue });
                            } else {
                                setAttributes({ iconMarginLMobile: newValue });
                            }
                        }

                    }),
                    React.createElement(_PremiumResponsivePadding2.default, {
                        paddingTop: iconPaddingT,
                        paddingRight: iconPaddingR,
                        paddingBottom: iconPaddingB,
                        paddingLeft: iconPaddingL,
                        paddingTopTablet: iconPaddingTTablet,
                        paddingRightTablet: iconPaddingRTablet,
                        paddingBottomTablet: iconPaddingBTablet,
                        paddingLeftTablet: iconPaddingLTablet,
                        paddingTopMobile: iconPaddingTMobile,
                        paddingRightMobile: iconPaddingRMobile,
                        paddingBottomMobile: iconPaddingBMobile,
                        paddingLeftMobile: iconPaddingLMobile,
                        showUnits: true,
                        selectedUnit: iconStyles[0].iconPaddingType,
                        onChangePadSizeUnit: function onChangePadSizeUnit(newvalue) {
                            return saveIconStyles({ iconPaddingType: newvalue });
                        },
                        onChangePaddingTop: function onChangePaddingTop(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ iconPaddingT: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ iconPaddingTTablet: newValue });
                            } else {
                                setAttributes({ iconPaddingTMobile: newValue });
                            }
                        },
                        onChangePaddingRight: function onChangePaddingRight(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ iconPaddingR: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ iconPaddingRTablet: newValue });
                            } else {
                                setAttributes({ iconPaddingRMobile: newValue });
                            }
                        },
                        onChangePaddingBottom: function onChangePaddingBottom(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ iconPaddingB: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ iconPaddingBTablet: newValue });
                            } else {
                                setAttributes({ iconPaddingBMobile: newValue });
                            }
                        },
                        onChangePaddingLeft: function onChangePaddingLeft(device, newValue) {
                            if (device === "desktop") {
                                setAttributes({ iconPaddingL: newValue });
                            } else if (device === "tablet") {
                                setAttributes({ iconPaddingLTablet: newValue });
                            } else {
                                setAttributes({ iconPaddingLMobile: newValue });
                            }
                        }
                    }),
                    iconType === 'icon' && React.createElement(_PremiumShadow2.default, {
                        label: __("Icon Shadow", 'premium-blocks-for-gutenberg'),
                        color: iconStyles[0].iconshadowColor,
                        blur: iconStyles[0].iconshadowBlur,
                        horizontal: iconStyles[0].iconshadowHorizontal,
                        vertical: iconStyles[0].iconshadowVertical,
                        onChangeColor: function onChangeColor(newColor) {
                            return saveIconStyles({ iconshadowColor: newColor });
                        },
                        onChangeBlur: function onChangeBlur(newBlur) {
                            return saveIconStyles({ iconshadowBlur: newBlur });
                        },
                        onChangehHorizontal: function onChangehHorizontal(newValue) {
                            return saveIconStyles({ iconshadowHorizontal: newValue });
                        },
                        onChangeVertical: function onChangeVertical(newValue) {
                            return saveIconStyles({ iconshadowVertical: newValue });
                        }
                    })
                ),
                backgroundText && React.createElement(
                    PanelBody,
                    {
                        title: __("Background Text"),
                        className: "premium-panel-body",
                        initialOpen: false
                    },
                    React.createElement(_ColorComponent2.default, {
                        label: __("Color", 'premium-block-for-gutenberg'),
                        colorValue: textStyles[0].textBackColor,
                        colorDefault: '',
                        onColorChange: function onColorChange(newValue) {
                            return saveTextStyles({
                                textBackColor: newValue
                            });
                        }
                    }),
                    React.createElement(_premiumTypo2.default, {
                        components: ["responsiveSize", "weight", "line", "style", "upper", "spacing", "family"],
                        setAttributes: saveTextStyles,
                        fontSizeType: { value: textStyles[0].textBackfontSizeType, label: __("textBackfontSizeType") },
                        fontSize: textStyles[0].textBackfontSize,
                        fontSizeMobile: textStyles[0].textBackfontSizeMobile,
                        fontSizeTablet: textStyles[0].textBackfontSizeTablet,
                        onChangeSize: function onChangeSize(newSize) {
                            return saveTextStyles({ textBackfontSize: newSize });
                        },
                        onChangeTabletSize: function onChangeTabletSize(newSize) {
                            return saveTextStyles({ textBackfontSizeTablet: newSize });
                        },
                        onChangeMobileSize: function onChangeMobileSize(newSize) {
                            return saveTextStyles({ textBackfontSizeMobile: newSize });
                        },
                        weight: textStyles[0].textBackWeight,
                        style: textStyles[0].textBackStyle,
                        spacing: textStyles[0].textBackLetter,
                        upper: textStyles[0].textBackUpper,
                        line: textStyles[0].textBackLine,
                        fontFamily: textStyles[0].textBackFontFamily,
                        onChangeWeight: function onChangeWeight(newWeight) {
                            return saveTextStyles({ textBackWeight: newWeight || 500 });
                        },
                        onChangeStyle: function onChangeStyle(newStyle) {
                            return saveTextStyles({ textBackStyle: newStyle });
                        },
                        onChangeSpacing: function onChangeSpacing(newValue) {
                            return saveTextStyles({ textBackLetter: newValue });
                        },
                        onChangeUpper: function onChangeUpper(check) {
                            return saveTextStyles({ textBackUpper: check });
                        },
                        onChangeLine: function onChangeLine(newValue) {
                            return saveTextStyles({ textBackLine: newValue });
                        },
                        onChangeFamily: function onChangeFamily(fontFamily) {
                            return saveTextStyles({ textBackFontFamily: fontFamily });
                        }
                    }),
                    React.createElement(_PremiumShadow2.default, {
                        label: __("Text Shadow", 'premium-blocks-for-gutenberg'),
                        color: textStyles[0].textBackshadowColor,
                        blur: textStyles[0].textBackshadowBlur,
                        horizontal: textStyles[0].textBackshadowHorizontal,
                        vertical: textStyles[0].textBackshadowVertical,
                        onChangeColor: function onChangeColor(newColor) {
                            return saveTextStyles({ textBackshadowColor: newColor });
                        },
                        onChangeBlur: function onChangeBlur(newBlur) {
                            return saveTextStyles({ textBackshadowBlur: newBlur });
                        },
                        onChangehHorizontal: function onChangehHorizontal(newValue) {
                            return saveTextStyles({ textBackshadowHorizontal: newValue });
                        },
                        onChangeVertical: function onChangeVertical(newValue) {
                            return saveTextStyles({ textBackshadowVertical: newValue });
                        }
                    }),
                    React.createElement(ToggleControl, {
                        label: __('Stroke'),
                        checked: strokeStyles[0].stroke,
                        onChange: function onChange(newValue) {
                            return saveStrokeStyles({ stroke: newValue });
                        }
                    }),
                    strokeStyles[0].stroke && React.createElement(
                        Fragment,
                        null,
                        React.createElement(_ColorComponent2.default, {
                            label: __("Stroke Color", 'premium-block-for-gutenberg'),
                            colorValue: strokeStyles[0].strokeColor,
                            colorDefault: '',
                            onColorChange: function onColorChange(newValue) {
                                return saveStrokeStyles({
                                    strokeColor: newValue
                                });
                            }
                        }),
                        React.createElement(_responsiveRangeControl2.default, {
                            label: __("Stroke Full Width", 'premium-block-for-gutenberg'),
                            value: strokeStyles[0].strokeFull,
                            tabletValue: strokeStyles[0].strokeFullTablet,
                            mobileValue: strokeStyles[0].strokeFullMobile,
                            onChange: function onChange(value) {
                                return saveStrokeStyles({ strokeFull: value });
                            },
                            onChangeTablet: function onChangeTablet(value) {
                                return saveStrokeStyles({ strokeFullTablet: value });
                            },
                            onChangeMobile: function onChangeMobile(value) {
                                return saveStrokeStyles({ strokeFullMobile: value });
                            },
                            showUnit: false,
                            defaultValue: 20,
                            min: 0,
                            max: 100,
                            step: 1
                        })
                    ),
                    React.createElement("hr", null),
                    React.createElement(SelectControl, {
                        label: __("Blend Mode "),
                        value: blend,
                        onChange: function onChange(newSelect) {
                            return setAttributes({ blend: newSelect });
                        },
                        options: BLEND
                    }),
                    React.createElement(_singleRangeControl2.default, {
                        label: __("z-index", 'premium-block-for-gutenberg'),
                        value: zIndex,
                        onChange: function onChange(value) {
                            return setAttributes({ zIndex: value });
                        },
                        showUnit: false,
                        defaultValue: 0,
                        min: 0,
                        max: 100
                    })
                ),
                React.createElement(_premiumResponsiveTabs2.default, {
                    Desktop: hideDesktop,
                    Tablet: hideTablet,
                    Mobile: hideMobile,
                    onChangeDesktop: function onChangeDesktop(value) {
                        return setAttributes({ hideDesktop: value ? " premium-desktop-hidden" : "" });
                    },
                    onChangeTablet: function onChangeTablet(value) {
                        return setAttributes({ hideTablet: value ? " premium-tablet-hidden" : "" });
                    },
                    onChangeMobile: function onChangeMobile(value) {
                        return setAttributes({ hideMobile: value ? " premium-mobile-hidden" : "" });
                    }
                })
            ), renderCss, React.createElement(
                "div",
                {
                    id: "premium-title-" + block_id,
                    className: "premium-block-" + block_id + " " + hideDesktop + " " + hideTablet + " " + hideMobile, style: {
                        textAlign: align
                    } },
                React.createElement(
                    "div",
                    { className: "premium-title  " + (backgroundText ? 'premium-title-bg-text' : ""), style: {
                            textAlign: align
                        }, "data-backgroundText": BackText },
                    React.createElement(
                        "div",
                        { className: "premium-title-container " + style + " " + style + "-" + align, "data-blur-delay": titleStyles[0].animateDelay, "data-shiny-dur": titleStyles[0].animateduration },
                        React.createElement(titleTag, {
                            className: "premium-title-header premium-title-" + style + "__wrap " + align + " " + (iconValue ? iconPosition : "") + " " + (iconPosition == 'top' ? "premium-title-" + iconAlign : ""),
                            'data-blur-delay': "" + titleStyles[0].animateDelay,
                            'data-shiny-dur': "" + titleStyles[0].animateduration,
                            style: {
                                color: titleStyles[0].titleColor,
                                fontSize: TitleSize + titleStyles[0].titlefontSizeType,
                                fontWeight: titleStyles[0].titleWeight,
                                letterSpacing: titleStyles[0].titleLetter + "px",
                                lineHeight: (titleStyles[0].titleLine ? titleStyles[0].titleLine : "") + "px",
                                fontStyle: titleStyles[0].titleStyle,
                                textTransform: titleStyles[0].titleUpper ? "uppercase" : "none",
                                fontFamily: titleStyles[0].titleFontFamily,
                                textShadow: titleStyles[0].titleShadowHorizontal + "px " + titleStyles[0].titleShadowVertical + "px " + titleStyles[0].titleShadowBlur + "px " + titleStyles[0].titleShadowColor,
                                marginTop: TitleMarginTop + titleStyles[0].titleMarginType,
                                marginBottom: TitleMarginBottom + titleStyles[0].titleMarginType,
                                marginLeft: TitleMarginLeft + titleStyles[0].titleMarginType,
                                marginRight: TitleMarginRight + titleStyles[0].titleMarginType,
                                paddingTop: TitlePaddingTop + titleStyles[0].titlePaddingType,
                                paddingBottom: TitlePaddingBottom + titleStyles[0].titlePaddingType,
                                paddingLeft: TitlePaddingLeft + titleStyles[0].titlePaddingType,
                                paddingRight: TitlePaddingRight + titleStyles[0].titlePaddingType
                            }
                        }, [React.createElement(
                            Fragment,
                            null,
                            style === 'style7' ? React.createElement(
                                Fragment,
                                null,
                                iconPosition != 'top' && iconValue && React.createElement(
                                    "span",
                                    { className: "premium-title-style7-stripe__wrap premium-stripe-" + stripePosition + " premium-stripe-" + stripeAlign },
                                    React.createElement("span", { className: "premium-title-style7-stripe-span" })
                                ),
                                !iconValue && React.createElement(
                                    "span",
                                    { className: "premium-title-style7-stripe__wrap premium-stripe-" + stripePosition + " premium-stripe-" + stripeAlign },
                                    React.createElement("span", { className: "premium-title-style7-stripe-span" })
                                ),
                                React.createElement(
                                    "div",
                                    { className: "premium-title-style7-inner-title" },
                                    iconValue && iconType == 'icon' && React.createElement("i", { className: "premium-title-icon " + icon }),
                                    iconValue && iconType == 'image' && React.createElement("img", { className: "premium-title-icon", src: imageURL }),
                                    iconValue && iconType == 'lottie' && lottieURl && React.createElement(
                                        "div",
                                        { className: " premium-title-icon premium-lottie-animation" },
                                        React.createElement(_reactLottieWithSegments2.default, {
                                            options: {
                                                loop: loop,
                                                path: lottieURl,
                                                rendererSettings: {
                                                    preserveAspectRatio: 'xMidYMid'
                                                }
                                            },
                                            direction: reverse
                                        })
                                    ),
                                    iconValue && iconPosition === 'top' && React.createElement(
                                        "span",
                                        { className: "premium-title-style7-stripe__wrap premium-stripe-" + stripePosition + " premium-stripe-" + stripeAlign },
                                        React.createElement("span", { className: "premium-title-style7-stripe-span" })
                                    ),
                                    React.createElement(RichText, {
                                        tagName: "span",
                                        className: "premium-title-text-title",
                                        value: title,
                                        style: {
                                            minHeight: '15px'
                                        }
                                    })
                                )
                            ) : style === "style9" ? React.createElement(
                                Fragment,
                                null,
                                iconValue && iconType == 'icon' && React.createElement("i", { className: "premium-title-icon " + icon }),
                                iconValue && iconType == 'image' && React.createElement("img", { className: "premium-title-icon", src: imageURL }),
                                iconValue && iconType == 'lottie' && lottieURl && React.createElement(
                                    "div",
                                    { className: " premium-title-icon premium-lottie-animation" },
                                    React.createElement(_reactLottieWithSegments2.default, {
                                        options: {
                                            loop: loop,
                                            path: lottieURl,
                                            rendererSettings: {
                                                preserveAspectRatio: 'xMidYMid'
                                            }
                                        },
                                        direction: reverse
                                    })
                                ),
                                React.createElement(
                                    "span",
                                    {
                                        className: "premium-letters-container",
                                        style: {
                                            color: titleStyles[0].titleColor,
                                            marginTop: TitleMarginTop + titleStyles[0].titleMarginType,
                                            marginBottom: TitleMarginBottom + titleStyles[0].titleMarginType,
                                            marginLeft: TitleMarginLeft + titleStyles[0].titleMarginType,
                                            marginRight: TitleMarginRight + titleStyles[0].titleMarginType,
                                            paddingTop: TitlePaddingTop + titleStyles[0].titlePaddingType,
                                            paddingBottom: TitlePaddingBottom + titleStyles[0].titlePaddingType,
                                            paddingLeft: TitlePaddingLeft + titleStyles[0].titlePaddingType,
                                            paddingRight: TitlePaddingRight + titleStyles[0].titlePaddingType
                                        }
                                    },
                                    styleContainer
                                )
                            ) : React.createElement(
                                Fragment,
                                null,
                                iconValue && iconType == 'icon' && React.createElement("i", { className: "premium-title-icon " + icon }),
                                iconValue && iconType == 'image' && React.createElement("img", { className: "premium-title-icon", src: imageURL }),
                                iconValue && iconType == 'lottie' && lottieURl && React.createElement(
                                    "div",
                                    { className: " premium-title-icon premium-lottie-animation" },
                                    React.createElement(_reactLottieWithSegments2.default, {
                                        options: {
                                            loop: loop,
                                            path: lottieURl,
                                            rendererSettings: {
                                                preserveAspectRatio: 'xMidYMid'
                                            }
                                        },
                                        direction: reverse
                                    })
                                ),
                                React.createElement(RichText, {
                                    tagName: "span",
                                    className: "premium-title-text-title",
                                    onChange: function onChange(newValue) {
                                        return setAttributes({ title: newValue });
                                    },
                                    value: title,
                                    style: {
                                        minHeight: '15px'
                                    }
                                })
                            ),
                            link && url !== ' ' && React.createElement("a", { rel: "noopener noreferrer", target: "_self", href: "" + url })
                        )])
                    )
                )
            )];
        }
    }]);

    return edit;
}(Component);

exports.default = withSelect(function (select, props) {
    var _select = select('core/edit-post'),
        _select$__experimenta = _select.__experimentalGetPreviewDeviceType,
        __experimentalGetPreviewDeviceType = _select$__experimenta === undefined ? null : _select$__experimenta;

    var deviceType = __experimentalGetPreviewDeviceType ? __experimentalGetPreviewDeviceType() : null;

    return {
        deviceType: deviceType
    };
})(edit);

/***/ }),
/* 408 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _attributes;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var __ = wp.i18n.__;

var attributes = (_attributes = {
    block_id: {
        type: "string"
    },
    classMigrate: {
        type: "boolean",
        default: false
    },
    align: {
        type: "string",
        default: "left"
    },
    style: {
        type: "string",
        default: "style1"
    },
    title: {
        type: "string",
        default: "Premium Title"
    },
    iconValue: {
        type: "boolean",
        default: false
    },
    iconType: {
        type: "string",
        default: "icon"
    },
    icon: {
        type: "string",
        default: "fa fa-bars"
    },
    iconPosition: {
        type: "string",
        default: "before"
    },
    imageID: {
        type: "number"
    },
    imageURL: {
        type: "string",
        source: "attribute",
        attribute: "src",
        selector: ".premium-title-icon"
    },
    link: {
        type: "boolean",
        default: false
    },
    backgroundText: {
        type: "boolean",
        default: false
    },
    BackText: {
        type: "string",
        default: 'Awesome Title'
    },
    textWidth: {
        type: "number"
    },
    url: {
        type: "string",
        default: "#"
    },
    iconAlign: {
        type: "string",
        default: "center"
    },
    stripePosition: {
        type: "string",
        default: "top"
    },
    titleStyles: {
        type: "array",
        default: [{
            titleColor: "#6ec1e4",
            shinyColor: '#fff',
            blurColor: "#000",
            titleLetter: 0,
            titleLine: 0,
            titleStyle: 'normal',
            titleUpper: false,
            titleWeight: 600,
            titlefontSize: '',
            titlefontSizeType: "px",
            titlefontSizeMobile: '',
            titlefontSizeTablet: '',
            titleFontFamily: __('Default', 'premium-blocks-for-gutenberg'),
            titleborderType: "solid",
            titleborderRadius: 0,
            titleborderColor: '#6ec1e4',
            titleShadowColor: '',
            titleShadowBlur: '0',
            titleShadowHorizontal: '0',
            titleShadowVertical: '0',
            titleMarginType: 'px',
            titlePaddingType: 'px',
            BGColor: '#54595f',
            lineColor: "#6ec1e4",
            triangleColor: "#6ec1e4",
            stripeColor: "#6ec1e4",
            blurShadow: '120',
            animateDelay: '2',
            animateduration: '1'
        }]
    },
    titleBorderTop: {
        type: "number",
        default: "0"
    },
    titleBorderRight: {
        type: "number",
        default: "0"
    },
    titleBorderBottom: {
        type: "number",
        default: "3"
    },
    titleBorderLeft: {
        type: "number",
        default: 3
    },
    titleBorderUpdated: {
        type: "boolean",
        default: false
    },
    titleBorderWidth: {
        type: "number",
        default: "0"
    },
    stripeAlign: {
        type: "string",
        default: "center"
    },
    stripeStyles: {
        type: "array",
        default: [{
            stripeWidth: 120,
            stripeWidthTablet: 120,
            stripeWidthMobile: 120,
            stripeWidthType: "px",
            stripeHeight: 5,
            stripeHeightTablet: 5,
            stripeHeightMobile: 5,
            stripeHeightType: "px",
            stripeTopSpacing: 0,
            stripeTopSpacingTablet: 0,
            stripeTopSpacingMobile: 0,
            stripeTopSpacingType: "px",
            stripeBottomSpacing: 0,
            stripeBottomSpacingTablet: 0,
            stripeBottomSpacingMobile: 0,
            stripeBottomSpacingType: "px"
        }]
    },
    textStyles: {
        type: "array",
        default: [{
            textBackColor: "#6ec1e4",
            textBackfontSizeType: 'px',
            textBackLetter: 0,
            textBackLine: 0,
            textBackStyle: 'normal',
            textBackUpper: false,
            textBackWeight: 600,
            textBackfontSize: '',
            textBackfontSizeMobile: '',
            textBackfontSizeTablet: '',
            textBackFontFamily: __('Default', 'premium-blocks-for-gutenberg'),
            textBackshadowColor: '',
            textBackshadowBlur: '0',
            textBackshadowHorizontal: '0',
            textBackshadowVertical: '0',
            horizontalText: 0,
            horizontalTextTablet: 0,
            horizontalTextMobile: 0,
            horizontalTextType: "px",
            verticalText: 0,
            verticalTextTablet: 0,
            verticalTextMobile: 0,
            verticalTextType: "px",
            rotateText: 0,
            rotateTextTablet: 0,
            rotateTextMobile: 0
        }]
    },
    iconStyles: {
        type: "array",
        default: [{
            iconColor: "#6ec1e4",
            iconSize: "40",
            iconSizeTablet: "40",
            iconSizeMobile: "40",
            iconSizeType: "px",
            containerBack: '',
            backgroundImageID: '',
            backgroundImageURL: '',
            backgroundRepeat: 'no-reapet',
            backgroundPosition: 'top center',
            backgroundSize: 'auto',
            fixed: false,
            gradientLocationOne: '0',
            gradientColorTwo: '',
            gradientLocationTwo: '100',
            gradientType: 'linear',
            gradientAngle: '180',
            gradientPosition: 'center center',
            iconborderType: "none",
            iconborderRadius: 0,
            iconborderColor: '#6ec1e4',
            iconPaddingType: 'px',
            iconMarginType: 'px',
            iconshadowColor: '',
            iconshadowBlur: '0',
            iconshadowHorizontal: '0',
            iconshadowVertical: '0'
        }]
    },
    strokeStyles: {
        type: "array",
        default: [{
            stroke: false,
            strokeColor: "",
            strokeFull: 0,
            strokeFullTablet: 0,
            strokeFullMobile: 0
        }]
    },
    backgroundType: {
        type: "string",
        default: ""
    },
    iconBorderTop: {
        type: "number",
        default: "1"
    },
    iconBorderRight: {
        type: "number",
        default: "1"
    },
    iconBorderBottom: {
        type: "number",
        default: "1"
    },
    iconBorderLeft: {
        type: "number",
        default: "1"
    },
    iconBorderUpdated: {
        type: "boolean",
        default: false
    },
    iconBorderWidth: {
        type: "number",
        default: "1"
    },
    titleMarginT: {
        type: "number"
    },
    titleMarginR: {
        type: "number"
    },
    titleMarginB: {
        type: "number"
    },
    titleMarginL: {
        type: "number"
    },
    titleMarginTTablet: {
        type: "number"
    },
    titleMarginRTablet: {
        type: "number"
    },
    titleMarginBTablet: {
        type: "number"
    },
    titleMarginLTablet: {
        type: "number"
    },
    titleMarginTMobile: {
        type: "number"
    },
    titleMarginRMobile: {
        type: "number"
    },
    titleMarginBMobile: {
        type: "number"
    },
    titleMarginLMobile: {
        type: "number"
    },
    titlePaddingT: {
        type: "number",
        default: "0"
    },
    titlePaddingR: {
        type: "number",
        default: "0"
    },
    titlePaddingB: {
        type: "number",
        default: "0"
    },
    titlePaddingL: {
        type: "number",
        default: "0"
    },
    titlePaddingTTablet: {
        type: "number",
        default: "0"
    },
    titlePaddingRTablet: {
        type: "number",
        default: "0"
    },
    titlePaddingBTablet: {
        type: "number",
        default: "0"
    },
    titlePaddingLTablet: {
        type: "number",
        default: "0"
    },
    titlePaddingTMobile: {
        type: "number",
        default: "0"
    },
    titlePaddingRMobile: {
        type: "number",
        default: "0"
    },
    titlePaddingBMobile: {
        type: "number",
        default: "0"
    },
    titlePaddingLMobile: {
        type: "number",
        default: "0"
    },
    iconBGColor: {
        type: "string"
    },
    iconPaddingT: {
        type: "number",
        default: ""
    },
    iconPaddingR: {
        type: "number",
        default: ""
    },
    iconPaddingB: {
        type: "number",
        default: ""
    },
    iconPaddingL: {
        type: "number",
        default: ""
    },
    iconPaddingTTablet: {
        type: "number",
        default: ""
    },
    iconPaddingRTablet: {
        type: "number",
        default: ""
    },
    iconPaddingBTablet: {
        type: "number",
        default: ""
    },
    iconPaddingLTablet: {
        type: "number",
        default: ""
    },
    iconPaddingTMobile: {
        type: "number",
        default: ""
    },
    iconPaddingRMobile: {
        type: "number",
        default: ""
    },
    iconPaddingBMobile: {
        type: "number",
        default: ""
    },
    iconPaddingLMobile: {
        type: "number",
        default: ""
    },
    iconMarginT: {
        type: "number",
        default: ""
    },
    iconMarginR: {
        type: "number",
        default: ""
    },
    iconMarginB: {
        type: "number",
        default: ""
    },
    iconMarginL: {
        type: "number",
        default: ""
    },
    iconMarginTTablet: {
        type: "number",
        default: ""
    },
    iconMarginRTablet: {
        type: "number",
        default: ""
    },
    iconMarginBTablet: {
        type: "number",
        default: ""
    },
    iconMarginLTablet: {
        type: "number",
        default: ""
    },
    iconMarginTMobile: {
        type: "number",
        default: ""
    },
    iconMarginRMobile: {
        type: "number",
        default: ""
    },
    iconMarginBMobile: {
        type: "number",
        default: ""
    },
    iconMarginLMobile: {
        type: "number",
        default: ""
    },
    hideDesktop: {
        type: 'boolean',
        default: false
    },
    hideTablet: {
        type: 'boolean',
        default: false
    },
    hideMobile: {
        type: 'boolean',
        default: false
    },
    z_index: {
        type: "number"
    },
    blend: {
        type: 'string'
    },
    lottieURl: {
        type: 'string'
    },
    loop: {
        type: 'boolean',
        default: true
    },
    reversedir: {
        type: 'boolean',
        default: false
    },
    target: {
        type: 'boolean',
        default: false
    }
}, _defineProperty(_attributes, "blend", {
    type: "string"
}), _defineProperty(_attributes, "zIndex", {
    type: "number"
}), _defineProperty(_attributes, "titleTag", {
    type: "string",
    default: "h2"
}), _attributes);
exports.default = attributes;

/***/ })
/******/ ]);